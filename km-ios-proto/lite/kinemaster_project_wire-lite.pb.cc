// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kinemaster_project_wire-lite.proto

#include "kinemaster_project_wire-lite.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_kinemaster_5fproject_5fwire_2dlite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_KMProto_KMProject_AssetLayer_kinemaster_5fproject_5fwire_2dlite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kinemaster_5fproject_5fwire_2dlite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KMProto_KMProject_AudioClip_kinemaster_5fproject_5fwire_2dlite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kinemaster_5fproject_5fwire_2dlite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KMProto_KMProject_ClipRange_kinemaster_5fproject_5fwire_2dlite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kinemaster_5fproject_5fwire_2dlite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KMProto_KMProject_ColorAdjustment_kinemaster_5fproject_5fwire_2dlite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kinemaster_5fproject_5fwire_2dlite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KMProto_KMProject_ColorEffect_kinemaster_5fproject_5fwire_2dlite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kinemaster_5fproject_5fwire_2dlite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KMProto_KMProject_ColorFilter_kinemaster_5fproject_5fwire_2dlite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kinemaster_5fproject_5fwire_2dlite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KMProto_KMProject_DrawingAction_kinemaster_5fproject_5fwire_2dlite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kinemaster_5fproject_5fwire_2dlite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KMProto_KMProject_EffectLayer_kinemaster_5fproject_5fwire_2dlite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kinemaster_5fproject_5fwire_2dlite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KMProto_KMProject_EffectOptionItem_kinemaster_5fproject_5fwire_2dlite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kinemaster_5fproject_5fwire_2dlite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KMProto_KMProject_Fade_kinemaster_5fproject_5fwire_2dlite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kinemaster_5fproject_5fwire_2dlite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<17> scc_info_KMProto_KMProject_GroupLayer_kinemaster_5fproject_5fwire_2dlite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kinemaster_5fproject_5fwire_2dlite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_KMProto_KMProject_HandwritingLayer_kinemaster_5fproject_5fwire_2dlite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kinemaster_5fproject_5fwire_2dlite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_KMProto_KMProject_ImageLayer_kinemaster_5fproject_5fwire_2dlite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kinemaster_5fproject_5fwire_2dlite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KMProto_KMProject_KeyFrame_kinemaster_5fproject_5fwire_2dlite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kinemaster_5fproject_5fwire_2dlite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KMProto_KMProject_LayerCommon_kinemaster_5fproject_5fwire_2dlite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kinemaster_5fproject_5fwire_2dlite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KMProto_KMProject_Matrix_kinemaster_5fproject_5fwire_2dlite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kinemaster_5fproject_5fwire_2dlite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KMProto_KMProject_StickerLayer_kinemaster_5fproject_5fwire_2dlite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kinemaster_5fproject_5fwire_2dlite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KMProto_KMProject_StringHashMap_kinemaster_5fproject_5fwire_2dlite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kinemaster_5fproject_5fwire_2dlite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KMProto_KMProject_StringHashMapEntry_kinemaster_5fproject_5fwire_2dlite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kinemaster_5fproject_5fwire_2dlite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KMProto_KMProject_TextLayer_kinemaster_5fproject_5fwire_2dlite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kinemaster_5fproject_5fwire_2dlite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KMProto_KMProject_Track_kinemaster_5fproject_5fwire_2dlite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kinemaster_5fproject_5fwire_2dlite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_KMProto_KMProject_Transition_kinemaster_5fproject_5fwire_2dlite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kinemaster_5fproject_5fwire_2dlite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_KMProto_KMProject_VideoLayer_kinemaster_5fproject_5fwire_2dlite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kinemaster_5fproject_5fwire_2dlite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KMProto_KMProject_WritingPoint_kinemaster_5fproject_5fwire_2dlite_2eproto;
class KMProto_KMProject_FadeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KMProto_KMProject_Fade> _instance;
} _KMProto_KMProject_Fade_default_instance_;
class KMProto_KMProject_TrackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KMProto_KMProject_Track> _instance;
} _KMProto_KMProject_Track_default_instance_;
class KMProto_KMProject_TimelineItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KMProto_KMProject_TimelineItem> _instance;
} _KMProto_KMProject_TimelineItem_default_instance_;
class KMProto_KMProject_VisualClipDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KMProto_KMProject_VisualClip> _instance;
} _KMProto_KMProject_VisualClip_default_instance_;
class KMProto_KMProject_ClipRangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KMProto_KMProject_ClipRange> _instance;
} _KMProto_KMProject_ClipRange_default_instance_;
class KMProto_KMProject_EffectOptionItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KMProto_KMProject_EffectOptionItem> _instance;
} _KMProto_KMProject_EffectOptionItem_default_instance_;
class KMProto_KMProject_StringHashMapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KMProto_KMProject_StringHashMap> _instance;
} _KMProto_KMProject_StringHashMap_default_instance_;
class KMProto_KMProject_StringHashMapEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KMProto_KMProject_StringHashMapEntry> _instance;
} _KMProto_KMProject_StringHashMapEntry_default_instance_;
class KMProto_KMProject_MatrixDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KMProto_KMProject_Matrix> _instance;
} _KMProto_KMProject_Matrix_default_instance_;
class KMProto_KMProject_TransitionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KMProto_KMProject_Transition> _instance;
} _KMProto_KMProject_Transition_default_instance_;
class KMProto_KMProject_AudioClipDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KMProto_KMProject_AudioClip> _instance;
} _KMProto_KMProject_AudioClip_default_instance_;
class KMProto_KMProject_LayerCommonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KMProto_KMProject_LayerCommon> _instance;
} _KMProto_KMProject_LayerCommon_default_instance_;
class KMProto_KMProject_KeyFrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KMProto_KMProject_KeyFrame> _instance;
} _KMProto_KMProject_KeyFrame_default_instance_;
class KMProto_KMProject_TextLayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KMProto_KMProject_TextLayer> _instance;
} _KMProto_KMProject_TextLayer_default_instance_;
class KMProto_KMProject_HandwritingLayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KMProto_KMProject_HandwritingLayer> _instance;
} _KMProto_KMProject_HandwritingLayer_default_instance_;
class KMProto_KMProject_StickerLayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KMProto_KMProject_StickerLayer> _instance;
} _KMProto_KMProject_StickerLayer_default_instance_;
class KMProto_KMProject_AssetLayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KMProto_KMProject_AssetLayer> _instance;
} _KMProto_KMProject_AssetLayer_default_instance_;
class KMProto_KMProject_EffectLayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KMProto_KMProject_EffectLayer> _instance;
} _KMProto_KMProject_EffectLayer_default_instance_;
class KMProto_KMProject_ImageLayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KMProto_KMProject_ImageLayer> _instance;
} _KMProto_KMProject_ImageLayer_default_instance_;
class KMProto_KMProject_VideoLayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KMProto_KMProject_VideoLayer> _instance;
} _KMProto_KMProject_VideoLayer_default_instance_;
class KMProto_KMProject_ColorAdjustmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KMProto_KMProject_ColorAdjustment> _instance;
} _KMProto_KMProject_ColorAdjustment_default_instance_;
class KMProto_KMProject_WritingPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KMProto_KMProject_WritingPoint> _instance;
} _KMProto_KMProject_WritingPoint_default_instance_;
class KMProto_KMProject_GroupLayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KMProto_KMProject_GroupLayer> _instance;
} _KMProto_KMProject_GroupLayer_default_instance_;
class KMProto_KMProject_DrawingActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KMProto_KMProject_DrawingAction> _instance;
} _KMProto_KMProject_DrawingAction_default_instance_;
class KMProto_KMProject_ColorEffectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KMProto_KMProject_ColorEffect> _instance;
} _KMProto_KMProject_ColorEffect_default_instance_;
class KMProto_KMProject_ColorFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KMProto_KMProject_ColorFilter> _instance;
} _KMProto_KMProject_ColorFilter_default_instance_;
class KMProto_KMProjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KMProto_KMProject> _instance;
} _KMProto_KMProject_default_instance_;
class KMProto_KMProjectHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KMProto_KMProjectHeader> _instance;
} _KMProto_KMProjectHeader_default_instance_;
class KMProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KMProto> _instance;
} _KMProto_default_instance_;
static void InitDefaultsscc_info_KMProto_kinemaster_5fproject_5fwire_2dlite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_KMProto_default_instance_;
    new (ptr) ::KMProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KMProto_kinemaster_5fproject_5fwire_2dlite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KMProto_kinemaster_5fproject_5fwire_2dlite_2eproto}, {}};

static void InitDefaultsscc_info_KMProto_KMProject_kinemaster_5fproject_5fwire_2dlite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_KMProto_KMProject_default_instance_;
    new (ptr) ::KMProto_KMProject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_KMProto_KMProject_kinemaster_5fproject_5fwire_2dlite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_KMProto_KMProject_kinemaster_5fproject_5fwire_2dlite_2eproto}, {
      &scc_info_KMProto_KMProject_GroupLayer_kinemaster_5fproject_5fwire_2dlite_2eproto.base,
      &scc_info_KMProto_KMProject_Track_kinemaster_5fproject_5fwire_2dlite_2eproto.base,
      &scc_info_KMProto_KMProject_Fade_kinemaster_5fproject_5fwire_2dlite_2eproto.base,}};

static void InitDefaultsscc_info_KMProto_KMProject_AssetLayer_kinemaster_5fproject_5fwire_2dlite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_KMProto_KMProject_AssetLayer_default_instance_;
    new (ptr) ::KMProto_KMProject_AssetLayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_KMProto_KMProject_AssetLayer_kinemaster_5fproject_5fwire_2dlite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_KMProto_KMProject_AssetLayer_kinemaster_5fproject_5fwire_2dlite_2eproto}, {
      &scc_info_KMProto_KMProject_LayerCommon_kinemaster_5fproject_5fwire_2dlite_2eproto.base,
      &scc_info_KMProto_KMProject_StringHashMap_kinemaster_5fproject_5fwire_2dlite_2eproto.base,
      &scc_info_KMProto_KMProject_EffectOptionItem_kinemaster_5fproject_5fwire_2dlite_2eproto.base,}};

static void InitDefaultsscc_info_KMProto_KMProject_AudioClip_kinemaster_5fproject_5fwire_2dlite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_KMProto_KMProject_AudioClip_default_instance_;
    new (ptr) ::KMProto_KMProject_AudioClip();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KMProto_KMProject_AudioClip_kinemaster_5fproject_5fwire_2dlite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KMProto_KMProject_AudioClip_kinemaster_5fproject_5fwire_2dlite_2eproto}, {}};

static void InitDefaultsscc_info_KMProto_KMProject_ClipRange_kinemaster_5fproject_5fwire_2dlite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_KMProto_KMProject_ClipRange_default_instance_;
    new (ptr) ::KMProto_KMProject_ClipRange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KMProto_KMProject_ClipRange_kinemaster_5fproject_5fwire_2dlite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KMProto_KMProject_ClipRange_kinemaster_5fproject_5fwire_2dlite_2eproto}, {}};

static void InitDefaultsscc_info_KMProto_KMProject_ColorAdjustment_kinemaster_5fproject_5fwire_2dlite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_KMProto_KMProject_ColorAdjustment_default_instance_;
    new (ptr) ::KMProto_KMProject_ColorAdjustment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KMProto_KMProject_ColorAdjustment_kinemaster_5fproject_5fwire_2dlite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KMProto_KMProject_ColorAdjustment_kinemaster_5fproject_5fwire_2dlite_2eproto}, {}};

static void InitDefaultsscc_info_KMProto_KMProject_ColorEffect_kinemaster_5fproject_5fwire_2dlite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_KMProto_KMProject_ColorEffect_default_instance_;
    new (ptr) ::KMProto_KMProject_ColorEffect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KMProto_KMProject_ColorEffect_kinemaster_5fproject_5fwire_2dlite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KMProto_KMProject_ColorEffect_kinemaster_5fproject_5fwire_2dlite_2eproto}, {}};

static void InitDefaultsscc_info_KMProto_KMProject_ColorFilter_kinemaster_5fproject_5fwire_2dlite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_KMProto_KMProject_ColorFilter_default_instance_;
    new (ptr) ::KMProto_KMProject_ColorFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KMProto_KMProject_ColorFilter_kinemaster_5fproject_5fwire_2dlite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KMProto_KMProject_ColorFilter_kinemaster_5fproject_5fwire_2dlite_2eproto}, {}};

static void InitDefaultsscc_info_KMProto_KMProject_DrawingAction_kinemaster_5fproject_5fwire_2dlite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_KMProto_KMProject_DrawingAction_default_instance_;
    new (ptr) ::KMProto_KMProject_DrawingAction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KMProto_KMProject_DrawingAction_kinemaster_5fproject_5fwire_2dlite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KMProto_KMProject_DrawingAction_kinemaster_5fproject_5fwire_2dlite_2eproto}, {}};

static void InitDefaultsscc_info_KMProto_KMProject_EffectLayer_kinemaster_5fproject_5fwire_2dlite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_KMProto_KMProject_EffectLayer_default_instance_;
    new (ptr) ::KMProto_KMProject_EffectLayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KMProto_KMProject_EffectLayer_kinemaster_5fproject_5fwire_2dlite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_KMProto_KMProject_EffectLayer_kinemaster_5fproject_5fwire_2dlite_2eproto}, {
      &scc_info_KMProto_KMProject_LayerCommon_kinemaster_5fproject_5fwire_2dlite_2eproto.base,}};

static void InitDefaultsscc_info_KMProto_KMProject_EffectOptionItem_kinemaster_5fproject_5fwire_2dlite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_KMProto_KMProject_EffectOptionItem_default_instance_;
    new (ptr) ::KMProto_KMProject_EffectOptionItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KMProto_KMProject_EffectOptionItem_kinemaster_5fproject_5fwire_2dlite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KMProto_KMProject_EffectOptionItem_kinemaster_5fproject_5fwire_2dlite_2eproto}, {}};

static void InitDefaultsscc_info_KMProto_KMProject_Fade_kinemaster_5fproject_5fwire_2dlite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_KMProto_KMProject_Fade_default_instance_;
    new (ptr) ::KMProto_KMProject_Fade();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KMProto_KMProject_Fade_kinemaster_5fproject_5fwire_2dlite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KMProto_KMProject_Fade_kinemaster_5fproject_5fwire_2dlite_2eproto}, {}};

static void InitDefaultsscc_info_KMProto_KMProject_GroupLayer_kinemaster_5fproject_5fwire_2dlite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_KMProto_KMProject_TimelineItem_default_instance_;
    new (ptr) ::KMProto_KMProject_TimelineItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::_KMProto_KMProject_VisualClip_default_instance_;
    new (ptr) ::KMProto_KMProject_VisualClip();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::_KMProto_KMProject_GroupLayer_default_instance_;
    new (ptr) ::KMProto_KMProject_GroupLayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<17> scc_info_KMProto_KMProject_GroupLayer_kinemaster_5fproject_5fwire_2dlite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 17, 0, InitDefaultsscc_info_KMProto_KMProject_GroupLayer_kinemaster_5fproject_5fwire_2dlite_2eproto}, {
      &scc_info_KMProto_KMProject_LayerCommon_kinemaster_5fproject_5fwire_2dlite_2eproto.base,
      &scc_info_KMProto_KMProject_Transition_kinemaster_5fproject_5fwire_2dlite_2eproto.base,
      &scc_info_KMProto_KMProject_AudioClip_kinemaster_5fproject_5fwire_2dlite_2eproto.base,
      &scc_info_KMProto_KMProject_TextLayer_kinemaster_5fproject_5fwire_2dlite_2eproto.base,
      &scc_info_KMProto_KMProject_StickerLayer_kinemaster_5fproject_5fwire_2dlite_2eproto.base,
      &scc_info_KMProto_KMProject_ImageLayer_kinemaster_5fproject_5fwire_2dlite_2eproto.base,
      &scc_info_KMProto_KMProject_HandwritingLayer_kinemaster_5fproject_5fwire_2dlite_2eproto.base,
      &scc_info_KMProto_KMProject_VideoLayer_kinemaster_5fproject_5fwire_2dlite_2eproto.base,
      &scc_info_KMProto_KMProject_EffectLayer_kinemaster_5fproject_5fwire_2dlite_2eproto.base,
      &scc_info_KMProto_KMProject_AssetLayer_kinemaster_5fproject_5fwire_2dlite_2eproto.base,
      &scc_info_KMProto_KMProject_Matrix_kinemaster_5fproject_5fwire_2dlite_2eproto.base,
      &scc_info_KMProto_KMProject_ColorEffect_kinemaster_5fproject_5fwire_2dlite_2eproto.base,
      &scc_info_KMProto_KMProject_StringHashMap_kinemaster_5fproject_5fwire_2dlite_2eproto.base,
      &scc_info_KMProto_KMProject_ClipRange_kinemaster_5fproject_5fwire_2dlite_2eproto.base,
      &scc_info_KMProto_KMProject_ColorAdjustment_kinemaster_5fproject_5fwire_2dlite_2eproto.base,
      &scc_info_KMProto_KMProject_ColorFilter_kinemaster_5fproject_5fwire_2dlite_2eproto.base,
      &scc_info_KMProto_KMProject_EffectOptionItem_kinemaster_5fproject_5fwire_2dlite_2eproto.base,}};

static void InitDefaultsscc_info_KMProto_KMProject_HandwritingLayer_kinemaster_5fproject_5fwire_2dlite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_KMProto_KMProject_HandwritingLayer_default_instance_;
    new (ptr) ::KMProto_KMProject_HandwritingLayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_KMProto_KMProject_HandwritingLayer_kinemaster_5fproject_5fwire_2dlite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_KMProto_KMProject_HandwritingLayer_kinemaster_5fproject_5fwire_2dlite_2eproto}, {
      &scc_info_KMProto_KMProject_LayerCommon_kinemaster_5fproject_5fwire_2dlite_2eproto.base,
      &scc_info_KMProto_KMProject_WritingPoint_kinemaster_5fproject_5fwire_2dlite_2eproto.base,
      &scc_info_KMProto_KMProject_DrawingAction_kinemaster_5fproject_5fwire_2dlite_2eproto.base,}};

static void InitDefaultsscc_info_KMProto_KMProject_ImageLayer_kinemaster_5fproject_5fwire_2dlite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_KMProto_KMProject_ImageLayer_default_instance_;
    new (ptr) ::KMProto_KMProject_ImageLayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_KMProto_KMProject_ImageLayer_kinemaster_5fproject_5fwire_2dlite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_KMProto_KMProject_ImageLayer_kinemaster_5fproject_5fwire_2dlite_2eproto}, {
      &scc_info_KMProto_KMProject_LayerCommon_kinemaster_5fproject_5fwire_2dlite_2eproto.base,
      &scc_info_KMProto_KMProject_ColorEffect_kinemaster_5fproject_5fwire_2dlite_2eproto.base,
      &scc_info_KMProto_KMProject_DrawingAction_kinemaster_5fproject_5fwire_2dlite_2eproto.base,
      &scc_info_KMProto_KMProject_ColorAdjustment_kinemaster_5fproject_5fwire_2dlite_2eproto.base,
      &scc_info_KMProto_KMProject_ColorFilter_kinemaster_5fproject_5fwire_2dlite_2eproto.base,}};

static void InitDefaultsscc_info_KMProto_KMProject_KeyFrame_kinemaster_5fproject_5fwire_2dlite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_KMProto_KMProject_KeyFrame_default_instance_;
    new (ptr) ::KMProto_KMProject_KeyFrame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KMProto_KMProject_KeyFrame_kinemaster_5fproject_5fwire_2dlite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KMProto_KMProject_KeyFrame_kinemaster_5fproject_5fwire_2dlite_2eproto}, {}};

static void InitDefaultsscc_info_KMProto_KMProject_LayerCommon_kinemaster_5fproject_5fwire_2dlite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_KMProto_KMProject_LayerCommon_default_instance_;
    new (ptr) ::KMProto_KMProject_LayerCommon();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KMProto_KMProject_LayerCommon_kinemaster_5fproject_5fwire_2dlite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_KMProto_KMProject_LayerCommon_kinemaster_5fproject_5fwire_2dlite_2eproto}, {
      &scc_info_KMProto_KMProject_KeyFrame_kinemaster_5fproject_5fwire_2dlite_2eproto.base,}};

static void InitDefaultsscc_info_KMProto_KMProject_Matrix_kinemaster_5fproject_5fwire_2dlite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_KMProto_KMProject_Matrix_default_instance_;
    new (ptr) ::KMProto_KMProject_Matrix();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KMProto_KMProject_Matrix_kinemaster_5fproject_5fwire_2dlite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KMProto_KMProject_Matrix_kinemaster_5fproject_5fwire_2dlite_2eproto}, {}};

static void InitDefaultsscc_info_KMProto_KMProject_StickerLayer_kinemaster_5fproject_5fwire_2dlite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_KMProto_KMProject_StickerLayer_default_instance_;
    new (ptr) ::KMProto_KMProject_StickerLayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KMProto_KMProject_StickerLayer_kinemaster_5fproject_5fwire_2dlite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_KMProto_KMProject_StickerLayer_kinemaster_5fproject_5fwire_2dlite_2eproto}, {
      &scc_info_KMProto_KMProject_LayerCommon_kinemaster_5fproject_5fwire_2dlite_2eproto.base,}};

static void InitDefaultsscc_info_KMProto_KMProject_StringHashMap_kinemaster_5fproject_5fwire_2dlite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_KMProto_KMProject_StringHashMap_default_instance_;
    new (ptr) ::KMProto_KMProject_StringHashMap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KMProto_KMProject_StringHashMap_kinemaster_5fproject_5fwire_2dlite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_KMProto_KMProject_StringHashMap_kinemaster_5fproject_5fwire_2dlite_2eproto}, {
      &scc_info_KMProto_KMProject_StringHashMapEntry_kinemaster_5fproject_5fwire_2dlite_2eproto.base,}};

static void InitDefaultsscc_info_KMProto_KMProject_StringHashMapEntry_kinemaster_5fproject_5fwire_2dlite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_KMProto_KMProject_StringHashMapEntry_default_instance_;
    new (ptr) ::KMProto_KMProject_StringHashMapEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KMProto_KMProject_StringHashMapEntry_kinemaster_5fproject_5fwire_2dlite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KMProto_KMProject_StringHashMapEntry_kinemaster_5fproject_5fwire_2dlite_2eproto}, {}};

static void InitDefaultsscc_info_KMProto_KMProject_TextLayer_kinemaster_5fproject_5fwire_2dlite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_KMProto_KMProject_TextLayer_default_instance_;
    new (ptr) ::KMProto_KMProject_TextLayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KMProto_KMProject_TextLayer_kinemaster_5fproject_5fwire_2dlite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_KMProto_KMProject_TextLayer_kinemaster_5fproject_5fwire_2dlite_2eproto}, {
      &scc_info_KMProto_KMProject_LayerCommon_kinemaster_5fproject_5fwire_2dlite_2eproto.base,}};

static void InitDefaultsscc_info_KMProto_KMProject_Track_kinemaster_5fproject_5fwire_2dlite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_KMProto_KMProject_Track_default_instance_;
    new (ptr) ::KMProto_KMProject_Track();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KMProto_KMProject_Track_kinemaster_5fproject_5fwire_2dlite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KMProto_KMProject_Track_kinemaster_5fproject_5fwire_2dlite_2eproto}, {}};

static void InitDefaultsscc_info_KMProto_KMProject_Transition_kinemaster_5fproject_5fwire_2dlite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_KMProto_KMProject_Transition_default_instance_;
    new (ptr) ::KMProto_KMProject_Transition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_KMProto_KMProject_Transition_kinemaster_5fproject_5fwire_2dlite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_KMProto_KMProject_Transition_kinemaster_5fproject_5fwire_2dlite_2eproto}, {
      &scc_info_KMProto_KMProject_StringHashMap_kinemaster_5fproject_5fwire_2dlite_2eproto.base,
      &scc_info_KMProto_KMProject_EffectOptionItem_kinemaster_5fproject_5fwire_2dlite_2eproto.base,}};

static void InitDefaultsscc_info_KMProto_KMProject_VideoLayer_kinemaster_5fproject_5fwire_2dlite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_KMProto_KMProject_VideoLayer_default_instance_;
    new (ptr) ::KMProto_KMProject_VideoLayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_KMProto_KMProject_VideoLayer_kinemaster_5fproject_5fwire_2dlite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_KMProto_KMProject_VideoLayer_kinemaster_5fproject_5fwire_2dlite_2eproto}, {
      &scc_info_KMProto_KMProject_LayerCommon_kinemaster_5fproject_5fwire_2dlite_2eproto.base,
      &scc_info_KMProto_KMProject_ColorEffect_kinemaster_5fproject_5fwire_2dlite_2eproto.base,
      &scc_info_KMProto_KMProject_ClipRange_kinemaster_5fproject_5fwire_2dlite_2eproto.base,
      &scc_info_KMProto_KMProject_ColorAdjustment_kinemaster_5fproject_5fwire_2dlite_2eproto.base,
      &scc_info_KMProto_KMProject_ColorFilter_kinemaster_5fproject_5fwire_2dlite_2eproto.base,}};

static void InitDefaultsscc_info_KMProto_KMProject_WritingPoint_kinemaster_5fproject_5fwire_2dlite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_KMProto_KMProject_WritingPoint_default_instance_;
    new (ptr) ::KMProto_KMProject_WritingPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KMProto_KMProject_WritingPoint_kinemaster_5fproject_5fwire_2dlite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KMProto_KMProject_WritingPoint_kinemaster_5fproject_5fwire_2dlite_2eproto}, {}};

static void InitDefaultsscc_info_KMProto_KMProjectHeader_kinemaster_5fproject_5fwire_2dlite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_KMProto_KMProjectHeader_default_instance_;
    new (ptr) ::KMProto_KMProjectHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KMProto_KMProjectHeader_kinemaster_5fproject_5fwire_2dlite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KMProto_KMProjectHeader_kinemaster_5fproject_5fwire_2dlite_2eproto}, {}};

bool KMProto_KMProject_AssetLayer_AssetLayerType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> KMProto_KMProject_AssetLayer_AssetLayerType_strings[2] = {};

static const char KMProto_KMProject_AssetLayer_AssetLayerType_names[] =
  "EFFECT_LAYER"
  "OVERLAY_LAYER";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry KMProto_KMProject_AssetLayer_AssetLayerType_entries[] = {
  { {KMProto_KMProject_AssetLayer_AssetLayerType_names + 0, 12}, 1 },
  { {KMProto_KMProject_AssetLayer_AssetLayerType_names + 12, 13}, 2 },
};

static const int KMProto_KMProject_AssetLayer_AssetLayerType_entries_by_number[] = {
  0, // 1 -> EFFECT_LAYER
  1, // 2 -> OVERLAY_LAYER
};

const std::string& KMProto_KMProject_AssetLayer_AssetLayerType_Name(
    KMProto_KMProject_AssetLayer_AssetLayerType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          KMProto_KMProject_AssetLayer_AssetLayerType_entries,
          KMProto_KMProject_AssetLayer_AssetLayerType_entries_by_number,
          2, KMProto_KMProject_AssetLayer_AssetLayerType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      KMProto_KMProject_AssetLayer_AssetLayerType_entries,
      KMProto_KMProject_AssetLayer_AssetLayerType_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     KMProto_KMProject_AssetLayer_AssetLayerType_strings[idx].get();
}
bool KMProto_KMProject_AssetLayer_AssetLayerType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KMProto_KMProject_AssetLayer_AssetLayerType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      KMProto_KMProject_AssetLayer_AssetLayerType_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<KMProto_KMProject_AssetLayer_AssetLayerType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr KMProto_KMProject_AssetLayer_AssetLayerType KMProto_KMProject_AssetLayer::EFFECT_LAYER;
constexpr KMProto_KMProject_AssetLayer_AssetLayerType KMProto_KMProject_AssetLayer::OVERLAY_LAYER;
constexpr KMProto_KMProject_AssetLayer_AssetLayerType KMProto_KMProject_AssetLayer::AssetLayerType_MIN;
constexpr KMProto_KMProject_AssetLayer_AssetLayerType KMProto_KMProject_AssetLayer::AssetLayerType_MAX;
constexpr int KMProto_KMProject_AssetLayer::AssetLayerType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool KMProto_KMProject_AspectRatio_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> KMProto_KMProject_AspectRatio_strings[3] = {};

static const char KMProto_KMProject_AspectRatio_names[] =
  "ASPECT_R_16_9"
  "ASPECT_R_9_16"
  "ASPECT_SQUARE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry KMProto_KMProject_AspectRatio_entries[] = {
  { {KMProto_KMProject_AspectRatio_names + 0, 13}, 1 },
  { {KMProto_KMProject_AspectRatio_names + 13, 13}, 3 },
  { {KMProto_KMProject_AspectRatio_names + 26, 13}, 2 },
};

static const int KMProto_KMProject_AspectRatio_entries_by_number[] = {
  0, // 1 -> ASPECT_R_16_9
  2, // 2 -> ASPECT_SQUARE
  1, // 3 -> ASPECT_R_9_16
};

const std::string& KMProto_KMProject_AspectRatio_Name(
    KMProto_KMProject_AspectRatio value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          KMProto_KMProject_AspectRatio_entries,
          KMProto_KMProject_AspectRatio_entries_by_number,
          3, KMProto_KMProject_AspectRatio_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      KMProto_KMProject_AspectRatio_entries,
      KMProto_KMProject_AspectRatio_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     KMProto_KMProject_AspectRatio_strings[idx].get();
}
bool KMProto_KMProject_AspectRatio_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KMProto_KMProject_AspectRatio* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      KMProto_KMProject_AspectRatio_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<KMProto_KMProject_AspectRatio>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr KMProto_KMProject_AspectRatio KMProto_KMProject::ASPECT_R_16_9;
constexpr KMProto_KMProject_AspectRatio KMProto_KMProject::ASPECT_SQUARE;
constexpr KMProto_KMProject_AspectRatio KMProto_KMProject::ASPECT_R_9_16;
constexpr KMProto_KMProject_AspectRatio KMProto_KMProject::AspectRatio_MIN;
constexpr KMProto_KMProject_AspectRatio KMProto_KMProject::AspectRatio_MAX;
constexpr int KMProto_KMProject::AspectRatio_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool KMProto_KMProject_ClipType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> KMProto_KMProject_ClipType_strings[11] = {};

static const char KMProto_KMProject_ClipType_names[] =
  "AUDIO_CLIP"
  "LAYER_ASSET"
  "LAYER_EFFECT"
  "LAYER_GROUP"
  "LAYER_HANDWRITING"
  "LAYER_IMAGE"
  "LAYER_STICKER"
  "LAYER_TEXT"
  "LAYER_VIDEO"
  "TRANSITION"
  "VISUAL_CLIP";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry KMProto_KMProject_ClipType_entries[] = {
  { {KMProto_KMProject_ClipType_names + 0, 10}, 3 },
  { {KMProto_KMProject_ClipType_names + 10, 11}, 10 },
  { {KMProto_KMProject_ClipType_names + 21, 12}, 9 },
  { {KMProto_KMProject_ClipType_names + 33, 11}, 11 },
  { {KMProto_KMProject_ClipType_names + 44, 17}, 6 },
  { {KMProto_KMProject_ClipType_names + 61, 11}, 7 },
  { {KMProto_KMProject_ClipType_names + 72, 13}, 5 },
  { {KMProto_KMProject_ClipType_names + 85, 10}, 4 },
  { {KMProto_KMProject_ClipType_names + 95, 11}, 8 },
  { {KMProto_KMProject_ClipType_names + 106, 10}, 2 },
  { {KMProto_KMProject_ClipType_names + 116, 11}, 1 },
};

static const int KMProto_KMProject_ClipType_entries_by_number[] = {
  10, // 1 -> VISUAL_CLIP
  9, // 2 -> TRANSITION
  0, // 3 -> AUDIO_CLIP
  7, // 4 -> LAYER_TEXT
  6, // 5 -> LAYER_STICKER
  4, // 6 -> LAYER_HANDWRITING
  5, // 7 -> LAYER_IMAGE
  8, // 8 -> LAYER_VIDEO
  2, // 9 -> LAYER_EFFECT
  1, // 10 -> LAYER_ASSET
  3, // 11 -> LAYER_GROUP
};

const std::string& KMProto_KMProject_ClipType_Name(
    KMProto_KMProject_ClipType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          KMProto_KMProject_ClipType_entries,
          KMProto_KMProject_ClipType_entries_by_number,
          11, KMProto_KMProject_ClipType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      KMProto_KMProject_ClipType_entries,
      KMProto_KMProject_ClipType_entries_by_number,
      11, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     KMProto_KMProject_ClipType_strings[idx].get();
}
bool KMProto_KMProject_ClipType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KMProto_KMProject_ClipType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      KMProto_KMProject_ClipType_entries, 11, name, &int_value);
  if (success) {
    *value = static_cast<KMProto_KMProject_ClipType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr KMProto_KMProject_ClipType KMProto_KMProject::VISUAL_CLIP;
constexpr KMProto_KMProject_ClipType KMProto_KMProject::TRANSITION;
constexpr KMProto_KMProject_ClipType KMProto_KMProject::AUDIO_CLIP;
constexpr KMProto_KMProject_ClipType KMProto_KMProject::LAYER_TEXT;
constexpr KMProto_KMProject_ClipType KMProto_KMProject::LAYER_STICKER;
constexpr KMProto_KMProject_ClipType KMProto_KMProject::LAYER_HANDWRITING;
constexpr KMProto_KMProject_ClipType KMProto_KMProject::LAYER_IMAGE;
constexpr KMProto_KMProject_ClipType KMProto_KMProject::LAYER_VIDEO;
constexpr KMProto_KMProject_ClipType KMProto_KMProject::LAYER_EFFECT;
constexpr KMProto_KMProject_ClipType KMProto_KMProject::LAYER_ASSET;
constexpr KMProto_KMProject_ClipType KMProto_KMProject::LAYER_GROUP;
constexpr KMProto_KMProject_ClipType KMProto_KMProject::ClipType_MIN;
constexpr KMProto_KMProject_ClipType KMProto_KMProject::ClipType_MAX;
constexpr int KMProto_KMProject::ClipType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool KMProto_KMProject_ClipState_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> KMProto_KMProject_ClipState_strings[4] = {};

static const char KMProto_KMProject_ClipState_names[] =
  "BUSY"
  "PERMANENT_FAILURE"
  "READY_TO_PLAY"
  "TEMPORARY_FAILURE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry KMProto_KMProject_ClipState_entries[] = {
  { {KMProto_KMProject_ClipState_names + 0, 4}, 1 },
  { {KMProto_KMProject_ClipState_names + 4, 17}, 3 },
  { {KMProto_KMProject_ClipState_names + 21, 13}, 4 },
  { {KMProto_KMProject_ClipState_names + 34, 17}, 2 },
};

static const int KMProto_KMProject_ClipState_entries_by_number[] = {
  0, // 1 -> BUSY
  3, // 2 -> TEMPORARY_FAILURE
  1, // 3 -> PERMANENT_FAILURE
  2, // 4 -> READY_TO_PLAY
};

const std::string& KMProto_KMProject_ClipState_Name(
    KMProto_KMProject_ClipState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          KMProto_KMProject_ClipState_entries,
          KMProto_KMProject_ClipState_entries_by_number,
          4, KMProto_KMProject_ClipState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      KMProto_KMProject_ClipState_entries,
      KMProto_KMProject_ClipState_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     KMProto_KMProject_ClipState_strings[idx].get();
}
bool KMProto_KMProject_ClipState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KMProto_KMProject_ClipState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      KMProto_KMProject_ClipState_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<KMProto_KMProject_ClipState>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr KMProto_KMProject_ClipState KMProto_KMProject::BUSY;
constexpr KMProto_KMProject_ClipState KMProto_KMProject::TEMPORARY_FAILURE;
constexpr KMProto_KMProject_ClipState KMProto_KMProject::PERMANENT_FAILURE;
constexpr KMProto_KMProject_ClipState KMProto_KMProject::READY_TO_PLAY;
constexpr KMProto_KMProject_ClipState KMProto_KMProject::ClipState_MIN;
constexpr KMProto_KMProject_ClipState KMProto_KMProject::ClipState_MAX;
constexpr int KMProto_KMProject::ClipState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool KMProto_KMProject_EffectOptionItemType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> KMProto_KMProject_EffectOptionItemType_strings[10] = {};

static const char KMProto_KMProject_EffectOptionItemType_names[] =
  "EFFECT_OPTION_CHOICE"
  "EFFECT_OPTION_IMAGE"
  "EFFECT_OPTION_RANGE"
  "EFFECT_OPTION_RECT"
  "EFFECT_OPTION_RGB"
  "EFFECT_OPTION_RGBA"
  "EFFECT_OPTION_SWITCH"
  "EFFECT_OPTION_TEXT"
  "EFFECT_OPTION_XY"
  "EFFECT_OPTION_XYZ";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry KMProto_KMProject_EffectOptionItemType_entries[] = {
  { {KMProto_KMProject_EffectOptionItemType_names + 0, 20}, 7 },
  { {KMProto_KMProject_EffectOptionItemType_names + 20, 19}, 8 },
  { {KMProto_KMProject_EffectOptionItemType_names + 39, 19}, 6 },
  { {KMProto_KMProject_EffectOptionItemType_names + 58, 18}, 5 },
  { {KMProto_KMProject_EffectOptionItemType_names + 76, 17}, 1 },
  { {KMProto_KMProject_EffectOptionItemType_names + 93, 18}, 2 },
  { {KMProto_KMProject_EffectOptionItemType_names + 111, 20}, 9 },
  { {KMProto_KMProject_EffectOptionItemType_names + 131, 18}, 0 },
  { {KMProto_KMProject_EffectOptionItemType_names + 149, 16}, 3 },
  { {KMProto_KMProject_EffectOptionItemType_names + 165, 17}, 4 },
};

static const int KMProto_KMProject_EffectOptionItemType_entries_by_number[] = {
  7, // 0 -> EFFECT_OPTION_TEXT
  4, // 1 -> EFFECT_OPTION_RGB
  5, // 2 -> EFFECT_OPTION_RGBA
  8, // 3 -> EFFECT_OPTION_XY
  9, // 4 -> EFFECT_OPTION_XYZ
  3, // 5 -> EFFECT_OPTION_RECT
  2, // 6 -> EFFECT_OPTION_RANGE
  0, // 7 -> EFFECT_OPTION_CHOICE
  1, // 8 -> EFFECT_OPTION_IMAGE
  6, // 9 -> EFFECT_OPTION_SWITCH
};

const std::string& KMProto_KMProject_EffectOptionItemType_Name(
    KMProto_KMProject_EffectOptionItemType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          KMProto_KMProject_EffectOptionItemType_entries,
          KMProto_KMProject_EffectOptionItemType_entries_by_number,
          10, KMProto_KMProject_EffectOptionItemType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      KMProto_KMProject_EffectOptionItemType_entries,
      KMProto_KMProject_EffectOptionItemType_entries_by_number,
      10, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     KMProto_KMProject_EffectOptionItemType_strings[idx].get();
}
bool KMProto_KMProject_EffectOptionItemType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KMProto_KMProject_EffectOptionItemType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      KMProto_KMProject_EffectOptionItemType_entries, 10, name, &int_value);
  if (success) {
    *value = static_cast<KMProto_KMProject_EffectOptionItemType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr KMProto_KMProject_EffectOptionItemType KMProto_KMProject::EFFECT_OPTION_TEXT;
constexpr KMProto_KMProject_EffectOptionItemType KMProto_KMProject::EFFECT_OPTION_RGB;
constexpr KMProto_KMProject_EffectOptionItemType KMProto_KMProject::EFFECT_OPTION_RGBA;
constexpr KMProto_KMProject_EffectOptionItemType KMProto_KMProject::EFFECT_OPTION_XY;
constexpr KMProto_KMProject_EffectOptionItemType KMProto_KMProject::EFFECT_OPTION_XYZ;
constexpr KMProto_KMProject_EffectOptionItemType KMProto_KMProject::EFFECT_OPTION_RECT;
constexpr KMProto_KMProject_EffectOptionItemType KMProto_KMProject::EFFECT_OPTION_RANGE;
constexpr KMProto_KMProject_EffectOptionItemType KMProto_KMProject::EFFECT_OPTION_CHOICE;
constexpr KMProto_KMProject_EffectOptionItemType KMProto_KMProject::EFFECT_OPTION_IMAGE;
constexpr KMProto_KMProject_EffectOptionItemType KMProto_KMProject::EFFECT_OPTION_SWITCH;
constexpr KMProto_KMProject_EffectOptionItemType KMProto_KMProject::EffectOptionItemType_MIN;
constexpr KMProto_KMProject_EffectOptionItemType KMProto_KMProject::EffectOptionItemType_MAX;
constexpr int KMProto_KMProject::EffectOptionItemType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool KMProto_KMProject_SplitScreenType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> KMProto_KMProject_SplitScreenType_strings[6] = {};

static const char KMProto_KMProject_SplitScreenType_names[] =
  "BOTTOM"
  "FULL"
  "LEFT"
  "OFF"
  "RIGHT"
  "TOP";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry KMProto_KMProject_SplitScreenType_entries[] = {
  { {KMProto_KMProject_SplitScreenType_names + 0, 6}, 2 },
  { {KMProto_KMProject_SplitScreenType_names + 6, 4}, 1 },
  { {KMProto_KMProject_SplitScreenType_names + 10, 4}, 4 },
  { {KMProto_KMProject_SplitScreenType_names + 14, 3}, 0 },
  { {KMProto_KMProject_SplitScreenType_names + 17, 5}, 5 },
  { {KMProto_KMProject_SplitScreenType_names + 22, 3}, 3 },
};

static const int KMProto_KMProject_SplitScreenType_entries_by_number[] = {
  3, // 0 -> OFF
  1, // 1 -> FULL
  0, // 2 -> BOTTOM
  5, // 3 -> TOP
  2, // 4 -> LEFT
  4, // 5 -> RIGHT
};

const std::string& KMProto_KMProject_SplitScreenType_Name(
    KMProto_KMProject_SplitScreenType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          KMProto_KMProject_SplitScreenType_entries,
          KMProto_KMProject_SplitScreenType_entries_by_number,
          6, KMProto_KMProject_SplitScreenType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      KMProto_KMProject_SplitScreenType_entries,
      KMProto_KMProject_SplitScreenType_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     KMProto_KMProject_SplitScreenType_strings[idx].get();
}
bool KMProto_KMProject_SplitScreenType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KMProto_KMProject_SplitScreenType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      KMProto_KMProject_SplitScreenType_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<KMProto_KMProject_SplitScreenType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr KMProto_KMProject_SplitScreenType KMProto_KMProject::OFF;
constexpr KMProto_KMProject_SplitScreenType KMProto_KMProject::FULL;
constexpr KMProto_KMProject_SplitScreenType KMProto_KMProject::BOTTOM;
constexpr KMProto_KMProject_SplitScreenType KMProto_KMProject::TOP;
constexpr KMProto_KMProject_SplitScreenType KMProto_KMProject::LEFT;
constexpr KMProto_KMProject_SplitScreenType KMProto_KMProject::RIGHT;
constexpr KMProto_KMProject_SplitScreenType KMProto_KMProject::SplitScreenType_MIN;
constexpr KMProto_KMProject_SplitScreenType KMProto_KMProject::SplitScreenType_MAX;
constexpr int KMProto_KMProject::SplitScreenType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool KMProto_KMProject_PathStyle_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> KMProto_KMProject_PathStyle_strings[9] = {};

static const char KMProto_KMProject_PathStyle_names[] =
  "ELLIPSE"
  "FILL_ELLIPSE"
  "FILL_RECT"
  "FILL_ROUND_RECT"
  "RECT"
  "ROUND_RECT"
  "SHARP"
  "SMOOTH"
  "XSHAPE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry KMProto_KMProject_PathStyle_entries[] = {
  { {KMProto_KMProject_PathStyle_names + 0, 7}, 5 },
  { {KMProto_KMProject_PathStyle_names + 7, 12}, 9 },
  { {KMProto_KMProject_PathStyle_names + 19, 9}, 7 },
  { {KMProto_KMProject_PathStyle_names + 28, 15}, 8 },
  { {KMProto_KMProject_PathStyle_names + 43, 4}, 3 },
  { {KMProto_KMProject_PathStyle_names + 47, 10}, 4 },
  { {KMProto_KMProject_PathStyle_names + 57, 5}, 2 },
  { {KMProto_KMProject_PathStyle_names + 62, 6}, 1 },
  { {KMProto_KMProject_PathStyle_names + 68, 6}, 6 },
};

static const int KMProto_KMProject_PathStyle_entries_by_number[] = {
  7, // 1 -> SMOOTH
  6, // 2 -> SHARP
  4, // 3 -> RECT
  5, // 4 -> ROUND_RECT
  0, // 5 -> ELLIPSE
  8, // 6 -> XSHAPE
  2, // 7 -> FILL_RECT
  3, // 8 -> FILL_ROUND_RECT
  1, // 9 -> FILL_ELLIPSE
};

const std::string& KMProto_KMProject_PathStyle_Name(
    KMProto_KMProject_PathStyle value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          KMProto_KMProject_PathStyle_entries,
          KMProto_KMProject_PathStyle_entries_by_number,
          9, KMProto_KMProject_PathStyle_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      KMProto_KMProject_PathStyle_entries,
      KMProto_KMProject_PathStyle_entries_by_number,
      9, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     KMProto_KMProject_PathStyle_strings[idx].get();
}
bool KMProto_KMProject_PathStyle_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KMProto_KMProject_PathStyle* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      KMProto_KMProject_PathStyle_entries, 9, name, &int_value);
  if (success) {
    *value = static_cast<KMProto_KMProject_PathStyle>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr KMProto_KMProject_PathStyle KMProto_KMProject::SMOOTH;
constexpr KMProto_KMProject_PathStyle KMProto_KMProject::SHARP;
constexpr KMProto_KMProject_PathStyle KMProto_KMProject::RECT;
constexpr KMProto_KMProject_PathStyle KMProto_KMProject::ROUND_RECT;
constexpr KMProto_KMProject_PathStyle KMProto_KMProject::ELLIPSE;
constexpr KMProto_KMProject_PathStyle KMProto_KMProject::XSHAPE;
constexpr KMProto_KMProject_PathStyle KMProto_KMProject::FILL_RECT;
constexpr KMProto_KMProject_PathStyle KMProto_KMProject::FILL_ROUND_RECT;
constexpr KMProto_KMProject_PathStyle KMProto_KMProject::FILL_ELLIPSE;
constexpr KMProto_KMProject_PathStyle KMProto_KMProject::PathStyle_MIN;
constexpr KMProto_KMProject_PathStyle KMProto_KMProject::PathStyle_MAX;
constexpr int KMProto_KMProject::PathStyle_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool KMProto_KMProject_CapDecorationStyle_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> KMProto_KMProject_CapDecorationStyle_strings[4] = {};

static const char KMProto_KMProject_CapDecorationStyle_names[] =
  "HOLLOW_ARROW"
  "NONE"
  "ROUND"
  "SOLID_ARROW";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry KMProto_KMProject_CapDecorationStyle_entries[] = {
  { {KMProto_KMProject_CapDecorationStyle_names + 0, 12}, 4 },
  { {KMProto_KMProject_CapDecorationStyle_names + 12, 4}, 1 },
  { {KMProto_KMProject_CapDecorationStyle_names + 16, 5}, 2 },
  { {KMProto_KMProject_CapDecorationStyle_names + 21, 11}, 3 },
};

static const int KMProto_KMProject_CapDecorationStyle_entries_by_number[] = {
  1, // 1 -> NONE
  2, // 2 -> ROUND
  3, // 3 -> SOLID_ARROW
  0, // 4 -> HOLLOW_ARROW
};

const std::string& KMProto_KMProject_CapDecorationStyle_Name(
    KMProto_KMProject_CapDecorationStyle value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          KMProto_KMProject_CapDecorationStyle_entries,
          KMProto_KMProject_CapDecorationStyle_entries_by_number,
          4, KMProto_KMProject_CapDecorationStyle_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      KMProto_KMProject_CapDecorationStyle_entries,
      KMProto_KMProject_CapDecorationStyle_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     KMProto_KMProject_CapDecorationStyle_strings[idx].get();
}
bool KMProto_KMProject_CapDecorationStyle_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KMProto_KMProject_CapDecorationStyle* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      KMProto_KMProject_CapDecorationStyle_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<KMProto_KMProject_CapDecorationStyle>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr KMProto_KMProject_CapDecorationStyle KMProto_KMProject::NONE;
constexpr KMProto_KMProject_CapDecorationStyle KMProto_KMProject::ROUND;
constexpr KMProto_KMProject_CapDecorationStyle KMProto_KMProject::SOLID_ARROW;
constexpr KMProto_KMProject_CapDecorationStyle KMProto_KMProject::HOLLOW_ARROW;
constexpr KMProto_KMProject_CapDecorationStyle KMProto_KMProject::CapDecorationStyle_MIN;
constexpr KMProto_KMProject_CapDecorationStyle KMProto_KMProject::CapDecorationStyle_MAX;
constexpr int KMProto_KMProject::CapDecorationStyle_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool KMProto_KMProject_DrawingActionType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> KMProto_KMProject_DrawingActionType_strings[2] = {};

static const char KMProto_KMProject_DrawingActionType_names[] =
  "ERASE_ALL"
  "STROKE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry KMProto_KMProject_DrawingActionType_entries[] = {
  { {KMProto_KMProject_DrawingActionType_names + 0, 9}, 2 },
  { {KMProto_KMProject_DrawingActionType_names + 9, 6}, 1 },
};

static const int KMProto_KMProject_DrawingActionType_entries_by_number[] = {
  1, // 1 -> STROKE
  0, // 2 -> ERASE_ALL
};

const std::string& KMProto_KMProject_DrawingActionType_Name(
    KMProto_KMProject_DrawingActionType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          KMProto_KMProject_DrawingActionType_entries,
          KMProto_KMProject_DrawingActionType_entries_by_number,
          2, KMProto_KMProject_DrawingActionType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      KMProto_KMProject_DrawingActionType_entries,
      KMProto_KMProject_DrawingActionType_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     KMProto_KMProject_DrawingActionType_strings[idx].get();
}
bool KMProto_KMProject_DrawingActionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KMProto_KMProject_DrawingActionType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      KMProto_KMProject_DrawingActionType_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<KMProto_KMProject_DrawingActionType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr KMProto_KMProject_DrawingActionType KMProto_KMProject::STROKE;
constexpr KMProto_KMProject_DrawingActionType KMProto_KMProject::ERASE_ALL;
constexpr KMProto_KMProject_DrawingActionType KMProto_KMProject::DrawingActionType_MIN;
constexpr KMProto_KMProject_DrawingActionType KMProto_KMProject::DrawingActionType_MAX;
constexpr int KMProto_KMProject::DrawingActionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool KMProto_KMProject_TitleStyle_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> KMProto_KMProject_TitleStyle_strings[5] = {};

static const char KMProto_KMProject_TitleStyle_names[] =
  "TITLE_STYLE_ENDING"
  "TITLE_STYLE_HEADLINE"
  "TITLE_STYLE_NONE"
  "TITLE_STYLE_OPENING"
  "TITLE_STYLE_PLAYING";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry KMProto_KMProject_TitleStyle_entries[] = {
  { {KMProto_KMProject_TitleStyle_names + 0, 18}, 4 },
  { {KMProto_KMProject_TitleStyle_names + 18, 20}, 1 },
  { {KMProto_KMProject_TitleStyle_names + 38, 16}, 0 },
  { {KMProto_KMProject_TitleStyle_names + 54, 19}, 2 },
  { {KMProto_KMProject_TitleStyle_names + 73, 19}, 3 },
};

static const int KMProto_KMProject_TitleStyle_entries_by_number[] = {
  2, // 0 -> TITLE_STYLE_NONE
  1, // 1 -> TITLE_STYLE_HEADLINE
  3, // 2 -> TITLE_STYLE_OPENING
  4, // 3 -> TITLE_STYLE_PLAYING
  0, // 4 -> TITLE_STYLE_ENDING
};

const std::string& KMProto_KMProject_TitleStyle_Name(
    KMProto_KMProject_TitleStyle value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          KMProto_KMProject_TitleStyle_entries,
          KMProto_KMProject_TitleStyle_entries_by_number,
          5, KMProto_KMProject_TitleStyle_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      KMProto_KMProject_TitleStyle_entries,
      KMProto_KMProject_TitleStyle_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     KMProto_KMProject_TitleStyle_strings[idx].get();
}
bool KMProto_KMProject_TitleStyle_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KMProto_KMProject_TitleStyle* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      KMProto_KMProject_TitleStyle_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<KMProto_KMProject_TitleStyle>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr KMProto_KMProject_TitleStyle KMProto_KMProject::TITLE_STYLE_NONE;
constexpr KMProto_KMProject_TitleStyle KMProto_KMProject::TITLE_STYLE_HEADLINE;
constexpr KMProto_KMProject_TitleStyle KMProto_KMProject::TITLE_STYLE_OPENING;
constexpr KMProto_KMProject_TitleStyle KMProto_KMProject::TITLE_STYLE_PLAYING;
constexpr KMProto_KMProject_TitleStyle KMProto_KMProject::TITLE_STYLE_ENDING;
constexpr KMProto_KMProject_TitleStyle KMProto_KMProject::TitleStyle_MIN;
constexpr KMProto_KMProject_TitleStyle KMProto_KMProject::TitleStyle_MAX;
constexpr int KMProto_KMProject::TitleStyle_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool KMProto_KMProject_ThemeEffectType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> KMProto_KMProject_ThemeEffectType_strings[6] = {};

static const char KMProto_KMProject_ThemeEffectType_names[] =
  "THEME_EFFECT_TYPE_ACCENT"
  "THEME_EFFECT_TYPE_CLIP"
  "THEME_EFFECT_TYPE_ENDING"
  "THEME_EFFECT_TYPE_MIDDLE"
  "THEME_EFFECT_TYPE_OPENING"
  "THEME_EFFECT_TYPE_TRANSITION";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry KMProto_KMProject_ThemeEffectType_entries[] = {
  { {KMProto_KMProject_ThemeEffectType_names + 0, 24}, 4 },
  { {KMProto_KMProject_ThemeEffectType_names + 24, 22}, 6 },
  { {KMProto_KMProject_ThemeEffectType_names + 46, 24}, 3 },
  { {KMProto_KMProject_ThemeEffectType_names + 70, 24}, 2 },
  { {KMProto_KMProject_ThemeEffectType_names + 94, 25}, 1 },
  { {KMProto_KMProject_ThemeEffectType_names + 119, 28}, 5 },
};

static const int KMProto_KMProject_ThemeEffectType_entries_by_number[] = {
  4, // 1 -> THEME_EFFECT_TYPE_OPENING
  3, // 2 -> THEME_EFFECT_TYPE_MIDDLE
  2, // 3 -> THEME_EFFECT_TYPE_ENDING
  0, // 4 -> THEME_EFFECT_TYPE_ACCENT
  5, // 5 -> THEME_EFFECT_TYPE_TRANSITION
  1, // 6 -> THEME_EFFECT_TYPE_CLIP
};

const std::string& KMProto_KMProject_ThemeEffectType_Name(
    KMProto_KMProject_ThemeEffectType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          KMProto_KMProject_ThemeEffectType_entries,
          KMProto_KMProject_ThemeEffectType_entries_by_number,
          6, KMProto_KMProject_ThemeEffectType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      KMProto_KMProject_ThemeEffectType_entries,
      KMProto_KMProject_ThemeEffectType_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     KMProto_KMProject_ThemeEffectType_strings[idx].get();
}
bool KMProto_KMProject_ThemeEffectType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KMProto_KMProject_ThemeEffectType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      KMProto_KMProject_ThemeEffectType_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<KMProto_KMProject_ThemeEffectType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr KMProto_KMProject_ThemeEffectType KMProto_KMProject::THEME_EFFECT_TYPE_OPENING;
constexpr KMProto_KMProject_ThemeEffectType KMProto_KMProject::THEME_EFFECT_TYPE_MIDDLE;
constexpr KMProto_KMProject_ThemeEffectType KMProto_KMProject::THEME_EFFECT_TYPE_ENDING;
constexpr KMProto_KMProject_ThemeEffectType KMProto_KMProject::THEME_EFFECT_TYPE_ACCENT;
constexpr KMProto_KMProject_ThemeEffectType KMProto_KMProject::THEME_EFFECT_TYPE_TRANSITION;
constexpr KMProto_KMProject_ThemeEffectType KMProto_KMProject::THEME_EFFECT_TYPE_CLIP;
constexpr KMProto_KMProject_ThemeEffectType KMProto_KMProject::ThemeEffectType_MIN;
constexpr KMProto_KMProject_ThemeEffectType KMProto_KMProject::ThemeEffectType_MAX;
constexpr int KMProto_KMProject::ThemeEffectType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool KMProto_KMProject_LayerBlendModeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> KMProto_KMProject_LayerBlendModeType_strings[26] = {};

static const char KMProto_KMProject_LayerBlendModeType_names[] =
  "LAYER_BLEND_ADD"
  "LAYER_BLEND_AVERAGE"
  "LAYER_BLEND_COLOR_BURN"
  "LAYER_BLEND_COLOR_DODGE"
  "LAYER_BLEND_DARKEN"
  "LAYER_BLEND_DIFFERENCE"
  "LAYER_BLEND_EXCLUSION"
  "LAYER_BLEND_GLOW"
  "LAYER_BLEND_HARD_LIGHT"
  "LAYER_BLEND_HARD_MIX"
  "LAYER_BLEND_LIGHTEN"
  "LAYER_BLEND_LINEAR_BURN"
  "LAYER_BLEND_LINEAR_DODGE"
  "LAYER_BLEND_LINEAR_LIGHT"
  "LAYER_BLEND_MULTIPLY"
  "LAYER_BLEND_NEGATION"
  "LAYER_BLEND_NONE"
  "LAYER_BLEND_NORMAL"
  "LAYER_BLEND_OVERLAY"
  "LAYER_BLEND_PHOENIX"
  "LAYER_BLEND_PIN_LIGHT"
  "LAYER_BLEND_REFLECT"
  "LAYER_BLEND_SCREEN"
  "LAYER_BLEND_SOFT_LIGHT"
  "LAYER_BLEND_SUBTRACT"
  "LAYER_BLEND_VIVID_LIGHT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry KMProto_KMProject_LayerBlendModeType_entries[] = {
  { {KMProto_KMProject_LayerBlendModeType_names + 0, 15}, 1 },
  { {KMProto_KMProject_LayerBlendModeType_names + 15, 19}, 2 },
  { {KMProto_KMProject_LayerBlendModeType_names + 34, 22}, 3 },
  { {KMProto_KMProject_LayerBlendModeType_names + 56, 23}, 4 },
  { {KMProto_KMProject_LayerBlendModeType_names + 79, 18}, 5 },
  { {KMProto_KMProject_LayerBlendModeType_names + 97, 22}, 6 },
  { {KMProto_KMProject_LayerBlendModeType_names + 119, 21}, 7 },
  { {KMProto_KMProject_LayerBlendModeType_names + 140, 16}, 8 },
  { {KMProto_KMProject_LayerBlendModeType_names + 156, 22}, 9 },
  { {KMProto_KMProject_LayerBlendModeType_names + 178, 20}, 10 },
  { {KMProto_KMProject_LayerBlendModeType_names + 198, 19}, 11 },
  { {KMProto_KMProject_LayerBlendModeType_names + 217, 23}, 12 },
  { {KMProto_KMProject_LayerBlendModeType_names + 240, 24}, 13 },
  { {KMProto_KMProject_LayerBlendModeType_names + 264, 24}, 14 },
  { {KMProto_KMProject_LayerBlendModeType_names + 288, 20}, 15 },
  { {KMProto_KMProject_LayerBlendModeType_names + 308, 20}, 16 },
  { {KMProto_KMProject_LayerBlendModeType_names + 328, 16}, 0 },
  { {KMProto_KMProject_LayerBlendModeType_names + 344, 18}, 17 },
  { {KMProto_KMProject_LayerBlendModeType_names + 362, 19}, 18 },
  { {KMProto_KMProject_LayerBlendModeType_names + 381, 19}, 19 },
  { {KMProto_KMProject_LayerBlendModeType_names + 400, 21}, 20 },
  { {KMProto_KMProject_LayerBlendModeType_names + 421, 19}, 21 },
  { {KMProto_KMProject_LayerBlendModeType_names + 440, 18}, 22 },
  { {KMProto_KMProject_LayerBlendModeType_names + 458, 22}, 23 },
  { {KMProto_KMProject_LayerBlendModeType_names + 480, 20}, 24 },
  { {KMProto_KMProject_LayerBlendModeType_names + 500, 23}, 25 },
};

static const int KMProto_KMProject_LayerBlendModeType_entries_by_number[] = {
  16, // 0 -> LAYER_BLEND_NONE
  0, // 1 -> LAYER_BLEND_ADD
  1, // 2 -> LAYER_BLEND_AVERAGE
  2, // 3 -> LAYER_BLEND_COLOR_BURN
  3, // 4 -> LAYER_BLEND_COLOR_DODGE
  4, // 5 -> LAYER_BLEND_DARKEN
  5, // 6 -> LAYER_BLEND_DIFFERENCE
  6, // 7 -> LAYER_BLEND_EXCLUSION
  7, // 8 -> LAYER_BLEND_GLOW
  8, // 9 -> LAYER_BLEND_HARD_LIGHT
  9, // 10 -> LAYER_BLEND_HARD_MIX
  10, // 11 -> LAYER_BLEND_LIGHTEN
  11, // 12 -> LAYER_BLEND_LINEAR_BURN
  12, // 13 -> LAYER_BLEND_LINEAR_DODGE
  13, // 14 -> LAYER_BLEND_LINEAR_LIGHT
  14, // 15 -> LAYER_BLEND_MULTIPLY
  15, // 16 -> LAYER_BLEND_NEGATION
  17, // 17 -> LAYER_BLEND_NORMAL
  18, // 18 -> LAYER_BLEND_OVERLAY
  19, // 19 -> LAYER_BLEND_PHOENIX
  20, // 20 -> LAYER_BLEND_PIN_LIGHT
  21, // 21 -> LAYER_BLEND_REFLECT
  22, // 22 -> LAYER_BLEND_SCREEN
  23, // 23 -> LAYER_BLEND_SOFT_LIGHT
  24, // 24 -> LAYER_BLEND_SUBTRACT
  25, // 25 -> LAYER_BLEND_VIVID_LIGHT
};

const std::string& KMProto_KMProject_LayerBlendModeType_Name(
    KMProto_KMProject_LayerBlendModeType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          KMProto_KMProject_LayerBlendModeType_entries,
          KMProto_KMProject_LayerBlendModeType_entries_by_number,
          26, KMProto_KMProject_LayerBlendModeType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      KMProto_KMProject_LayerBlendModeType_entries,
      KMProto_KMProject_LayerBlendModeType_entries_by_number,
      26, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     KMProto_KMProject_LayerBlendModeType_strings[idx].get();
}
bool KMProto_KMProject_LayerBlendModeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KMProto_KMProject_LayerBlendModeType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      KMProto_KMProject_LayerBlendModeType_entries, 26, name, &int_value);
  if (success) {
    *value = static_cast<KMProto_KMProject_LayerBlendModeType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr KMProto_KMProject_LayerBlendModeType KMProto_KMProject::LAYER_BLEND_NONE;
constexpr KMProto_KMProject_LayerBlendModeType KMProto_KMProject::LAYER_BLEND_ADD;
constexpr KMProto_KMProject_LayerBlendModeType KMProto_KMProject::LAYER_BLEND_AVERAGE;
constexpr KMProto_KMProject_LayerBlendModeType KMProto_KMProject::LAYER_BLEND_COLOR_BURN;
constexpr KMProto_KMProject_LayerBlendModeType KMProto_KMProject::LAYER_BLEND_COLOR_DODGE;
constexpr KMProto_KMProject_LayerBlendModeType KMProto_KMProject::LAYER_BLEND_DARKEN;
constexpr KMProto_KMProject_LayerBlendModeType KMProto_KMProject::LAYER_BLEND_DIFFERENCE;
constexpr KMProto_KMProject_LayerBlendModeType KMProto_KMProject::LAYER_BLEND_EXCLUSION;
constexpr KMProto_KMProject_LayerBlendModeType KMProto_KMProject::LAYER_BLEND_GLOW;
constexpr KMProto_KMProject_LayerBlendModeType KMProto_KMProject::LAYER_BLEND_HARD_LIGHT;
constexpr KMProto_KMProject_LayerBlendModeType KMProto_KMProject::LAYER_BLEND_HARD_MIX;
constexpr KMProto_KMProject_LayerBlendModeType KMProto_KMProject::LAYER_BLEND_LIGHTEN;
constexpr KMProto_KMProject_LayerBlendModeType KMProto_KMProject::LAYER_BLEND_LINEAR_BURN;
constexpr KMProto_KMProject_LayerBlendModeType KMProto_KMProject::LAYER_BLEND_LINEAR_DODGE;
constexpr KMProto_KMProject_LayerBlendModeType KMProto_KMProject::LAYER_BLEND_LINEAR_LIGHT;
constexpr KMProto_KMProject_LayerBlendModeType KMProto_KMProject::LAYER_BLEND_MULTIPLY;
constexpr KMProto_KMProject_LayerBlendModeType KMProto_KMProject::LAYER_BLEND_NEGATION;
constexpr KMProto_KMProject_LayerBlendModeType KMProto_KMProject::LAYER_BLEND_NORMAL;
constexpr KMProto_KMProject_LayerBlendModeType KMProto_KMProject::LAYER_BLEND_OVERLAY;
constexpr KMProto_KMProject_LayerBlendModeType KMProto_KMProject::LAYER_BLEND_PHOENIX;
constexpr KMProto_KMProject_LayerBlendModeType KMProto_KMProject::LAYER_BLEND_PIN_LIGHT;
constexpr KMProto_KMProject_LayerBlendModeType KMProto_KMProject::LAYER_BLEND_REFLECT;
constexpr KMProto_KMProject_LayerBlendModeType KMProto_KMProject::LAYER_BLEND_SCREEN;
constexpr KMProto_KMProject_LayerBlendModeType KMProto_KMProject::LAYER_BLEND_SOFT_LIGHT;
constexpr KMProto_KMProject_LayerBlendModeType KMProto_KMProject::LAYER_BLEND_SUBTRACT;
constexpr KMProto_KMProject_LayerBlendModeType KMProto_KMProject::LAYER_BLEND_VIVID_LIGHT;
constexpr KMProto_KMProject_LayerBlendModeType KMProto_KMProject::LayerBlendModeType_MIN;
constexpr KMProto_KMProject_LayerBlendModeType KMProto_KMProject::LayerBlendModeType_MAX;
constexpr int KMProto_KMProject::LayerBlendModeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool KMProto_Platform_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> KMProto_Platform_strings[2] = {};

static const char KMProto_Platform_names[] =
  "ANDROID"
  "IOS";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry KMProto_Platform_entries[] = {
  { {KMProto_Platform_names + 0, 7}, 2 },
  { {KMProto_Platform_names + 7, 3}, 1 },
};

static const int KMProto_Platform_entries_by_number[] = {
  1, // 1 -> IOS
  0, // 2 -> ANDROID
};

const std::string& KMProto_Platform_Name(
    KMProto_Platform value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          KMProto_Platform_entries,
          KMProto_Platform_entries_by_number,
          2, KMProto_Platform_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      KMProto_Platform_entries,
      KMProto_Platform_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     KMProto_Platform_strings[idx].get();
}
bool KMProto_Platform_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KMProto_Platform* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      KMProto_Platform_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<KMProto_Platform>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr KMProto_Platform KMProto::IOS;
constexpr KMProto_Platform KMProto::ANDROID;
constexpr KMProto_Platform KMProto::Platform_MIN;
constexpr KMProto_Platform KMProto::Platform_MAX;
constexpr int KMProto::Platform_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class KMProto_KMProject_Fade::_Internal {
 public:
  using HasBits = decltype(std::declval<KMProto_KMProject_Fade>()._has_bits_);
  static void set_has_in_on(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_in_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_out_on(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_out_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

KMProto_KMProject_Fade::KMProto_KMProject_Fade(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KMProto.KMProject.Fade)
}
KMProto_KMProject_Fade::KMProto_KMProject_Fade(const KMProto_KMProject_Fade& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&in_seconds_, &from.in_seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&out_seconds_) -
    reinterpret_cast<char*>(&in_seconds_)) + sizeof(out_seconds_));
  // @@protoc_insertion_point(copy_constructor:KMProto.KMProject.Fade)
}

void KMProto_KMProject_Fade::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&in_seconds_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&out_seconds_) -
      reinterpret_cast<char*>(&in_seconds_)) + sizeof(out_seconds_));
}

KMProto_KMProject_Fade::~KMProto_KMProject_Fade() {
  // @@protoc_insertion_point(destructor:KMProto.KMProject.Fade)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void KMProto_KMProject_Fade::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void KMProto_KMProject_Fade::ArenaDtor(void* object) {
  KMProto_KMProject_Fade* _this = reinterpret_cast< KMProto_KMProject_Fade* >(object);
  (void)_this;
}
void KMProto_KMProject_Fade::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KMProto_KMProject_Fade::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KMProto_KMProject_Fade& KMProto_KMProject_Fade::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KMProto_KMProject_Fade_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  return *internal_default_instance();
}


void KMProto_KMProject_Fade::Clear() {
// @@protoc_insertion_point(message_clear_start:KMProto.KMProject.Fade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&in_seconds_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&out_seconds_) -
        reinterpret_cast<char*>(&in_seconds_)) + sizeof(out_seconds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* KMProto_KMProject_Fade::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool in_on = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_in_on(&has_bits);
          in_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float in_seconds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_in_seconds(&has_bits);
          in_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool out_on = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_out_on(&has_bits);
          out_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float out_seconds = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_out_seconds(&has_bits);
          out_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KMProto_KMProject_Fade::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KMProto.KMProject.Fade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool in_on = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_in_on(), target);
  }

  // optional float in_seconds = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_in_seconds(), target);
  }

  // optional bool out_on = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_out_on(), target);
  }

  // optional float out_seconds = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_out_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KMProto.KMProject.Fade)
  return target;
}

size_t KMProto_KMProject_Fade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KMProto.KMProject.Fade)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional float in_seconds = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional bool in_on = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool out_on = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional float out_seconds = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KMProto_KMProject_Fade::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const KMProto_KMProject_Fade*>(
      &from));
}

void KMProto_KMProject_Fade::MergeFrom(const KMProto_KMProject_Fade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KMProto.KMProject.Fade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      in_seconds_ = from.in_seconds_;
    }
    if (cached_has_bits & 0x00000002u) {
      in_on_ = from.in_on_;
    }
    if (cached_has_bits & 0x00000004u) {
      out_on_ = from.out_on_;
    }
    if (cached_has_bits & 0x00000008u) {
      out_seconds_ = from.out_seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KMProto_KMProject_Fade::CopyFrom(const KMProto_KMProject_Fade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KMProto.KMProject.Fade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KMProto_KMProject_Fade::IsInitialized() const {
  return true;
}

void KMProto_KMProject_Fade::InternalSwap(KMProto_KMProject_Fade* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KMProto_KMProject_Fade, out_seconds_)
      + sizeof(KMProto_KMProject_Fade::out_seconds_)
      - PROTOBUF_FIELD_OFFSET(KMProto_KMProject_Fade, in_seconds_)>(
          reinterpret_cast<char*>(&in_seconds_),
          reinterpret_cast<char*>(&other->in_seconds_));
}

std::string KMProto_KMProject_Fade::GetTypeName() const {
  return "KMProto.KMProject.Fade";
}


// ===================================================================

class KMProto_KMProject_Track::_Internal {
 public:
  using HasBits = decltype(std::declval<KMProto_KMProject_Track>()._has_bits_);
  static void set_has_track_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_mute_audio(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_clip_volume(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_compressor(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pan_left(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_pan_right(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_pitch_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_overall_alpha(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_override_text_style(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_text_font_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_text_color(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_text_shadow(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_text_shadow_color(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_text_glow(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_text_glow_color(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_text_outline(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_text_outline_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

KMProto_KMProject_Track::KMProto_KMProject_Track(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KMProto.KMProject.Track)
}
KMProto_KMProject_Track::KMProto_KMProject_Track(const KMProto_KMProject_Track& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  text_font_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text_font_id()) {
    text_font_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text_font_id(), 
      GetArena());
  }
  ::memcpy(&text_outline_color_, &from.text_outline_color_,
    static_cast<size_t>(reinterpret_cast<char*>(&text_outline_) -
    reinterpret_cast<char*>(&text_outline_color_)) + sizeof(text_outline_));
  // @@protoc_insertion_point(copy_constructor:KMProto.KMProject.Track)
}

void KMProto_KMProject_Track::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KMProto_KMProject_Track_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  text_font_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&text_outline_color_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&text_outline_) -
      reinterpret_cast<char*>(&text_outline_color_)) + sizeof(text_outline_));
}

KMProto_KMProject_Track::~KMProto_KMProject_Track() {
  // @@protoc_insertion_point(destructor:KMProto.KMProject.Track)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void KMProto_KMProject_Track::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_font_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KMProto_KMProject_Track::ArenaDtor(void* object) {
  KMProto_KMProject_Track* _this = reinterpret_cast< KMProto_KMProject_Track* >(object);
  (void)_this;
}
void KMProto_KMProject_Track::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KMProto_KMProject_Track::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KMProto_KMProject_Track& KMProto_KMProject_Track::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KMProto_KMProject_Track_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  return *internal_default_instance();
}


void KMProto_KMProject_Track::Clear() {
// @@protoc_insertion_point(message_clear_start:KMProto.KMProject.Track)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_font_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&text_outline_color_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pitch_factor_) -
        reinterpret_cast<char*>(&text_outline_color_)) + sizeof(pitch_factor_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&visible_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&text_glow_color_) -
        reinterpret_cast<char*>(&visible_)) + sizeof(text_glow_color_));
  }
  if (cached_has_bits & 0x00030000u) {
    ::memset(&text_glow_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&text_outline_) -
        reinterpret_cast<char*>(&text_glow_)) + sizeof(text_outline_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* KMProto_KMProject_Track::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 track_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_track_id(&has_bits);
          track_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool visible = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_visible(&has_bits);
          visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool mute_audio = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_mute_audio(&has_bits);
          mute_audio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 clip_volume = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_clip_volume(&has_bits);
          clip_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 compressor = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_compressor(&has_bits);
          compressor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pan_left = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_pan_left(&has_bits);
          pan_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pan_right = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_pan_right(&has_bits);
          pan_right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pitch_factor = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_pitch_factor(&has_bits);
          pitch_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 overall_alpha = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_overall_alpha(&has_bits);
          overall_alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool override_text_style = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_override_text_style(&has_bits);
          override_text_style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string text_font_id = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_text_font_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 text_color = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_text_color(&has_bits);
          text_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool text_shadow = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_text_shadow(&has_bits);
          text_shadow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 text_shadow_color = 114;
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_text_shadow_color(&has_bits);
          text_shadow_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool text_glow = 115;
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_text_glow(&has_bits);
          text_glow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 text_glow_color = 116;
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_text_glow_color(&has_bits);
          text_glow_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool text_outline = 117;
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_text_outline(&has_bits);
          text_outline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 text_outline_color = 118;
      case 118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_text_outline_color(&has_bits);
          text_outline_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KMProto_KMProject_Track::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KMProto.KMProject.Track)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 track_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_track_id(), target);
  }

  // optional bool visible = 100;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(100, this->_internal_visible(), target);
  }

  // optional bool mute_audio = 101;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(101, this->_internal_mute_audio(), target);
  }

  // optional int32 clip_volume = 102;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(102, this->_internal_clip_volume(), target);
  }

  // optional int32 compressor = 103;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(103, this->_internal_compressor(), target);
  }

  // optional int32 pan_left = 104;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(104, this->_internal_pan_left(), target);
  }

  // optional int32 pan_right = 105;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(105, this->_internal_pan_right(), target);
  }

  // optional int32 pitch_factor = 106;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(106, this->_internal_pitch_factor(), target);
  }

  // optional int32 overall_alpha = 107;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(107, this->_internal_overall_alpha(), target);
  }

  // optional bool override_text_style = 110;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(110, this->_internal_override_text_style(), target);
  }

  // optional string text_font_id = 111;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        111, this->_internal_text_font_id(), target);
  }

  // optional int32 text_color = 112;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(112, this->_internal_text_color(), target);
  }

  // optional bool text_shadow = 113;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(113, this->_internal_text_shadow(), target);
  }

  // optional int32 text_shadow_color = 114;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(114, this->_internal_text_shadow_color(), target);
  }

  // optional bool text_glow = 115;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(115, this->_internal_text_glow(), target);
  }

  // optional int32 text_glow_color = 116;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(116, this->_internal_text_glow_color(), target);
  }

  // optional bool text_outline = 117;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(117, this->_internal_text_outline(), target);
  }

  // optional int32 text_outline_color = 118;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(118, this->_internal_text_outline_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KMProto.KMProject.Track)
  return target;
}

size_t KMProto_KMProject_Track::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KMProto.KMProject.Track)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string text_font_id = 111;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text_font_id());
    }

    // optional int32 text_outline_color = 118;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_text_outline_color());
    }

    // optional int32 track_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_track_id());
    }

    // optional int32 clip_volume = 102;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_clip_volume());
    }

    // optional int32 compressor = 103;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_compressor());
    }

    // optional int32 pan_left = 104;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_pan_left());
    }

    // optional int32 pan_right = 105;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_pan_right());
    }

    // optional int32 pitch_factor = 106;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_pitch_factor());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool visible = 100;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool mute_audio = 101;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool override_text_style = 110;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool text_shadow = 113;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional int32 overall_alpha = 107;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_overall_alpha());
    }

    // optional int32 text_color = 112;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_text_color());
    }

    // optional int32 text_shadow_color = 114;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_text_shadow_color());
    }

    // optional int32 text_glow_color = 116;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_text_glow_color());
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional bool text_glow = 115;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool text_outline = 117;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KMProto_KMProject_Track::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const KMProto_KMProject_Track*>(
      &from));
}

void KMProto_KMProject_Track::MergeFrom(const KMProto_KMProject_Track& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KMProto.KMProject.Track)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_text_font_id(from._internal_text_font_id());
    }
    if (cached_has_bits & 0x00000002u) {
      text_outline_color_ = from.text_outline_color_;
    }
    if (cached_has_bits & 0x00000004u) {
      track_id_ = from.track_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      clip_volume_ = from.clip_volume_;
    }
    if (cached_has_bits & 0x00000010u) {
      compressor_ = from.compressor_;
    }
    if (cached_has_bits & 0x00000020u) {
      pan_left_ = from.pan_left_;
    }
    if (cached_has_bits & 0x00000040u) {
      pan_right_ = from.pan_right_;
    }
    if (cached_has_bits & 0x00000080u) {
      pitch_factor_ = from.pitch_factor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      visible_ = from.visible_;
    }
    if (cached_has_bits & 0x00000200u) {
      mute_audio_ = from.mute_audio_;
    }
    if (cached_has_bits & 0x00000400u) {
      override_text_style_ = from.override_text_style_;
    }
    if (cached_has_bits & 0x00000800u) {
      text_shadow_ = from.text_shadow_;
    }
    if (cached_has_bits & 0x00001000u) {
      overall_alpha_ = from.overall_alpha_;
    }
    if (cached_has_bits & 0x00002000u) {
      text_color_ = from.text_color_;
    }
    if (cached_has_bits & 0x00004000u) {
      text_shadow_color_ = from.text_shadow_color_;
    }
    if (cached_has_bits & 0x00008000u) {
      text_glow_color_ = from.text_glow_color_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      text_glow_ = from.text_glow_;
    }
    if (cached_has_bits & 0x00020000u) {
      text_outline_ = from.text_outline_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KMProto_KMProject_Track::CopyFrom(const KMProto_KMProject_Track& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KMProto.KMProject.Track)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KMProto_KMProject_Track::IsInitialized() const {
  return true;
}

void KMProto_KMProject_Track::InternalSwap(KMProto_KMProject_Track* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_font_id_.Swap(&other->text_font_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KMProto_KMProject_Track, text_outline_)
      + sizeof(KMProto_KMProject_Track::text_outline_)
      - PROTOBUF_FIELD_OFFSET(KMProto_KMProject_Track, text_outline_color_)>(
          reinterpret_cast<char*>(&text_outline_color_),
          reinterpret_cast<char*>(&other->text_outline_color_));
}

std::string KMProto_KMProject_Track::GetTypeName() const {
  return "KMProto.KMProject.Track";
}


// ===================================================================

class KMProto_KMProject_TimelineItem::_Internal {
 public:
  using HasBits = decltype(std::declval<KMProto_KMProject_TimelineItem>()._has_bits_);
  static void set_has_unique_id_lsb(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_unique_id_msb(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_clip_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_track_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::KMProto_KMProject_VisualClip& visual_clip(const KMProto_KMProject_TimelineItem* msg);
  static void set_has_visual_clip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::KMProto_KMProject_Transition& transition(const KMProto_KMProject_TimelineItem* msg);
  static void set_has_transition(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::KMProto_KMProject_AudioClip& audio_clip(const KMProto_KMProject_TimelineItem* msg);
  static void set_has_audio_clip(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::KMProto_KMProject_TextLayer& text_layer(const KMProto_KMProject_TimelineItem* msg);
  static void set_has_text_layer(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::KMProto_KMProject_StickerLayer& sticker_layer(const KMProto_KMProject_TimelineItem* msg);
  static void set_has_sticker_layer(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::KMProto_KMProject_ImageLayer& image_layer(const KMProto_KMProject_TimelineItem* msg);
  static void set_has_image_layer(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::KMProto_KMProject_HandwritingLayer& handwriting_layer(const KMProto_KMProject_TimelineItem* msg);
  static void set_has_handwriting_layer(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::KMProto_KMProject_VideoLayer& video_layer(const KMProto_KMProject_TimelineItem* msg);
  static void set_has_video_layer(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::KMProto_KMProject_EffectLayer& effect_layer(const KMProto_KMProject_TimelineItem* msg);
  static void set_has_effect_layer(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::KMProto_KMProject_AssetLayer& asset_layer(const KMProto_KMProject_TimelineItem* msg);
  static void set_has_asset_layer(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::KMProto_KMProject_GroupLayer& group_layer(const KMProto_KMProject_TimelineItem* msg);
  static void set_has_group_layer(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::KMProto_KMProject_VisualClip&
KMProto_KMProject_TimelineItem::_Internal::visual_clip(const KMProto_KMProject_TimelineItem* msg) {
  return *msg->visual_clip_;
}
const ::KMProto_KMProject_Transition&
KMProto_KMProject_TimelineItem::_Internal::transition(const KMProto_KMProject_TimelineItem* msg) {
  return *msg->transition_;
}
const ::KMProto_KMProject_AudioClip&
KMProto_KMProject_TimelineItem::_Internal::audio_clip(const KMProto_KMProject_TimelineItem* msg) {
  return *msg->audio_clip_;
}
const ::KMProto_KMProject_TextLayer&
KMProto_KMProject_TimelineItem::_Internal::text_layer(const KMProto_KMProject_TimelineItem* msg) {
  return *msg->text_layer_;
}
const ::KMProto_KMProject_StickerLayer&
KMProto_KMProject_TimelineItem::_Internal::sticker_layer(const KMProto_KMProject_TimelineItem* msg) {
  return *msg->sticker_layer_;
}
const ::KMProto_KMProject_ImageLayer&
KMProto_KMProject_TimelineItem::_Internal::image_layer(const KMProto_KMProject_TimelineItem* msg) {
  return *msg->image_layer_;
}
const ::KMProto_KMProject_HandwritingLayer&
KMProto_KMProject_TimelineItem::_Internal::handwriting_layer(const KMProto_KMProject_TimelineItem* msg) {
  return *msg->handwriting_layer_;
}
const ::KMProto_KMProject_VideoLayer&
KMProto_KMProject_TimelineItem::_Internal::video_layer(const KMProto_KMProject_TimelineItem* msg) {
  return *msg->video_layer_;
}
const ::KMProto_KMProject_EffectLayer&
KMProto_KMProject_TimelineItem::_Internal::effect_layer(const KMProto_KMProject_TimelineItem* msg) {
  return *msg->effect_layer_;
}
const ::KMProto_KMProject_AssetLayer&
KMProto_KMProject_TimelineItem::_Internal::asset_layer(const KMProto_KMProject_TimelineItem* msg) {
  return *msg->asset_layer_;
}
const ::KMProto_KMProject_GroupLayer&
KMProto_KMProject_TimelineItem::_Internal::group_layer(const KMProto_KMProject_TimelineItem* msg) {
  return *msg->group_layer_;
}
KMProto_KMProject_TimelineItem::KMProto_KMProject_TimelineItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KMProto.KMProject.TimelineItem)
}
KMProto_KMProject_TimelineItem::KMProto_KMProject_TimelineItem(const KMProto_KMProject_TimelineItem& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_visual_clip()) {
    visual_clip_ = new ::KMProto_KMProject_VisualClip(*from.visual_clip_);
  } else {
    visual_clip_ = nullptr;
  }
  if (from._internal_has_transition()) {
    transition_ = new ::KMProto_KMProject_Transition(*from.transition_);
  } else {
    transition_ = nullptr;
  }
  if (from._internal_has_audio_clip()) {
    audio_clip_ = new ::KMProto_KMProject_AudioClip(*from.audio_clip_);
  } else {
    audio_clip_ = nullptr;
  }
  if (from._internal_has_text_layer()) {
    text_layer_ = new ::KMProto_KMProject_TextLayer(*from.text_layer_);
  } else {
    text_layer_ = nullptr;
  }
  if (from._internal_has_sticker_layer()) {
    sticker_layer_ = new ::KMProto_KMProject_StickerLayer(*from.sticker_layer_);
  } else {
    sticker_layer_ = nullptr;
  }
  if (from._internal_has_image_layer()) {
    image_layer_ = new ::KMProto_KMProject_ImageLayer(*from.image_layer_);
  } else {
    image_layer_ = nullptr;
  }
  if (from._internal_has_handwriting_layer()) {
    handwriting_layer_ = new ::KMProto_KMProject_HandwritingLayer(*from.handwriting_layer_);
  } else {
    handwriting_layer_ = nullptr;
  }
  if (from._internal_has_video_layer()) {
    video_layer_ = new ::KMProto_KMProject_VideoLayer(*from.video_layer_);
  } else {
    video_layer_ = nullptr;
  }
  if (from._internal_has_effect_layer()) {
    effect_layer_ = new ::KMProto_KMProject_EffectLayer(*from.effect_layer_);
  } else {
    effect_layer_ = nullptr;
  }
  if (from._internal_has_asset_layer()) {
    asset_layer_ = new ::KMProto_KMProject_AssetLayer(*from.asset_layer_);
  } else {
    asset_layer_ = nullptr;
  }
  if (from._internal_has_group_layer()) {
    group_layer_ = new ::KMProto_KMProject_GroupLayer(*from.group_layer_);
  } else {
    group_layer_ = nullptr;
  }
  ::memcpy(&unique_id_lsb_, &from.unique_id_lsb_,
    static_cast<size_t>(reinterpret_cast<char*>(&clip_type_) -
    reinterpret_cast<char*>(&unique_id_lsb_)) + sizeof(clip_type_));
  // @@protoc_insertion_point(copy_constructor:KMProto.KMProject.TimelineItem)
}

void KMProto_KMProject_TimelineItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KMProto_KMProject_GroupLayer_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&visual_clip_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&track_id_) -
      reinterpret_cast<char*>(&visual_clip_)) + sizeof(track_id_));
  clip_type_ = 1;
}

KMProto_KMProject_TimelineItem::~KMProto_KMProject_TimelineItem() {
  // @@protoc_insertion_point(destructor:KMProto.KMProject.TimelineItem)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void KMProto_KMProject_TimelineItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete visual_clip_;
  if (this != internal_default_instance()) delete transition_;
  if (this != internal_default_instance()) delete audio_clip_;
  if (this != internal_default_instance()) delete text_layer_;
  if (this != internal_default_instance()) delete sticker_layer_;
  if (this != internal_default_instance()) delete image_layer_;
  if (this != internal_default_instance()) delete handwriting_layer_;
  if (this != internal_default_instance()) delete video_layer_;
  if (this != internal_default_instance()) delete effect_layer_;
  if (this != internal_default_instance()) delete asset_layer_;
  if (this != internal_default_instance()) delete group_layer_;
}

void KMProto_KMProject_TimelineItem::ArenaDtor(void* object) {
  KMProto_KMProject_TimelineItem* _this = reinterpret_cast< KMProto_KMProject_TimelineItem* >(object);
  (void)_this;
}
void KMProto_KMProject_TimelineItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KMProto_KMProject_TimelineItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KMProto_KMProject_TimelineItem& KMProto_KMProject_TimelineItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KMProto_KMProject_GroupLayer_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  return *internal_default_instance();
}


void KMProto_KMProject_TimelineItem::Clear() {
// @@protoc_insertion_point(message_clear_start:KMProto.KMProject.TimelineItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(visual_clip_ != nullptr);
      visual_clip_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(transition_ != nullptr);
      transition_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(audio_clip_ != nullptr);
      audio_clip_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(text_layer_ != nullptr);
      text_layer_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(sticker_layer_ != nullptr);
      sticker_layer_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(image_layer_ != nullptr);
      image_layer_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(handwriting_layer_ != nullptr);
      handwriting_layer_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(video_layer_ != nullptr);
      video_layer_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(effect_layer_ != nullptr);
      effect_layer_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(asset_layer_ != nullptr);
      asset_layer_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(group_layer_ != nullptr);
      group_layer_->Clear();
    }
  }
  if (cached_has_bits & 0x00007800u) {
    ::memset(&unique_id_lsb_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&track_id_) -
        reinterpret_cast<char*>(&unique_id_lsb_)) + sizeof(track_id_));
    clip_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* KMProto_KMProject_TimelineItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 unique_id_lsb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_unique_id_lsb(&has_bits);
          unique_id_lsb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 unique_id_msb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_unique_id_msb(&has_bits);
          unique_id_msb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KMProto.KMProject.ClipType clip_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KMProto_KMProject_ClipType_IsValid(val))) {
            _internal_set_clip_type(static_cast<::KMProto_KMProject_ClipType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .KMProto.KMProject.VisualClip visual_clip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_visual_clip(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KMProto.KMProject.Transition transition = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_transition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KMProto.KMProject.AudioClip audio_clip = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio_clip(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KMProto.KMProject.TextLayer text_layer = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_layer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KMProto.KMProject.StickerLayer sticker_layer = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_sticker_layer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KMProto.KMProject.ImageLayer image_layer = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_image_layer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KMProto.KMProject.HandwritingLayer handwriting_layer = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_handwriting_layer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KMProto.KMProject.VideoLayer video_layer = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_video_layer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KMProto.KMProject.EffectLayer effect_layer = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_effect_layer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KMProto.KMProject.AssetLayer asset_layer = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_asset_layer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 track_id = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_track_id(&has_bits);
          track_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KMProto.KMProject.GroupLayer group_layer = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_layer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KMProto_KMProject_TimelineItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KMProto.KMProject.TimelineItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 unique_id_lsb = 1;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_unique_id_lsb(), target);
  }

  // optional uint64 unique_id_msb = 2;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_unique_id_msb(), target);
  }

  // optional .KMProto.KMProject.ClipType clip_type = 3;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_clip_type(), target);
  }

  // optional .KMProto.KMProject.VisualClip visual_clip = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::visual_clip(this), target, stream);
  }

  // optional .KMProto.KMProject.Transition transition = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::transition(this), target, stream);
  }

  // optional .KMProto.KMProject.AudioClip audio_clip = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::audio_clip(this), target, stream);
  }

  // optional .KMProto.KMProject.TextLayer text_layer = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::text_layer(this), target, stream);
  }

  // optional .KMProto.KMProject.StickerLayer sticker_layer = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::sticker_layer(this), target, stream);
  }

  // optional .KMProto.KMProject.ImageLayer image_layer = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::image_layer(this), target, stream);
  }

  // optional .KMProto.KMProject.HandwritingLayer handwriting_layer = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::handwriting_layer(this), target, stream);
  }

  // optional .KMProto.KMProject.VideoLayer video_layer = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::video_layer(this), target, stream);
  }

  // optional .KMProto.KMProject.EffectLayer effect_layer = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::effect_layer(this), target, stream);
  }

  // optional .KMProto.KMProject.AssetLayer asset_layer = 13;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::asset_layer(this), target, stream);
  }

  // optional int32 track_id = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_track_id(), target);
  }

  // optional .KMProto.KMProject.GroupLayer group_layer = 15;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::group_layer(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KMProto.KMProject.TimelineItem)
  return target;
}

size_t KMProto_KMProject_TimelineItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KMProto.KMProject.TimelineItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .KMProto.KMProject.VisualClip visual_clip = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *visual_clip_);
    }

    // optional .KMProto.KMProject.Transition transition = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transition_);
    }

    // optional .KMProto.KMProject.AudioClip audio_clip = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *audio_clip_);
    }

    // optional .KMProto.KMProject.TextLayer text_layer = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *text_layer_);
    }

    // optional .KMProto.KMProject.StickerLayer sticker_layer = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sticker_layer_);
    }

    // optional .KMProto.KMProject.ImageLayer image_layer = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *image_layer_);
    }

    // optional .KMProto.KMProject.HandwritingLayer handwriting_layer = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *handwriting_layer_);
    }

    // optional .KMProto.KMProject.VideoLayer video_layer = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *video_layer_);
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional .KMProto.KMProject.EffectLayer effect_layer = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *effect_layer_);
    }

    // optional .KMProto.KMProject.AssetLayer asset_layer = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *asset_layer_);
    }

    // optional .KMProto.KMProject.GroupLayer group_layer = 15;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *group_layer_);
    }

    // optional uint64 unique_id_lsb = 1;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_unique_id_lsb());
    }

    // optional uint64 unique_id_msb = 2;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_unique_id_msb());
    }

    // optional int32 track_id = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_track_id());
    }

    // optional .KMProto.KMProject.ClipType clip_type = 3;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_clip_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KMProto_KMProject_TimelineItem::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const KMProto_KMProject_TimelineItem*>(
      &from));
}

void KMProto_KMProject_TimelineItem::MergeFrom(const KMProto_KMProject_TimelineItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KMProto.KMProject.TimelineItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_visual_clip()->::KMProto_KMProject_VisualClip::MergeFrom(from._internal_visual_clip());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_transition()->::KMProto_KMProject_Transition::MergeFrom(from._internal_transition());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_audio_clip()->::KMProto_KMProject_AudioClip::MergeFrom(from._internal_audio_clip());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_text_layer()->::KMProto_KMProject_TextLayer::MergeFrom(from._internal_text_layer());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_sticker_layer()->::KMProto_KMProject_StickerLayer::MergeFrom(from._internal_sticker_layer());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_image_layer()->::KMProto_KMProject_ImageLayer::MergeFrom(from._internal_image_layer());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_handwriting_layer()->::KMProto_KMProject_HandwritingLayer::MergeFrom(from._internal_handwriting_layer());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_video_layer()->::KMProto_KMProject_VideoLayer::MergeFrom(from._internal_video_layer());
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_effect_layer()->::KMProto_KMProject_EffectLayer::MergeFrom(from._internal_effect_layer());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_asset_layer()->::KMProto_KMProject_AssetLayer::MergeFrom(from._internal_asset_layer());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_group_layer()->::KMProto_KMProject_GroupLayer::MergeFrom(from._internal_group_layer());
    }
    if (cached_has_bits & 0x00000800u) {
      unique_id_lsb_ = from.unique_id_lsb_;
    }
    if (cached_has_bits & 0x00001000u) {
      unique_id_msb_ = from.unique_id_msb_;
    }
    if (cached_has_bits & 0x00002000u) {
      track_id_ = from.track_id_;
    }
    if (cached_has_bits & 0x00004000u) {
      clip_type_ = from.clip_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KMProto_KMProject_TimelineItem::CopyFrom(const KMProto_KMProject_TimelineItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KMProto.KMProject.TimelineItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KMProto_KMProject_TimelineItem::IsInitialized() const {
  return true;
}

void KMProto_KMProject_TimelineItem::InternalSwap(KMProto_KMProject_TimelineItem* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KMProto_KMProject_TimelineItem, track_id_)
      + sizeof(KMProto_KMProject_TimelineItem::track_id_)
      - PROTOBUF_FIELD_OFFSET(KMProto_KMProject_TimelineItem, visual_clip_)>(
          reinterpret_cast<char*>(&visual_clip_),
          reinterpret_cast<char*>(&other->visual_clip_));
  swap(clip_type_, other->clip_type_);
}

std::string KMProto_KMProject_TimelineItem::GetTypeName() const {
  return "KMProto.KMProject.TimelineItem";
}


// ===================================================================

class KMProto_KMProject_VisualClip::_Internal {
 public:
  using HasBits = decltype(std::declval<KMProto_KMProject_VisualClip>()._has_bits_);
  static void set_has_media_path(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_face_bounds_left(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_face_bounds_top(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_face_bounds_right(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_face_bounds_bottom(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_face_bounds_set(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_capture_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_engine_clip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_abstract_crop(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_start_position_left(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_start_position_bottom(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_start_position_right(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_start_position_top(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_end_position_left(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_end_position_bottom(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_end_position_right(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_end_position_top(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_rotated_start_position_left(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_rotated_start_position_bottom(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_rotated_start_position_right(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_rotated_start_position_top(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_rotated_end_position_left(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_rotated_end_position_bottom(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_rotated_end_position_right(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_rotated_end_position_top(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_rotation(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_fliph(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_flipv(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_diff_av_duration(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_trim_time_start(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_trim_time_end(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_trimmed_duration(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_pre_trimmed_duration(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_title_effect_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_title_start_time(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static void set_has_title_end_time(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static void set_has_audio_duration(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static void set_has_video_duration(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static void set_has_start_overlap(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static void set_has_end_overlap(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static void set_has_original_width(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static void set_has_original_height(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
  static void set_has_clip_volume(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
  static void set_has_music_volume(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static void set_has_title_style(HasBits* has_bits) {
    (*has_bits)[1] |= 1073741824u;
  }
  static void set_has_is_image(HasBits* has_bits) {
    (*has_bits)[1] |= 2147483648u;
  }
  static void set_has_mute_audio(HasBits* has_bits) {
    (*has_bits)[2] |= 1u;
  }
  static void set_has_mute_music(HasBits* has_bits) {
    (*has_bits)[2] |= 2u;
  }
  static void set_has_has_audio(HasBits* has_bits) {
    (*has_bits)[2] |= 4u;
  }
  static void set_has_has_video(HasBits* has_bits) {
    (*has_bits)[2] |= 8192u;
  }
  static void set_has_thumb_path(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_transition_item_uuid_lsb(HasBits* has_bits) {
    (*has_bits)[2] |= 16u;
  }
  static void set_has_transition_item_uuid_msb(HasBits* has_bits) {
    (*has_bits)[2] |= 32u;
  }
  static const ::KMProto_KMProject_TimelineItem& unattached_transition(const KMProto_KMProject_VisualClip* msg);
  static void set_has_unattached_transition(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_brightness(HasBits* has_bits) {
    (*has_bits)[2] |= 8u;
  }
  static void set_has_contrast(HasBits* has_bits) {
    (*has_bits)[2] |= 64u;
  }
  static void set_has_saturation(HasBits* has_bits) {
    (*has_bits)[2] |= 128u;
  }
  static void set_has_tintcolor(HasBits* has_bits) {
    (*has_bits)[2] |= 256u;
  }
  static void set_has_effect_start_time(HasBits* has_bits) {
    (*has_bits)[2] |= 512u;
  }
  static void set_has_effect_end_time(HasBits* has_bits) {
    (*has_bits)[2] |= 1024u;
  }
  static const ::KMProto_KMProject_Matrix& start_matrix(const KMProto_KMProject_VisualClip* msg);
  static void set_has_start_matrix(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::KMProto_KMProject_Matrix& end_matrix(const KMProto_KMProject_VisualClip* msg);
  static void set_has_end_matrix(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_auto_theme_effect(HasBits* has_bits) {
    (*has_bits)[2] |= 33554432u;
  }
  static void set_has_clip_width(HasBits* has_bits) {
    (*has_bits)[2] |= 2048u;
  }
  static void set_has_playback_speed(HasBits* has_bits) {
    (*has_bits)[2] |= 4096u;
  }
  static const ::KMProto_KMProject_ColorEffect& color_effect(const KMProto_KMProject_VisualClip* msg);
  static void set_has_color_effect(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::KMProto_KMProject_StringHashMap& effect_options(const KMProto_KMProject_VisualClip* msg);
  static void set_has_effect_options(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_media_msid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_transcode_approved(HasBits* has_bits) {
    (*has_bits)[2] |= 16384u;
  }
  static void set_has_clip_state(HasBits* has_bits) {
    (*has_bits)[2] |= 67108864u;
  }
  static void set_has_crop_link(HasBits* has_bits) {
    (*has_bits)[2] |= 32768u;
  }
  static void set_has_is_reverse(HasBits* has_bits) {
    (*has_bits)[2] |= 65536u;
  }
  static void set_has_voice_changer(HasBits* has_bits) {
    (*has_bits)[2] |= 131072u;
  }
  static void set_has_vignette(HasBits* has_bits) {
    (*has_bits)[2] |= 4194304u;
  }
  static void set_has_pan_left(HasBits* has_bits) {
    (*has_bits)[2] |= 262144u;
  }
  static void set_has_pan_right(HasBits* has_bits) {
    (*has_bits)[2] |= 524288u;
  }
  static void set_has_compressor(HasBits* has_bits) {
    (*has_bits)[2] |= 1048576u;
  }
  static void set_has_pitch_factor(HasBits* has_bits) {
    (*has_bits)[2] |= 2097152u;
  }
  static void set_has_clip_name(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ios_media_asset_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_keeppitch(HasBits* has_bits) {
    (*has_bits)[2] |= 8388608u;
  }
  static void set_has_useiframeonly(HasBits* has_bits) {
    (*has_bits)[2] |= 16777216u;
  }
  static void set_has_enhancedaudiofilter(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_equalizer(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::KMProto_KMProject_ClipRange& cliprange(const KMProto_KMProject_VisualClip* msg);
  static void set_has_cliprange(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_reverb(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::KMProto_KMProject_ColorAdjustment& coloradjustment(const KMProto_KMProject_VisualClip* msg);
  static void set_has_coloradjustment(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::KMProto_KMProject_ColorFilter& colorfilter(const KMProto_KMProject_VisualClip* msg);
  static void set_has_colorfilter(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

const ::KMProto_KMProject_TimelineItem&
KMProto_KMProject_VisualClip::_Internal::unattached_transition(const KMProto_KMProject_VisualClip* msg) {
  return *msg->unattached_transition_;
}
const ::KMProto_KMProject_Matrix&
KMProto_KMProject_VisualClip::_Internal::start_matrix(const KMProto_KMProject_VisualClip* msg) {
  return *msg->start_matrix_;
}
const ::KMProto_KMProject_Matrix&
KMProto_KMProject_VisualClip::_Internal::end_matrix(const KMProto_KMProject_VisualClip* msg) {
  return *msg->end_matrix_;
}
const ::KMProto_KMProject_ColorEffect&
KMProto_KMProject_VisualClip::_Internal::color_effect(const KMProto_KMProject_VisualClip* msg) {
  return *msg->color_effect_;
}
const ::KMProto_KMProject_StringHashMap&
KMProto_KMProject_VisualClip::_Internal::effect_options(const KMProto_KMProject_VisualClip* msg) {
  return *msg->effect_options_;
}
const ::KMProto_KMProject_ClipRange&
KMProto_KMProject_VisualClip::_Internal::cliprange(const KMProto_KMProject_VisualClip* msg) {
  return *msg->cliprange_;
}
const ::KMProto_KMProject_ColorAdjustment&
KMProto_KMProject_VisualClip::_Internal::coloradjustment(const KMProto_KMProject_VisualClip* msg) {
  return *msg->coloradjustment_;
}
const ::KMProto_KMProject_ColorFilter&
KMProto_KMProject_VisualClip::_Internal::colorfilter(const KMProto_KMProject_VisualClip* msg) {
  return *msg->colorfilter_;
}
KMProto_KMProject_VisualClip::KMProto_KMProject_VisualClip(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  volume_envelope_time_(arena),
  volume_envelope_level_(arena),
  effectoption_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KMProto.KMProject.VisualClip)
}
KMProto_KMProject_VisualClip::KMProto_KMProject_VisualClip(const KMProto_KMProject_VisualClip& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      volume_envelope_time_(from.volume_envelope_time_),
      volume_envelope_level_(from.volume_envelope_level_),
      effectoption_(from.effectoption_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  capture_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_capture_filename()) {
    capture_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_capture_filename(), 
      GetArena());
  }
  title_effect_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_title_effect_id()) {
    title_effect_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title_effect_id(), 
      GetArena());
  }
  thumb_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_thumb_path()) {
    thumb_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_thumb_path(), 
      GetArena());
  }
  media_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_media_path()) {
    media_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_media_path(), 
      GetArena());
  }
  media_msid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_media_msid()) {
    media_msid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_media_msid(), 
      GetArena());
  }
  clip_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clip_name()) {
    clip_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clip_name(), 
      GetArena());
  }
  ios_media_asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ios_media_asset_id()) {
    ios_media_asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ios_media_asset_id(), 
      GetArena());
  }
  enhancedaudiofilter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enhancedaudiofilter()) {
    enhancedaudiofilter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_enhancedaudiofilter(), 
      GetArena());
  }
  equalizer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_equalizer()) {
    equalizer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_equalizer(), 
      GetArena());
  }
  reverb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reverb()) {
    reverb_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reverb(), 
      GetArena());
  }
  if (from._internal_has_start_matrix()) {
    start_matrix_ = new ::KMProto_KMProject_Matrix(*from.start_matrix_);
  } else {
    start_matrix_ = nullptr;
  }
  if (from._internal_has_end_matrix()) {
    end_matrix_ = new ::KMProto_KMProject_Matrix(*from.end_matrix_);
  } else {
    end_matrix_ = nullptr;
  }
  if (from._internal_has_color_effect()) {
    color_effect_ = new ::KMProto_KMProject_ColorEffect(*from.color_effect_);
  } else {
    color_effect_ = nullptr;
  }
  if (from._internal_has_effect_options()) {
    effect_options_ = new ::KMProto_KMProject_StringHashMap(*from.effect_options_);
  } else {
    effect_options_ = nullptr;
  }
  if (from._internal_has_unattached_transition()) {
    unattached_transition_ = new ::KMProto_KMProject_TimelineItem(*from.unattached_transition_);
  } else {
    unattached_transition_ = nullptr;
  }
  if (from._internal_has_cliprange()) {
    cliprange_ = new ::KMProto_KMProject_ClipRange(*from.cliprange_);
  } else {
    cliprange_ = nullptr;
  }
  if (from._internal_has_coloradjustment()) {
    coloradjustment_ = new ::KMProto_KMProject_ColorAdjustment(*from.coloradjustment_);
  } else {
    coloradjustment_ = nullptr;
  }
  if (from._internal_has_colorfilter()) {
    colorfilter_ = new ::KMProto_KMProject_ColorFilter(*from.colorfilter_);
  } else {
    colorfilter_ = nullptr;
  }
  ::memcpy(&face_bounds_left_, &from.face_bounds_left_,
    static_cast<size_t>(reinterpret_cast<char*>(&clip_state_) -
    reinterpret_cast<char*>(&face_bounds_left_)) + sizeof(clip_state_));
  // @@protoc_insertion_point(copy_constructor:KMProto.KMProject.VisualClip)
}

void KMProto_KMProject_VisualClip::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KMProto_KMProject_GroupLayer_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  capture_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_effect_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  thumb_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  media_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  media_msid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clip_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ios_media_asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enhancedaudiofilter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  equalizer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reverb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&start_matrix_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&useiframeonly_) -
      reinterpret_cast<char*>(&start_matrix_)) + sizeof(useiframeonly_));
  auto_theme_effect_ = 1;
  clip_state_ = 1;
}

KMProto_KMProject_VisualClip::~KMProto_KMProject_VisualClip() {
  // @@protoc_insertion_point(destructor:KMProto.KMProject.VisualClip)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void KMProto_KMProject_VisualClip::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  capture_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_effect_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  thumb_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  media_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  media_msid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clip_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ios_media_asset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enhancedaudiofilter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  equalizer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reverb_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete start_matrix_;
  if (this != internal_default_instance()) delete end_matrix_;
  if (this != internal_default_instance()) delete color_effect_;
  if (this != internal_default_instance()) delete effect_options_;
  if (this != internal_default_instance()) delete unattached_transition_;
  if (this != internal_default_instance()) delete cliprange_;
  if (this != internal_default_instance()) delete coloradjustment_;
  if (this != internal_default_instance()) delete colorfilter_;
}

void KMProto_KMProject_VisualClip::ArenaDtor(void* object) {
  KMProto_KMProject_VisualClip* _this = reinterpret_cast< KMProto_KMProject_VisualClip* >(object);
  (void)_this;
}
void KMProto_KMProject_VisualClip::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KMProto_KMProject_VisualClip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KMProto_KMProject_VisualClip& KMProto_KMProject_VisualClip::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KMProto_KMProject_GroupLayer_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  return *internal_default_instance();
}


void KMProto_KMProject_VisualClip::Clear() {
// @@protoc_insertion_point(message_clear_start:KMProto.KMProject.VisualClip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  volume_envelope_time_.Clear();
  volume_envelope_level_.Clear();
  effectoption_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      capture_filename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      title_effect_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      thumb_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      media_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      media_msid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      clip_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      ios_media_asset_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      enhancedaudiofilter_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      equalizer_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      reverb_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(start_matrix_ != nullptr);
      start_matrix_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(end_matrix_ != nullptr);
      end_matrix_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(color_effect_ != nullptr);
      color_effect_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(effect_options_ != nullptr);
      effect_options_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(unattached_transition_ != nullptr);
      unattached_transition_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(cliprange_ != nullptr);
      cliprange_->Clear();
    }
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(coloradjustment_ != nullptr);
      coloradjustment_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(colorfilter_ != nullptr);
      colorfilter_->Clear();
    }
  }
  if (cached_has_bits & 0x00fc0000u) {
    ::memset(&face_bounds_left_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&start_position_left_) -
        reinterpret_cast<char*>(&face_bounds_left_)) + sizeof(start_position_left_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&start_position_bottom_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&face_bounds_set_) -
        reinterpret_cast<char*>(&start_position_bottom_)) + sizeof(face_bounds_set_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&abstract_crop_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rotated_end_position_left_) -
        reinterpret_cast<char*>(&abstract_crop_)) + sizeof(rotated_end_position_left_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&rotated_end_position_bottom_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trimmed_duration_) -
        reinterpret_cast<char*>(&rotated_end_position_bottom_)) + sizeof(trimmed_duration_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&pre_trimmed_duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&end_overlap_) -
        reinterpret_cast<char*>(&pre_trimmed_duration_)) + sizeof(end_overlap_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_image_) -
        reinterpret_cast<char*>(&width_)) + sizeof(is_image_));
  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&mute_audio_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&saturation_) -
        reinterpret_cast<char*>(&mute_audio_)) + sizeof(saturation_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&tintcolor_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&crop_link_) -
        reinterpret_cast<char*>(&tintcolor_)) + sizeof(crop_link_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&is_reverse_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&keeppitch_) -
        reinterpret_cast<char*>(&is_reverse_)) + sizeof(keeppitch_));
  }
  if (cached_has_bits & 0x07000000u) {
    useiframeonly_ = false;
    auto_theme_effect_ = 1;
    clip_state_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* KMProto_KMProject_VisualClip::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float face_bounds_left = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_face_bounds_left(&_has_bits_);
          face_bounds_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float face_bounds_top = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_face_bounds_top(&_has_bits_);
          face_bounds_top_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float face_bounds_right = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_face_bounds_right(&_has_bits_);
          face_bounds_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float face_bounds_bottom = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_face_bounds_bottom(&_has_bits_);
          face_bounds_bottom_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool face_bounds_set = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_face_bounds_set(&_has_bits_);
          face_bounds_set_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string capture_filename = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_capture_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 engine_clip_id = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_engine_clip_id(&_has_bits_);
          engine_clip_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool abstract_crop = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_abstract_crop(&_has_bits_);
          abstract_crop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 start_position_left = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_start_position_left(&_has_bits_);
          start_position_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 start_position_bottom = 109;
      case 109:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_start_position_bottom(&_has_bits_);
          start_position_bottom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 start_position_right = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_start_position_right(&_has_bits_);
          start_position_right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 start_position_top = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_start_position_top(&_has_bits_);
          start_position_top_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 end_position_left = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_end_position_left(&_has_bits_);
          end_position_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 end_position_bottom = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_end_position_bottom(&_has_bits_);
          end_position_bottom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 end_position_right = 114;
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_end_position_right(&_has_bits_);
          end_position_right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 end_position_top = 115;
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_end_position_top(&_has_bits_);
          end_position_top_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 rotated_start_position_left = 116;
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_rotated_start_position_left(&_has_bits_);
          rotated_start_position_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 rotated_start_position_bottom = 117;
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_rotated_start_position_bottom(&_has_bits_);
          rotated_start_position_bottom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 rotated_start_position_right = 118;
      case 118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_rotated_start_position_right(&_has_bits_);
          rotated_start_position_right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 rotated_start_position_top = 119;
      case 119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_rotated_start_position_top(&_has_bits_);
          rotated_start_position_top_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 rotated_end_position_left = 120;
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_rotated_end_position_left(&_has_bits_);
          rotated_end_position_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 rotated_end_position_bottom = 121;
      case 121:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_rotated_end_position_bottom(&_has_bits_);
          rotated_end_position_bottom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 rotated_end_position_right = 122;
      case 122:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_rotated_end_position_right(&_has_bits_);
          rotated_end_position_right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 rotated_end_position_top = 123;
      case 123:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_rotated_end_position_top(&_has_bits_);
          rotated_end_position_top_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 rotation = 124;
      case 124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_rotation(&_has_bits_);
          rotation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool fliph = 125;
      case 125:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_fliph(&_has_bits_);
          fliph_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool flipv = 126;
      case 126:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_flipv(&_has_bits_);
          flipv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 diff_av_duration = 127;
      case 127:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_diff_av_duration(&_has_bits_);
          diff_av_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 trim_time_start = 128;
      case 128:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_trim_time_start(&_has_bits_);
          trim_time_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 trim_time_end = 129;
      case 129:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_trim_time_end(&_has_bits_);
          trim_time_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 trimmed_duration = 130;
      case 130:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_trimmed_duration(&_has_bits_);
          trimmed_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pre_trimmed_duration = 131;
      case 131:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_pre_trimmed_duration(&_has_bits_);
          pre_trimmed_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string title_effect_id = 132;
      case 132:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_title_effect_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 title_start_time = 133;
      case 133:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_title_start_time(&_has_bits_);
          title_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 title_end_time = 134;
      case 134:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_title_end_time(&_has_bits_);
          title_end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 duration = 135;
      case 135:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_duration(&_has_bits_);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 audio_duration = 136;
      case 136:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_audio_duration(&_has_bits_);
          audio_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 video_duration = 137;
      case 137:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_video_duration(&_has_bits_);
          video_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 start_overlap = 138;
      case 138:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_start_overlap(&_has_bits_);
          start_overlap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 end_overlap = 139;
      case 139:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_end_overlap(&_has_bits_);
          end_overlap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 width = 140;
      case 140:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_width(&_has_bits_);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 height = 141;
      case 141:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_height(&_has_bits_);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 original_width = 142;
      case 142:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_original_width(&_has_bits_);
          original_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 original_height = 143;
      case 143:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_original_height(&_has_bits_);
          original_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 clip_volume = 144;
      case 144:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_clip_volume(&_has_bits_);
          clip_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 music_volume = 145;
      case 145:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_music_volume(&_has_bits_);
          music_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KMProto.KMProject.TitleStyle title_style = 146;
      case 146:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KMProto_KMProject_TitleStyle_IsValid(val))) {
            _internal_set_title_style(static_cast<::KMProto_KMProject_TitleStyle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(146, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool is_image = 147;
      case 147:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_is_image(&_has_bits_);
          is_image_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool mute_audio = 148;
      case 148:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_mute_audio(&_has_bits_);
          mute_audio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool mute_music = 149;
      case 149:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_mute_music(&_has_bits_);
          mute_music_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_audio = 150;
      case 150:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_has_audio(&_has_bits_);
          has_audio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_video = 151;
      case 151:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_has_video(&_has_bits_);
          has_video_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string thumb_path = 152;
      case 152:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_thumb_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string media_path = 153;
      case 153:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_media_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 transition_item_uuid_lsb = 154;
      case 154:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_transition_item_uuid_lsb(&_has_bits_);
          transition_item_uuid_lsb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 transition_item_uuid_msb = 155;
      case 155:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_transition_item_uuid_msb(&_has_bits_);
          transition_item_uuid_msb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 brightness = 156;
      case 156:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_brightness(&_has_bits_);
          brightness_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 contrast = 157;
      case 157:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_contrast(&_has_bits_);
          contrast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 saturation = 158;
      case 158:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_saturation(&_has_bits_);
          saturation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tintcolor = 159;
      case 159:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_tintcolor(&_has_bits_);
          tintcolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 effect_start_time = 160;
      case 160:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_effect_start_time(&_has_bits_);
          effect_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 effect_end_time = 161;
      case 161:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_effect_end_time(&_has_bits_);
          effect_end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KMProto.KMProject.Matrix start_matrix = 162;
      case 162:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_matrix(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KMProto.KMProject.Matrix end_matrix = 163;
      case 163:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_matrix(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KMProto.KMProject.ThemeEffectType auto_theme_effect = 164;
      case 164:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KMProto_KMProject_ThemeEffectType_IsValid(val))) {
            _internal_set_auto_theme_effect(static_cast<::KMProto_KMProject_ThemeEffectType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(164, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated int32 volume_envelope_time = 165 [packed = true];
      case 165:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_volume_envelope_time(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_volume_envelope_time(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 volume_envelope_level = 166 [packed = true];
      case 166:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_volume_envelope_level(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_volume_envelope_level(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float clip_width = 167;
      case 167:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_clip_width(&_has_bits_);
          clip_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 playback_speed = 168;
      case 168:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_playback_speed(&_has_bits_);
          playback_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KMProto.KMProject.ColorEffect color_effect = 169;
      case 169:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_color_effect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KMProto.KMProject.StringHashMap effect_options = 170;
      case 170:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_effect_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KMProto.KMProject.TimelineItem unattached_transition = 171;
      case 171:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_unattached_transition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool transcode_approved = 172;
      case 172:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_transcode_approved(&_has_bits_);
          transcode_approved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KMProto.KMProject.ClipState clip_state = 173;
      case 173:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KMProto_KMProject_ClipState_IsValid(val))) {
            _internal_set_clip_state(static_cast<::KMProto_KMProject_ClipState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(173, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string media_msid = 174;
      case 174:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_media_msid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool crop_link = 175;
      case 175:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_crop_link(&_has_bits_);
          crop_link_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_reverse = 177;
      case 177:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_is_reverse(&_has_bits_);
          is_reverse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 voice_changer = 178;
      case 178:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_voice_changer(&_has_bits_);
          voice_changer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool vignette = 179;
      case 179:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_vignette(&_has_bits_);
          vignette_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pan_left = 180;
      case 180:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_pan_left(&_has_bits_);
          pan_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pan_right = 181;
      case 181:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_pan_right(&_has_bits_);
          pan_right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 compressor = 182;
      case 182:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_compressor(&_has_bits_);
          compressor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pitch_factor = 183;
      case 183:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_pitch_factor(&_has_bits_);
          pitch_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string clip_name = 184;
      case 184:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_clip_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ios_media_asset_id = 185;
      case 185:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_ios_media_asset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool keepPitch = 186;
      case 186:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_keeppitch(&_has_bits_);
          keeppitch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool useIFrameOnly = 187;
      case 187:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_useiframeonly(&_has_bits_);
          useiframeonly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string enhancedAudioFilter = 188;
      case 188:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_enhancedaudiofilter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string equalizer = 189;
      case 189:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          auto str = _internal_mutable_equalizer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KMProto.KMProject.ClipRange clipRange = 190;
      case 190:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_cliprange(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string reverb = 191;
      case 191:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          auto str = _internal_mutable_reverb();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KMProto.KMProject.ColorAdjustment colorAdjustment = 192;
      case 192:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_coloradjustment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KMProto.KMProject.ColorFilter colorFilter = 193;
      case 193:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_colorfilter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KMProto.KMProject.EffectOptionItem effectOption = 194;
      case 194:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_effectoption(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1554>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KMProto_KMProject_VisualClip::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KMProto.KMProject.VisualClip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float face_bounds_left = 100;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(100, this->_internal_face_bounds_left(), target);
  }

  // optional float face_bounds_top = 101;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(101, this->_internal_face_bounds_top(), target);
  }

  // optional float face_bounds_right = 102;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(102, this->_internal_face_bounds_right(), target);
  }

  // optional float face_bounds_bottom = 103;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(103, this->_internal_face_bounds_bottom(), target);
  }

  // optional bool face_bounds_set = 104;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(104, this->_internal_face_bounds_set(), target);
  }

  // optional string capture_filename = 105;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        105, this->_internal_capture_filename(), target);
  }

  // optional int32 engine_clip_id = 106;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(106, this->_internal_engine_clip_id(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool abstract_crop = 107;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(107, this->_internal_abstract_crop(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 start_position_left = 108;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(108, this->_internal_start_position_left(), target);
  }

  // optional int32 start_position_bottom = 109;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(109, this->_internal_start_position_bottom(), target);
  }

  // optional int32 start_position_right = 110;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(110, this->_internal_start_position_right(), target);
  }

  // optional int32 start_position_top = 111;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(111, this->_internal_start_position_top(), target);
  }

  // optional int32 end_position_left = 112;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(112, this->_internal_end_position_left(), target);
  }

  // optional int32 end_position_bottom = 113;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(113, this->_internal_end_position_bottom(), target);
  }

  // optional int32 end_position_right = 114;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(114, this->_internal_end_position_right(), target);
  }

  // optional int32 end_position_top = 115;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(115, this->_internal_end_position_top(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 rotated_start_position_left = 116;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(116, this->_internal_rotated_start_position_left(), target);
  }

  // optional int32 rotated_start_position_bottom = 117;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(117, this->_internal_rotated_start_position_bottom(), target);
  }

  // optional int32 rotated_start_position_right = 118;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(118, this->_internal_rotated_start_position_right(), target);
  }

  // optional int32 rotated_start_position_top = 119;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(119, this->_internal_rotated_start_position_top(), target);
  }

  // optional int32 rotated_end_position_left = 120;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(120, this->_internal_rotated_end_position_left(), target);
  }

  // optional int32 rotated_end_position_bottom = 121;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(121, this->_internal_rotated_end_position_bottom(), target);
  }

  // optional int32 rotated_end_position_right = 122;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(122, this->_internal_rotated_end_position_right(), target);
  }

  // optional int32 rotated_end_position_top = 123;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(123, this->_internal_rotated_end_position_top(), target);
  }

  // optional int32 rotation = 124;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(124, this->_internal_rotation(), target);
  }

  // optional bool fliph = 125;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(125, this->_internal_fliph(), target);
  }

  // optional bool flipv = 126;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(126, this->_internal_flipv(), target);
  }

  // optional int32 diff_av_duration = 127;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(127, this->_internal_diff_av_duration(), target);
  }

  // optional int32 trim_time_start = 128;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(128, this->_internal_trim_time_start(), target);
  }

  // optional int32 trim_time_end = 129;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(129, this->_internal_trim_time_end(), target);
  }

  // optional int32 trimmed_duration = 130;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(130, this->_internal_trimmed_duration(), target);
  }

  // optional int32 pre_trimmed_duration = 131;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(131, this->_internal_pre_trimmed_duration(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string title_effect_id = 132;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        132, this->_internal_title_effect_id(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 title_start_time = 133;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(133, this->_internal_title_start_time(), target);
  }

  // optional int32 title_end_time = 134;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(134, this->_internal_title_end_time(), target);
  }

  // optional int32 duration = 135;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(135, this->_internal_duration(), target);
  }

  // optional int32 audio_duration = 136;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(136, this->_internal_audio_duration(), target);
  }

  // optional int32 video_duration = 137;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(137, this->_internal_video_duration(), target);
  }

  // optional int32 start_overlap = 138;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(138, this->_internal_start_overlap(), target);
  }

  // optional int32 end_overlap = 139;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(139, this->_internal_end_overlap(), target);
  }

  // optional int32 width = 140;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(140, this->_internal_width(), target);
  }

  // optional int32 height = 141;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(141, this->_internal_height(), target);
  }

  // optional int32 original_width = 142;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(142, this->_internal_original_width(), target);
  }

  // optional int32 original_height = 143;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(143, this->_internal_original_height(), target);
  }

  // optional int32 clip_volume = 144;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(144, this->_internal_clip_volume(), target);
  }

  // optional int32 music_volume = 145;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(145, this->_internal_music_volume(), target);
  }

  // optional .KMProto.KMProject.TitleStyle title_style = 146;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      146, this->_internal_title_style(), target);
  }

  // optional bool is_image = 147;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(147, this->_internal_is_image(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool mute_audio = 148;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(148, this->_internal_mute_audio(), target);
  }

  // optional bool mute_music = 149;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(149, this->_internal_mute_music(), target);
  }

  // optional bool has_audio = 150;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(150, this->_internal_has_audio(), target);
  }

  // optional bool has_video = 151;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(151, this->_internal_has_video(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string thumb_path = 152;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        152, this->_internal_thumb_path(), target);
  }

  // optional string media_path = 153;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        153, this->_internal_media_path(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional uint64 transition_item_uuid_lsb = 154;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(154, this->_internal_transition_item_uuid_lsb(), target);
  }

  // optional uint64 transition_item_uuid_msb = 155;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(155, this->_internal_transition_item_uuid_msb(), target);
  }

  // optional int32 brightness = 156;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(156, this->_internal_brightness(), target);
  }

  // optional int32 contrast = 157;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(157, this->_internal_contrast(), target);
  }

  // optional int32 saturation = 158;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(158, this->_internal_saturation(), target);
  }

  // optional int32 tintcolor = 159;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(159, this->_internal_tintcolor(), target);
  }

  // optional int32 effect_start_time = 160;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(160, this->_internal_effect_start_time(), target);
  }

  // optional int32 effect_end_time = 161;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(161, this->_internal_effect_end_time(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .KMProto.KMProject.Matrix start_matrix = 162;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        162, _Internal::start_matrix(this), target, stream);
  }

  // optional .KMProto.KMProject.Matrix end_matrix = 163;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        163, _Internal::end_matrix(this), target, stream);
  }

  cached_has_bits = _has_bits_[2];
  // optional .KMProto.KMProject.ThemeEffectType auto_theme_effect = 164;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      164, this->_internal_auto_theme_effect(), target);
  }

  // repeated int32 volume_envelope_time = 165 [packed = true];
  {
    int byte_size = _volume_envelope_time_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          165, _internal_volume_envelope_time(), byte_size, target);
    }
  }

  // repeated int32 volume_envelope_level = 166 [packed = true];
  {
    int byte_size = _volume_envelope_level_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          166, _internal_volume_envelope_level(), byte_size, target);
    }
  }

  // optional float clip_width = 167;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(167, this->_internal_clip_width(), target);
  }

  // optional int32 playback_speed = 168;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(168, this->_internal_playback_speed(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .KMProto.KMProject.ColorEffect color_effect = 169;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        169, _Internal::color_effect(this), target, stream);
  }

  // optional .KMProto.KMProject.StringHashMap effect_options = 170;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        170, _Internal::effect_options(this), target, stream);
  }

  // optional .KMProto.KMProject.TimelineItem unattached_transition = 171;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        171, _Internal::unattached_transition(this), target, stream);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool transcode_approved = 172;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(172, this->_internal_transcode_approved(), target);
  }

  // optional .KMProto.KMProject.ClipState clip_state = 173;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      173, this->_internal_clip_state(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string media_msid = 174;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteStringMaybeAliased(
        174, this->_internal_media_msid(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool crop_link = 175;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(175, this->_internal_crop_link(), target);
  }

  // optional bool is_reverse = 177;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(177, this->_internal_is_reverse(), target);
  }

  // optional int32 voice_changer = 178;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(178, this->_internal_voice_changer(), target);
  }

  // optional bool vignette = 179;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(179, this->_internal_vignette(), target);
  }

  // optional int32 pan_left = 180;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(180, this->_internal_pan_left(), target);
  }

  // optional int32 pan_right = 181;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(181, this->_internal_pan_right(), target);
  }

  // optional int32 compressor = 182;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(182, this->_internal_compressor(), target);
  }

  // optional int32 pitch_factor = 183;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(183, this->_internal_pitch_factor(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string clip_name = 184;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteStringMaybeAliased(
        184, this->_internal_clip_name(), target);
  }

  // optional string ios_media_asset_id = 185;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteStringMaybeAliased(
        185, this->_internal_ios_media_asset_id(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool keepPitch = 186;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(186, this->_internal_keeppitch(), target);
  }

  // optional bool useIFrameOnly = 187;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(187, this->_internal_useiframeonly(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string enhancedAudioFilter = 188;
  if (cached_has_bits & 0x00000080u) {
    target = stream->WriteStringMaybeAliased(
        188, this->_internal_enhancedaudiofilter(), target);
  }

  // optional string equalizer = 189;
  if (cached_has_bits & 0x00000100u) {
    target = stream->WriteStringMaybeAliased(
        189, this->_internal_equalizer(), target);
  }

  // optional .KMProto.KMProject.ClipRange clipRange = 190;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        190, _Internal::cliprange(this), target, stream);
  }

  // optional string reverb = 191;
  if (cached_has_bits & 0x00000200u) {
    target = stream->WriteStringMaybeAliased(
        191, this->_internal_reverb(), target);
  }

  // optional .KMProto.KMProject.ColorAdjustment colorAdjustment = 192;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        192, _Internal::coloradjustment(this), target, stream);
  }

  // optional .KMProto.KMProject.ColorFilter colorFilter = 193;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        193, _Internal::colorfilter(this), target, stream);
  }

  // repeated .KMProto.KMProject.EffectOptionItem effectOption = 194;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_effectoption_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(194, this->_internal_effectoption(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KMProto.KMProject.VisualClip)
  return target;
}

size_t KMProto_KMProject_VisualClip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KMProto.KMProject.VisualClip)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 volume_envelope_time = 165 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->volume_envelope_time_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _volume_envelope_time_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 volume_envelope_level = 166 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->volume_envelope_level_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _volume_envelope_level_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .KMProto.KMProject.EffectOptionItem effectOption = 194;
  total_size += 2UL * this->_internal_effectoption_size();
  for (const auto& msg : this->effectoption_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string capture_filename = 105;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_capture_filename());
    }

    // optional string title_effect_id = 132;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title_effect_id());
    }

    // optional string thumb_path = 152;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thumb_path());
    }

    // optional string media_path = 153;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_media_path());
    }

    // optional string media_msid = 174;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_media_msid());
    }

    // optional string clip_name = 184;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_clip_name());
    }

    // optional string ios_media_asset_id = 185;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ios_media_asset_id());
    }

    // optional string enhancedAudioFilter = 188;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_enhancedaudiofilter());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string equalizer = 189;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_equalizer());
    }

    // optional string reverb = 191;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_reverb());
    }

    // optional .KMProto.KMProject.Matrix start_matrix = 162;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *start_matrix_);
    }

    // optional .KMProto.KMProject.Matrix end_matrix = 163;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *end_matrix_);
    }

    // optional .KMProto.KMProject.ColorEffect color_effect = 169;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *color_effect_);
    }

    // optional .KMProto.KMProject.StringHashMap effect_options = 170;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *effect_options_);
    }

    // optional .KMProto.KMProject.TimelineItem unattached_transition = 171;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *unattached_transition_);
    }

    // optional .KMProto.KMProject.ClipRange clipRange = 190;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cliprange_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .KMProto.KMProject.ColorAdjustment colorAdjustment = 192;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *coloradjustment_);
    }

    // optional .KMProto.KMProject.ColorFilter colorFilter = 193;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *colorfilter_);
    }

    // optional float face_bounds_left = 100;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional float face_bounds_top = 101;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

    // optional float face_bounds_right = 102;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 4;
    }

    // optional float face_bounds_bottom = 103;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 4;
    }

    // optional int32 engine_clip_id = 106;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_engine_clip_id());
    }

    // optional int32 start_position_left = 108;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_start_position_left());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int32 start_position_bottom = 109;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_start_position_bottom());
    }

    // optional int32 start_position_right = 110;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_start_position_right());
    }

    // optional int32 start_position_top = 111;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_start_position_top());
    }

    // optional int32 end_position_left = 112;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_end_position_left());
    }

    // optional int32 end_position_bottom = 113;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_end_position_bottom());
    }

    // optional int32 end_position_right = 114;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_end_position_right());
    }

    // optional int32 end_position_top = 115;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_end_position_top());
    }

    // optional bool face_bounds_set = 104;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool abstract_crop = 107;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool fliph = 125;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional bool flipv = 126;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional int32 rotated_start_position_left = 116;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_rotated_start_position_left());
    }

    // optional int32 rotated_start_position_bottom = 117;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_rotated_start_position_bottom());
    }

    // optional int32 rotated_start_position_right = 118;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_rotated_start_position_right());
    }

    // optional int32 rotated_start_position_top = 119;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_rotated_start_position_top());
    }

    // optional int32 rotated_end_position_left = 120;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_rotated_end_position_left());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 rotated_end_position_bottom = 121;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_rotated_end_position_bottom());
    }

    // optional int32 rotated_end_position_right = 122;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_rotated_end_position_right());
    }

    // optional int32 rotated_end_position_top = 123;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_rotated_end_position_top());
    }

    // optional int32 rotation = 124;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_rotation());
    }

    // optional int32 diff_av_duration = 127;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_diff_av_duration());
    }

    // optional int32 trim_time_start = 128;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_trim_time_start());
    }

    // optional int32 trim_time_end = 129;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_trim_time_end());
    }

    // optional int32 trimmed_duration = 130;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_trimmed_duration());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int32 pre_trimmed_duration = 131;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_pre_trimmed_duration());
    }

    // optional int32 title_start_time = 133;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_title_start_time());
    }

    // optional int32 title_end_time = 134;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_title_end_time());
    }

    // optional int32 duration = 135;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_duration());
    }

    // optional int32 audio_duration = 136;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_audio_duration());
    }

    // optional int32 video_duration = 137;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_video_duration());
    }

    // optional int32 start_overlap = 138;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_start_overlap());
    }

    // optional int32 end_overlap = 139;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_end_overlap());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int32 width = 140;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_width());
    }

    // optional int32 height = 141;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_height());
    }

    // optional int32 original_width = 142;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_original_width());
    }

    // optional int32 original_height = 143;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_original_height());
    }

    // optional int32 clip_volume = 144;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_clip_volume());
    }

    // optional int32 music_volume = 145;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_music_volume());
    }

    // optional .KMProto.KMProject.TitleStyle title_style = 146;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_title_style());
    }

    // optional bool is_image = 147;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool mute_audio = 148;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool mute_music = 149;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional bool has_audio = 150;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional int32 brightness = 156;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_brightness());
    }

    // optional uint64 transition_item_uuid_lsb = 154;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_transition_item_uuid_lsb());
    }

    // optional uint64 transition_item_uuid_msb = 155;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_transition_item_uuid_msb());
    }

    // optional int32 contrast = 157;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_contrast());
    }

    // optional int32 saturation = 158;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_saturation());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 tintcolor = 159;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tintcolor());
    }

    // optional int32 effect_start_time = 160;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_effect_start_time());
    }

    // optional int32 effect_end_time = 161;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_effect_end_time());
    }

    // optional float clip_width = 167;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 4;
    }

    // optional int32 playback_speed = 168;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_playback_speed());
    }

    // optional bool has_video = 151;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional bool transcode_approved = 172;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool crop_link = 175;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool is_reverse = 177;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional int32 voice_changer = 178;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_voice_changer());
    }

    // optional int32 pan_left = 180;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_pan_left());
    }

    // optional int32 pan_right = 181;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_pan_right());
    }

    // optional int32 compressor = 182;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_compressor());
    }

    // optional int32 pitch_factor = 183;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_pitch_factor());
    }

    // optional bool vignette = 179;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool keepPitch = 186;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x07000000u) {
    // optional bool useIFrameOnly = 187;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional .KMProto.KMProject.ThemeEffectType auto_theme_effect = 164;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_auto_theme_effect());
    }

    // optional .KMProto.KMProject.ClipState clip_state = 173;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_clip_state());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KMProto_KMProject_VisualClip::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const KMProto_KMProject_VisualClip*>(
      &from));
}

void KMProto_KMProject_VisualClip::MergeFrom(const KMProto_KMProject_VisualClip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KMProto.KMProject.VisualClip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  volume_envelope_time_.MergeFrom(from.volume_envelope_time_);
  volume_envelope_level_.MergeFrom(from.volume_envelope_level_);
  effectoption_.MergeFrom(from.effectoption_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_capture_filename(from._internal_capture_filename());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_title_effect_id(from._internal_title_effect_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_thumb_path(from._internal_thumb_path());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_media_path(from._internal_media_path());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_media_msid(from._internal_media_msid());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_clip_name(from._internal_clip_name());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_ios_media_asset_id(from._internal_ios_media_asset_id());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_enhancedaudiofilter(from._internal_enhancedaudiofilter());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_equalizer(from._internal_equalizer());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_reverb(from._internal_reverb());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_start_matrix()->::KMProto_KMProject_Matrix::MergeFrom(from._internal_start_matrix());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_end_matrix()->::KMProto_KMProject_Matrix::MergeFrom(from._internal_end_matrix());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_color_effect()->::KMProto_KMProject_ColorEffect::MergeFrom(from._internal_color_effect());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_effect_options()->::KMProto_KMProject_StringHashMap::MergeFrom(from._internal_effect_options());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_unattached_transition()->::KMProto_KMProject_TimelineItem::MergeFrom(from._internal_unattached_transition());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_cliprange()->::KMProto_KMProject_ClipRange::MergeFrom(from._internal_cliprange());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_coloradjustment()->::KMProto_KMProject_ColorAdjustment::MergeFrom(from._internal_coloradjustment());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_colorfilter()->::KMProto_KMProject_ColorFilter::MergeFrom(from._internal_colorfilter());
    }
    if (cached_has_bits & 0x00040000u) {
      face_bounds_left_ = from.face_bounds_left_;
    }
    if (cached_has_bits & 0x00080000u) {
      face_bounds_top_ = from.face_bounds_top_;
    }
    if (cached_has_bits & 0x00100000u) {
      face_bounds_right_ = from.face_bounds_right_;
    }
    if (cached_has_bits & 0x00200000u) {
      face_bounds_bottom_ = from.face_bounds_bottom_;
    }
    if (cached_has_bits & 0x00400000u) {
      engine_clip_id_ = from.engine_clip_id_;
    }
    if (cached_has_bits & 0x00800000u) {
      start_position_left_ = from.start_position_left_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      start_position_bottom_ = from.start_position_bottom_;
    }
    if (cached_has_bits & 0x02000000u) {
      start_position_right_ = from.start_position_right_;
    }
    if (cached_has_bits & 0x04000000u) {
      start_position_top_ = from.start_position_top_;
    }
    if (cached_has_bits & 0x08000000u) {
      end_position_left_ = from.end_position_left_;
    }
    if (cached_has_bits & 0x10000000u) {
      end_position_bottom_ = from.end_position_bottom_;
    }
    if (cached_has_bits & 0x20000000u) {
      end_position_right_ = from.end_position_right_;
    }
    if (cached_has_bits & 0x40000000u) {
      end_position_top_ = from.end_position_top_;
    }
    if (cached_has_bits & 0x80000000u) {
      face_bounds_set_ = from.face_bounds_set_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      abstract_crop_ = from.abstract_crop_;
    }
    if (cached_has_bits & 0x00000002u) {
      fliph_ = from.fliph_;
    }
    if (cached_has_bits & 0x00000004u) {
      flipv_ = from.flipv_;
    }
    if (cached_has_bits & 0x00000008u) {
      rotated_start_position_left_ = from.rotated_start_position_left_;
    }
    if (cached_has_bits & 0x00000010u) {
      rotated_start_position_bottom_ = from.rotated_start_position_bottom_;
    }
    if (cached_has_bits & 0x00000020u) {
      rotated_start_position_right_ = from.rotated_start_position_right_;
    }
    if (cached_has_bits & 0x00000040u) {
      rotated_start_position_top_ = from.rotated_start_position_top_;
    }
    if (cached_has_bits & 0x00000080u) {
      rotated_end_position_left_ = from.rotated_end_position_left_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      rotated_end_position_bottom_ = from.rotated_end_position_bottom_;
    }
    if (cached_has_bits & 0x00000200u) {
      rotated_end_position_right_ = from.rotated_end_position_right_;
    }
    if (cached_has_bits & 0x00000400u) {
      rotated_end_position_top_ = from.rotated_end_position_top_;
    }
    if (cached_has_bits & 0x00000800u) {
      rotation_ = from.rotation_;
    }
    if (cached_has_bits & 0x00001000u) {
      diff_av_duration_ = from.diff_av_duration_;
    }
    if (cached_has_bits & 0x00002000u) {
      trim_time_start_ = from.trim_time_start_;
    }
    if (cached_has_bits & 0x00004000u) {
      trim_time_end_ = from.trim_time_end_;
    }
    if (cached_has_bits & 0x00008000u) {
      trimmed_duration_ = from.trimmed_duration_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      pre_trimmed_duration_ = from.pre_trimmed_duration_;
    }
    if (cached_has_bits & 0x00020000u) {
      title_start_time_ = from.title_start_time_;
    }
    if (cached_has_bits & 0x00040000u) {
      title_end_time_ = from.title_end_time_;
    }
    if (cached_has_bits & 0x00080000u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00100000u) {
      audio_duration_ = from.audio_duration_;
    }
    if (cached_has_bits & 0x00200000u) {
      video_duration_ = from.video_duration_;
    }
    if (cached_has_bits & 0x00400000u) {
      start_overlap_ = from.start_overlap_;
    }
    if (cached_has_bits & 0x00800000u) {
      end_overlap_ = from.end_overlap_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x02000000u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x04000000u) {
      original_width_ = from.original_width_;
    }
    if (cached_has_bits & 0x08000000u) {
      original_height_ = from.original_height_;
    }
    if (cached_has_bits & 0x10000000u) {
      clip_volume_ = from.clip_volume_;
    }
    if (cached_has_bits & 0x20000000u) {
      music_volume_ = from.music_volume_;
    }
    if (cached_has_bits & 0x40000000u) {
      title_style_ = from.title_style_;
    }
    if (cached_has_bits & 0x80000000u) {
      is_image_ = from.is_image_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mute_audio_ = from.mute_audio_;
    }
    if (cached_has_bits & 0x00000002u) {
      mute_music_ = from.mute_music_;
    }
    if (cached_has_bits & 0x00000004u) {
      has_audio_ = from.has_audio_;
    }
    if (cached_has_bits & 0x00000008u) {
      brightness_ = from.brightness_;
    }
    if (cached_has_bits & 0x00000010u) {
      transition_item_uuid_lsb_ = from.transition_item_uuid_lsb_;
    }
    if (cached_has_bits & 0x00000020u) {
      transition_item_uuid_msb_ = from.transition_item_uuid_msb_;
    }
    if (cached_has_bits & 0x00000040u) {
      contrast_ = from.contrast_;
    }
    if (cached_has_bits & 0x00000080u) {
      saturation_ = from.saturation_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      tintcolor_ = from.tintcolor_;
    }
    if (cached_has_bits & 0x00000200u) {
      effect_start_time_ = from.effect_start_time_;
    }
    if (cached_has_bits & 0x00000400u) {
      effect_end_time_ = from.effect_end_time_;
    }
    if (cached_has_bits & 0x00000800u) {
      clip_width_ = from.clip_width_;
    }
    if (cached_has_bits & 0x00001000u) {
      playback_speed_ = from.playback_speed_;
    }
    if (cached_has_bits & 0x00002000u) {
      has_video_ = from.has_video_;
    }
    if (cached_has_bits & 0x00004000u) {
      transcode_approved_ = from.transcode_approved_;
    }
    if (cached_has_bits & 0x00008000u) {
      crop_link_ = from.crop_link_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      is_reverse_ = from.is_reverse_;
    }
    if (cached_has_bits & 0x00020000u) {
      voice_changer_ = from.voice_changer_;
    }
    if (cached_has_bits & 0x00040000u) {
      pan_left_ = from.pan_left_;
    }
    if (cached_has_bits & 0x00080000u) {
      pan_right_ = from.pan_right_;
    }
    if (cached_has_bits & 0x00100000u) {
      compressor_ = from.compressor_;
    }
    if (cached_has_bits & 0x00200000u) {
      pitch_factor_ = from.pitch_factor_;
    }
    if (cached_has_bits & 0x00400000u) {
      vignette_ = from.vignette_;
    }
    if (cached_has_bits & 0x00800000u) {
      keeppitch_ = from.keeppitch_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x07000000u) {
    if (cached_has_bits & 0x01000000u) {
      useiframeonly_ = from.useiframeonly_;
    }
    if (cached_has_bits & 0x02000000u) {
      auto_theme_effect_ = from.auto_theme_effect_;
    }
    if (cached_has_bits & 0x04000000u) {
      clip_state_ = from.clip_state_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
}

void KMProto_KMProject_VisualClip::CopyFrom(const KMProto_KMProject_VisualClip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KMProto.KMProject.VisualClip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KMProto_KMProject_VisualClip::IsInitialized() const {
  return true;
}

void KMProto_KMProject_VisualClip::InternalSwap(KMProto_KMProject_VisualClip* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(_has_bits_[2], other->_has_bits_[2]);
  volume_envelope_time_.InternalSwap(&other->volume_envelope_time_);
  volume_envelope_level_.InternalSwap(&other->volume_envelope_level_);
  effectoption_.InternalSwap(&other->effectoption_);
  capture_filename_.Swap(&other->capture_filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  title_effect_id_.Swap(&other->title_effect_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  thumb_path_.Swap(&other->thumb_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  media_path_.Swap(&other->media_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  media_msid_.Swap(&other->media_msid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  clip_name_.Swap(&other->clip_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ios_media_asset_id_.Swap(&other->ios_media_asset_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  enhancedaudiofilter_.Swap(&other->enhancedaudiofilter_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  equalizer_.Swap(&other->equalizer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reverb_.Swap(&other->reverb_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KMProto_KMProject_VisualClip, useiframeonly_)
      + sizeof(KMProto_KMProject_VisualClip::useiframeonly_)
      - PROTOBUF_FIELD_OFFSET(KMProto_KMProject_VisualClip, start_matrix_)>(
          reinterpret_cast<char*>(&start_matrix_),
          reinterpret_cast<char*>(&other->start_matrix_));
  swap(auto_theme_effect_, other->auto_theme_effect_);
  swap(clip_state_, other->clip_state_);
}

std::string KMProto_KMProject_VisualClip::GetTypeName() const {
  return "KMProto.KMProject.VisualClip";
}


// ===================================================================

class KMProto_KMProject_ClipRange::_Internal {
 public:
  using HasBits = decltype(std::declval<KMProto_KMProject_ClipRange>()._has_bits_);
  static void set_has_sourcepath(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sourcephassetid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sourceragnestarttime(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sourceragneduration(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

KMProto_KMProject_ClipRange::KMProto_KMProject_ClipRange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KMProto.KMProject.ClipRange)
}
KMProto_KMProject_ClipRange::KMProto_KMProject_ClipRange(const KMProto_KMProject_ClipRange& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  sourcepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sourcepath()) {
    sourcepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sourcepath(), 
      GetArena());
  }
  sourcephassetid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sourcephassetid()) {
    sourcephassetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sourcephassetid(), 
      GetArena());
  }
  ::memcpy(&sourceragnestarttime_, &from.sourceragnestarttime_,
    static_cast<size_t>(reinterpret_cast<char*>(&sourceragneduration_) -
    reinterpret_cast<char*>(&sourceragnestarttime_)) + sizeof(sourceragneduration_));
  // @@protoc_insertion_point(copy_constructor:KMProto.KMProject.ClipRange)
}

void KMProto_KMProject_ClipRange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KMProto_KMProject_ClipRange_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  sourcepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sourcephassetid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&sourceragnestarttime_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sourceragneduration_) -
      reinterpret_cast<char*>(&sourceragnestarttime_)) + sizeof(sourceragneduration_));
}

KMProto_KMProject_ClipRange::~KMProto_KMProject_ClipRange() {
  // @@protoc_insertion_point(destructor:KMProto.KMProject.ClipRange)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void KMProto_KMProject_ClipRange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sourcepath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sourcephassetid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KMProto_KMProject_ClipRange::ArenaDtor(void* object) {
  KMProto_KMProject_ClipRange* _this = reinterpret_cast< KMProto_KMProject_ClipRange* >(object);
  (void)_this;
}
void KMProto_KMProject_ClipRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KMProto_KMProject_ClipRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KMProto_KMProject_ClipRange& KMProto_KMProject_ClipRange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KMProto_KMProject_ClipRange_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  return *internal_default_instance();
}


void KMProto_KMProject_ClipRange::Clear() {
// @@protoc_insertion_point(message_clear_start:KMProto.KMProject.ClipRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sourcepath_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      sourcephassetid_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&sourceragnestarttime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sourceragneduration_) -
        reinterpret_cast<char*>(&sourceragnestarttime_)) + sizeof(sourceragneduration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* KMProto_KMProject_ClipRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string sourcePath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sourcepath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sourcePhAssetId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sourcephassetid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 sourceRagneStartTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_sourceragnestarttime(&has_bits);
          sourceragnestarttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 sourceRagneDuration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_sourceragneduration(&has_bits);
          sourceragneduration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KMProto_KMProject_ClipRange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KMProto.KMProject.ClipRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string sourcePath = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sourcepath(), target);
  }

  // optional string sourcePhAssetId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sourcephassetid(), target);
  }

  // optional int64 sourceRagneStartTime = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_sourceragnestarttime(), target);
  }

  // optional int64 sourceRagneDuration = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_sourceragneduration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KMProto.KMProject.ClipRange)
  return target;
}

size_t KMProto_KMProject_ClipRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KMProto.KMProject.ClipRange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string sourcePath = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sourcepath());
    }

    // optional string sourcePhAssetId = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sourcephassetid());
    }

    // optional int64 sourceRagneStartTime = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_sourceragnestarttime());
    }

    // optional int64 sourceRagneDuration = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_sourceragneduration());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KMProto_KMProject_ClipRange::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const KMProto_KMProject_ClipRange*>(
      &from));
}

void KMProto_KMProject_ClipRange::MergeFrom(const KMProto_KMProject_ClipRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KMProto.KMProject.ClipRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sourcepath(from._internal_sourcepath());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_sourcephassetid(from._internal_sourcephassetid());
    }
    if (cached_has_bits & 0x00000004u) {
      sourceragnestarttime_ = from.sourceragnestarttime_;
    }
    if (cached_has_bits & 0x00000008u) {
      sourceragneduration_ = from.sourceragneduration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KMProto_KMProject_ClipRange::CopyFrom(const KMProto_KMProject_ClipRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KMProto.KMProject.ClipRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KMProto_KMProject_ClipRange::IsInitialized() const {
  return true;
}

void KMProto_KMProject_ClipRange::InternalSwap(KMProto_KMProject_ClipRange* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sourcepath_.Swap(&other->sourcepath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sourcephassetid_.Swap(&other->sourcephassetid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KMProto_KMProject_ClipRange, sourceragneduration_)
      + sizeof(KMProto_KMProject_ClipRange::sourceragneduration_)
      - PROTOBUF_FIELD_OFFSET(KMProto_KMProject_ClipRange, sourceragnestarttime_)>(
          reinterpret_cast<char*>(&sourceragnestarttime_),
          reinterpret_cast<char*>(&other->sourceragnestarttime_));
}

std::string KMProto_KMProject_ClipRange::GetTypeName() const {
  return "KMProto.KMProject.ClipRange";
}


// ===================================================================

class KMProto_KMProject_EffectOptionItem::_Internal {
 public:
  using HasBits = decltype(std::declval<KMProto_KMProject_EffectOptionItem>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_field_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_text_font(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

KMProto_KMProject_EffectOptionItem::KMProto_KMProject_EffectOptionItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KMProto.KMProject.EffectOptionItem)
}
KMProto_KMProject_EffectOptionItem::KMProto_KMProject_EffectOptionItem(const KMProto_KMProject_EffectOptionItem& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field_name()) {
    field_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_field_name(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  text_font_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text_font()) {
    text_font_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text_font(), 
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:KMProto.KMProject.EffectOptionItem)
}

void KMProto_KMProject_EffectOptionItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KMProto_KMProject_EffectOptionItem_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_font_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

KMProto_KMProject_EffectOptionItem::~KMProto_KMProject_EffectOptionItem() {
  // @@protoc_insertion_point(destructor:KMProto.KMProject.EffectOptionItem)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void KMProto_KMProject_EffectOptionItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  field_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_font_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KMProto_KMProject_EffectOptionItem::ArenaDtor(void* object) {
  KMProto_KMProject_EffectOptionItem* _this = reinterpret_cast< KMProto_KMProject_EffectOptionItem* >(object);
  (void)_this;
}
void KMProto_KMProject_EffectOptionItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KMProto_KMProject_EffectOptionItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KMProto_KMProject_EffectOptionItem& KMProto_KMProject_EffectOptionItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KMProto_KMProject_EffectOptionItem_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  return *internal_default_instance();
}


void KMProto_KMProject_EffectOptionItem::Clear() {
// @@protoc_insertion_point(message_clear_start:KMProto.KMProject.EffectOptionItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      field_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      text_font_.ClearNonDefaultToEmpty();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* KMProto_KMProject_EffectOptionItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .KMProto.KMProject.EffectOptionItemType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KMProto_KMProject_EffectOptionItemType_IsValid(val))) {
            _internal_set_type(static_cast<::KMProto_KMProject_EffectOptionItemType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string field_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_field_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string text_font = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_text_font();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KMProto_KMProject_EffectOptionItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KMProto.KMProject.EffectOptionItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .KMProto.KMProject.EffectOptionItemType type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional string field_name = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_field_name(), target);
  }

  // optional string value = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  // optional string text_font = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_text_font(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KMProto.KMProject.EffectOptionItem)
  return target;
}

size_t KMProto_KMProject_EffectOptionItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KMProto.KMProject.EffectOptionItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string field_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field_name());
    }

    // optional string value = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

    // optional string text_font = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text_font());
    }

    // optional .KMProto.KMProject.EffectOptionItemType type = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KMProto_KMProject_EffectOptionItem::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const KMProto_KMProject_EffectOptionItem*>(
      &from));
}

void KMProto_KMProject_EffectOptionItem::MergeFrom(const KMProto_KMProject_EffectOptionItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KMProto.KMProject.EffectOptionItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_field_name(from._internal_field_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_text_font(from._internal_text_font());
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KMProto_KMProject_EffectOptionItem::CopyFrom(const KMProto_KMProject_EffectOptionItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KMProto.KMProject.EffectOptionItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KMProto_KMProject_EffectOptionItem::IsInitialized() const {
  return true;
}

void KMProto_KMProject_EffectOptionItem::InternalSwap(KMProto_KMProject_EffectOptionItem* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  field_name_.Swap(&other->field_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  text_font_.Swap(&other->text_font_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

std::string KMProto_KMProject_EffectOptionItem::GetTypeName() const {
  return "KMProto.KMProject.EffectOptionItem";
}


// ===================================================================

class KMProto_KMProject_StringHashMap::_Internal {
 public:
};

KMProto_KMProject_StringHashMap::KMProto_KMProject_StringHashMap(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KMProto.KMProject.StringHashMap)
}
KMProto_KMProject_StringHashMap::KMProto_KMProject_StringHashMap(const KMProto_KMProject_StringHashMap& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KMProto.KMProject.StringHashMap)
}

void KMProto_KMProject_StringHashMap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KMProto_KMProject_StringHashMap_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
}

KMProto_KMProject_StringHashMap::~KMProto_KMProject_StringHashMap() {
  // @@protoc_insertion_point(destructor:KMProto.KMProject.StringHashMap)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void KMProto_KMProject_StringHashMap::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void KMProto_KMProject_StringHashMap::ArenaDtor(void* object) {
  KMProto_KMProject_StringHashMap* _this = reinterpret_cast< KMProto_KMProject_StringHashMap* >(object);
  (void)_this;
}
void KMProto_KMProject_StringHashMap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KMProto_KMProject_StringHashMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KMProto_KMProject_StringHashMap& KMProto_KMProject_StringHashMap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KMProto_KMProject_StringHashMap_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  return *internal_default_instance();
}


void KMProto_KMProject_StringHashMap::Clear() {
// @@protoc_insertion_point(message_clear_start:KMProto.KMProject.StringHashMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* KMProto_KMProject_StringHashMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .KMProto.KMProject.StringHashMapEntry entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KMProto_KMProject_StringHashMap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KMProto.KMProject.StringHashMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .KMProto.KMProject.StringHashMapEntry entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KMProto.KMProject.StringHashMap)
  return target;
}

size_t KMProto_KMProject_StringHashMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KMProto.KMProject.StringHashMap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KMProto.KMProject.StringHashMapEntry entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KMProto_KMProject_StringHashMap::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const KMProto_KMProject_StringHashMap*>(
      &from));
}

void KMProto_KMProject_StringHashMap::MergeFrom(const KMProto_KMProject_StringHashMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KMProto.KMProject.StringHashMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
}

void KMProto_KMProject_StringHashMap::CopyFrom(const KMProto_KMProject_StringHashMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KMProto.KMProject.StringHashMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KMProto_KMProject_StringHashMap::IsInitialized() const {
  return true;
}

void KMProto_KMProject_StringHashMap::InternalSwap(KMProto_KMProject_StringHashMap* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
}

std::string KMProto_KMProject_StringHashMap::GetTypeName() const {
  return "KMProto.KMProject.StringHashMap";
}


// ===================================================================

class KMProto_KMProject_StringHashMapEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<KMProto_KMProject_StringHashMapEntry>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

KMProto_KMProject_StringHashMapEntry::KMProto_KMProject_StringHashMapEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KMProto.KMProject.StringHashMapEntry)
}
KMProto_KMProject_StringHashMapEntry::KMProto_KMProject_StringHashMapEntry(const KMProto_KMProject_StringHashMapEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:KMProto.KMProject.StringHashMapEntry)
}

void KMProto_KMProject_StringHashMapEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KMProto_KMProject_StringHashMapEntry_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

KMProto_KMProject_StringHashMapEntry::~KMProto_KMProject_StringHashMapEntry() {
  // @@protoc_insertion_point(destructor:KMProto.KMProject.StringHashMapEntry)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void KMProto_KMProject_StringHashMapEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KMProto_KMProject_StringHashMapEntry::ArenaDtor(void* object) {
  KMProto_KMProject_StringHashMapEntry* _this = reinterpret_cast< KMProto_KMProject_StringHashMapEntry* >(object);
  (void)_this;
}
void KMProto_KMProject_StringHashMapEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KMProto_KMProject_StringHashMapEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KMProto_KMProject_StringHashMapEntry& KMProto_KMProject_StringHashMapEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KMProto_KMProject_StringHashMapEntry_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  return *internal_default_instance();
}


void KMProto_KMProject_StringHashMapEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:KMProto.KMProject.StringHashMapEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* KMProto_KMProject_StringHashMapEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KMProto_KMProject_StringHashMapEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KMProto.KMProject.StringHashMapEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KMProto.KMProject.StringHashMapEntry)
  return target;
}

size_t KMProto_KMProject_StringHashMapEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KMProto.KMProject.StringHashMapEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KMProto_KMProject_StringHashMapEntry::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const KMProto_KMProject_StringHashMapEntry*>(
      &from));
}

void KMProto_KMProject_StringHashMapEntry::MergeFrom(const KMProto_KMProject_StringHashMapEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KMProto.KMProject.StringHashMapEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
  }
}

void KMProto_KMProject_StringHashMapEntry::CopyFrom(const KMProto_KMProject_StringHashMapEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KMProto.KMProject.StringHashMapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KMProto_KMProject_StringHashMapEntry::IsInitialized() const {
  return true;
}

void KMProto_KMProject_StringHashMapEntry::InternalSwap(KMProto_KMProject_StringHashMapEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string KMProto_KMProject_StringHashMapEntry::GetTypeName() const {
  return "KMProto.KMProject.StringHashMapEntry";
}


// ===================================================================

class KMProto_KMProject_Matrix::_Internal {
 public:
};

KMProto_KMProject_Matrix::KMProto_KMProject_Matrix(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  element_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KMProto.KMProject.Matrix)
}
KMProto_KMProject_Matrix::KMProto_KMProject_Matrix(const KMProto_KMProject_Matrix& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      element_(from.element_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KMProto.KMProject.Matrix)
}

void KMProto_KMProject_Matrix::SharedCtor() {
}

KMProto_KMProject_Matrix::~KMProto_KMProject_Matrix() {
  // @@protoc_insertion_point(destructor:KMProto.KMProject.Matrix)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void KMProto_KMProject_Matrix::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void KMProto_KMProject_Matrix::ArenaDtor(void* object) {
  KMProto_KMProject_Matrix* _this = reinterpret_cast< KMProto_KMProject_Matrix* >(object);
  (void)_this;
}
void KMProto_KMProject_Matrix::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KMProto_KMProject_Matrix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KMProto_KMProject_Matrix& KMProto_KMProject_Matrix::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KMProto_KMProject_Matrix_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  return *internal_default_instance();
}


void KMProto_KMProject_Matrix::Clear() {
// @@protoc_insertion_point(message_clear_start:KMProto.KMProject.Matrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  element_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* KMProto_KMProject_Matrix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float element = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_element(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_element(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KMProto_KMProject_Matrix::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KMProto.KMProject.Matrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float element = 1 [packed = true];
  if (this->_internal_element_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_element(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KMProto.KMProject.Matrix)
  return target;
}

size_t KMProto_KMProject_Matrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KMProto.KMProject.Matrix)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float element = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_element_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _element_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KMProto_KMProject_Matrix::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const KMProto_KMProject_Matrix*>(
      &from));
}

void KMProto_KMProject_Matrix::MergeFrom(const KMProto_KMProject_Matrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KMProto.KMProject.Matrix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  element_.MergeFrom(from.element_);
}

void KMProto_KMProject_Matrix::CopyFrom(const KMProto_KMProject_Matrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KMProto.KMProject.Matrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KMProto_KMProject_Matrix::IsInitialized() const {
  return true;
}

void KMProto_KMProject_Matrix::InternalSwap(KMProto_KMProject_Matrix* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  element_.InternalSwap(&other->element_);
}

std::string KMProto_KMProject_Matrix::GetTypeName() const {
  return "KMProto.KMProject.Matrix";
}


// ===================================================================

class KMProto_KMProject_Transition::_Internal {
 public:
  using HasBits = decltype(std::declval<KMProto_KMProject_Transition>()._has_bits_);
  static void set_has_capturefilename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_transition_effect_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_auto_theme_effect(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_transition_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_transition_engine_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_transition_overlap_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_transition_offset_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_disabled(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_minimum_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_maximum_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::KMProto_KMProject_StringHashMap& effect_options(const KMProto_KMProject_Transition* msg);
  static void set_has_effect_options(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_duration_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_allow_overlap(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::KMProto_KMProject_StringHashMap&
KMProto_KMProject_Transition::_Internal::effect_options(const KMProto_KMProject_Transition* msg) {
  return *msg->effect_options_;
}
KMProto_KMProject_Transition::KMProto_KMProject_Transition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  effectoption_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KMProto.KMProject.Transition)
}
KMProto_KMProject_Transition::KMProto_KMProject_Transition(const KMProto_KMProject_Transition& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      effectoption_(from.effectoption_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  capturefilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_capturefilename()) {
    capturefilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_capturefilename(), 
      GetArena());
  }
  transition_effect_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_transition_effect_id()) {
    transition_effect_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transition_effect_id(), 
      GetArena());
  }
  if (from._internal_has_effect_options()) {
    effect_options_ = new ::KMProto_KMProject_StringHashMap(*from.effect_options_);
  } else {
    effect_options_ = nullptr;
  }
  ::memcpy(&transition_duration_, &from.transition_duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&auto_theme_effect_) -
    reinterpret_cast<char*>(&transition_duration_)) + sizeof(auto_theme_effect_));
  // @@protoc_insertion_point(copy_constructor:KMProto.KMProject.Transition)
}

void KMProto_KMProject_Transition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KMProto_KMProject_Transition_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  capturefilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transition_effect_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&effect_options_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&duration_limit_) -
      reinterpret_cast<char*>(&effect_options_)) + sizeof(duration_limit_));
  auto_theme_effect_ = 1;
}

KMProto_KMProject_Transition::~KMProto_KMProject_Transition() {
  // @@protoc_insertion_point(destructor:KMProto.KMProject.Transition)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void KMProto_KMProject_Transition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  capturefilename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transition_effect_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete effect_options_;
}

void KMProto_KMProject_Transition::ArenaDtor(void* object) {
  KMProto_KMProject_Transition* _this = reinterpret_cast< KMProto_KMProject_Transition* >(object);
  (void)_this;
}
void KMProto_KMProject_Transition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KMProto_KMProject_Transition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KMProto_KMProject_Transition& KMProto_KMProject_Transition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KMProto_KMProject_Transition_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  return *internal_default_instance();
}


void KMProto_KMProject_Transition::Clear() {
// @@protoc_insertion_point(message_clear_start:KMProto.KMProject.Transition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  effectoption_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      capturefilename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      transition_effect_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(effect_options_ != nullptr);
      effect_options_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&transition_duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&minimum_duration_) -
        reinterpret_cast<char*>(&transition_duration_)) + sizeof(minimum_duration_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&maximum_duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_limit_) -
        reinterpret_cast<char*>(&maximum_duration_)) + sizeof(duration_limit_));
    auto_theme_effect_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* KMProto_KMProject_Transition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string captureFilename = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_capturefilename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string transition_effect_id = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_transition_effect_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KMProto.KMProject.ThemeEffectType auto_theme_effect = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KMProto_KMProject_ThemeEffectType_IsValid(val))) {
            _internal_set_auto_theme_effect(static_cast<::KMProto_KMProject_ThemeEffectType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(102, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 transition_duration = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_transition_duration(&has_bits);
          transition_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 transition_engine_duration = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_transition_engine_duration(&has_bits);
          transition_engine_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 transition_overlap_percent = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_transition_overlap_percent(&has_bits);
          transition_overlap_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 transition_offset_percent = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_transition_offset_percent(&has_bits);
          transition_offset_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool disabled = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_disabled(&has_bits);
          disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 minimum_duration = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_minimum_duration(&has_bits);
          minimum_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 maximum_duration = 109;
      case 109:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_maximum_duration(&has_bits);
          maximum_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KMProto.KMProject.StringHashMap effect_options = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_effect_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 duration_limit = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_duration_limit(&has_bits);
          duration_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool allow_overlap = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_allow_overlap(&has_bits);
          allow_overlap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KMProto.KMProject.EffectOptionItem effectOption = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_effectoption(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<906>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KMProto_KMProject_Transition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KMProto.KMProject.Transition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string captureFilename = 100;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        100, this->_internal_capturefilename(), target);
  }

  // optional string transition_effect_id = 101;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        101, this->_internal_transition_effect_id(), target);
  }

  // optional .KMProto.KMProject.ThemeEffectType auto_theme_effect = 102;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      102, this->_internal_auto_theme_effect(), target);
  }

  // optional int32 transition_duration = 103;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(103, this->_internal_transition_duration(), target);
  }

  // optional int32 transition_engine_duration = 104;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(104, this->_internal_transition_engine_duration(), target);
  }

  // optional int32 transition_overlap_percent = 105;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(105, this->_internal_transition_overlap_percent(), target);
  }

  // optional int32 transition_offset_percent = 106;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(106, this->_internal_transition_offset_percent(), target);
  }

  // optional bool disabled = 107;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(107, this->_internal_disabled(), target);
  }

  // optional int32 minimum_duration = 108;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(108, this->_internal_minimum_duration(), target);
  }

  // optional int32 maximum_duration = 109;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(109, this->_internal_maximum_duration(), target);
  }

  // optional .KMProto.KMProject.StringHashMap effect_options = 110;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        110, _Internal::effect_options(this), target, stream);
  }

  // optional int32 duration_limit = 111;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(111, this->_internal_duration_limit(), target);
  }

  // optional bool allow_overlap = 112;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(112, this->_internal_allow_overlap(), target);
  }

  // repeated .KMProto.KMProject.EffectOptionItem effectOption = 113;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_effectoption_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(113, this->_internal_effectoption(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KMProto.KMProject.Transition)
  return target;
}

size_t KMProto_KMProject_Transition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KMProto.KMProject.Transition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KMProto.KMProject.EffectOptionItem effectOption = 113;
  total_size += 2UL * this->_internal_effectoption_size();
  for (const auto& msg : this->effectoption_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string captureFilename = 100;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_capturefilename());
    }

    // optional string transition_effect_id = 101;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_transition_effect_id());
    }

    // optional .KMProto.KMProject.StringHashMap effect_options = 110;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *effect_options_);
    }

    // optional int32 transition_duration = 103;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_transition_duration());
    }

    // optional int32 transition_engine_duration = 104;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_transition_engine_duration());
    }

    // optional int32 transition_overlap_percent = 105;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_transition_overlap_percent());
    }

    // optional int32 transition_offset_percent = 106;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_transition_offset_percent());
    }

    // optional int32 minimum_duration = 108;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_minimum_duration());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional int32 maximum_duration = 109;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_maximum_duration());
    }

    // optional bool disabled = 107;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool allow_overlap = 112;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional int32 duration_limit = 111;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_duration_limit());
    }

    // optional .KMProto.KMProject.ThemeEffectType auto_theme_effect = 102;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_auto_theme_effect());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KMProto_KMProject_Transition::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const KMProto_KMProject_Transition*>(
      &from));
}

void KMProto_KMProject_Transition::MergeFrom(const KMProto_KMProject_Transition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KMProto.KMProject.Transition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  effectoption_.MergeFrom(from.effectoption_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_capturefilename(from._internal_capturefilename());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_transition_effect_id(from._internal_transition_effect_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_effect_options()->::KMProto_KMProject_StringHashMap::MergeFrom(from._internal_effect_options());
    }
    if (cached_has_bits & 0x00000008u) {
      transition_duration_ = from.transition_duration_;
    }
    if (cached_has_bits & 0x00000010u) {
      transition_engine_duration_ = from.transition_engine_duration_;
    }
    if (cached_has_bits & 0x00000020u) {
      transition_overlap_percent_ = from.transition_overlap_percent_;
    }
    if (cached_has_bits & 0x00000040u) {
      transition_offset_percent_ = from.transition_offset_percent_;
    }
    if (cached_has_bits & 0x00000080u) {
      minimum_duration_ = from.minimum_duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      maximum_duration_ = from.maximum_duration_;
    }
    if (cached_has_bits & 0x00000200u) {
      disabled_ = from.disabled_;
    }
    if (cached_has_bits & 0x00000400u) {
      allow_overlap_ = from.allow_overlap_;
    }
    if (cached_has_bits & 0x00000800u) {
      duration_limit_ = from.duration_limit_;
    }
    if (cached_has_bits & 0x00001000u) {
      auto_theme_effect_ = from.auto_theme_effect_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KMProto_KMProject_Transition::CopyFrom(const KMProto_KMProject_Transition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KMProto.KMProject.Transition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KMProto_KMProject_Transition::IsInitialized() const {
  return true;
}

void KMProto_KMProject_Transition::InternalSwap(KMProto_KMProject_Transition* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  effectoption_.InternalSwap(&other->effectoption_);
  capturefilename_.Swap(&other->capturefilename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  transition_effect_id_.Swap(&other->transition_effect_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KMProto_KMProject_Transition, duration_limit_)
      + sizeof(KMProto_KMProject_Transition::duration_limit_)
      - PROTOBUF_FIELD_OFFSET(KMProto_KMProject_Transition, effect_options_)>(
          reinterpret_cast<char*>(&effect_options_),
          reinterpret_cast<char*>(&other->effect_options_));
  swap(auto_theme_effect_, other->auto_theme_effect_);
}

std::string KMProto_KMProject_Transition::GetTypeName() const {
  return "KMProto.KMProject.Transition";
}


// ===================================================================

class KMProto_KMProject_AudioClip::_Internal {
 public:
  using HasBits = decltype(std::declval<KMProto_KMProject_AudioClip>()._has_bits_);
  static void set_has_extra_relative_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_relative_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_relative_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_saved_relative_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_saved_relative_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_engine_clip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_trim_time_start(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_trim_time_end(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_saved_trim_time_start(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_saved_trim_time_end(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_clip_volume(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_media_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_original_media_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_media_title(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mute_audio(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_loop(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_is_voice_recording(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_is_pending_voice_recording(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_is_extract_audio(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_video_clip_item_uuid_lsb(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_video_clip_item_uuid_msb(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_is_bg_music(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_clip_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_pinned(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_saved_loop_duration(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_extend_to_end(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_voice_changer(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_pan_left(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_pan_right(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_compressor(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_pitch_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_clip_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_audio_asset_id_ios(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_enhancedaudiofilter(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_equalizer(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_reverb(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

KMProto_KMProject_AudioClip::KMProto_KMProject_AudioClip(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  volume_envelope_time_(arena),
  volume_envelope_level_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KMProto.KMProject.AudioClip)
}
KMProto_KMProject_AudioClip::KMProto_KMProject_AudioClip(const KMProto_KMProject_AudioClip& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      volume_envelope_time_(from.volume_envelope_time_),
      volume_envelope_level_(from.volume_envelope_level_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  media_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_media_path()) {
    media_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_media_path(), 
      GetArena());
  }
  original_media_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_original_media_path()) {
    original_media_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_original_media_path(), 
      GetArena());
  }
  media_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_media_title()) {
    media_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_media_title(), 
      GetArena());
  }
  clip_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clip_name()) {
    clip_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clip_name(), 
      GetArena());
  }
  audio_asset_id_ios_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_audio_asset_id_ios()) {
    audio_asset_id_ios_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_audio_asset_id_ios(), 
      GetArena());
  }
  enhancedaudiofilter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enhancedaudiofilter()) {
    enhancedaudiofilter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_enhancedaudiofilter(), 
      GetArena());
  }
  equalizer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_equalizer()) {
    equalizer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_equalizer(), 
      GetArena());
  }
  reverb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reverb()) {
    reverb_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reverb(), 
      GetArena());
  }
  ::memcpy(&pitch_factor_, &from.pitch_factor_,
    static_cast<size_t>(reinterpret_cast<char*>(&compressor_) -
    reinterpret_cast<char*>(&pitch_factor_)) + sizeof(compressor_));
  // @@protoc_insertion_point(copy_constructor:KMProto.KMProject.AudioClip)
}

void KMProto_KMProject_AudioClip::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KMProto_KMProject_AudioClip_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  media_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  original_media_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  media_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clip_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  audio_asset_id_ios_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enhancedaudiofilter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  equalizer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reverb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&pitch_factor_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&compressor_) -
      reinterpret_cast<char*>(&pitch_factor_)) + sizeof(compressor_));
}

KMProto_KMProject_AudioClip::~KMProto_KMProject_AudioClip() {
  // @@protoc_insertion_point(destructor:KMProto.KMProject.AudioClip)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void KMProto_KMProject_AudioClip::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  media_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  original_media_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  media_title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clip_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  audio_asset_id_ios_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enhancedaudiofilter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  equalizer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reverb_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KMProto_KMProject_AudioClip::ArenaDtor(void* object) {
  KMProto_KMProject_AudioClip* _this = reinterpret_cast< KMProto_KMProject_AudioClip* >(object);
  (void)_this;
}
void KMProto_KMProject_AudioClip::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KMProto_KMProject_AudioClip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KMProto_KMProject_AudioClip& KMProto_KMProject_AudioClip::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KMProto_KMProject_AudioClip_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  return *internal_default_instance();
}


void KMProto_KMProject_AudioClip::Clear() {
// @@protoc_insertion_point(message_clear_start:KMProto.KMProject.AudioClip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  volume_envelope_time_.Clear();
  volume_envelope_level_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      media_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      original_media_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      media_title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      clip_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      audio_asset_id_ios_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      enhancedaudiofilter_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      equalizer_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      reverb_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&pitch_factor_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_) -
        reinterpret_cast<char*>(&pitch_factor_)) + sizeof(duration_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&trim_time_start_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&loop_) -
        reinterpret_cast<char*>(&trim_time_start_)) + sizeof(loop_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&is_voice_recording_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&clip_width_) -
        reinterpret_cast<char*>(&is_voice_recording_)) + sizeof(clip_width_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&saved_loop_duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&compressor_) -
        reinterpret_cast<char*>(&saved_loop_duration_)) + sizeof(compressor_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* KMProto_KMProject_AudioClip::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 extra_relative_start_time = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_extra_relative_start_time(&_has_bits_);
          extra_relative_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 relative_start_time = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_relative_start_time(&_has_bits_);
          relative_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 relative_end_time = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_relative_end_time(&_has_bits_);
          relative_end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 saved_relative_end_time = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_saved_relative_end_time(&_has_bits_);
          saved_relative_end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 saved_relative_start_time = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_saved_relative_start_time(&_has_bits_);
          saved_relative_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 engine_clip_id = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_engine_clip_id(&_has_bits_);
          engine_clip_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 duration = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_duration(&_has_bits_);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 trim_time_start = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_trim_time_start(&_has_bits_);
          trim_time_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 trim_time_end = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_trim_time_end(&_has_bits_);
          trim_time_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 saved_trim_time_start = 109;
      case 109:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_saved_trim_time_start(&_has_bits_);
          saved_trim_time_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 saved_trim_time_end = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_saved_trim_time_end(&_has_bits_);
          saved_trim_time_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 clip_volume = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_clip_volume(&_has_bits_);
          clip_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string media_path = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_media_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string original_media_path = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_original_media_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string media_title = 114;
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_media_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool mute_audio = 115;
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_mute_audio(&_has_bits_);
          mute_audio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool loop = 116;
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_loop(&_has_bits_);
          loop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_voice_recording = 117;
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_is_voice_recording(&_has_bits_);
          is_voice_recording_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_pending_voice_recording = 118;
      case 118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_is_pending_voice_recording(&_has_bits_);
          is_pending_voice_recording_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_extract_audio = 119;
      case 119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_is_extract_audio(&_has_bits_);
          is_extract_audio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 video_clip_item_uuid_lsb = 120;
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_video_clip_item_uuid_lsb(&_has_bits_);
          video_clip_item_uuid_lsb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 video_clip_item_uuid_msb = 121;
      case 121:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_video_clip_item_uuid_msb(&_has_bits_);
          video_clip_item_uuid_msb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_bg_music = 122;
      case 122:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_is_bg_music(&_has_bits_);
          is_bg_music_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 volume_envelope_time = 123 [packed = true];
      case 123:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_volume_envelope_time(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216) {
          _internal_add_volume_envelope_time(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 volume_envelope_level = 124 [packed = true];
      case 124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_volume_envelope_level(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224) {
          _internal_add_volume_envelope_level(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float clip_width = 125;
      case 125:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          _Internal::set_has_clip_width(&_has_bits_);
          clip_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool pinned = 126;
      case 126:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_pinned(&_has_bits_);
          pinned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 saved_loop_duration = 127;
      case 127:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_saved_loop_duration(&_has_bits_);
          saved_loop_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool extend_to_end = 128;
      case 128:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_extend_to_end(&_has_bits_);
          extend_to_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 voice_changer = 129;
      case 129:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_voice_changer(&_has_bits_);
          voice_changer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pan_left = 130;
      case 130:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pan_left(&_has_bits_);
          pan_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pan_right = 131;
      case 131:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_pan_right(&_has_bits_);
          pan_right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 compressor = 132;
      case 132:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_compressor(&_has_bits_);
          compressor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pitch_factor = 133;
      case 133:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_pitch_factor(&_has_bits_);
          pitch_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string clip_name = 134;
      case 134:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_clip_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string audio_asset_id_ios = 135;
      case 135:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_audio_asset_id_ios();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string enhancedAudioFilter = 136;
      case 136:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_enhancedaudiofilter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string equalizer = 137;
      case 137:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_equalizer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string reverb = 138;
      case 138:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_reverb();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KMProto_KMProject_AudioClip::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KMProto.KMProject.AudioClip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 extra_relative_start_time = 100;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(100, this->_internal_extra_relative_start_time(), target);
  }

  // optional int32 relative_start_time = 101;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(101, this->_internal_relative_start_time(), target);
  }

  // optional int32 relative_end_time = 102;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(102, this->_internal_relative_end_time(), target);
  }

  // optional int32 saved_relative_end_time = 103;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(103, this->_internal_saved_relative_end_time(), target);
  }

  // optional int32 saved_relative_start_time = 104;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(104, this->_internal_saved_relative_start_time(), target);
  }

  // optional int32 engine_clip_id = 105;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(105, this->_internal_engine_clip_id(), target);
  }

  // optional int32 duration = 106;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(106, this->_internal_duration(), target);
  }

  // optional int32 trim_time_start = 107;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(107, this->_internal_trim_time_start(), target);
  }

  // optional int32 trim_time_end = 108;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(108, this->_internal_trim_time_end(), target);
  }

  // optional int32 saved_trim_time_start = 109;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(109, this->_internal_saved_trim_time_start(), target);
  }

  // optional int32 saved_trim_time_end = 110;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(110, this->_internal_saved_trim_time_end(), target);
  }

  // optional int32 clip_volume = 111;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(111, this->_internal_clip_volume(), target);
  }

  // optional string media_path = 112;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        112, this->_internal_media_path(), target);
  }

  // optional string original_media_path = 113;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        113, this->_internal_original_media_path(), target);
  }

  // optional string media_title = 114;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        114, this->_internal_media_title(), target);
  }

  // optional bool mute_audio = 115;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(115, this->_internal_mute_audio(), target);
  }

  // optional bool loop = 116;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(116, this->_internal_loop(), target);
  }

  // optional bool is_voice_recording = 117;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(117, this->_internal_is_voice_recording(), target);
  }

  // optional bool is_pending_voice_recording = 118;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(118, this->_internal_is_pending_voice_recording(), target);
  }

  // optional bool is_extract_audio = 119;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(119, this->_internal_is_extract_audio(), target);
  }

  // optional uint64 video_clip_item_uuid_lsb = 120;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(120, this->_internal_video_clip_item_uuid_lsb(), target);
  }

  // optional uint64 video_clip_item_uuid_msb = 121;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(121, this->_internal_video_clip_item_uuid_msb(), target);
  }

  // optional bool is_bg_music = 122;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(122, this->_internal_is_bg_music(), target);
  }

  // repeated int32 volume_envelope_time = 123 [packed = true];
  {
    int byte_size = _volume_envelope_time_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          123, _internal_volume_envelope_time(), byte_size, target);
    }
  }

  // repeated int32 volume_envelope_level = 124 [packed = true];
  {
    int byte_size = _volume_envelope_level_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          124, _internal_volume_envelope_level(), byte_size, target);
    }
  }

  // optional float clip_width = 125;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(125, this->_internal_clip_width(), target);
  }

  // optional bool pinned = 126;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(126, this->_internal_pinned(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 saved_loop_duration = 127;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(127, this->_internal_saved_loop_duration(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool extend_to_end = 128;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(128, this->_internal_extend_to_end(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 voice_changer = 129;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(129, this->_internal_voice_changer(), target);
  }

  // optional int32 pan_left = 130;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(130, this->_internal_pan_left(), target);
  }

  // optional int32 pan_right = 131;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(131, this->_internal_pan_right(), target);
  }

  // optional int32 compressor = 132;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(132, this->_internal_compressor(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 pitch_factor = 133;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(133, this->_internal_pitch_factor(), target);
  }

  // optional string clip_name = 134;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        134, this->_internal_clip_name(), target);
  }

  // optional string audio_asset_id_ios = 135;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteStringMaybeAliased(
        135, this->_internal_audio_asset_id_ios(), target);
  }

  // optional string enhancedAudioFilter = 136;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteStringMaybeAliased(
        136, this->_internal_enhancedaudiofilter(), target);
  }

  // optional string equalizer = 137;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteStringMaybeAliased(
        137, this->_internal_equalizer(), target);
  }

  // optional string reverb = 138;
  if (cached_has_bits & 0x00000080u) {
    target = stream->WriteStringMaybeAliased(
        138, this->_internal_reverb(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KMProto.KMProject.AudioClip)
  return target;
}

size_t KMProto_KMProject_AudioClip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KMProto.KMProject.AudioClip)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 volume_envelope_time = 123 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->volume_envelope_time_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _volume_envelope_time_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 volume_envelope_level = 124 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->volume_envelope_level_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _volume_envelope_level_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string media_path = 112;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_media_path());
    }

    // optional string original_media_path = 113;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_original_media_path());
    }

    // optional string media_title = 114;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_media_title());
    }

    // optional string clip_name = 134;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_clip_name());
    }

    // optional string audio_asset_id_ios = 135;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_audio_asset_id_ios());
    }

    // optional string enhancedAudioFilter = 136;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_enhancedaudiofilter());
    }

    // optional string equalizer = 137;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_equalizer());
    }

    // optional string reverb = 138;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_reverb());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 pitch_factor = 133;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_pitch_factor());
    }

    // optional int32 extra_relative_start_time = 100;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_extra_relative_start_time());
    }

    // optional int32 relative_start_time = 101;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_relative_start_time());
    }

    // optional int32 relative_end_time = 102;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_relative_end_time());
    }

    // optional int32 saved_relative_end_time = 103;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_saved_relative_end_time());
    }

    // optional int32 saved_relative_start_time = 104;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_saved_relative_start_time());
    }

    // optional int32 engine_clip_id = 105;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_engine_clip_id());
    }

    // optional int32 duration = 106;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_duration());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int32 trim_time_start = 107;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_trim_time_start());
    }

    // optional int32 trim_time_end = 108;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_trim_time_end());
    }

    // optional int32 saved_trim_time_start = 109;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_saved_trim_time_start());
    }

    // optional int32 saved_trim_time_end = 110;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_saved_trim_time_end());
    }

    // optional int32 clip_volume = 111;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_clip_volume());
    }

    // optional uint64 video_clip_item_uuid_lsb = 120;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_video_clip_item_uuid_lsb());
    }

    // optional bool mute_audio = 115;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool loop = 116;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool is_voice_recording = 117;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional bool is_pending_voice_recording = 118;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional bool is_extract_audio = 119;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional bool is_bg_music = 122;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool pinned = 126;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool extend_to_end = 128;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional uint64 video_clip_item_uuid_msb = 121;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_video_clip_item_uuid_msb());
    }

    // optional float clip_width = 125;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 4;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 saved_loop_duration = 127;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_saved_loop_duration());
    }

    // optional int32 voice_changer = 129;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_voice_changer());
    }

    // optional int32 pan_left = 130;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_pan_left());
    }

    // optional int32 pan_right = 131;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_pan_right());
    }

    // optional int32 compressor = 132;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_compressor());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KMProto_KMProject_AudioClip::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const KMProto_KMProject_AudioClip*>(
      &from));
}

void KMProto_KMProject_AudioClip::MergeFrom(const KMProto_KMProject_AudioClip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KMProto.KMProject.AudioClip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  volume_envelope_time_.MergeFrom(from.volume_envelope_time_);
  volume_envelope_level_.MergeFrom(from.volume_envelope_level_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_media_path(from._internal_media_path());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_original_media_path(from._internal_original_media_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_media_title(from._internal_media_title());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_clip_name(from._internal_clip_name());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_audio_asset_id_ios(from._internal_audio_asset_id_ios());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_enhancedaudiofilter(from._internal_enhancedaudiofilter());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_equalizer(from._internal_equalizer());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_reverb(from._internal_reverb());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      pitch_factor_ = from.pitch_factor_;
    }
    if (cached_has_bits & 0x00000200u) {
      extra_relative_start_time_ = from.extra_relative_start_time_;
    }
    if (cached_has_bits & 0x00000400u) {
      relative_start_time_ = from.relative_start_time_;
    }
    if (cached_has_bits & 0x00000800u) {
      relative_end_time_ = from.relative_end_time_;
    }
    if (cached_has_bits & 0x00001000u) {
      saved_relative_end_time_ = from.saved_relative_end_time_;
    }
    if (cached_has_bits & 0x00002000u) {
      saved_relative_start_time_ = from.saved_relative_start_time_;
    }
    if (cached_has_bits & 0x00004000u) {
      engine_clip_id_ = from.engine_clip_id_;
    }
    if (cached_has_bits & 0x00008000u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      trim_time_start_ = from.trim_time_start_;
    }
    if (cached_has_bits & 0x00020000u) {
      trim_time_end_ = from.trim_time_end_;
    }
    if (cached_has_bits & 0x00040000u) {
      saved_trim_time_start_ = from.saved_trim_time_start_;
    }
    if (cached_has_bits & 0x00080000u) {
      saved_trim_time_end_ = from.saved_trim_time_end_;
    }
    if (cached_has_bits & 0x00100000u) {
      clip_volume_ = from.clip_volume_;
    }
    if (cached_has_bits & 0x00200000u) {
      video_clip_item_uuid_lsb_ = from.video_clip_item_uuid_lsb_;
    }
    if (cached_has_bits & 0x00400000u) {
      mute_audio_ = from.mute_audio_;
    }
    if (cached_has_bits & 0x00800000u) {
      loop_ = from.loop_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      is_voice_recording_ = from.is_voice_recording_;
    }
    if (cached_has_bits & 0x02000000u) {
      is_pending_voice_recording_ = from.is_pending_voice_recording_;
    }
    if (cached_has_bits & 0x04000000u) {
      is_extract_audio_ = from.is_extract_audio_;
    }
    if (cached_has_bits & 0x08000000u) {
      is_bg_music_ = from.is_bg_music_;
    }
    if (cached_has_bits & 0x10000000u) {
      pinned_ = from.pinned_;
    }
    if (cached_has_bits & 0x20000000u) {
      extend_to_end_ = from.extend_to_end_;
    }
    if (cached_has_bits & 0x40000000u) {
      video_clip_item_uuid_msb_ = from.video_clip_item_uuid_msb_;
    }
    if (cached_has_bits & 0x80000000u) {
      clip_width_ = from.clip_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      saved_loop_duration_ = from.saved_loop_duration_;
    }
    if (cached_has_bits & 0x00000002u) {
      voice_changer_ = from.voice_changer_;
    }
    if (cached_has_bits & 0x00000004u) {
      pan_left_ = from.pan_left_;
    }
    if (cached_has_bits & 0x00000008u) {
      pan_right_ = from.pan_right_;
    }
    if (cached_has_bits & 0x00000010u) {
      compressor_ = from.compressor_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void KMProto_KMProject_AudioClip::CopyFrom(const KMProto_KMProject_AudioClip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KMProto.KMProject.AudioClip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KMProto_KMProject_AudioClip::IsInitialized() const {
  return true;
}

void KMProto_KMProject_AudioClip::InternalSwap(KMProto_KMProject_AudioClip* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  volume_envelope_time_.InternalSwap(&other->volume_envelope_time_);
  volume_envelope_level_.InternalSwap(&other->volume_envelope_level_);
  media_path_.Swap(&other->media_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  original_media_path_.Swap(&other->original_media_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  media_title_.Swap(&other->media_title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  clip_name_.Swap(&other->clip_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  audio_asset_id_ios_.Swap(&other->audio_asset_id_ios_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  enhancedaudiofilter_.Swap(&other->enhancedaudiofilter_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  equalizer_.Swap(&other->equalizer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reverb_.Swap(&other->reverb_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KMProto_KMProject_AudioClip, compressor_)
      + sizeof(KMProto_KMProject_AudioClip::compressor_)
      - PROTOBUF_FIELD_OFFSET(KMProto_KMProject_AudioClip, pitch_factor_)>(
          reinterpret_cast<char*>(&pitch_factor_),
          reinterpret_cast<char*>(&other->pitch_factor_));
}

std::string KMProto_KMProject_AudioClip::GetTypeName() const {
  return "KMProto.KMProject.AudioClip";
}


// ===================================================================

class KMProto_KMProject_LayerCommon::_Internal {
 public:
  using HasBits = decltype(std::declval<KMProto_KMProject_LayerCommon>()._has_bits_);
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pinned(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_start_trim(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_end_trim(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_z_order(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_layer_expression(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_layer_expression_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_layer_in_expression(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_layer_in_expression_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_layer_out_expression(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_layer_out_expression_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_layer_overall_expression(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_layer_overall_expression_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_split_screen_type(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_split_size_left(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_split_size_right(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_split_size_top(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_split_size_bottom(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_flip_h(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_flip_v(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::KMProto_KMProject_KeyFrame& split_keyframe(const KMProto_KMProject_LayerCommon* msg);
  static void set_has_split_keyframe(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_overall_alpha(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_layermask_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_layermask_type(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_layermask_index(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_layer_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_crop_bounds_left(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_crop_bounds_top(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_crop_bounds_right(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_crop_bounds_bottom(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_crop_bounds_shape(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_crop_mask_feather(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_natural_orientation(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_use_crop_mask(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_blend_mode(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_render_size_scale_x(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_render_size_scale_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::KMProto_KMProject_KeyFrame&
KMProto_KMProject_LayerCommon::_Internal::split_keyframe(const KMProto_KMProject_LayerCommon* msg) {
  return *msg->split_keyframe_;
}
KMProto_KMProject_LayerCommon::KMProto_KMProject_LayerCommon(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  keyframes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KMProto.KMProject.LayerCommon)
}
KMProto_KMProject_LayerCommon::KMProto_KMProject_LayerCommon(const KMProto_KMProject_LayerCommon& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      keyframes_(from.keyframes_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  layer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_layer_name()) {
    layer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_layer_name(), 
      GetArena());
  }
  if (from._internal_has_split_keyframe()) {
    split_keyframe_ = new ::KMProto_KMProject_KeyFrame(*from.split_keyframe_);
  } else {
    split_keyframe_ = nullptr;
  }
  ::memcpy(&render_size_scale_y_, &from.render_size_scale_y_,
    static_cast<size_t>(reinterpret_cast<char*>(&blend_mode_) -
    reinterpret_cast<char*>(&render_size_scale_y_)) + sizeof(blend_mode_));
  // @@protoc_insertion_point(copy_constructor:KMProto.KMProject.LayerCommon)
}

void KMProto_KMProject_LayerCommon::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KMProto_KMProject_LayerCommon_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  layer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&split_keyframe_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&render_size_scale_x_) -
      reinterpret_cast<char*>(&split_keyframe_)) + sizeof(render_size_scale_x_));
  blend_mode_ = 17;
}

KMProto_KMProject_LayerCommon::~KMProto_KMProject_LayerCommon() {
  // @@protoc_insertion_point(destructor:KMProto.KMProject.LayerCommon)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void KMProto_KMProject_LayerCommon::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  layer_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete split_keyframe_;
}

void KMProto_KMProject_LayerCommon::ArenaDtor(void* object) {
  KMProto_KMProject_LayerCommon* _this = reinterpret_cast< KMProto_KMProject_LayerCommon* >(object);
  (void)_this;
}
void KMProto_KMProject_LayerCommon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KMProto_KMProject_LayerCommon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KMProto_KMProject_LayerCommon& KMProto_KMProject_LayerCommon::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KMProto_KMProject_LayerCommon_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  return *internal_default_instance();
}


void KMProto_KMProject_LayerCommon::Clear() {
// @@protoc_insertion_point(message_clear_start:KMProto.KMProject.LayerCommon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keyframes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      layer_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(split_keyframe_ != nullptr);
      split_keyframe_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&render_size_scale_y_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_order_) -
        reinterpret_cast<char*>(&render_size_scale_y_)) + sizeof(z_order_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&layer_expression_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&layer_overall_expression_speed_) -
        reinterpret_cast<char*>(&layer_expression_)) + sizeof(layer_overall_expression_speed_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&split_screen_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&split_size_top_) -
        reinterpret_cast<char*>(&split_screen_type_)) + sizeof(split_size_top_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&split_size_bottom_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&crop_bounds_bottom_) -
        reinterpret_cast<char*>(&split_size_bottom_)) + sizeof(crop_bounds_bottom_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&crop_bounds_shape_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&render_size_scale_x_) -
        reinterpret_cast<char*>(&crop_bounds_shape_)) + sizeof(render_size_scale_x_));
    blend_mode_ = 17;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* KMProto_KMProject_LayerCommon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 start_time = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_start_time(&_has_bits_);
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 end_time = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_end_time(&_has_bits_);
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool pinned = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_pinned(&_has_bits_);
          pinned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 start_trim = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_start_trim(&_has_bits_);
          start_trim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 end_trim = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_end_trim(&_has_bits_);
          end_trim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 z_order = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_z_order(&_has_bits_);
          z_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 layer_expression = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_layer_expression(&_has_bits_);
          layer_expression_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 layer_expression_duration = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_layer_expression_duration(&_has_bits_);
          layer_expression_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KMProto.KMProject.KeyFrame keyframes = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_keyframes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<866>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 layer_in_expression = 109;
      case 109:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_layer_in_expression(&_has_bits_);
          layer_in_expression_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 layer_in_expression_duration = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_layer_in_expression_duration(&_has_bits_);
          layer_in_expression_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 layer_out_expression = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_layer_out_expression(&_has_bits_);
          layer_out_expression_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 layer_out_expression_duration = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_layer_out_expression_duration(&_has_bits_);
          layer_out_expression_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 layer_overall_expression = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_layer_overall_expression(&_has_bits_);
          layer_overall_expression_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float layer_overall_expression_speed = 114;
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_layer_overall_expression_speed(&_has_bits_);
          layer_overall_expression_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .KMProto.KMProject.KeyFrame split_keyframe = 115;
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_split_keyframe(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KMProto.KMProject.SplitScreenType split_screen_type = 116;
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KMProto_KMProject_SplitScreenType_IsValid(val))) {
            _internal_set_split_screen_type(static_cast<::KMProto_KMProject_SplitScreenType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(116, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 split_size_left = 117;
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_split_size_left(&_has_bits_);
          split_size_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 split_size_right = 118;
      case 118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_split_size_right(&_has_bits_);
          split_size_right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 split_size_top = 119;
      case 119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_split_size_top(&_has_bits_);
          split_size_top_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 split_size_bottom = 120;
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_split_size_bottom(&_has_bits_);
          split_size_bottom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 overall_alpha = 121;
      case 121:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_overall_alpha(&_has_bits_);
          overall_alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool flip_h = 122;
      case 122:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_flip_h(&_has_bits_);
          flip_h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool flip_v = 123;
      case 123:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_flip_v(&_has_bits_);
          flip_v_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool layermask_enabled = 124;
      case 124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_layermask_enabled(&_has_bits_);
          layermask_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 layermask_type = 125;
      case 125:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_layermask_type(&_has_bits_);
          layermask_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 layermask_index = 126;
      case 126:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_layermask_index(&_has_bits_);
          layermask_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string layer_name = 127;
      case 127:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          auto str = _internal_mutable_layer_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float crop_bounds_left = 128;
      case 128:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          _Internal::set_has_crop_bounds_left(&_has_bits_);
          crop_bounds_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float crop_bounds_top = 129;
      case 129:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_crop_bounds_top(&_has_bits_);
          crop_bounds_top_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float crop_bounds_right = 130;
      case 130:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_crop_bounds_right(&_has_bits_);
          crop_bounds_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float crop_bounds_bottom = 131;
      case 131:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_crop_bounds_bottom(&_has_bits_);
          crop_bounds_bottom_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 crop_bounds_shape = 132;
      case 132:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_crop_bounds_shape(&_has_bits_);
          crop_bounds_shape_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float crop_mask_feather = 133;
      case 133:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_crop_mask_feather(&_has_bits_);
          crop_mask_feather_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 natural_orientation = 134;
      case 134:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_natural_orientation(&_has_bits_);
          natural_orientation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_crop_mask = 135;
      case 135:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_use_crop_mask(&_has_bits_);
          use_crop_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KMProto.KMProject.LayerBlendModeType blend_mode = 136 [default = LAYER_BLEND_NORMAL];
      case 136:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KMProto_KMProject_LayerBlendModeType_IsValid(val))) {
            _internal_set_blend_mode(static_cast<::KMProto_KMProject_LayerBlendModeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(136, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float render_size_scale_x = 137;
      case 137:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_render_size_scale_x(&_has_bits_);
          render_size_scale_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float render_size_scale_y = 138;
      case 138:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_render_size_scale_y(&_has_bits_);
          render_size_scale_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KMProto_KMProject_LayerCommon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KMProto.KMProject.LayerCommon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 start_time = 100;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(100, this->_internal_start_time(), target);
  }

  // optional int32 end_time = 101;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(101, this->_internal_end_time(), target);
  }

  // optional bool pinned = 102;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(102, this->_internal_pinned(), target);
  }

  // optional int32 start_trim = 103;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(103, this->_internal_start_trim(), target);
  }

  // optional int32 end_trim = 104;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(104, this->_internal_end_trim(), target);
  }

  // optional int64 z_order = 105;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(105, this->_internal_z_order(), target);
  }

  // optional int32 layer_expression = 106;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(106, this->_internal_layer_expression(), target);
  }

  // optional int32 layer_expression_duration = 107;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(107, this->_internal_layer_expression_duration(), target);
  }

  // repeated .KMProto.KMProject.KeyFrame keyframes = 108;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_keyframes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(108, this->_internal_keyframes(i), target, stream);
  }

  // optional int32 layer_in_expression = 109;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(109, this->_internal_layer_in_expression(), target);
  }

  // optional int32 layer_in_expression_duration = 110;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(110, this->_internal_layer_in_expression_duration(), target);
  }

  // optional int32 layer_out_expression = 111;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(111, this->_internal_layer_out_expression(), target);
  }

  // optional int32 layer_out_expression_duration = 112;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(112, this->_internal_layer_out_expression_duration(), target);
  }

  // optional int32 layer_overall_expression = 113;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(113, this->_internal_layer_overall_expression(), target);
  }

  // optional float layer_overall_expression_speed = 114;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(114, this->_internal_layer_overall_expression_speed(), target);
  }

  // optional .KMProto.KMProject.KeyFrame split_keyframe = 115;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        115, _Internal::split_keyframe(this), target, stream);
  }

  // optional .KMProto.KMProject.SplitScreenType split_screen_type = 116;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      116, this->_internal_split_screen_type(), target);
  }

  // optional int32 split_size_left = 117;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(117, this->_internal_split_size_left(), target);
  }

  // optional int32 split_size_right = 118;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(118, this->_internal_split_size_right(), target);
  }

  // optional int32 split_size_top = 119;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(119, this->_internal_split_size_top(), target);
  }

  // optional int32 split_size_bottom = 120;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(120, this->_internal_split_size_bottom(), target);
  }

  // optional int32 overall_alpha = 121;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(121, this->_internal_overall_alpha(), target);
  }

  // optional bool flip_h = 122;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(122, this->_internal_flip_h(), target);
  }

  // optional bool flip_v = 123;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(123, this->_internal_flip_v(), target);
  }

  // optional bool layermask_enabled = 124;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(124, this->_internal_layermask_enabled(), target);
  }

  // optional int32 layermask_type = 125;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(125, this->_internal_layermask_type(), target);
  }

  // optional int32 layermask_index = 126;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(126, this->_internal_layermask_index(), target);
  }

  // optional string layer_name = 127;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        127, this->_internal_layer_name(), target);
  }

  // optional float crop_bounds_left = 128;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(128, this->_internal_crop_bounds_left(), target);
  }

  // optional float crop_bounds_top = 129;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(129, this->_internal_crop_bounds_top(), target);
  }

  // optional float crop_bounds_right = 130;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(130, this->_internal_crop_bounds_right(), target);
  }

  // optional float crop_bounds_bottom = 131;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(131, this->_internal_crop_bounds_bottom(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 crop_bounds_shape = 132;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(132, this->_internal_crop_bounds_shape(), target);
  }

  // optional float crop_mask_feather = 133;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(133, this->_internal_crop_mask_feather(), target);
  }

  // optional int32 natural_orientation = 134;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(134, this->_internal_natural_orientation(), target);
  }

  // optional bool use_crop_mask = 135;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(135, this->_internal_use_crop_mask(), target);
  }

  // optional .KMProto.KMProject.LayerBlendModeType blend_mode = 136 [default = LAYER_BLEND_NORMAL];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      136, this->_internal_blend_mode(), target);
  }

  // optional float render_size_scale_x = 137;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(137, this->_internal_render_size_scale_x(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional float render_size_scale_y = 138;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(138, this->_internal_render_size_scale_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KMProto.KMProject.LayerCommon)
  return target;
}

size_t KMProto_KMProject_LayerCommon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KMProto.KMProject.LayerCommon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KMProto.KMProject.KeyFrame keyframes = 108;
  total_size += 2UL * this->_internal_keyframes_size();
  for (const auto& msg : this->keyframes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string layer_name = 127;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_layer_name());
    }

    // optional .KMProto.KMProject.KeyFrame split_keyframe = 115;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *split_keyframe_);
    }

    // optional float render_size_scale_y = 138;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional int32 start_time = 100;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_start_time());
    }

    // optional int32 end_time = 101;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_end_time());
    }

    // optional int32 start_trim = 103;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_start_trim());
    }

    // optional int32 end_trim = 104;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_end_trim());
    }

    // optional int64 z_order = 105;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_z_order());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 layer_expression = 106;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_layer_expression());
    }

    // optional int32 layer_expression_duration = 107;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_layer_expression_duration());
    }

    // optional int32 layer_in_expression = 109;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_layer_in_expression());
    }

    // optional int32 layer_in_expression_duration = 110;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_layer_in_expression_duration());
    }

    // optional int32 layer_out_expression = 111;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_layer_out_expression());
    }

    // optional int32 layer_out_expression_duration = 112;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_layer_out_expression_duration());
    }

    // optional int32 layer_overall_expression = 113;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_layer_overall_expression());
    }

    // optional float layer_overall_expression_speed = 114;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .KMProto.KMProject.SplitScreenType split_screen_type = 116;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_split_screen_type());
    }

    // optional int32 split_size_left = 117;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_split_size_left());
    }

    // optional bool pinned = 102;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool flip_h = 122;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool flip_v = 123;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool layermask_enabled = 124;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional int32 split_size_right = 118;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_split_size_right());
    }

    // optional int32 split_size_top = 119;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_split_size_top());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int32 split_size_bottom = 120;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_split_size_bottom());
    }

    // optional int32 overall_alpha = 121;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_overall_alpha());
    }

    // optional int32 layermask_type = 125;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_layermask_type());
    }

    // optional int32 layermask_index = 126;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_layermask_index());
    }

    // optional float crop_bounds_left = 128;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 4;
    }

    // optional float crop_bounds_top = 129;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 4;
    }

    // optional float crop_bounds_right = 130;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 4;
    }

    // optional float crop_bounds_bottom = 131;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 4;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000003fu) {
    // optional int32 crop_bounds_shape = 132;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_crop_bounds_shape());
    }

    // optional float crop_mask_feather = 133;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

    // optional int32 natural_orientation = 134;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_natural_orientation());
    }

    // optional bool use_crop_mask = 135;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional float render_size_scale_x = 137;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

    // optional .KMProto.KMProject.LayerBlendModeType blend_mode = 136 [default = LAYER_BLEND_NORMAL];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_blend_mode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KMProto_KMProject_LayerCommon::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const KMProto_KMProject_LayerCommon*>(
      &from));
}

void KMProto_KMProject_LayerCommon::MergeFrom(const KMProto_KMProject_LayerCommon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KMProto.KMProject.LayerCommon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keyframes_.MergeFrom(from.keyframes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_layer_name(from._internal_layer_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_split_keyframe()->::KMProto_KMProject_KeyFrame::MergeFrom(from._internal_split_keyframe());
    }
    if (cached_has_bits & 0x00000004u) {
      render_size_scale_y_ = from.render_size_scale_y_;
    }
    if (cached_has_bits & 0x00000008u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      end_time_ = from.end_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      start_trim_ = from.start_trim_;
    }
    if (cached_has_bits & 0x00000040u) {
      end_trim_ = from.end_trim_;
    }
    if (cached_has_bits & 0x00000080u) {
      z_order_ = from.z_order_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      layer_expression_ = from.layer_expression_;
    }
    if (cached_has_bits & 0x00000200u) {
      layer_expression_duration_ = from.layer_expression_duration_;
    }
    if (cached_has_bits & 0x00000400u) {
      layer_in_expression_ = from.layer_in_expression_;
    }
    if (cached_has_bits & 0x00000800u) {
      layer_in_expression_duration_ = from.layer_in_expression_duration_;
    }
    if (cached_has_bits & 0x00001000u) {
      layer_out_expression_ = from.layer_out_expression_;
    }
    if (cached_has_bits & 0x00002000u) {
      layer_out_expression_duration_ = from.layer_out_expression_duration_;
    }
    if (cached_has_bits & 0x00004000u) {
      layer_overall_expression_ = from.layer_overall_expression_;
    }
    if (cached_has_bits & 0x00008000u) {
      layer_overall_expression_speed_ = from.layer_overall_expression_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      split_screen_type_ = from.split_screen_type_;
    }
    if (cached_has_bits & 0x00020000u) {
      split_size_left_ = from.split_size_left_;
    }
    if (cached_has_bits & 0x00040000u) {
      pinned_ = from.pinned_;
    }
    if (cached_has_bits & 0x00080000u) {
      flip_h_ = from.flip_h_;
    }
    if (cached_has_bits & 0x00100000u) {
      flip_v_ = from.flip_v_;
    }
    if (cached_has_bits & 0x00200000u) {
      layermask_enabled_ = from.layermask_enabled_;
    }
    if (cached_has_bits & 0x00400000u) {
      split_size_right_ = from.split_size_right_;
    }
    if (cached_has_bits & 0x00800000u) {
      split_size_top_ = from.split_size_top_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      split_size_bottom_ = from.split_size_bottom_;
    }
    if (cached_has_bits & 0x02000000u) {
      overall_alpha_ = from.overall_alpha_;
    }
    if (cached_has_bits & 0x04000000u) {
      layermask_type_ = from.layermask_type_;
    }
    if (cached_has_bits & 0x08000000u) {
      layermask_index_ = from.layermask_index_;
    }
    if (cached_has_bits & 0x10000000u) {
      crop_bounds_left_ = from.crop_bounds_left_;
    }
    if (cached_has_bits & 0x20000000u) {
      crop_bounds_top_ = from.crop_bounds_top_;
    }
    if (cached_has_bits & 0x40000000u) {
      crop_bounds_right_ = from.crop_bounds_right_;
    }
    if (cached_has_bits & 0x80000000u) {
      crop_bounds_bottom_ = from.crop_bounds_bottom_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      crop_bounds_shape_ = from.crop_bounds_shape_;
    }
    if (cached_has_bits & 0x00000002u) {
      crop_mask_feather_ = from.crop_mask_feather_;
    }
    if (cached_has_bits & 0x00000004u) {
      natural_orientation_ = from.natural_orientation_;
    }
    if (cached_has_bits & 0x00000008u) {
      use_crop_mask_ = from.use_crop_mask_;
    }
    if (cached_has_bits & 0x00000010u) {
      render_size_scale_x_ = from.render_size_scale_x_;
    }
    if (cached_has_bits & 0x00000020u) {
      blend_mode_ = from.blend_mode_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void KMProto_KMProject_LayerCommon::CopyFrom(const KMProto_KMProject_LayerCommon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KMProto.KMProject.LayerCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KMProto_KMProject_LayerCommon::IsInitialized() const {
  return true;
}

void KMProto_KMProject_LayerCommon::InternalSwap(KMProto_KMProject_LayerCommon* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  keyframes_.InternalSwap(&other->keyframes_);
  layer_name_.Swap(&other->layer_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KMProto_KMProject_LayerCommon, render_size_scale_x_)
      + sizeof(KMProto_KMProject_LayerCommon::render_size_scale_x_)
      - PROTOBUF_FIELD_OFFSET(KMProto_KMProject_LayerCommon, split_keyframe_)>(
          reinterpret_cast<char*>(&split_keyframe_),
          reinterpret_cast<char*>(&other->split_keyframe_));
  swap(blend_mode_, other->blend_mode_);
}

std::string KMProto_KMProject_LayerCommon::GetTypeName() const {
  return "KMProto.KMProject.LayerCommon";
}


// ===================================================================

class KMProto_KMProject_KeyFrame::_Internal {
 public:
  using HasBits = decltype(std::declval<KMProto_KMProject_KeyFrame>()._has_bits_);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_alpha(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_scalex(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_scaley(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

KMProto_KMProject_KeyFrame::KMProto_KMProject_KeyFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KMProto.KMProject.KeyFrame)
}
KMProto_KMProject_KeyFrame::KMProto_KMProject_KeyFrame(const KMProto_KMProject_KeyFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&scaley_) -
    reinterpret_cast<char*>(&time_)) + sizeof(scaley_));
  // @@protoc_insertion_point(copy_constructor:KMProto.KMProject.KeyFrame)
}

void KMProto_KMProject_KeyFrame::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&time_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&scaley_) -
      reinterpret_cast<char*>(&time_)) + sizeof(scaley_));
}

KMProto_KMProject_KeyFrame::~KMProto_KMProject_KeyFrame() {
  // @@protoc_insertion_point(destructor:KMProto.KMProject.KeyFrame)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void KMProto_KMProject_KeyFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void KMProto_KMProject_KeyFrame::ArenaDtor(void* object) {
  KMProto_KMProject_KeyFrame* _this = reinterpret_cast< KMProto_KMProject_KeyFrame* >(object);
  (void)_this;
}
void KMProto_KMProject_KeyFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KMProto_KMProject_KeyFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KMProto_KMProject_KeyFrame& KMProto_KMProject_KeyFrame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KMProto_KMProject_KeyFrame_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  return *internal_default_instance();
}


void KMProto_KMProject_KeyFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:KMProto.KMProject.KeyFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&scaley_) -
        reinterpret_cast<char*>(&time_)) + sizeof(scaley_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* KMProto_KMProject_KeyFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float time = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float scale = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_scale(&has_bits);
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float x = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float angle = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_angle(&has_bits);
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float alpha = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_alpha(&has_bits);
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float scalex = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_scalex(&has_bits);
          scalex_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float scaley = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_scaley(&has_bits);
          scaley_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KMProto_KMProject_KeyFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KMProto.KMProject.KeyFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float time = 101;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(101, this->_internal_time(), target);
  }

  // optional float scale = 102;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(102, this->_internal_scale(), target);
  }

  // optional float x = 103;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(103, this->_internal_x(), target);
  }

  // optional float y = 104;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(104, this->_internal_y(), target);
  }

  // optional float angle = 105;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(105, this->_internal_angle(), target);
  }

  // optional float alpha = 106;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(106, this->_internal_alpha(), target);
  }

  // optional float scalex = 107;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(107, this->_internal_scalex(), target);
  }

  // optional float scaley = 108;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(108, this->_internal_scaley(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KMProto.KMProject.KeyFrame)
  return target;
}

size_t KMProto_KMProject_KeyFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KMProto.KMProject.KeyFrame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float time = 101;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 4;
    }

    // optional float scale = 102;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

    // optional float x = 103;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional float y = 104;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

    // optional float angle = 105;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

    // optional float alpha = 106;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional float scalex = 107;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

    // optional float scaley = 108;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KMProto_KMProject_KeyFrame::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const KMProto_KMProject_KeyFrame*>(
      &from));
}

void KMProto_KMProject_KeyFrame::MergeFrom(const KMProto_KMProject_KeyFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KMProto.KMProject.KeyFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000002u) {
      scale_ = from.scale_;
    }
    if (cached_has_bits & 0x00000004u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000010u) {
      angle_ = from.angle_;
    }
    if (cached_has_bits & 0x00000020u) {
      alpha_ = from.alpha_;
    }
    if (cached_has_bits & 0x00000040u) {
      scalex_ = from.scalex_;
    }
    if (cached_has_bits & 0x00000080u) {
      scaley_ = from.scaley_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KMProto_KMProject_KeyFrame::CopyFrom(const KMProto_KMProject_KeyFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KMProto.KMProject.KeyFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KMProto_KMProject_KeyFrame::IsInitialized() const {
  return true;
}

void KMProto_KMProject_KeyFrame::InternalSwap(KMProto_KMProject_KeyFrame* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KMProto_KMProject_KeyFrame, scaley_)
      + sizeof(KMProto_KMProject_KeyFrame::scaley_)
      - PROTOBUF_FIELD_OFFSET(KMProto_KMProject_KeyFrame, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

std::string KMProto_KMProject_KeyFrame::GetTypeName() const {
  return "KMProto.KMProject.KeyFrame";
}


// ===================================================================

class KMProto_KMProject_TextLayer::_Internal {
 public:
  using HasBits = decltype(std::declval<KMProto_KMProject_TextLayer>()._has_bits_);
  static const ::KMProto_KMProject_LayerCommon& layer_common(const KMProto_KMProject_TextLayer* msg);
  static void set_has_layer_common(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_layer_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_text_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_font_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_text_color(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_enable_shadow(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_shadow_color(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_shadow_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_shadow_dx(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_shadow_dy(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_enable_glow(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_glow_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_glow_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_glow_type(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_enable_outline(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_outline_color(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_outline_width(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_enable_gradient(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_enable_background(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_background_color(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_extend_background(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_text_align(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_shadow_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_shadow_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_shadow_spread(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_shadow_size(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_glow_spread(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_glow_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_vertical_align(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_underline(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_space_between_characters(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_space_between_lines(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_strike_through(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_outline_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::KMProto_KMProject_LayerCommon&
KMProto_KMProject_TextLayer::_Internal::layer_common(const KMProto_KMProject_TextLayer* msg) {
  return *msg->layer_common_;
}
KMProto_KMProject_TextLayer::KMProto_KMProject_TextLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  gradient_colors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KMProto.KMProject.TextLayer)
}
KMProto_KMProject_TextLayer::KMProto_KMProject_TextLayer(const KMProto_KMProject_TextLayer& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      gradient_colors_(from.gradient_colors_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  layer_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_layer_text()) {
    layer_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_layer_text(), 
      GetArena());
  }
  font_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_font_id()) {
    font_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_font_id(), 
      GetArena());
  }
  if (from._internal_has_layer_common()) {
    layer_common_ = new ::KMProto_KMProject_LayerCommon(*from.layer_common_);
  } else {
    layer_common_ = nullptr;
  }
  ::memcpy(&outline_weight_, &from.outline_weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&space_between_lines_) -
    reinterpret_cast<char*>(&outline_weight_)) + sizeof(space_between_lines_));
  // @@protoc_insertion_point(copy_constructor:KMProto.KMProject.TextLayer)
}

void KMProto_KMProject_TextLayer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KMProto_KMProject_TextLayer_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  layer_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  font_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&layer_common_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&space_between_lines_) -
      reinterpret_cast<char*>(&layer_common_)) + sizeof(space_between_lines_));
}

KMProto_KMProject_TextLayer::~KMProto_KMProject_TextLayer() {
  // @@protoc_insertion_point(destructor:KMProto.KMProject.TextLayer)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void KMProto_KMProject_TextLayer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  layer_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  font_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete layer_common_;
}

void KMProto_KMProject_TextLayer::ArenaDtor(void* object) {
  KMProto_KMProject_TextLayer* _this = reinterpret_cast< KMProto_KMProject_TextLayer* >(object);
  (void)_this;
}
void KMProto_KMProject_TextLayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KMProto_KMProject_TextLayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KMProto_KMProject_TextLayer& KMProto_KMProject_TextLayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KMProto_KMProject_TextLayer_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  return *internal_default_instance();
}


void KMProto_KMProject_TextLayer::Clear() {
// @@protoc_insertion_point(message_clear_start:KMProto.KMProject.TextLayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gradient_colors_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      layer_text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      font_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(layer_common_ != nullptr);
      layer_common_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&outline_weight_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&shadow_radius_) -
        reinterpret_cast<char*>(&outline_weight_)) + sizeof(shadow_radius_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&shadow_dx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&glow_radius_) -
        reinterpret_cast<char*>(&shadow_dx_)) + sizeof(glow_radius_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&glow_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&shadow_spread_) -
        reinterpret_cast<char*>(&glow_type_)) + sizeof(shadow_spread_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&enable_background_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vertical_align_) -
        reinterpret_cast<char*>(&enable_background_)) + sizeof(vertical_align_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&space_between_characters_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&space_between_lines_) -
        reinterpret_cast<char*>(&space_between_characters_)) + sizeof(space_between_lines_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* KMProto_KMProject_TextLayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .KMProto.KMProject.LayerCommon layer_common = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_layer_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string layer_text = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_layer_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float text_size = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_text_size(&_has_bits_);
          text_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string font_id = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_font_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 text_color = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_text_color(&_has_bits_);
          text_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_shadow = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_enable_shadow(&_has_bits_);
          enable_shadow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 shadow_color = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_shadow_color(&_has_bits_);
          shadow_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float shadow_radius = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_shadow_radius(&_has_bits_);
          shadow_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float shadow_dx = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_shadow_dx(&_has_bits_);
          shadow_dx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float shadow_dy = 109;
      case 109:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_shadow_dy(&_has_bits_);
          shadow_dy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool enable_glow = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_enable_glow(&_has_bits_);
          enable_glow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 glow_color = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_glow_color(&_has_bits_);
          glow_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float glow_radius = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_glow_radius(&_has_bits_);
          glow_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 glow_type = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_glow_type(&_has_bits_);
          glow_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_outline = 114;
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_enable_outline(&_has_bits_);
          enable_outline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 outline_color = 115;
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_outline_color(&_has_bits_);
          outline_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float outline_width = 116;
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_outline_width(&_has_bits_);
          outline_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool enable_gradient = 117;
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_enable_gradient(&_has_bits_);
          enable_gradient_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 gradient_colors = 118;
      case 118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_gradient_colors(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<944>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_gradient_colors(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_background = 119;
      case 119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_enable_background(&_has_bits_);
          enable_background_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 background_color = 120;
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_background_color(&_has_bits_);
          background_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool extend_background = 121;
      case 121:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_extend_background(&_has_bits_);
          extend_background_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 text_align = 122;
      case 122:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_text_align(&_has_bits_);
          text_align_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float shadow_angle = 123;
      case 123:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          _Internal::set_has_shadow_angle(&_has_bits_);
          shadow_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float shadow_distance = 124;
      case 124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          _Internal::set_has_shadow_distance(&_has_bits_);
          shadow_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float shadow_spread = 125;
      case 125:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          _Internal::set_has_shadow_spread(&_has_bits_);
          shadow_spread_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float shadow_size = 126;
      case 126:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          _Internal::set_has_shadow_size(&_has_bits_);
          shadow_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float glow_spread = 127;
      case 127:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          _Internal::set_has_glow_spread(&_has_bits_);
          glow_spread_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float glow_size = 128;
      case 128:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          _Internal::set_has_glow_size(&_has_bits_);
          glow_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 vertical_align = 129;
      case 129:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_vertical_align(&_has_bits_);
          vertical_align_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool underline = 130;
      case 130:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_underline(&_has_bits_);
          underline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float space_between_characters = 131;
      case 131:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_space_between_characters(&_has_bits_);
          space_between_characters_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float space_between_lines = 132;
      case 132:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_space_between_lines(&_has_bits_);
          space_between_lines_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool strike_through = 133;
      case 133:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_strike_through(&_has_bits_);
          strike_through_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float outline_weight = 134;
      case 134:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_outline_weight(&_has_bits_);
          outline_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KMProto_KMProject_TextLayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KMProto.KMProject.TextLayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .KMProto.KMProject.LayerCommon layer_common = 100;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::layer_common(this), target, stream);
  }

  // optional string layer_text = 101;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        101, this->_internal_layer_text(), target);
  }

  // optional float text_size = 102;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(102, this->_internal_text_size(), target);
  }

  // optional string font_id = 103;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        103, this->_internal_font_id(), target);
  }

  // optional uint32 text_color = 104;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(104, this->_internal_text_color(), target);
  }

  // optional bool enable_shadow = 105;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(105, this->_internal_enable_shadow(), target);
  }

  // optional uint32 shadow_color = 106;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(106, this->_internal_shadow_color(), target);
  }

  // optional float shadow_radius = 107;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(107, this->_internal_shadow_radius(), target);
  }

  // optional float shadow_dx = 108;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(108, this->_internal_shadow_dx(), target);
  }

  // optional float shadow_dy = 109;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(109, this->_internal_shadow_dy(), target);
  }

  // optional bool enable_glow = 110;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(110, this->_internal_enable_glow(), target);
  }

  // optional uint32 glow_color = 111;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(111, this->_internal_glow_color(), target);
  }

  // optional float glow_radius = 112;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(112, this->_internal_glow_radius(), target);
  }

  // optional int32 glow_type = 113;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(113, this->_internal_glow_type(), target);
  }

  // optional bool enable_outline = 114;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(114, this->_internal_enable_outline(), target);
  }

  // optional uint32 outline_color = 115;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(115, this->_internal_outline_color(), target);
  }

  // optional float outline_width = 116;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(116, this->_internal_outline_width(), target);
  }

  // optional bool enable_gradient = 117;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(117, this->_internal_enable_gradient(), target);
  }

  // repeated int32 gradient_colors = 118;
  for (int i = 0, n = this->_internal_gradient_colors_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(118, this->_internal_gradient_colors(i), target);
  }

  // optional bool enable_background = 119;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(119, this->_internal_enable_background(), target);
  }

  // optional uint32 background_color = 120;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(120, this->_internal_background_color(), target);
  }

  // optional bool extend_background = 121;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(121, this->_internal_extend_background(), target);
  }

  // optional int32 text_align = 122;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(122, this->_internal_text_align(), target);
  }

  // optional float shadow_angle = 123;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(123, this->_internal_shadow_angle(), target);
  }

  // optional float shadow_distance = 124;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(124, this->_internal_shadow_distance(), target);
  }

  // optional float shadow_spread = 125;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(125, this->_internal_shadow_spread(), target);
  }

  // optional float shadow_size = 126;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(126, this->_internal_shadow_size(), target);
  }

  // optional float glow_spread = 127;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(127, this->_internal_glow_spread(), target);
  }

  // optional float glow_size = 128;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(128, this->_internal_glow_size(), target);
  }

  // optional int32 vertical_align = 129;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(129, this->_internal_vertical_align(), target);
  }

  // optional bool underline = 130;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(130, this->_internal_underline(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float space_between_characters = 131;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(131, this->_internal_space_between_characters(), target);
  }

  // optional float space_between_lines = 132;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(132, this->_internal_space_between_lines(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool strike_through = 133;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(133, this->_internal_strike_through(), target);
  }

  // optional float outline_weight = 134;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(134, this->_internal_outline_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KMProto.KMProject.TextLayer)
  return target;
}

size_t KMProto_KMProject_TextLayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KMProto.KMProject.TextLayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 gradient_colors = 118;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->gradient_colors_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_gradient_colors_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string layer_text = 101;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_layer_text());
    }

    // optional string font_id = 103;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_font_id());
    }

    // optional .KMProto.KMProject.LayerCommon layer_common = 100;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *layer_common_);
    }

    // optional float outline_weight = 134;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

    // optional float text_size = 102;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

    // optional uint32 text_color = 104;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_text_color());
    }

    // optional uint32 shadow_color = 106;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_shadow_color());
    }

    // optional float shadow_radius = 107;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float shadow_dx = 108;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 4;
    }

    // optional float shadow_dy = 109;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 4;
    }

    // optional uint32 glow_color = 111;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_glow_color());
    }

    // optional bool enable_shadow = 105;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool enable_glow = 110;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool enable_outline = 114;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional bool enable_gradient = 117;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional float glow_radius = 112;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int32 glow_type = 113;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_glow_type());
    }

    // optional uint32 outline_color = 115;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_outline_color());
    }

    // optional float outline_width = 116;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional uint32 background_color = 120;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_background_color());
    }

    // optional int32 text_align = 122;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_text_align());
    }

    // optional float shadow_angle = 123;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 4;
    }

    // optional float shadow_distance = 124;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 4;
    }

    // optional float shadow_spread = 125;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool enable_background = 119;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional bool extend_background = 121;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional bool underline = 130;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional bool strike_through = 133;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional float shadow_size = 126;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 4;
    }

    // optional float glow_spread = 127;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 4;
    }

    // optional float glow_size = 128;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 4;
    }

    // optional int32 vertical_align = 129;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_vertical_align());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000003u) {
    // optional float space_between_characters = 131;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 4;
    }

    // optional float space_between_lines = 132;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KMProto_KMProject_TextLayer::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const KMProto_KMProject_TextLayer*>(
      &from));
}

void KMProto_KMProject_TextLayer::MergeFrom(const KMProto_KMProject_TextLayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KMProto.KMProject.TextLayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gradient_colors_.MergeFrom(from.gradient_colors_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_layer_text(from._internal_layer_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_font_id(from._internal_font_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_layer_common()->::KMProto_KMProject_LayerCommon::MergeFrom(from._internal_layer_common());
    }
    if (cached_has_bits & 0x00000008u) {
      outline_weight_ = from.outline_weight_;
    }
    if (cached_has_bits & 0x00000010u) {
      text_size_ = from.text_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      text_color_ = from.text_color_;
    }
    if (cached_has_bits & 0x00000040u) {
      shadow_color_ = from.shadow_color_;
    }
    if (cached_has_bits & 0x00000080u) {
      shadow_radius_ = from.shadow_radius_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      shadow_dx_ = from.shadow_dx_;
    }
    if (cached_has_bits & 0x00000200u) {
      shadow_dy_ = from.shadow_dy_;
    }
    if (cached_has_bits & 0x00000400u) {
      glow_color_ = from.glow_color_;
    }
    if (cached_has_bits & 0x00000800u) {
      enable_shadow_ = from.enable_shadow_;
    }
    if (cached_has_bits & 0x00001000u) {
      enable_glow_ = from.enable_glow_;
    }
    if (cached_has_bits & 0x00002000u) {
      enable_outline_ = from.enable_outline_;
    }
    if (cached_has_bits & 0x00004000u) {
      enable_gradient_ = from.enable_gradient_;
    }
    if (cached_has_bits & 0x00008000u) {
      glow_radius_ = from.glow_radius_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      glow_type_ = from.glow_type_;
    }
    if (cached_has_bits & 0x00020000u) {
      outline_color_ = from.outline_color_;
    }
    if (cached_has_bits & 0x00040000u) {
      outline_width_ = from.outline_width_;
    }
    if (cached_has_bits & 0x00080000u) {
      background_color_ = from.background_color_;
    }
    if (cached_has_bits & 0x00100000u) {
      text_align_ = from.text_align_;
    }
    if (cached_has_bits & 0x00200000u) {
      shadow_angle_ = from.shadow_angle_;
    }
    if (cached_has_bits & 0x00400000u) {
      shadow_distance_ = from.shadow_distance_;
    }
    if (cached_has_bits & 0x00800000u) {
      shadow_spread_ = from.shadow_spread_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      enable_background_ = from.enable_background_;
    }
    if (cached_has_bits & 0x02000000u) {
      extend_background_ = from.extend_background_;
    }
    if (cached_has_bits & 0x04000000u) {
      underline_ = from.underline_;
    }
    if (cached_has_bits & 0x08000000u) {
      strike_through_ = from.strike_through_;
    }
    if (cached_has_bits & 0x10000000u) {
      shadow_size_ = from.shadow_size_;
    }
    if (cached_has_bits & 0x20000000u) {
      glow_spread_ = from.glow_spread_;
    }
    if (cached_has_bits & 0x40000000u) {
      glow_size_ = from.glow_size_;
    }
    if (cached_has_bits & 0x80000000u) {
      vertical_align_ = from.vertical_align_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      space_between_characters_ = from.space_between_characters_;
    }
    if (cached_has_bits & 0x00000002u) {
      space_between_lines_ = from.space_between_lines_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void KMProto_KMProject_TextLayer::CopyFrom(const KMProto_KMProject_TextLayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KMProto.KMProject.TextLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KMProto_KMProject_TextLayer::IsInitialized() const {
  return true;
}

void KMProto_KMProject_TextLayer::InternalSwap(KMProto_KMProject_TextLayer* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  gradient_colors_.InternalSwap(&other->gradient_colors_);
  layer_text_.Swap(&other->layer_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  font_id_.Swap(&other->font_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KMProto_KMProject_TextLayer, space_between_lines_)
      + sizeof(KMProto_KMProject_TextLayer::space_between_lines_)
      - PROTOBUF_FIELD_OFFSET(KMProto_KMProject_TextLayer, layer_common_)>(
          reinterpret_cast<char*>(&layer_common_),
          reinterpret_cast<char*>(&other->layer_common_));
}

std::string KMProto_KMProject_TextLayer::GetTypeName() const {
  return "KMProto.KMProject.TextLayer";
}


// ===================================================================

class KMProto_KMProject_HandwritingLayer::_Internal {
 public:
  using HasBits = decltype(std::declval<KMProto_KMProject_HandwritingLayer>()._has_bits_);
  static const ::KMProto_KMProject_LayerCommon& layer_common(const KMProto_KMProject_HandwritingLayer* msg);
  static void set_has_layer_common(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pivot_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pivot_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::KMProto_KMProject_LayerCommon&
KMProto_KMProject_HandwritingLayer::_Internal::layer_common(const KMProto_KMProject_HandwritingLayer* msg) {
  return *msg->layer_common_;
}
KMProto_KMProject_HandwritingLayer::KMProto_KMProject_HandwritingLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  drawing_actions_(arena),
  handwriting_frame_ios_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KMProto.KMProject.HandwritingLayer)
}
KMProto_KMProject_HandwritingLayer::KMProto_KMProject_HandwritingLayer(const KMProto_KMProject_HandwritingLayer& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      drawing_actions_(from.drawing_actions_),
      handwriting_frame_ios_(from.handwriting_frame_ios_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_layer_common()) {
    layer_common_ = new ::KMProto_KMProject_LayerCommon(*from.layer_common_);
  } else {
    layer_common_ = nullptr;
  }
  ::memcpy(&pivot_x_, &from.pivot_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&pivot_y_) -
    reinterpret_cast<char*>(&pivot_x_)) + sizeof(pivot_y_));
  // @@protoc_insertion_point(copy_constructor:KMProto.KMProject.HandwritingLayer)
}

void KMProto_KMProject_HandwritingLayer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KMProto_KMProject_HandwritingLayer_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&layer_common_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&pivot_y_) -
      reinterpret_cast<char*>(&layer_common_)) + sizeof(pivot_y_));
}

KMProto_KMProject_HandwritingLayer::~KMProto_KMProject_HandwritingLayer() {
  // @@protoc_insertion_point(destructor:KMProto.KMProject.HandwritingLayer)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void KMProto_KMProject_HandwritingLayer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete layer_common_;
}

void KMProto_KMProject_HandwritingLayer::ArenaDtor(void* object) {
  KMProto_KMProject_HandwritingLayer* _this = reinterpret_cast< KMProto_KMProject_HandwritingLayer* >(object);
  (void)_this;
}
void KMProto_KMProject_HandwritingLayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KMProto_KMProject_HandwritingLayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KMProto_KMProject_HandwritingLayer& KMProto_KMProject_HandwritingLayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KMProto_KMProject_HandwritingLayer_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  return *internal_default_instance();
}


void KMProto_KMProject_HandwritingLayer::Clear() {
// @@protoc_insertion_point(message_clear_start:KMProto.KMProject.HandwritingLayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  drawing_actions_.Clear();
  handwriting_frame_ios_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(layer_common_ != nullptr);
    layer_common_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&pivot_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pivot_y_) -
        reinterpret_cast<char*>(&pivot_x_)) + sizeof(pivot_y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* KMProto_KMProject_HandwritingLayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .KMProto.KMProject.DrawingAction drawing_actions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drawing_actions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .KMProto.KMProject.LayerCommon layer_common = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_layer_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pivot_x = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_pivot_x(&has_bits);
          pivot_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pivot_y = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_pivot_y(&has_bits);
          pivot_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KMProto.KMProject.WritingPoint handwriting_frame_ios = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_handwriting_frame_ios(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<826>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KMProto_KMProject_HandwritingLayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KMProto.KMProject.HandwritingLayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .KMProto.KMProject.DrawingAction drawing_actions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_drawing_actions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_drawing_actions(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .KMProto.KMProject.LayerCommon layer_common = 100;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::layer_common(this), target, stream);
  }

  // optional int32 pivot_x = 101;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(101, this->_internal_pivot_x(), target);
  }

  // optional int32 pivot_y = 102;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(102, this->_internal_pivot_y(), target);
  }

  // repeated .KMProto.KMProject.WritingPoint handwriting_frame_ios = 103;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_handwriting_frame_ios_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(103, this->_internal_handwriting_frame_ios(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KMProto.KMProject.HandwritingLayer)
  return target;
}

size_t KMProto_KMProject_HandwritingLayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KMProto.KMProject.HandwritingLayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KMProto.KMProject.DrawingAction drawing_actions = 1;
  total_size += 1UL * this->_internal_drawing_actions_size();
  for (const auto& msg : this->drawing_actions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KMProto.KMProject.WritingPoint handwriting_frame_ios = 103;
  total_size += 2UL * this->_internal_handwriting_frame_ios_size();
  for (const auto& msg : this->handwriting_frame_ios_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .KMProto.KMProject.LayerCommon layer_common = 100;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *layer_common_);
    }

    // optional int32 pivot_x = 101;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_pivot_x());
    }

    // optional int32 pivot_y = 102;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_pivot_y());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KMProto_KMProject_HandwritingLayer::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const KMProto_KMProject_HandwritingLayer*>(
      &from));
}

void KMProto_KMProject_HandwritingLayer::MergeFrom(const KMProto_KMProject_HandwritingLayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KMProto.KMProject.HandwritingLayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  drawing_actions_.MergeFrom(from.drawing_actions_);
  handwriting_frame_ios_.MergeFrom(from.handwriting_frame_ios_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_layer_common()->::KMProto_KMProject_LayerCommon::MergeFrom(from._internal_layer_common());
    }
    if (cached_has_bits & 0x00000002u) {
      pivot_x_ = from.pivot_x_;
    }
    if (cached_has_bits & 0x00000004u) {
      pivot_y_ = from.pivot_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KMProto_KMProject_HandwritingLayer::CopyFrom(const KMProto_KMProject_HandwritingLayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KMProto.KMProject.HandwritingLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KMProto_KMProject_HandwritingLayer::IsInitialized() const {
  return true;
}

void KMProto_KMProject_HandwritingLayer::InternalSwap(KMProto_KMProject_HandwritingLayer* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  drawing_actions_.InternalSwap(&other->drawing_actions_);
  handwriting_frame_ios_.InternalSwap(&other->handwriting_frame_ios_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KMProto_KMProject_HandwritingLayer, pivot_y_)
      + sizeof(KMProto_KMProject_HandwritingLayer::pivot_y_)
      - PROTOBUF_FIELD_OFFSET(KMProto_KMProject_HandwritingLayer, layer_common_)>(
          reinterpret_cast<char*>(&layer_common_),
          reinterpret_cast<char*>(&other->layer_common_));
}

std::string KMProto_KMProject_HandwritingLayer::GetTypeName() const {
  return "KMProto.KMProject.HandwritingLayer";
}


// ===================================================================

class KMProto_KMProject_StickerLayer::_Internal {
 public:
  using HasBits = decltype(std::declval<KMProto_KMProject_StickerLayer>()._has_bits_);
  static const ::KMProto_KMProject_LayerCommon& layer_common(const KMProto_KMProject_StickerLayer* msg);
  static void set_has_layer_common(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_colorize_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_colorize_color(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sticker_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::KMProto_KMProject_LayerCommon&
KMProto_KMProject_StickerLayer::_Internal::layer_common(const KMProto_KMProject_StickerLayer* msg) {
  return *msg->layer_common_;
}
KMProto_KMProject_StickerLayer::KMProto_KMProject_StickerLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KMProto.KMProject.StickerLayer)
}
KMProto_KMProject_StickerLayer::KMProto_KMProject_StickerLayer(const KMProto_KMProject_StickerLayer& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_layer_common()) {
    layer_common_ = new ::KMProto_KMProject_LayerCommon(*from.layer_common_);
  } else {
    layer_common_ = nullptr;
  }
  ::memcpy(&sticker_id_, &from.sticker_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&colorize_color_) -
    reinterpret_cast<char*>(&sticker_id_)) + sizeof(colorize_color_));
  // @@protoc_insertion_point(copy_constructor:KMProto.KMProject.StickerLayer)
}

void KMProto_KMProject_StickerLayer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KMProto_KMProject_StickerLayer_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&layer_common_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&colorize_color_) -
      reinterpret_cast<char*>(&layer_common_)) + sizeof(colorize_color_));
}

KMProto_KMProject_StickerLayer::~KMProto_KMProject_StickerLayer() {
  // @@protoc_insertion_point(destructor:KMProto.KMProject.StickerLayer)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void KMProto_KMProject_StickerLayer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete layer_common_;
}

void KMProto_KMProject_StickerLayer::ArenaDtor(void* object) {
  KMProto_KMProject_StickerLayer* _this = reinterpret_cast< KMProto_KMProject_StickerLayer* >(object);
  (void)_this;
}
void KMProto_KMProject_StickerLayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KMProto_KMProject_StickerLayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KMProto_KMProject_StickerLayer& KMProto_KMProject_StickerLayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KMProto_KMProject_StickerLayer_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  return *internal_default_instance();
}


void KMProto_KMProject_StickerLayer::Clear() {
// @@protoc_insertion_point(message_clear_start:KMProto.KMProject.StickerLayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(layer_common_ != nullptr);
    layer_common_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&sticker_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&colorize_color_) -
        reinterpret_cast<char*>(&sticker_id_)) + sizeof(colorize_color_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* KMProto_KMProject_StickerLayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .KMProto.KMProject.LayerCommon layer_common = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_layer_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool colorize_enabled = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_colorize_enabled(&has_bits);
          colorize_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 colorize_color = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_colorize_color(&has_bits);
          colorize_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sticker_id = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_sticker_id(&has_bits);
          sticker_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KMProto_KMProject_StickerLayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KMProto.KMProject.StickerLayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .KMProto.KMProject.LayerCommon layer_common = 100;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::layer_common(this), target, stream);
  }

  // optional bool colorize_enabled = 101;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(101, this->_internal_colorize_enabled(), target);
  }

  // optional int32 colorize_color = 102;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(102, this->_internal_colorize_color(), target);
  }

  // optional int32 sticker_id = 103;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(103, this->_internal_sticker_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KMProto.KMProject.StickerLayer)
  return target;
}

size_t KMProto_KMProject_StickerLayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KMProto.KMProject.StickerLayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .KMProto.KMProject.LayerCommon layer_common = 100;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *layer_common_);
    }

    // optional int32 sticker_id = 103;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sticker_id());
    }

    // optional bool colorize_enabled = 101;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional int32 colorize_color = 102;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_colorize_color());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KMProto_KMProject_StickerLayer::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const KMProto_KMProject_StickerLayer*>(
      &from));
}

void KMProto_KMProject_StickerLayer::MergeFrom(const KMProto_KMProject_StickerLayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KMProto.KMProject.StickerLayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_layer_common()->::KMProto_KMProject_LayerCommon::MergeFrom(from._internal_layer_common());
    }
    if (cached_has_bits & 0x00000002u) {
      sticker_id_ = from.sticker_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      colorize_enabled_ = from.colorize_enabled_;
    }
    if (cached_has_bits & 0x00000008u) {
      colorize_color_ = from.colorize_color_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KMProto_KMProject_StickerLayer::CopyFrom(const KMProto_KMProject_StickerLayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KMProto.KMProject.StickerLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KMProto_KMProject_StickerLayer::IsInitialized() const {
  return true;
}

void KMProto_KMProject_StickerLayer::InternalSwap(KMProto_KMProject_StickerLayer* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KMProto_KMProject_StickerLayer, colorize_color_)
      + sizeof(KMProto_KMProject_StickerLayer::colorize_color_)
      - PROTOBUF_FIELD_OFFSET(KMProto_KMProject_StickerLayer, layer_common_)>(
          reinterpret_cast<char*>(&layer_common_),
          reinterpret_cast<char*>(&other->layer_common_));
}

std::string KMProto_KMProject_StickerLayer::GetTypeName() const {
  return "KMProto.KMProject.StickerLayer";
}


// ===================================================================

class KMProto_KMProject_AssetLayer::_Internal {
 public:
  using HasBits = decltype(std::declval<KMProto_KMProject_AssetLayer>()._has_bits_);
  static const ::KMProto_KMProject_LayerCommon& layer_common(const KMProto_KMProject_AssetLayer* msg);
  static void set_has_layer_common(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_asset_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::KMProto_KMProject_StringHashMap& effect_options(const KMProto_KMProject_AssetLayer* msg);
  static void set_has_effect_options(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_asset_layer_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_asset_item_name_for_ios(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_asset_name_for_ios(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sync_xy_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::KMProto_KMProject_LayerCommon&
KMProto_KMProject_AssetLayer::_Internal::layer_common(const KMProto_KMProject_AssetLayer* msg) {
  return *msg->layer_common_;
}
const ::KMProto_KMProject_StringHashMap&
KMProto_KMProject_AssetLayer::_Internal::effect_options(const KMProto_KMProject_AssetLayer* msg) {
  return *msg->effect_options_;
}
KMProto_KMProject_AssetLayer::KMProto_KMProject_AssetLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  effectoption_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KMProto.KMProject.AssetLayer)
}
KMProto_KMProject_AssetLayer::KMProto_KMProject_AssetLayer(const KMProto_KMProject_AssetLayer& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      effectoption_(from.effectoption_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  asset_item_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_asset_item_id()) {
    asset_item_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset_item_id(), 
      GetArena());
  }
  asset_item_name_for_ios_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_asset_item_name_for_ios()) {
    asset_item_name_for_ios_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset_item_name_for_ios(), 
      GetArena());
  }
  asset_name_for_ios_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_asset_name_for_ios()) {
    asset_name_for_ios_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset_name_for_ios(), 
      GetArena());
  }
  if (from._internal_has_layer_common()) {
    layer_common_ = new ::KMProto_KMProject_LayerCommon(*from.layer_common_);
  } else {
    layer_common_ = nullptr;
  }
  if (from._internal_has_effect_options()) {
    effect_options_ = new ::KMProto_KMProject_StringHashMap(*from.effect_options_);
  } else {
    effect_options_ = nullptr;
  }
  ::memcpy(&sync_xy_scale_, &from.sync_xy_scale_,
    static_cast<size_t>(reinterpret_cast<char*>(&asset_layer_type_) -
    reinterpret_cast<char*>(&sync_xy_scale_)) + sizeof(asset_layer_type_));
  // @@protoc_insertion_point(copy_constructor:KMProto.KMProject.AssetLayer)
}

void KMProto_KMProject_AssetLayer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KMProto_KMProject_AssetLayer_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  asset_item_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_item_name_for_ios_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_name_for_ios_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&layer_common_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sync_xy_scale_) -
      reinterpret_cast<char*>(&layer_common_)) + sizeof(sync_xy_scale_));
  asset_layer_type_ = 1;
}

KMProto_KMProject_AssetLayer::~KMProto_KMProject_AssetLayer() {
  // @@protoc_insertion_point(destructor:KMProto.KMProject.AssetLayer)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void KMProto_KMProject_AssetLayer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  asset_item_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_item_name_for_ios_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_name_for_ios_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete layer_common_;
  if (this != internal_default_instance()) delete effect_options_;
}

void KMProto_KMProject_AssetLayer::ArenaDtor(void* object) {
  KMProto_KMProject_AssetLayer* _this = reinterpret_cast< KMProto_KMProject_AssetLayer* >(object);
  (void)_this;
}
void KMProto_KMProject_AssetLayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KMProto_KMProject_AssetLayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KMProto_KMProject_AssetLayer& KMProto_KMProject_AssetLayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KMProto_KMProject_AssetLayer_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  return *internal_default_instance();
}


void KMProto_KMProject_AssetLayer::Clear() {
// @@protoc_insertion_point(message_clear_start:KMProto.KMProject.AssetLayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  effectoption_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      asset_item_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      asset_item_name_for_ios_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      asset_name_for_ios_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(layer_common_ != nullptr);
      layer_common_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(effect_options_ != nullptr);
      effect_options_->Clear();
    }
  }
  if (cached_has_bits & 0x00000060u) {
    sync_xy_scale_ = false;
    asset_layer_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* KMProto_KMProject_AssetLayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .KMProto.KMProject.LayerCommon layer_common = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_layer_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string asset_item_id = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_asset_item_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KMProto.KMProject.StringHashMap effect_options = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_effect_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KMProto.KMProject.AssetLayer.AssetLayerType asset_layer_type = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KMProto_KMProject_AssetLayer_AssetLayerType_IsValid(val))) {
            _internal_set_asset_layer_type(static_cast<::KMProto_KMProject_AssetLayer_AssetLayerType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(103, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string asset_item_name_for_ios = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_asset_item_name_for_ios();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string asset_name_for_ios = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_asset_name_for_ios();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool sync_xy_scale = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_sync_xy_scale(&has_bits);
          sync_xy_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KMProto.KMProject.EffectOptionItem effectOption = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_effectoption(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<858>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KMProto_KMProject_AssetLayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KMProto.KMProject.AssetLayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .KMProto.KMProject.LayerCommon layer_common = 100;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::layer_common(this), target, stream);
  }

  // optional string asset_item_id = 101;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        101, this->_internal_asset_item_id(), target);
  }

  // optional .KMProto.KMProject.StringHashMap effect_options = 102;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        102, _Internal::effect_options(this), target, stream);
  }

  // optional .KMProto.KMProject.AssetLayer.AssetLayerType asset_layer_type = 103;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      103, this->_internal_asset_layer_type(), target);
  }

  // optional string asset_item_name_for_ios = 104;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        104, this->_internal_asset_item_name_for_ios(), target);
  }

  // optional string asset_name_for_ios = 105;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        105, this->_internal_asset_name_for_ios(), target);
  }

  // optional bool sync_xy_scale = 106;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(106, this->_internal_sync_xy_scale(), target);
  }

  // repeated .KMProto.KMProject.EffectOptionItem effectOption = 107;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_effectoption_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(107, this->_internal_effectoption(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KMProto.KMProject.AssetLayer)
  return target;
}

size_t KMProto_KMProject_AssetLayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KMProto.KMProject.AssetLayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KMProto.KMProject.EffectOptionItem effectOption = 107;
  total_size += 2UL * this->_internal_effectoption_size();
  for (const auto& msg : this->effectoption_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string asset_item_id = 101;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_asset_item_id());
    }

    // optional string asset_item_name_for_ios = 104;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_asset_item_name_for_ios());
    }

    // optional string asset_name_for_ios = 105;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_asset_name_for_ios());
    }

    // optional .KMProto.KMProject.LayerCommon layer_common = 100;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *layer_common_);
    }

    // optional .KMProto.KMProject.StringHashMap effect_options = 102;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *effect_options_);
    }

    // optional bool sync_xy_scale = 106;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional .KMProto.KMProject.AssetLayer.AssetLayerType asset_layer_type = 103;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_asset_layer_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KMProto_KMProject_AssetLayer::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const KMProto_KMProject_AssetLayer*>(
      &from));
}

void KMProto_KMProject_AssetLayer::MergeFrom(const KMProto_KMProject_AssetLayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KMProto.KMProject.AssetLayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  effectoption_.MergeFrom(from.effectoption_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_asset_item_id(from._internal_asset_item_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_asset_item_name_for_ios(from._internal_asset_item_name_for_ios());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_asset_name_for_ios(from._internal_asset_name_for_ios());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_layer_common()->::KMProto_KMProject_LayerCommon::MergeFrom(from._internal_layer_common());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_effect_options()->::KMProto_KMProject_StringHashMap::MergeFrom(from._internal_effect_options());
    }
    if (cached_has_bits & 0x00000020u) {
      sync_xy_scale_ = from.sync_xy_scale_;
    }
    if (cached_has_bits & 0x00000040u) {
      asset_layer_type_ = from.asset_layer_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KMProto_KMProject_AssetLayer::CopyFrom(const KMProto_KMProject_AssetLayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KMProto.KMProject.AssetLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KMProto_KMProject_AssetLayer::IsInitialized() const {
  return true;
}

void KMProto_KMProject_AssetLayer::InternalSwap(KMProto_KMProject_AssetLayer* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  effectoption_.InternalSwap(&other->effectoption_);
  asset_item_id_.Swap(&other->asset_item_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  asset_item_name_for_ios_.Swap(&other->asset_item_name_for_ios_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  asset_name_for_ios_.Swap(&other->asset_name_for_ios_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KMProto_KMProject_AssetLayer, sync_xy_scale_)
      + sizeof(KMProto_KMProject_AssetLayer::sync_xy_scale_)
      - PROTOBUF_FIELD_OFFSET(KMProto_KMProject_AssetLayer, layer_common_)>(
          reinterpret_cast<char*>(&layer_common_),
          reinterpret_cast<char*>(&other->layer_common_));
  swap(asset_layer_type_, other->asset_layer_type_);
}

std::string KMProto_KMProject_AssetLayer::GetTypeName() const {
  return "KMProto.KMProject.AssetLayer";
}


// ===================================================================

class KMProto_KMProject_EffectLayer::_Internal {
 public:
  using HasBits = decltype(std::declval<KMProto_KMProject_EffectLayer>()._has_bits_);
  static const ::KMProto_KMProject_LayerCommon& layer_common(const KMProto_KMProject_EffectLayer* msg);
  static void set_has_layer_common(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_effect_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_effect_strength(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_effect_variation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::KMProto_KMProject_LayerCommon&
KMProto_KMProject_EffectLayer::_Internal::layer_common(const KMProto_KMProject_EffectLayer* msg) {
  return *msg->layer_common_;
}
KMProto_KMProject_EffectLayer::KMProto_KMProject_EffectLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KMProto.KMProject.EffectLayer)
}
KMProto_KMProject_EffectLayer::KMProto_KMProject_EffectLayer(const KMProto_KMProject_EffectLayer& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  effect_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_effect_id()) {
    effect_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_effect_id(), 
      GetArena());
  }
  if (from._internal_has_layer_common()) {
    layer_common_ = new ::KMProto_KMProject_LayerCommon(*from.layer_common_);
  } else {
    layer_common_ = nullptr;
  }
  ::memcpy(&effect_strength_, &from.effect_strength_,
    static_cast<size_t>(reinterpret_cast<char*>(&effect_variation_) -
    reinterpret_cast<char*>(&effect_strength_)) + sizeof(effect_variation_));
  // @@protoc_insertion_point(copy_constructor:KMProto.KMProject.EffectLayer)
}

void KMProto_KMProject_EffectLayer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KMProto_KMProject_EffectLayer_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  effect_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&layer_common_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&effect_variation_) -
      reinterpret_cast<char*>(&layer_common_)) + sizeof(effect_variation_));
}

KMProto_KMProject_EffectLayer::~KMProto_KMProject_EffectLayer() {
  // @@protoc_insertion_point(destructor:KMProto.KMProject.EffectLayer)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void KMProto_KMProject_EffectLayer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  effect_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete layer_common_;
}

void KMProto_KMProject_EffectLayer::ArenaDtor(void* object) {
  KMProto_KMProject_EffectLayer* _this = reinterpret_cast< KMProto_KMProject_EffectLayer* >(object);
  (void)_this;
}
void KMProto_KMProject_EffectLayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KMProto_KMProject_EffectLayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KMProto_KMProject_EffectLayer& KMProto_KMProject_EffectLayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KMProto_KMProject_EffectLayer_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  return *internal_default_instance();
}


void KMProto_KMProject_EffectLayer::Clear() {
// @@protoc_insertion_point(message_clear_start:KMProto.KMProject.EffectLayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      effect_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(layer_common_ != nullptr);
      layer_common_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&effect_strength_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&effect_variation_) -
        reinterpret_cast<char*>(&effect_strength_)) + sizeof(effect_variation_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* KMProto_KMProject_EffectLayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .KMProto.KMProject.LayerCommon layer_common = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_layer_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string effect_id = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_effect_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float effect_strength = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_effect_strength(&has_bits);
          effect_strength_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float effect_variation = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_effect_variation(&has_bits);
          effect_variation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KMProto_KMProject_EffectLayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KMProto.KMProject.EffectLayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .KMProto.KMProject.LayerCommon layer_common = 100;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::layer_common(this), target, stream);
  }

  // optional string effect_id = 101;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        101, this->_internal_effect_id(), target);
  }

  // optional float effect_strength = 102;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(102, this->_internal_effect_strength(), target);
  }

  // optional float effect_variation = 103;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(103, this->_internal_effect_variation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KMProto.KMProject.EffectLayer)
  return target;
}

size_t KMProto_KMProject_EffectLayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KMProto.KMProject.EffectLayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string effect_id = 101;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_effect_id());
    }

    // optional .KMProto.KMProject.LayerCommon layer_common = 100;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *layer_common_);
    }

    // optional float effect_strength = 102;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional float effect_variation = 103;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KMProto_KMProject_EffectLayer::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const KMProto_KMProject_EffectLayer*>(
      &from));
}

void KMProto_KMProject_EffectLayer::MergeFrom(const KMProto_KMProject_EffectLayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KMProto.KMProject.EffectLayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_effect_id(from._internal_effect_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_layer_common()->::KMProto_KMProject_LayerCommon::MergeFrom(from._internal_layer_common());
    }
    if (cached_has_bits & 0x00000004u) {
      effect_strength_ = from.effect_strength_;
    }
    if (cached_has_bits & 0x00000008u) {
      effect_variation_ = from.effect_variation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KMProto_KMProject_EffectLayer::CopyFrom(const KMProto_KMProject_EffectLayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KMProto.KMProject.EffectLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KMProto_KMProject_EffectLayer::IsInitialized() const {
  return true;
}

void KMProto_KMProject_EffectLayer::InternalSwap(KMProto_KMProject_EffectLayer* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  effect_id_.Swap(&other->effect_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KMProto_KMProject_EffectLayer, effect_variation_)
      + sizeof(KMProto_KMProject_EffectLayer::effect_variation_)
      - PROTOBUF_FIELD_OFFSET(KMProto_KMProject_EffectLayer, layer_common_)>(
          reinterpret_cast<char*>(&layer_common_),
          reinterpret_cast<char*>(&other->layer_common_));
}

std::string KMProto_KMProject_EffectLayer::GetTypeName() const {
  return "KMProto.KMProject.EffectLayer";
}


// ===================================================================

class KMProto_KMProject_ImageLayer::_Internal {
 public:
  using HasBits = decltype(std::declval<KMProto_KMProject_ImageLayer>()._has_bits_);
  static const ::KMProto_KMProject_LayerCommon& layer_common(const KMProto_KMProject_ImageLayer* msg);
  static void set_has_layer_common(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_image_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_image_msid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_brightness(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_contrast(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_saturation(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::KMProto_KMProject_ColorEffect& color_effect(const KMProto_KMProject_ImageLayer* msg);
  static void set_has_color_effect(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_chroma_key_color(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_chroma_key_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_chroma_key_clip_fg(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_chroma_key_clip_bg(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_chroma_key_blend_x0(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_chroma_key_blend_y0(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_chroma_key_blend_x1(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_chroma_key_blend_y1(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::KMProto_KMProject_ColorAdjustment& coloradjustment(const KMProto_KMProject_ImageLayer* msg);
  static void set_has_coloradjustment(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::KMProto_KMProject_ColorFilter& colorfilter(const KMProto_KMProject_ImageLayer* msg);
  static void set_has_colorfilter(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_engine_clip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

const ::KMProto_KMProject_LayerCommon&
KMProto_KMProject_ImageLayer::_Internal::layer_common(const KMProto_KMProject_ImageLayer* msg) {
  return *msg->layer_common_;
}
const ::KMProto_KMProject_ColorEffect&
KMProto_KMProject_ImageLayer::_Internal::color_effect(const KMProto_KMProject_ImageLayer* msg) {
  return *msg->color_effect_;
}
const ::KMProto_KMProject_ColorAdjustment&
KMProto_KMProject_ImageLayer::_Internal::coloradjustment(const KMProto_KMProject_ImageLayer* msg) {
  return *msg->coloradjustment_;
}
const ::KMProto_KMProject_ColorFilter&
KMProto_KMProject_ImageLayer::_Internal::colorfilter(const KMProto_KMProject_ImageLayer* msg) {
  return *msg->colorfilter_;
}
KMProto_KMProject_ImageLayer::KMProto_KMProject_ImageLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  drawing_actions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KMProto.KMProject.ImageLayer)
}
KMProto_KMProject_ImageLayer::KMProto_KMProject_ImageLayer(const KMProto_KMProject_ImageLayer& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      drawing_actions_(from.drawing_actions_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  image_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_image_path()) {
    image_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_image_path(), 
      GetArena());
  }
  image_msid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_image_msid()) {
    image_msid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_image_msid(), 
      GetArena());
  }
  if (from._internal_has_layer_common()) {
    layer_common_ = new ::KMProto_KMProject_LayerCommon(*from.layer_common_);
  } else {
    layer_common_ = nullptr;
  }
  if (from._internal_has_color_effect()) {
    color_effect_ = new ::KMProto_KMProject_ColorEffect(*from.color_effect_);
  } else {
    color_effect_ = nullptr;
  }
  if (from._internal_has_coloradjustment()) {
    coloradjustment_ = new ::KMProto_KMProject_ColorAdjustment(*from.coloradjustment_);
  } else {
    coloradjustment_ = nullptr;
  }
  if (from._internal_has_colorfilter()) {
    colorfilter_ = new ::KMProto_KMProject_ColorFilter(*from.colorfilter_);
  } else {
    colorfilter_ = nullptr;
  }
  ::memcpy(&brightness_, &from.brightness_,
    static_cast<size_t>(reinterpret_cast<char*>(&engine_clip_id_) -
    reinterpret_cast<char*>(&brightness_)) + sizeof(engine_clip_id_));
  // @@protoc_insertion_point(copy_constructor:KMProto.KMProject.ImageLayer)
}

void KMProto_KMProject_ImageLayer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KMProto_KMProject_ImageLayer_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  image_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_msid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&layer_common_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&engine_clip_id_) -
      reinterpret_cast<char*>(&layer_common_)) + sizeof(engine_clip_id_));
}

KMProto_KMProject_ImageLayer::~KMProto_KMProject_ImageLayer() {
  // @@protoc_insertion_point(destructor:KMProto.KMProject.ImageLayer)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void KMProto_KMProject_ImageLayer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  image_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_msid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete layer_common_;
  if (this != internal_default_instance()) delete color_effect_;
  if (this != internal_default_instance()) delete coloradjustment_;
  if (this != internal_default_instance()) delete colorfilter_;
}

void KMProto_KMProject_ImageLayer::ArenaDtor(void* object) {
  KMProto_KMProject_ImageLayer* _this = reinterpret_cast< KMProto_KMProject_ImageLayer* >(object);
  (void)_this;
}
void KMProto_KMProject_ImageLayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KMProto_KMProject_ImageLayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KMProto_KMProject_ImageLayer& KMProto_KMProject_ImageLayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KMProto_KMProject_ImageLayer_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  return *internal_default_instance();
}


void KMProto_KMProject_ImageLayer::Clear() {
// @@protoc_insertion_point(message_clear_start:KMProto.KMProject.ImageLayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  drawing_actions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      image_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      image_msid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(layer_common_ != nullptr);
      layer_common_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(color_effect_ != nullptr);
      color_effect_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(coloradjustment_ != nullptr);
      coloradjustment_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(colorfilter_ != nullptr);
      colorfilter_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&brightness_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&contrast_) -
        reinterpret_cast<char*>(&brightness_)) + sizeof(contrast_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&saturation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chroma_key_blend_x1_) -
        reinterpret_cast<char*>(&saturation_)) + sizeof(chroma_key_blend_x1_));
  }
  if (cached_has_bits & 0x00030000u) {
    ::memset(&chroma_key_blend_y1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&engine_clip_id_) -
        reinterpret_cast<char*>(&chroma_key_blend_y1_)) + sizeof(engine_clip_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* KMProto_KMProject_ImageLayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .KMProto.KMProject.LayerCommon layer_common = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_layer_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string image_path = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_image_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string image_msid = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_image_msid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 brightness = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_brightness(&has_bits);
          brightness_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 contrast = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_contrast(&has_bits);
          contrast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 saturation = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_saturation(&has_bits);
          saturation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KMProto.KMProject.ColorEffect color_effect = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_color_effect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KMProto.KMProject.DrawingAction drawing_actions = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_drawing_actions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<858>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 chroma_key_color = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_chroma_key_color(&has_bits);
          chroma_key_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool chroma_key_enabled = 109;
      case 109:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_chroma_key_enabled(&has_bits);
          chroma_key_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float chroma_key_clip_fg = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_chroma_key_clip_fg(&has_bits);
          chroma_key_clip_fg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float chroma_key_clip_bg = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_chroma_key_clip_bg(&has_bits);
          chroma_key_clip_bg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float chroma_key_blend_x0 = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_chroma_key_blend_x0(&has_bits);
          chroma_key_blend_x0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float chroma_key_blend_y0 = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_chroma_key_blend_y0(&has_bits);
          chroma_key_blend_y0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float chroma_key_blend_x1 = 114;
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_chroma_key_blend_x1(&has_bits);
          chroma_key_blend_x1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float chroma_key_blend_y1 = 115;
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_chroma_key_blend_y1(&has_bits);
          chroma_key_blend_y1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .KMProto.KMProject.ColorAdjustment colorAdjustment = 116;
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_coloradjustment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KMProto.KMProject.ColorFilter colorFilter = 117;
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_colorfilter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 engine_clip_id = 118;
      case 118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_engine_clip_id(&has_bits);
          engine_clip_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KMProto_KMProject_ImageLayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KMProto.KMProject.ImageLayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .KMProto.KMProject.LayerCommon layer_common = 100;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::layer_common(this), target, stream);
  }

  // optional string image_path = 101;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        101, this->_internal_image_path(), target);
  }

  // optional string image_msid = 102;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        102, this->_internal_image_msid(), target);
  }

  // optional int32 brightness = 103;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(103, this->_internal_brightness(), target);
  }

  // optional int32 contrast = 104;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(104, this->_internal_contrast(), target);
  }

  // optional int32 saturation = 105;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(105, this->_internal_saturation(), target);
  }

  // optional .KMProto.KMProject.ColorEffect color_effect = 106;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        106, _Internal::color_effect(this), target, stream);
  }

  // repeated .KMProto.KMProject.DrawingAction drawing_actions = 107;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_drawing_actions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(107, this->_internal_drawing_actions(i), target, stream);
  }

  // optional int32 chroma_key_color = 108;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(108, this->_internal_chroma_key_color(), target);
  }

  // optional bool chroma_key_enabled = 109;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(109, this->_internal_chroma_key_enabled(), target);
  }

  // optional float chroma_key_clip_fg = 110;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(110, this->_internal_chroma_key_clip_fg(), target);
  }

  // optional float chroma_key_clip_bg = 111;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(111, this->_internal_chroma_key_clip_bg(), target);
  }

  // optional float chroma_key_blend_x0 = 112;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(112, this->_internal_chroma_key_blend_x0(), target);
  }

  // optional float chroma_key_blend_y0 = 113;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(113, this->_internal_chroma_key_blend_y0(), target);
  }

  // optional float chroma_key_blend_x1 = 114;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(114, this->_internal_chroma_key_blend_x1(), target);
  }

  // optional float chroma_key_blend_y1 = 115;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(115, this->_internal_chroma_key_blend_y1(), target);
  }

  // optional .KMProto.KMProject.ColorAdjustment colorAdjustment = 116;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        116, _Internal::coloradjustment(this), target, stream);
  }

  // optional .KMProto.KMProject.ColorFilter colorFilter = 117;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        117, _Internal::colorfilter(this), target, stream);
  }

  // optional int32 engine_clip_id = 118;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(118, this->_internal_engine_clip_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KMProto.KMProject.ImageLayer)
  return target;
}

size_t KMProto_KMProject_ImageLayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KMProto.KMProject.ImageLayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KMProto.KMProject.DrawingAction drawing_actions = 107;
  total_size += 2UL * this->_internal_drawing_actions_size();
  for (const auto& msg : this->drawing_actions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string image_path = 101;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_image_path());
    }

    // optional string image_msid = 102;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_image_msid());
    }

    // optional .KMProto.KMProject.LayerCommon layer_common = 100;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *layer_common_);
    }

    // optional .KMProto.KMProject.ColorEffect color_effect = 106;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *color_effect_);
    }

    // optional .KMProto.KMProject.ColorAdjustment colorAdjustment = 116;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *coloradjustment_);
    }

    // optional .KMProto.KMProject.ColorFilter colorFilter = 117;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *colorfilter_);
    }

    // optional int32 brightness = 103;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_brightness());
    }

    // optional int32 contrast = 104;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_contrast());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 saturation = 105;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_saturation());
    }

    // optional int32 chroma_key_color = 108;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_chroma_key_color());
    }

    // optional bool chroma_key_enabled = 109;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional float chroma_key_clip_fg = 110;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 4;
    }

    // optional float chroma_key_clip_bg = 111;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 4;
    }

    // optional float chroma_key_blend_x0 = 112;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 4;
    }

    // optional float chroma_key_blend_y0 = 113;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional float chroma_key_blend_x1 = 114;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional float chroma_key_blend_y1 = 115;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional int32 engine_clip_id = 118;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_engine_clip_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KMProto_KMProject_ImageLayer::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const KMProto_KMProject_ImageLayer*>(
      &from));
}

void KMProto_KMProject_ImageLayer::MergeFrom(const KMProto_KMProject_ImageLayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KMProto.KMProject.ImageLayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  drawing_actions_.MergeFrom(from.drawing_actions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_image_path(from._internal_image_path());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_image_msid(from._internal_image_msid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_layer_common()->::KMProto_KMProject_LayerCommon::MergeFrom(from._internal_layer_common());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_color_effect()->::KMProto_KMProject_ColorEffect::MergeFrom(from._internal_color_effect());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_coloradjustment()->::KMProto_KMProject_ColorAdjustment::MergeFrom(from._internal_coloradjustment());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_colorfilter()->::KMProto_KMProject_ColorFilter::MergeFrom(from._internal_colorfilter());
    }
    if (cached_has_bits & 0x00000040u) {
      brightness_ = from.brightness_;
    }
    if (cached_has_bits & 0x00000080u) {
      contrast_ = from.contrast_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      saturation_ = from.saturation_;
    }
    if (cached_has_bits & 0x00000200u) {
      chroma_key_color_ = from.chroma_key_color_;
    }
    if (cached_has_bits & 0x00000400u) {
      chroma_key_enabled_ = from.chroma_key_enabled_;
    }
    if (cached_has_bits & 0x00000800u) {
      chroma_key_clip_fg_ = from.chroma_key_clip_fg_;
    }
    if (cached_has_bits & 0x00001000u) {
      chroma_key_clip_bg_ = from.chroma_key_clip_bg_;
    }
    if (cached_has_bits & 0x00002000u) {
      chroma_key_blend_x0_ = from.chroma_key_blend_x0_;
    }
    if (cached_has_bits & 0x00004000u) {
      chroma_key_blend_y0_ = from.chroma_key_blend_y0_;
    }
    if (cached_has_bits & 0x00008000u) {
      chroma_key_blend_x1_ = from.chroma_key_blend_x1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      chroma_key_blend_y1_ = from.chroma_key_blend_y1_;
    }
    if (cached_has_bits & 0x00020000u) {
      engine_clip_id_ = from.engine_clip_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KMProto_KMProject_ImageLayer::CopyFrom(const KMProto_KMProject_ImageLayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KMProto.KMProject.ImageLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KMProto_KMProject_ImageLayer::IsInitialized() const {
  return true;
}

void KMProto_KMProject_ImageLayer::InternalSwap(KMProto_KMProject_ImageLayer* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  drawing_actions_.InternalSwap(&other->drawing_actions_);
  image_path_.Swap(&other->image_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  image_msid_.Swap(&other->image_msid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KMProto_KMProject_ImageLayer, engine_clip_id_)
      + sizeof(KMProto_KMProject_ImageLayer::engine_clip_id_)
      - PROTOBUF_FIELD_OFFSET(KMProto_KMProject_ImageLayer, layer_common_)>(
          reinterpret_cast<char*>(&layer_common_),
          reinterpret_cast<char*>(&other->layer_common_));
}

std::string KMProto_KMProject_ImageLayer::GetTypeName() const {
  return "KMProto.KMProject.ImageLayer";
}


// ===================================================================

class KMProto_KMProject_VideoLayer::_Internal {
 public:
  using HasBits = decltype(std::declval<KMProto_KMProject_VideoLayer>()._has_bits_);
  static const ::KMProto_KMProject_LayerCommon& layer_common(const KMProto_KMProject_VideoLayer* msg);
  static void set_has_layer_common(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_video_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_video_msid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_brightness(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_contrast(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_saturation(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::KMProto_KMProject_ColorEffect& color_effect(const KMProto_KMProject_VideoLayer* msg);
  static void set_has_color_effect(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_engine_clip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_original_clip_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_original_video_width(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_original_video_height(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_has_audio(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_has_video(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_mute_audio(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_clip_volume(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_playback_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_chroma_key_color(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_chroma_key_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_chroma_key_clip_fg(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_chroma_key_clip_bg(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_chroma_key_blend_x0(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_chroma_key_blend_y0(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_chroma_key_blend_x1(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_chroma_key_blend_y1(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_voice_changer(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_pan_left(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_pan_right(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_compressor(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_pitch_factor(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_ios_media_asset_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_enhancedaudiofilter(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_equalizer(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::KMProto_KMProject_ClipRange& cliprange(const KMProto_KMProject_VideoLayer* msg);
  static void set_has_cliprange(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_reverb(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::KMProto_KMProject_ColorAdjustment& coloradjustment(const KMProto_KMProject_VideoLayer* msg);
  static void set_has_coloradjustment(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::KMProto_KMProject_ColorFilter& colorfilter(const KMProto_KMProject_VideoLayer* msg);
  static void set_has_colorfilter(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_keeppitch(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::KMProto_KMProject_LayerCommon&
KMProto_KMProject_VideoLayer::_Internal::layer_common(const KMProto_KMProject_VideoLayer* msg) {
  return *msg->layer_common_;
}
const ::KMProto_KMProject_ColorEffect&
KMProto_KMProject_VideoLayer::_Internal::color_effect(const KMProto_KMProject_VideoLayer* msg) {
  return *msg->color_effect_;
}
const ::KMProto_KMProject_ClipRange&
KMProto_KMProject_VideoLayer::_Internal::cliprange(const KMProto_KMProject_VideoLayer* msg) {
  return *msg->cliprange_;
}
const ::KMProto_KMProject_ColorAdjustment&
KMProto_KMProject_VideoLayer::_Internal::coloradjustment(const KMProto_KMProject_VideoLayer* msg) {
  return *msg->coloradjustment_;
}
const ::KMProto_KMProject_ColorFilter&
KMProto_KMProject_VideoLayer::_Internal::colorfilter(const KMProto_KMProject_VideoLayer* msg) {
  return *msg->colorfilter_;
}
KMProto_KMProject_VideoLayer::KMProto_KMProject_VideoLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  chroma_key_divisions_(arena),
  chroma_key_strengths_(arena),
  volume_envelope_time_(arena),
  volume_envelope_level_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KMProto.KMProject.VideoLayer)
}
KMProto_KMProject_VideoLayer::KMProto_KMProject_VideoLayer(const KMProto_KMProject_VideoLayer& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      chroma_key_divisions_(from.chroma_key_divisions_),
      chroma_key_strengths_(from.chroma_key_strengths_),
      volume_envelope_time_(from.volume_envelope_time_),
      volume_envelope_level_(from.volume_envelope_level_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  video_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_video_path()) {
    video_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_video_path(), 
      GetArena());
  }
  video_msid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_video_msid()) {
    video_msid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_video_msid(), 
      GetArena());
  }
  ios_media_asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ios_media_asset_id()) {
    ios_media_asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ios_media_asset_id(), 
      GetArena());
  }
  enhancedaudiofilter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enhancedaudiofilter()) {
    enhancedaudiofilter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_enhancedaudiofilter(), 
      GetArena());
  }
  equalizer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_equalizer()) {
    equalizer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_equalizer(), 
      GetArena());
  }
  reverb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reverb()) {
    reverb_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reverb(), 
      GetArena());
  }
  if (from._internal_has_layer_common()) {
    layer_common_ = new ::KMProto_KMProject_LayerCommon(*from.layer_common_);
  } else {
    layer_common_ = nullptr;
  }
  if (from._internal_has_color_effect()) {
    color_effect_ = new ::KMProto_KMProject_ColorEffect(*from.color_effect_);
  } else {
    color_effect_ = nullptr;
  }
  if (from._internal_has_cliprange()) {
    cliprange_ = new ::KMProto_KMProject_ClipRange(*from.cliprange_);
  } else {
    cliprange_ = nullptr;
  }
  if (from._internal_has_coloradjustment()) {
    coloradjustment_ = new ::KMProto_KMProject_ColorAdjustment(*from.coloradjustment_);
  } else {
    coloradjustment_ = nullptr;
  }
  if (from._internal_has_colorfilter()) {
    colorfilter_ = new ::KMProto_KMProject_ColorFilter(*from.colorfilter_);
  } else {
    colorfilter_ = nullptr;
  }
  ::memcpy(&keeppitch_, &from.keeppitch_,
    static_cast<size_t>(reinterpret_cast<char*>(&pitch_factor_) -
    reinterpret_cast<char*>(&keeppitch_)) + sizeof(pitch_factor_));
  // @@protoc_insertion_point(copy_constructor:KMProto.KMProject.VideoLayer)
}

void KMProto_KMProject_VideoLayer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KMProto_KMProject_VideoLayer_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  video_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  video_msid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ios_media_asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enhancedaudiofilter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  equalizer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reverb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&layer_common_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&pitch_factor_) -
      reinterpret_cast<char*>(&layer_common_)) + sizeof(pitch_factor_));
}

KMProto_KMProject_VideoLayer::~KMProto_KMProject_VideoLayer() {
  // @@protoc_insertion_point(destructor:KMProto.KMProject.VideoLayer)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void KMProto_KMProject_VideoLayer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  video_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  video_msid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ios_media_asset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enhancedaudiofilter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  equalizer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reverb_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete layer_common_;
  if (this != internal_default_instance()) delete color_effect_;
  if (this != internal_default_instance()) delete cliprange_;
  if (this != internal_default_instance()) delete coloradjustment_;
  if (this != internal_default_instance()) delete colorfilter_;
}

void KMProto_KMProject_VideoLayer::ArenaDtor(void* object) {
  KMProto_KMProject_VideoLayer* _this = reinterpret_cast< KMProto_KMProject_VideoLayer* >(object);
  (void)_this;
}
void KMProto_KMProject_VideoLayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KMProto_KMProject_VideoLayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KMProto_KMProject_VideoLayer& KMProto_KMProject_VideoLayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KMProto_KMProject_VideoLayer_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  return *internal_default_instance();
}


void KMProto_KMProject_VideoLayer::Clear() {
// @@protoc_insertion_point(message_clear_start:KMProto.KMProject.VideoLayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chroma_key_divisions_.Clear();
  chroma_key_strengths_.Clear();
  volume_envelope_time_.Clear();
  volume_envelope_level_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      video_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      video_msid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ios_media_asset_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      enhancedaudiofilter_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      equalizer_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      reverb_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(layer_common_ != nullptr);
      layer_common_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(color_effect_ != nullptr);
      color_effect_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(cliprange_ != nullptr);
      cliprange_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(coloradjustment_ != nullptr);
      coloradjustment_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(colorfilter_ != nullptr);
      colorfilter_->Clear();
    }
  }
  if (cached_has_bits & 0x0000f800u) {
    ::memset(&keeppitch_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&engine_clip_id_) -
        reinterpret_cast<char*>(&keeppitch_)) + sizeof(engine_clip_id_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&original_clip_duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&clip_volume_) -
        reinterpret_cast<char*>(&original_clip_duration_)) + sizeof(clip_volume_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&playback_speed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chroma_key_blend_y1_) -
        reinterpret_cast<char*>(&playback_speed_)) + sizeof(chroma_key_blend_y1_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&voice_changer_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pitch_factor_) -
        reinterpret_cast<char*>(&voice_changer_)) + sizeof(pitch_factor_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* KMProto_KMProject_VideoLayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float chroma_key_divisions = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_chroma_key_divisions(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_chroma_key_divisions(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float chroma_key_strengths = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_chroma_key_strengths(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_chroma_key_strengths(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .KMProto.KMProject.LayerCommon layer_common = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_layer_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string video_path = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_video_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string video_msid = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_video_msid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 brightness = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_brightness(&_has_bits_);
          brightness_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 contrast = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_contrast(&_has_bits_);
          contrast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 saturation = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_saturation(&_has_bits_);
          saturation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KMProto.KMProject.ColorEffect color_effect = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_color_effect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 engine_clip_id = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_engine_clip_id(&_has_bits_);
          engine_clip_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 original_clip_duration = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_original_clip_duration(&_has_bits_);
          original_clip_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 original_video_width = 109;
      case 109:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_original_video_width(&_has_bits_);
          original_video_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 original_video_height = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_original_video_height(&_has_bits_);
          original_video_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_audio = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_has_audio(&_has_bits_);
          has_audio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_video = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_has_video(&_has_bits_);
          has_video_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool mute_audio = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_mute_audio(&_has_bits_);
          mute_audio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 clip_volume = 114;
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_clip_volume(&_has_bits_);
          clip_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 playback_speed = 115;
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_playback_speed(&_has_bits_);
          playback_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 volume_envelope_time = 116 [packed = true];
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_volume_envelope_time(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160) {
          _internal_add_volume_envelope_time(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 volume_envelope_level = 117 [packed = true];
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_volume_envelope_level(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168) {
          _internal_add_volume_envelope_level(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 chroma_key_color = 118;
      case 118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_chroma_key_color(&_has_bits_);
          chroma_key_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool chroma_key_enabled = 119;
      case 119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_chroma_key_enabled(&_has_bits_);
          chroma_key_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float chroma_key_clip_fg = 120;
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_chroma_key_clip_fg(&_has_bits_);
          chroma_key_clip_fg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float chroma_key_clip_bg = 121;
      case 121:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          _Internal::set_has_chroma_key_clip_bg(&_has_bits_);
          chroma_key_clip_bg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float chroma_key_blend_x0 = 122;
      case 122:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_chroma_key_blend_x0(&_has_bits_);
          chroma_key_blend_x0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float chroma_key_blend_y0 = 123;
      case 123:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          _Internal::set_has_chroma_key_blend_y0(&_has_bits_);
          chroma_key_blend_y0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float chroma_key_blend_x1 = 124;
      case 124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          _Internal::set_has_chroma_key_blend_x1(&_has_bits_);
          chroma_key_blend_x1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float chroma_key_blend_y1 = 125;
      case 125:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          _Internal::set_has_chroma_key_blend_y1(&_has_bits_);
          chroma_key_blend_y1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 voice_changer = 126;
      case 126:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_voice_changer(&_has_bits_);
          voice_changer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pan_left = 127;
      case 127:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_pan_left(&_has_bits_);
          pan_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pan_right = 128;
      case 128:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_pan_right(&_has_bits_);
          pan_right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 compressor = 129;
      case 129:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_compressor(&_has_bits_);
          compressor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pitch_factor = 130;
      case 130:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pitch_factor(&_has_bits_);
          pitch_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ios_media_asset_id = 131;
      case 131:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ios_media_asset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string enhancedAudioFilter = 132;
      case 132:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_enhancedaudiofilter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string equalizer = 133;
      case 133:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_equalizer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KMProto.KMProject.ClipRange clipRange = 134;
      case 134:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_cliprange(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string reverb = 135;
      case 135:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_reverb();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KMProto.KMProject.ColorAdjustment colorAdjustment = 136;
      case 136:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_coloradjustment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KMProto.KMProject.ColorFilter colorFilter = 137;
      case 137:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_colorfilter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool keepPitch = 138;
      case 138:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_keeppitch(&_has_bits_);
          keeppitch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KMProto_KMProject_VideoLayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KMProto.KMProject.VideoLayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float chroma_key_divisions = 1 [packed = true];
  if (this->_internal_chroma_key_divisions_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_chroma_key_divisions(), target);
  }

  // repeated float chroma_key_strengths = 2 [packed = true];
  if (this->_internal_chroma_key_strengths_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_chroma_key_strengths(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .KMProto.KMProject.LayerCommon layer_common = 100;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::layer_common(this), target, stream);
  }

  // optional string video_path = 101;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        101, this->_internal_video_path(), target);
  }

  // optional string video_msid = 102;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        102, this->_internal_video_msid(), target);
  }

  // optional int32 brightness = 103;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(103, this->_internal_brightness(), target);
  }

  // optional int32 contrast = 104;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(104, this->_internal_contrast(), target);
  }

  // optional int32 saturation = 105;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(105, this->_internal_saturation(), target);
  }

  // optional .KMProto.KMProject.ColorEffect color_effect = 106;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        106, _Internal::color_effect(this), target, stream);
  }

  // optional int32 engine_clip_id = 107;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(107, this->_internal_engine_clip_id(), target);
  }

  // optional int32 original_clip_duration = 108;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(108, this->_internal_original_clip_duration(), target);
  }

  // optional int32 original_video_width = 109;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(109, this->_internal_original_video_width(), target);
  }

  // optional int32 original_video_height = 110;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(110, this->_internal_original_video_height(), target);
  }

  // optional bool has_audio = 111;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(111, this->_internal_has_audio(), target);
  }

  // optional bool has_video = 112;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(112, this->_internal_has_video(), target);
  }

  // optional bool mute_audio = 113;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(113, this->_internal_mute_audio(), target);
  }

  // optional int32 clip_volume = 114;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(114, this->_internal_clip_volume(), target);
  }

  // optional int32 playback_speed = 115;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(115, this->_internal_playback_speed(), target);
  }

  // repeated int32 volume_envelope_time = 116 [packed = true];
  {
    int byte_size = _volume_envelope_time_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          116, _internal_volume_envelope_time(), byte_size, target);
    }
  }

  // repeated int32 volume_envelope_level = 117 [packed = true];
  {
    int byte_size = _volume_envelope_level_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          117, _internal_volume_envelope_level(), byte_size, target);
    }
  }

  // optional int32 chroma_key_color = 118;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(118, this->_internal_chroma_key_color(), target);
  }

  // optional bool chroma_key_enabled = 119;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(119, this->_internal_chroma_key_enabled(), target);
  }

  // optional float chroma_key_clip_fg = 120;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(120, this->_internal_chroma_key_clip_fg(), target);
  }

  // optional float chroma_key_clip_bg = 121;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(121, this->_internal_chroma_key_clip_bg(), target);
  }

  // optional float chroma_key_blend_x0 = 122;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(122, this->_internal_chroma_key_blend_x0(), target);
  }

  // optional float chroma_key_blend_y0 = 123;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(123, this->_internal_chroma_key_blend_y0(), target);
  }

  // optional float chroma_key_blend_x1 = 124;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(124, this->_internal_chroma_key_blend_x1(), target);
  }

  // optional float chroma_key_blend_y1 = 125;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(125, this->_internal_chroma_key_blend_y1(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 voice_changer = 126;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(126, this->_internal_voice_changer(), target);
  }

  // optional int32 pan_left = 127;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(127, this->_internal_pan_left(), target);
  }

  // optional int32 pan_right = 128;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(128, this->_internal_pan_right(), target);
  }

  // optional int32 compressor = 129;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(129, this->_internal_compressor(), target);
  }

  // optional int32 pitch_factor = 130;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(130, this->_internal_pitch_factor(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string ios_media_asset_id = 131;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        131, this->_internal_ios_media_asset_id(), target);
  }

  // optional string enhancedAudioFilter = 132;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        132, this->_internal_enhancedaudiofilter(), target);
  }

  // optional string equalizer = 133;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteStringMaybeAliased(
        133, this->_internal_equalizer(), target);
  }

  // optional .KMProto.KMProject.ClipRange clipRange = 134;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        134, _Internal::cliprange(this), target, stream);
  }

  // optional string reverb = 135;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteStringMaybeAliased(
        135, this->_internal_reverb(), target);
  }

  // optional .KMProto.KMProject.ColorAdjustment colorAdjustment = 136;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        136, _Internal::coloradjustment(this), target, stream);
  }

  // optional .KMProto.KMProject.ColorFilter colorFilter = 137;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        137, _Internal::colorfilter(this), target, stream);
  }

  // optional bool keepPitch = 138;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(138, this->_internal_keeppitch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KMProto.KMProject.VideoLayer)
  return target;
}

size_t KMProto_KMProject_VideoLayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KMProto.KMProject.VideoLayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float chroma_key_divisions = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_chroma_key_divisions_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _chroma_key_divisions_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float chroma_key_strengths = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_chroma_key_strengths_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _chroma_key_strengths_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 volume_envelope_time = 116 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->volume_envelope_time_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _volume_envelope_time_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 volume_envelope_level = 117 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->volume_envelope_level_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _volume_envelope_level_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string video_path = 101;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_video_path());
    }

    // optional string video_msid = 102;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_video_msid());
    }

    // optional string ios_media_asset_id = 131;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ios_media_asset_id());
    }

    // optional string enhancedAudioFilter = 132;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_enhancedaudiofilter());
    }

    // optional string equalizer = 133;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_equalizer());
    }

    // optional string reverb = 135;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_reverb());
    }

    // optional .KMProto.KMProject.LayerCommon layer_common = 100;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *layer_common_);
    }

    // optional .KMProto.KMProject.ColorEffect color_effect = 106;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *color_effect_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .KMProto.KMProject.ClipRange clipRange = 134;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cliprange_);
    }

    // optional .KMProto.KMProject.ColorAdjustment colorAdjustment = 136;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *coloradjustment_);
    }

    // optional .KMProto.KMProject.ColorFilter colorFilter = 137;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *colorfilter_);
    }

    // optional bool keepPitch = 138;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional int32 brightness = 103;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_brightness());
    }

    // optional int32 contrast = 104;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_contrast());
    }

    // optional int32 saturation = 105;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_saturation());
    }

    // optional int32 engine_clip_id = 107;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_engine_clip_id());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int32 original_clip_duration = 108;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_original_clip_duration());
    }

    // optional int32 original_video_width = 109;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_original_video_width());
    }

    // optional int32 original_video_height = 110;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_original_video_height());
    }

    // optional bool has_audio = 111;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool has_video = 112;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool mute_audio = 113;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool chroma_key_enabled = 119;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional int32 clip_volume = 114;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_clip_volume());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int32 playback_speed = 115;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_playback_speed());
    }

    // optional int32 chroma_key_color = 118;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_chroma_key_color());
    }

    // optional float chroma_key_clip_fg = 120;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 4;
    }

    // optional float chroma_key_clip_bg = 121;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 4;
    }

    // optional float chroma_key_blend_x0 = 122;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 4;
    }

    // optional float chroma_key_blend_y0 = 123;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 4;
    }

    // optional float chroma_key_blend_x1 = 124;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 4;
    }

    // optional float chroma_key_blend_y1 = 125;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 4;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 voice_changer = 126;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_voice_changer());
    }

    // optional int32 pan_left = 127;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_pan_left());
    }

    // optional int32 pan_right = 128;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_pan_right());
    }

    // optional int32 compressor = 129;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_compressor());
    }

    // optional int32 pitch_factor = 130;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_pitch_factor());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KMProto_KMProject_VideoLayer::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const KMProto_KMProject_VideoLayer*>(
      &from));
}

void KMProto_KMProject_VideoLayer::MergeFrom(const KMProto_KMProject_VideoLayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KMProto.KMProject.VideoLayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chroma_key_divisions_.MergeFrom(from.chroma_key_divisions_);
  chroma_key_strengths_.MergeFrom(from.chroma_key_strengths_);
  volume_envelope_time_.MergeFrom(from.volume_envelope_time_);
  volume_envelope_level_.MergeFrom(from.volume_envelope_level_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_video_path(from._internal_video_path());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_video_msid(from._internal_video_msid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_ios_media_asset_id(from._internal_ios_media_asset_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_enhancedaudiofilter(from._internal_enhancedaudiofilter());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_equalizer(from._internal_equalizer());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_reverb(from._internal_reverb());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_layer_common()->::KMProto_KMProject_LayerCommon::MergeFrom(from._internal_layer_common());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_color_effect()->::KMProto_KMProject_ColorEffect::MergeFrom(from._internal_color_effect());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_cliprange()->::KMProto_KMProject_ClipRange::MergeFrom(from._internal_cliprange());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_coloradjustment()->::KMProto_KMProject_ColorAdjustment::MergeFrom(from._internal_coloradjustment());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_colorfilter()->::KMProto_KMProject_ColorFilter::MergeFrom(from._internal_colorfilter());
    }
    if (cached_has_bits & 0x00000800u) {
      keeppitch_ = from.keeppitch_;
    }
    if (cached_has_bits & 0x00001000u) {
      brightness_ = from.brightness_;
    }
    if (cached_has_bits & 0x00002000u) {
      contrast_ = from.contrast_;
    }
    if (cached_has_bits & 0x00004000u) {
      saturation_ = from.saturation_;
    }
    if (cached_has_bits & 0x00008000u) {
      engine_clip_id_ = from.engine_clip_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      original_clip_duration_ = from.original_clip_duration_;
    }
    if (cached_has_bits & 0x00020000u) {
      original_video_width_ = from.original_video_width_;
    }
    if (cached_has_bits & 0x00040000u) {
      original_video_height_ = from.original_video_height_;
    }
    if (cached_has_bits & 0x00080000u) {
      has_audio_ = from.has_audio_;
    }
    if (cached_has_bits & 0x00100000u) {
      has_video_ = from.has_video_;
    }
    if (cached_has_bits & 0x00200000u) {
      mute_audio_ = from.mute_audio_;
    }
    if (cached_has_bits & 0x00400000u) {
      chroma_key_enabled_ = from.chroma_key_enabled_;
    }
    if (cached_has_bits & 0x00800000u) {
      clip_volume_ = from.clip_volume_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      playback_speed_ = from.playback_speed_;
    }
    if (cached_has_bits & 0x02000000u) {
      chroma_key_color_ = from.chroma_key_color_;
    }
    if (cached_has_bits & 0x04000000u) {
      chroma_key_clip_fg_ = from.chroma_key_clip_fg_;
    }
    if (cached_has_bits & 0x08000000u) {
      chroma_key_clip_bg_ = from.chroma_key_clip_bg_;
    }
    if (cached_has_bits & 0x10000000u) {
      chroma_key_blend_x0_ = from.chroma_key_blend_x0_;
    }
    if (cached_has_bits & 0x20000000u) {
      chroma_key_blend_y0_ = from.chroma_key_blend_y0_;
    }
    if (cached_has_bits & 0x40000000u) {
      chroma_key_blend_x1_ = from.chroma_key_blend_x1_;
    }
    if (cached_has_bits & 0x80000000u) {
      chroma_key_blend_y1_ = from.chroma_key_blend_y1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      voice_changer_ = from.voice_changer_;
    }
    if (cached_has_bits & 0x00000002u) {
      pan_left_ = from.pan_left_;
    }
    if (cached_has_bits & 0x00000004u) {
      pan_right_ = from.pan_right_;
    }
    if (cached_has_bits & 0x00000008u) {
      compressor_ = from.compressor_;
    }
    if (cached_has_bits & 0x00000010u) {
      pitch_factor_ = from.pitch_factor_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void KMProto_KMProject_VideoLayer::CopyFrom(const KMProto_KMProject_VideoLayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KMProto.KMProject.VideoLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KMProto_KMProject_VideoLayer::IsInitialized() const {
  return true;
}

void KMProto_KMProject_VideoLayer::InternalSwap(KMProto_KMProject_VideoLayer* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  chroma_key_divisions_.InternalSwap(&other->chroma_key_divisions_);
  chroma_key_strengths_.InternalSwap(&other->chroma_key_strengths_);
  volume_envelope_time_.InternalSwap(&other->volume_envelope_time_);
  volume_envelope_level_.InternalSwap(&other->volume_envelope_level_);
  video_path_.Swap(&other->video_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  video_msid_.Swap(&other->video_msid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ios_media_asset_id_.Swap(&other->ios_media_asset_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  enhancedaudiofilter_.Swap(&other->enhancedaudiofilter_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  equalizer_.Swap(&other->equalizer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reverb_.Swap(&other->reverb_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KMProto_KMProject_VideoLayer, pitch_factor_)
      + sizeof(KMProto_KMProject_VideoLayer::pitch_factor_)
      - PROTOBUF_FIELD_OFFSET(KMProto_KMProject_VideoLayer, layer_common_)>(
          reinterpret_cast<char*>(&layer_common_),
          reinterpret_cast<char*>(&other->layer_common_));
}

std::string KMProto_KMProject_VideoLayer::GetTypeName() const {
  return "KMProto.KMProject.VideoLayer";
}


// ===================================================================

class KMProto_KMProject_ColorAdjustment::_Internal {
 public:
  using HasBits = decltype(std::declval<KMProto_KMProject_ColorAdjustment>()._has_bits_);
  static void set_has_brightness(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_contrast(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_saturation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_vibrance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_temperature(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_highlight(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_shadow(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_gain(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_gamma(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_lift(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_hue(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

KMProto_KMProject_ColorAdjustment::KMProto_KMProject_ColorAdjustment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KMProto.KMProject.ColorAdjustment)
}
KMProto_KMProject_ColorAdjustment::KMProto_KMProject_ColorAdjustment(const KMProto_KMProject_ColorAdjustment& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&brightness_, &from.brightness_,
    static_cast<size_t>(reinterpret_cast<char*>(&hue_) -
    reinterpret_cast<char*>(&brightness_)) + sizeof(hue_));
  // @@protoc_insertion_point(copy_constructor:KMProto.KMProject.ColorAdjustment)
}

void KMProto_KMProject_ColorAdjustment::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&brightness_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&hue_) -
      reinterpret_cast<char*>(&brightness_)) + sizeof(hue_));
}

KMProto_KMProject_ColorAdjustment::~KMProto_KMProject_ColorAdjustment() {
  // @@protoc_insertion_point(destructor:KMProto.KMProject.ColorAdjustment)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void KMProto_KMProject_ColorAdjustment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void KMProto_KMProject_ColorAdjustment::ArenaDtor(void* object) {
  KMProto_KMProject_ColorAdjustment* _this = reinterpret_cast< KMProto_KMProject_ColorAdjustment* >(object);
  (void)_this;
}
void KMProto_KMProject_ColorAdjustment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KMProto_KMProject_ColorAdjustment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KMProto_KMProject_ColorAdjustment& KMProto_KMProject_ColorAdjustment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KMProto_KMProject_ColorAdjustment_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  return *internal_default_instance();
}


void KMProto_KMProject_ColorAdjustment::Clear() {
// @@protoc_insertion_point(message_clear_start:KMProto.KMProject.ColorAdjustment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&brightness_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gain_) -
        reinterpret_cast<char*>(&brightness_)) + sizeof(gain_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&gamma_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hue_) -
        reinterpret_cast<char*>(&gamma_)) + sizeof(hue_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* KMProto_KMProject_ColorAdjustment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float brightness = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_brightness(&has_bits);
          brightness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float contrast = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_contrast(&has_bits);
          contrast_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float saturation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_saturation(&has_bits);
          saturation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float vibrance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_vibrance(&has_bits);
          vibrance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float temperature = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_temperature(&has_bits);
          temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float highlight = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_highlight(&has_bits);
          highlight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float shadow = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_shadow(&has_bits);
          shadow_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float gain = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_gain(&has_bits);
          gain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float gamma = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_gamma(&has_bits);
          gamma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float lift = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_lift(&has_bits);
          lift_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float hue = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_hue(&has_bits);
          hue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KMProto_KMProject_ColorAdjustment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KMProto.KMProject.ColorAdjustment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float brightness = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_brightness(), target);
  }

  // optional float contrast = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_contrast(), target);
  }

  // optional float saturation = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_saturation(), target);
  }

  // optional float vibrance = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_vibrance(), target);
  }

  // optional float temperature = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_temperature(), target);
  }

  // optional float highlight = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_highlight(), target);
  }

  // optional float shadow = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_shadow(), target);
  }

  // optional float gain = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_gain(), target);
  }

  // optional float gamma = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_gamma(), target);
  }

  // optional float lift = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_lift(), target);
  }

  // optional float hue = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_hue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KMProto.KMProject.ColorAdjustment)
  return target;
}

size_t KMProto_KMProject_ColorAdjustment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KMProto.KMProject.ColorAdjustment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float brightness = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float contrast = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float saturation = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float vibrance = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float temperature = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float highlight = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float shadow = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float gain = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional float gamma = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float lift = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float hue = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KMProto_KMProject_ColorAdjustment::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const KMProto_KMProject_ColorAdjustment*>(
      &from));
}

void KMProto_KMProject_ColorAdjustment::MergeFrom(const KMProto_KMProject_ColorAdjustment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KMProto.KMProject.ColorAdjustment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      brightness_ = from.brightness_;
    }
    if (cached_has_bits & 0x00000002u) {
      contrast_ = from.contrast_;
    }
    if (cached_has_bits & 0x00000004u) {
      saturation_ = from.saturation_;
    }
    if (cached_has_bits & 0x00000008u) {
      vibrance_ = from.vibrance_;
    }
    if (cached_has_bits & 0x00000010u) {
      temperature_ = from.temperature_;
    }
    if (cached_has_bits & 0x00000020u) {
      highlight_ = from.highlight_;
    }
    if (cached_has_bits & 0x00000040u) {
      shadow_ = from.shadow_;
    }
    if (cached_has_bits & 0x00000080u) {
      gain_ = from.gain_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      gamma_ = from.gamma_;
    }
    if (cached_has_bits & 0x00000200u) {
      lift_ = from.lift_;
    }
    if (cached_has_bits & 0x00000400u) {
      hue_ = from.hue_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KMProto_KMProject_ColorAdjustment::CopyFrom(const KMProto_KMProject_ColorAdjustment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KMProto.KMProject.ColorAdjustment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KMProto_KMProject_ColorAdjustment::IsInitialized() const {
  return true;
}

void KMProto_KMProject_ColorAdjustment::InternalSwap(KMProto_KMProject_ColorAdjustment* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KMProto_KMProject_ColorAdjustment, hue_)
      + sizeof(KMProto_KMProject_ColorAdjustment::hue_)
      - PROTOBUF_FIELD_OFFSET(KMProto_KMProject_ColorAdjustment, brightness_)>(
          reinterpret_cast<char*>(&brightness_),
          reinterpret_cast<char*>(&other->brightness_));
}

std::string KMProto_KMProject_ColorAdjustment::GetTypeName() const {
  return "KMProto.KMProject.ColorAdjustment";
}


// ===================================================================

class KMProto_KMProject_WritingPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<KMProto_KMProject_WritingPoint>()._has_bits_);
  static void set_has_pointx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pointy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

KMProto_KMProject_WritingPoint::KMProto_KMProject_WritingPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KMProto.KMProject.WritingPoint)
}
KMProto_KMProject_WritingPoint::KMProto_KMProject_WritingPoint(const KMProto_KMProject_WritingPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&pointx_, &from.pointx_,
    static_cast<size_t>(reinterpret_cast<char*>(&pointy_) -
    reinterpret_cast<char*>(&pointx_)) + sizeof(pointy_));
  // @@protoc_insertion_point(copy_constructor:KMProto.KMProject.WritingPoint)
}

void KMProto_KMProject_WritingPoint::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&pointx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&pointy_) -
      reinterpret_cast<char*>(&pointx_)) + sizeof(pointy_));
}

KMProto_KMProject_WritingPoint::~KMProto_KMProject_WritingPoint() {
  // @@protoc_insertion_point(destructor:KMProto.KMProject.WritingPoint)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void KMProto_KMProject_WritingPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void KMProto_KMProject_WritingPoint::ArenaDtor(void* object) {
  KMProto_KMProject_WritingPoint* _this = reinterpret_cast< KMProto_KMProject_WritingPoint* >(object);
  (void)_this;
}
void KMProto_KMProject_WritingPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KMProto_KMProject_WritingPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KMProto_KMProject_WritingPoint& KMProto_KMProject_WritingPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KMProto_KMProject_WritingPoint_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  return *internal_default_instance();
}


void KMProto_KMProject_WritingPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:KMProto.KMProject.WritingPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&pointx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pointy_) -
        reinterpret_cast<char*>(&pointx_)) + sizeof(pointy_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* KMProto_KMProject_WritingPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float pointx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_pointx(&has_bits);
          pointx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float pointy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_pointy(&has_bits);
          pointy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KMProto_KMProject_WritingPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KMProto.KMProject.WritingPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float pointx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_pointx(), target);
  }

  // optional float pointy = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_pointy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KMProto.KMProject.WritingPoint)
  return target;
}

size_t KMProto_KMProject_WritingPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KMProto.KMProject.WritingPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float pointx = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float pointy = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KMProto_KMProject_WritingPoint::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const KMProto_KMProject_WritingPoint*>(
      &from));
}

void KMProto_KMProject_WritingPoint::MergeFrom(const KMProto_KMProject_WritingPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KMProto.KMProject.WritingPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      pointx_ = from.pointx_;
    }
    if (cached_has_bits & 0x00000002u) {
      pointy_ = from.pointy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KMProto_KMProject_WritingPoint::CopyFrom(const KMProto_KMProject_WritingPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KMProto.KMProject.WritingPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KMProto_KMProject_WritingPoint::IsInitialized() const {
  return true;
}

void KMProto_KMProject_WritingPoint::InternalSwap(KMProto_KMProject_WritingPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KMProto_KMProject_WritingPoint, pointy_)
      + sizeof(KMProto_KMProject_WritingPoint::pointy_)
      - PROTOBUF_FIELD_OFFSET(KMProto_KMProject_WritingPoint, pointx_)>(
          reinterpret_cast<char*>(&pointx_),
          reinterpret_cast<char*>(&other->pointx_));
}

std::string KMProto_KMProject_WritingPoint::GetTypeName() const {
  return "KMProto.KMProject.WritingPoint";
}


// ===================================================================

class KMProto_KMProject_GroupLayer::_Internal {
 public:
  using HasBits = decltype(std::declval<KMProto_KMProject_GroupLayer>()._has_bits_);
  static const ::KMProto_KMProject_LayerCommon& layer_common(const KMProto_KMProject_GroupLayer* msg);
  static void set_has_layer_common(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::KMProto_KMProject_LayerCommon&
KMProto_KMProject_GroupLayer::_Internal::layer_common(const KMProto_KMProject_GroupLayer* msg) {
  return *msg->layer_common_;
}
KMProto_KMProject_GroupLayer::KMProto_KMProject_GroupLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  child_items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KMProto.KMProject.GroupLayer)
}
KMProto_KMProject_GroupLayer::KMProto_KMProject_GroupLayer(const KMProto_KMProject_GroupLayer& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      child_items_(from.child_items_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_layer_common()) {
    layer_common_ = new ::KMProto_KMProject_LayerCommon(*from.layer_common_);
  } else {
    layer_common_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KMProto.KMProject.GroupLayer)
}

void KMProto_KMProject_GroupLayer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KMProto_KMProject_GroupLayer_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  layer_common_ = nullptr;
}

KMProto_KMProject_GroupLayer::~KMProto_KMProject_GroupLayer() {
  // @@protoc_insertion_point(destructor:KMProto.KMProject.GroupLayer)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void KMProto_KMProject_GroupLayer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete layer_common_;
}

void KMProto_KMProject_GroupLayer::ArenaDtor(void* object) {
  KMProto_KMProject_GroupLayer* _this = reinterpret_cast< KMProto_KMProject_GroupLayer* >(object);
  (void)_this;
}
void KMProto_KMProject_GroupLayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KMProto_KMProject_GroupLayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KMProto_KMProject_GroupLayer& KMProto_KMProject_GroupLayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KMProto_KMProject_GroupLayer_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  return *internal_default_instance();
}


void KMProto_KMProject_GroupLayer::Clear() {
// @@protoc_insertion_point(message_clear_start:KMProto.KMProject.GroupLayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  child_items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(layer_common_ != nullptr);
    layer_common_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* KMProto_KMProject_GroupLayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .KMProto.KMProject.LayerCommon layer_common = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_layer_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KMProto.KMProject.TimelineItem child_items = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_child_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<810>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KMProto_KMProject_GroupLayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KMProto.KMProject.GroupLayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .KMProto.KMProject.LayerCommon layer_common = 100;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::layer_common(this), target, stream);
  }

  // repeated .KMProto.KMProject.TimelineItem child_items = 101;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_child_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(101, this->_internal_child_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KMProto.KMProject.GroupLayer)
  return target;
}

size_t KMProto_KMProject_GroupLayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KMProto.KMProject.GroupLayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KMProto.KMProject.TimelineItem child_items = 101;
  total_size += 2UL * this->_internal_child_items_size();
  for (const auto& msg : this->child_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .KMProto.KMProject.LayerCommon layer_common = 100;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *layer_common_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KMProto_KMProject_GroupLayer::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const KMProto_KMProject_GroupLayer*>(
      &from));
}

void KMProto_KMProject_GroupLayer::MergeFrom(const KMProto_KMProject_GroupLayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KMProto.KMProject.GroupLayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  child_items_.MergeFrom(from.child_items_);
  if (from._internal_has_layer_common()) {
    _internal_mutable_layer_common()->::KMProto_KMProject_LayerCommon::MergeFrom(from._internal_layer_common());
  }
}

void KMProto_KMProject_GroupLayer::CopyFrom(const KMProto_KMProject_GroupLayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KMProto.KMProject.GroupLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KMProto_KMProject_GroupLayer::IsInitialized() const {
  return true;
}

void KMProto_KMProject_GroupLayer::InternalSwap(KMProto_KMProject_GroupLayer* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  child_items_.InternalSwap(&other->child_items_);
  swap(layer_common_, other->layer_common_);
}

std::string KMProto_KMProject_GroupLayer::GetTypeName() const {
  return "KMProto.KMProject.GroupLayer";
}


// ===================================================================

class KMProto_KMProject_DrawingAction::_Internal {
 public:
  using HasBits = decltype(std::declval<KMProto_KMProject_DrawingAction>()._has_bits_);
  static void set_has_drawing_action_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stroke_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hardness(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_eraser(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_straight_line(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_path_style(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_start_cap(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_end_cap(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

KMProto_KMProject_DrawingAction::KMProto_KMProject_DrawingAction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KMProto.KMProject.DrawingAction)
}
KMProto_KMProject_DrawingAction::KMProto_KMProject_DrawingAction(const KMProto_KMProject_DrawingAction& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&color_, &from.color_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_cap_) -
    reinterpret_cast<char*>(&color_)) + sizeof(end_cap_));
  // @@protoc_insertion_point(copy_constructor:KMProto.KMProject.DrawingAction)
}

void KMProto_KMProject_DrawingAction::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&color_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&straight_line_) -
      reinterpret_cast<char*>(&color_)) + sizeof(straight_line_));
  drawing_action_type_ = 1;
  path_style_ = 1;
  start_cap_ = 1;
  end_cap_ = 1;
}

KMProto_KMProject_DrawingAction::~KMProto_KMProject_DrawingAction() {
  // @@protoc_insertion_point(destructor:KMProto.KMProject.DrawingAction)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void KMProto_KMProject_DrawingAction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void KMProto_KMProject_DrawingAction::ArenaDtor(void* object) {
  KMProto_KMProject_DrawingAction* _this = reinterpret_cast< KMProto_KMProject_DrawingAction* >(object);
  (void)_this;
}
void KMProto_KMProject_DrawingAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KMProto_KMProject_DrawingAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KMProto_KMProject_DrawingAction& KMProto_KMProject_DrawingAction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KMProto_KMProject_DrawingAction_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  return *internal_default_instance();
}


void KMProto_KMProject_DrawingAction::Clear() {
// @@protoc_insertion_point(message_clear_start:KMProto.KMProject.DrawingAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&color_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&straight_line_) -
        reinterpret_cast<char*>(&color_)) + sizeof(straight_line_));
    drawing_action_type_ = 1;
    path_style_ = 1;
    start_cap_ = 1;
  }
  end_cap_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* KMProto_KMProject_DrawingAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .KMProto.KMProject.DrawingActionType drawing_action_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KMProto_KMProject_DrawingActionType_IsValid(val))) {
            _internal_set_drawing_action_type(static_cast<::KMProto_KMProject_DrawingActionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated float points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_points(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<21>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_points(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_color(&has_bits);
          color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float stroke_width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_stroke_width(&has_bits);
          stroke_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float hardness = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_hardness(&has_bits);
          hardness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool is_eraser = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_eraser(&has_bits);
          is_eraser_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool straight_line = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_straight_line(&has_bits);
          straight_line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KMProto.KMProject.PathStyle path_style = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KMProto_KMProject_PathStyle_IsValid(val))) {
            _internal_set_path_style(static_cast<::KMProto_KMProject_PathStyle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .KMProto.KMProject.CapDecorationStyle start_cap = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KMProto_KMProject_CapDecorationStyle_IsValid(val))) {
            _internal_set_start_cap(static_cast<::KMProto_KMProject_CapDecorationStyle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .KMProto.KMProject.CapDecorationStyle end_cap = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KMProto_KMProject_CapDecorationStyle_IsValid(val))) {
            _internal_set_end_cap(static_cast<::KMProto_KMProject_CapDecorationStyle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KMProto_KMProject_DrawingAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KMProto.KMProject.DrawingAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .KMProto.KMProject.DrawingActionType drawing_action_type = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_drawing_action_type(), target);
  }

  // repeated float points = 2;
  for (int i = 0, n = this->_internal_points_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_points(i), target);
  }

  // optional int32 color = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_color(), target);
  }

  // optional float stroke_width = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_stroke_width(), target);
  }

  // optional float hardness = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_hardness(), target);
  }

  // optional bool is_eraser = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_eraser(), target);
  }

  // optional bool straight_line = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_straight_line(), target);
  }

  // optional .KMProto.KMProject.PathStyle path_style = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_path_style(), target);
  }

  // optional .KMProto.KMProject.CapDecorationStyle start_cap = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_start_cap(), target);
  }

  // optional .KMProto.KMProject.CapDecorationStyle end_cap = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_end_cap(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KMProto.KMProject.DrawingAction)
  return target;
}

size_t KMProto_KMProject_DrawingAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KMProto.KMProject.DrawingAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float points = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_points_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_points_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 color = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_color());
    }

    // optional float stroke_width = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float hardness = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional bool is_eraser = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool straight_line = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional .KMProto.KMProject.DrawingActionType drawing_action_type = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_drawing_action_type());
    }

    // optional .KMProto.KMProject.PathStyle path_style = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_path_style());
    }

    // optional .KMProto.KMProject.CapDecorationStyle start_cap = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_start_cap());
    }

  }
  // optional .KMProto.KMProject.CapDecorationStyle end_cap = 10;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_end_cap());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KMProto_KMProject_DrawingAction::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const KMProto_KMProject_DrawingAction*>(
      &from));
}

void KMProto_KMProject_DrawingAction::MergeFrom(const KMProto_KMProject_DrawingAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KMProto.KMProject.DrawingAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      color_ = from.color_;
    }
    if (cached_has_bits & 0x00000002u) {
      stroke_width_ = from.stroke_width_;
    }
    if (cached_has_bits & 0x00000004u) {
      hardness_ = from.hardness_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_eraser_ = from.is_eraser_;
    }
    if (cached_has_bits & 0x00000010u) {
      straight_line_ = from.straight_line_;
    }
    if (cached_has_bits & 0x00000020u) {
      drawing_action_type_ = from.drawing_action_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      path_style_ = from.path_style_;
    }
    if (cached_has_bits & 0x00000080u) {
      start_cap_ = from.start_cap_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_end_cap(from._internal_end_cap());
  }
}

void KMProto_KMProject_DrawingAction::CopyFrom(const KMProto_KMProject_DrawingAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KMProto.KMProject.DrawingAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KMProto_KMProject_DrawingAction::IsInitialized() const {
  return true;
}

void KMProto_KMProject_DrawingAction::InternalSwap(KMProto_KMProject_DrawingAction* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  points_.InternalSwap(&other->points_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KMProto_KMProject_DrawingAction, straight_line_)
      + sizeof(KMProto_KMProject_DrawingAction::straight_line_)
      - PROTOBUF_FIELD_OFFSET(KMProto_KMProject_DrawingAction, color_)>(
          reinterpret_cast<char*>(&color_),
          reinterpret_cast<char*>(&other->color_));
  swap(drawing_action_type_, other->drawing_action_type_);
  swap(path_style_, other->path_style_);
  swap(start_cap_, other->start_cap_);
  swap(end_cap_, other->end_cap_);
}

std::string KMProto_KMProject_DrawingAction::GetTypeName() const {
  return "KMProto.KMProject.DrawingAction";
}


// ===================================================================

class KMProto_KMProject_ColorEffect::_Internal {
 public:
  using HasBits = decltype(std::declval<KMProto_KMProject_ColorEffect>()._has_bits_);
  static void set_has_brightness(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_contrast(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_saturation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tint_color(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_preset_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

KMProto_KMProject_ColorEffect::KMProto_KMProject_ColorEffect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KMProto.KMProject.ColorEffect)
}
KMProto_KMProject_ColorEffect::KMProto_KMProject_ColorEffect(const KMProto_KMProject_ColorEffect& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  preset_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_preset_name()) {
    preset_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_preset_name(), 
      GetArena());
  }
  ::memcpy(&brightness_, &from.brightness_,
    static_cast<size_t>(reinterpret_cast<char*>(&tint_color_) -
    reinterpret_cast<char*>(&brightness_)) + sizeof(tint_color_));
  // @@protoc_insertion_point(copy_constructor:KMProto.KMProject.ColorEffect)
}

void KMProto_KMProject_ColorEffect::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KMProto_KMProject_ColorEffect_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  preset_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&brightness_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&tint_color_) -
      reinterpret_cast<char*>(&brightness_)) + sizeof(tint_color_));
}

KMProto_KMProject_ColorEffect::~KMProto_KMProject_ColorEffect() {
  // @@protoc_insertion_point(destructor:KMProto.KMProject.ColorEffect)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void KMProto_KMProject_ColorEffect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  preset_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KMProto_KMProject_ColorEffect::ArenaDtor(void* object) {
  KMProto_KMProject_ColorEffect* _this = reinterpret_cast< KMProto_KMProject_ColorEffect* >(object);
  (void)_this;
}
void KMProto_KMProject_ColorEffect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KMProto_KMProject_ColorEffect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KMProto_KMProject_ColorEffect& KMProto_KMProject_ColorEffect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KMProto_KMProject_ColorEffect_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  return *internal_default_instance();
}


void KMProto_KMProject_ColorEffect::Clear() {
// @@protoc_insertion_point(message_clear_start:KMProto.KMProject.ColorEffect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    preset_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&brightness_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tint_color_) -
        reinterpret_cast<char*>(&brightness_)) + sizeof(tint_color_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* KMProto_KMProject_ColorEffect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float brightness = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_brightness(&has_bits);
          brightness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float contrast = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_contrast(&has_bits);
          contrast_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float saturation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_saturation(&has_bits);
          saturation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional fixed32 tint_color = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_tint_color(&has_bits);
          tint_color_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional string preset_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_preset_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KMProto_KMProject_ColorEffect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KMProto.KMProject.ColorEffect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float brightness = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_brightness(), target);
  }

  // optional float contrast = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_contrast(), target);
  }

  // optional float saturation = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_saturation(), target);
  }

  // optional fixed32 tint_color = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(4, this->_internal_tint_color(), target);
  }

  // optional string preset_name = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_preset_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KMProto.KMProject.ColorEffect)
  return target;
}

size_t KMProto_KMProject_ColorEffect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KMProto.KMProject.ColorEffect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string preset_name = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_preset_name());
    }

    // optional float brightness = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float contrast = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float saturation = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional fixed32 tint_color = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KMProto_KMProject_ColorEffect::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const KMProto_KMProject_ColorEffect*>(
      &from));
}

void KMProto_KMProject_ColorEffect::MergeFrom(const KMProto_KMProject_ColorEffect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KMProto.KMProject.ColorEffect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_preset_name(from._internal_preset_name());
    }
    if (cached_has_bits & 0x00000002u) {
      brightness_ = from.brightness_;
    }
    if (cached_has_bits & 0x00000004u) {
      contrast_ = from.contrast_;
    }
    if (cached_has_bits & 0x00000008u) {
      saturation_ = from.saturation_;
    }
    if (cached_has_bits & 0x00000010u) {
      tint_color_ = from.tint_color_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KMProto_KMProject_ColorEffect::CopyFrom(const KMProto_KMProject_ColorEffect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KMProto.KMProject.ColorEffect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KMProto_KMProject_ColorEffect::IsInitialized() const {
  return true;
}

void KMProto_KMProject_ColorEffect::InternalSwap(KMProto_KMProject_ColorEffect* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  preset_name_.Swap(&other->preset_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KMProto_KMProject_ColorEffect, tint_color_)
      + sizeof(KMProto_KMProject_ColorEffect::tint_color_)
      - PROTOBUF_FIELD_OFFSET(KMProto_KMProject_ColorEffect, brightness_)>(
          reinterpret_cast<char*>(&brightness_),
          reinterpret_cast<char*>(&other->brightness_));
}

std::string KMProto_KMProject_ColorEffect::GetTypeName() const {
  return "KMProto.KMProject.ColorEffect";
}


// ===================================================================

class KMProto_KMProject_ColorFilter::_Internal {
 public:
  using HasBits = decltype(std::declval<KMProto_KMProject_ColorFilter>()._has_bits_);
  static void set_has_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_strength(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

KMProto_KMProject_ColorFilter::KMProto_KMProject_ColorFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KMProto.KMProject.ColorFilter)
}
KMProto_KMProject_ColorFilter::KMProto_KMProject_ColorFilter(const KMProto_KMProject_ColorFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_filter()) {
    filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filter(), 
      GetArena());
  }
  strength_ = from.strength_;
  // @@protoc_insertion_point(copy_constructor:KMProto.KMProject.ColorFilter)
}

void KMProto_KMProject_ColorFilter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KMProto_KMProject_ColorFilter_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strength_ = 0;
}

KMProto_KMProject_ColorFilter::~KMProto_KMProject_ColorFilter() {
  // @@protoc_insertion_point(destructor:KMProto.KMProject.ColorFilter)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void KMProto_KMProject_ColorFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  filter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KMProto_KMProject_ColorFilter::ArenaDtor(void* object) {
  KMProto_KMProject_ColorFilter* _this = reinterpret_cast< KMProto_KMProject_ColorFilter* >(object);
  (void)_this;
}
void KMProto_KMProject_ColorFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KMProto_KMProject_ColorFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KMProto_KMProject_ColorFilter& KMProto_KMProject_ColorFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KMProto_KMProject_ColorFilter_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  return *internal_default_instance();
}


void KMProto_KMProject_ColorFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:KMProto.KMProject.ColorFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    filter_.ClearNonDefaultToEmpty();
  }
  strength_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* KMProto_KMProject_ColorFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string filter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float strength = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_strength(&has_bits);
          strength_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KMProto_KMProject_ColorFilter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KMProto.KMProject.ColorFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string filter = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filter(), target);
  }

  // optional float strength = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_strength(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KMProto.KMProject.ColorFilter)
  return target;
}

size_t KMProto_KMProject_ColorFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KMProto.KMProject.ColorFilter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string filter = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filter());
    }

    // optional float strength = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KMProto_KMProject_ColorFilter::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const KMProto_KMProject_ColorFilter*>(
      &from));
}

void KMProto_KMProject_ColorFilter::MergeFrom(const KMProto_KMProject_ColorFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KMProto.KMProject.ColorFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_filter(from._internal_filter());
    }
    if (cached_has_bits & 0x00000002u) {
      strength_ = from.strength_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KMProto_KMProject_ColorFilter::CopyFrom(const KMProto_KMProject_ColorFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KMProto.KMProject.ColorFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KMProto_KMProject_ColorFilter::IsInitialized() const {
  return true;
}

void KMProto_KMProject_ColorFilter::InternalSwap(KMProto_KMProject_ColorFilter* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  filter_.Swap(&other->filter_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(strength_, other->strength_);
}

std::string KMProto_KMProject_ColorFilter::GetTypeName() const {
  return "KMProto.KMProject.ColorFilter";
}


// ===================================================================

class KMProto_KMProject::_Internal {
 public:
  using HasBits = decltype(std::declval<KMProto_KMProject>()._has_bits_);
  static void set_has_timeline_format_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_recent_scroll_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_project_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_project_audio_fade_in_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_project_audio_fade_out_time(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_is_project_audio_fade_in_on(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_is_project_audio_fade_out_on(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_project_video_fade_in_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_project_video_fade_out_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_is_project_video_fade_in_on(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_is_project_video_fade_out_on(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::KMProto_KMProject_Fade& audio_fade(const KMProto_KMProject* msg);
  static void set_has_audio_fade(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::KMProto_KMProject_Fade& video_fade(const KMProto_KMProject* msg);
  static void set_has_video_fade(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_project_default_img_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_project_default_layer_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_project_default_img_crop_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_project_auto_master(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_project_master_volume(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_project_resolution_setting(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_project_frame_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_project_default_img_crop_mode_ios(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_project_capability_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_aspect_ratio_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_aspect_ratio_height(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::KMProto_KMProject_Fade&
KMProto_KMProject::_Internal::audio_fade(const KMProto_KMProject* msg) {
  return *msg->audio_fade_;
}
const ::KMProto_KMProject_Fade&
KMProto_KMProject::_Internal::video_fade(const KMProto_KMProject* msg) {
  return *msg->video_fade_;
}
KMProto_KMProject::KMProto_KMProject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  primary_items_(arena),
  secondary_items_(arena),
  tracks_(arena),
  bookmarks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KMProto.KMProject)
}
KMProto_KMProject::KMProto_KMProject(const KMProto_KMProject& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      primary_items_(from.primary_items_),
      secondary_items_(from.secondary_items_),
      tracks_(from.tracks_),
      bookmarks_(from.bookmarks_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  project_default_img_crop_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_project_default_img_crop_mode()) {
    project_default_img_crop_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_project_default_img_crop_mode(), 
      GetArena());
  }
  if (from._internal_has_audio_fade()) {
    audio_fade_ = new ::KMProto_KMProject_Fade(*from.audio_fade_);
  } else {
    audio_fade_ = nullptr;
  }
  if (from._internal_has_video_fade()) {
    video_fade_ = new ::KMProto_KMProject_Fade(*from.video_fade_);
  } else {
    video_fade_ = nullptr;
  }
  ::memcpy(&aspect_ratio_height_, &from.aspect_ratio_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&project_ratio_) -
    reinterpret_cast<char*>(&aspect_ratio_height_)) + sizeof(project_ratio_));
  // @@protoc_insertion_point(copy_constructor:KMProto.KMProject)
}

void KMProto_KMProject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KMProto_KMProject_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  project_default_img_crop_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&audio_fade_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&aspect_ratio_width_) -
      reinterpret_cast<char*>(&audio_fade_)) + sizeof(aspect_ratio_width_));
  project_ratio_ = 1;
}

KMProto_KMProject::~KMProto_KMProject() {
  // @@protoc_insertion_point(destructor:KMProto.KMProject)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void KMProto_KMProject::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  project_default_img_crop_mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete audio_fade_;
  if (this != internal_default_instance()) delete video_fade_;
}

void KMProto_KMProject::ArenaDtor(void* object) {
  KMProto_KMProject* _this = reinterpret_cast< KMProto_KMProject* >(object);
  (void)_this;
}
void KMProto_KMProject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KMProto_KMProject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KMProto_KMProject& KMProto_KMProject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KMProto_KMProject_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  return *internal_default_instance();
}


void KMProto_KMProject::Clear() {
// @@protoc_insertion_point(message_clear_start:KMProto.KMProject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  primary_items_.Clear();
  secondary_items_.Clear();
  tracks_.Clear();
  bookmarks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      project_default_img_crop_mode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(audio_fade_ != nullptr);
      audio_fade_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(video_fade_ != nullptr);
      video_fade_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&aspect_ratio_height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&project_audio_fade_out_time_) -
        reinterpret_cast<char*>(&aspect_ratio_height_)) + sizeof(project_audio_fade_out_time_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&is_project_audio_fade_in_on_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&project_default_layer_duration_) -
        reinterpret_cast<char*>(&is_project_audio_fade_in_on_)) + sizeof(project_default_layer_duration_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&project_auto_master_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&aspect_ratio_width_) -
        reinterpret_cast<char*>(&project_auto_master_)) + sizeof(aspect_ratio_width_));
    project_ratio_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* KMProto_KMProject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .KMProto.KMProject.TimelineItem primary_items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_primary_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KMProto.KMProject.TimelineItem secondary_items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_secondary_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KMProto.KMProject.Track tracks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tracks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 timeline_format_version = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_timeline_format_version(&has_bits);
          timeline_format_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 bookmarks = 103 [packed = true];
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_bookmarks(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_bookmarks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 recent_scroll_time = 109;
      case 109:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_recent_scroll_time(&has_bits);
          recent_scroll_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KMProto.KMProject.AspectRatio project_ratio = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KMProto_KMProject_AspectRatio_IsValid(val))) {
            _internal_set_project_ratio(static_cast<::KMProto_KMProject_AspectRatio>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(111, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float project_audio_fade_in_time = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_project_audio_fade_in_time(&has_bits);
          project_audio_fade_in_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float project_audio_fade_out_time = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_project_audio_fade_out_time(&has_bits);
          project_audio_fade_out_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool is_project_audio_fade_in_on = 114;
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_is_project_audio_fade_in_on(&has_bits);
          is_project_audio_fade_in_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_project_audio_fade_out_on = 115;
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_is_project_audio_fade_out_on(&has_bits);
          is_project_audio_fade_out_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float project_video_fade_in_time = 120;
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_project_video_fade_in_time(&has_bits);
          project_video_fade_in_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float project_video_fade_out_time = 121;
      case 121:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          _Internal::set_has_project_video_fade_out_time(&has_bits);
          project_video_fade_out_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool is_project_video_fade_in_on = 122;
      case 122:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_is_project_video_fade_in_on(&has_bits);
          is_project_video_fade_in_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_project_video_fade_out_on = 123;
      case 123:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_is_project_video_fade_out_on(&has_bits);
          is_project_video_fade_out_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 project_default_img_duration = 124;
      case 124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_project_default_img_duration(&has_bits);
          project_default_img_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 project_default_layer_duration = 125;
      case 125:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_project_default_layer_duration(&has_bits);
          project_default_layer_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string project_default_img_crop_mode = 126;
      case 126:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_project_default_img_crop_mode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool project_auto_master = 127;
      case 127:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_project_auto_master(&has_bits);
          project_auto_master_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 project_master_volume = 128;
      case 128:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_project_master_volume(&has_bits);
          project_master_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 project_resolution_setting = 129;
      case 129:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_project_resolution_setting(&has_bits);
          project_resolution_setting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 project_frame_rate = 130;
      case 130:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_project_frame_rate(&has_bits);
          project_frame_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 project_default_img_crop_mode_ios = 131;
      case 131:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_project_default_img_crop_mode_ios(&has_bits);
          project_default_img_crop_mode_ios_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 project_capability_mode = 132;
      case 132:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_project_capability_mode(&has_bits);
          project_capability_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 aspect_ratio_width = 133;
      case 133:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_aspect_ratio_width(&has_bits);
          aspect_ratio_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 aspect_ratio_height = 134;
      case 134:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_aspect_ratio_height(&has_bits);
          aspect_ratio_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KMProto.KMProject.Fade audio_fade = 135;
      case 135:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio_fade(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KMProto.KMProject.Fade video_fade = 136;
      case 136:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_video_fade(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KMProto_KMProject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KMProto.KMProject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .KMProto.KMProject.TimelineItem primary_items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_primary_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_primary_items(i), target, stream);
  }

  // repeated .KMProto.KMProject.TimelineItem secondary_items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_secondary_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_secondary_items(i), target, stream);
  }

  // repeated .KMProto.KMProject.Track tracks = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tracks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_tracks(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 timeline_format_version = 100;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(100, this->_internal_timeline_format_version(), target);
  }

  // repeated uint32 bookmarks = 103 [packed = true];
  {
    int byte_size = _bookmarks_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          103, _internal_bookmarks(), byte_size, target);
    }
  }

  // optional int32 recent_scroll_time = 109;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(109, this->_internal_recent_scroll_time(), target);
  }

  // optional .KMProto.KMProject.AspectRatio project_ratio = 111;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      111, this->_internal_project_ratio(), target);
  }

  // optional float project_audio_fade_in_time = 112;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(112, this->_internal_project_audio_fade_in_time(), target);
  }

  // optional float project_audio_fade_out_time = 113;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(113, this->_internal_project_audio_fade_out_time(), target);
  }

  // optional bool is_project_audio_fade_in_on = 114;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(114, this->_internal_is_project_audio_fade_in_on(), target);
  }

  // optional bool is_project_audio_fade_out_on = 115;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(115, this->_internal_is_project_audio_fade_out_on(), target);
  }

  // optional float project_video_fade_in_time = 120;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(120, this->_internal_project_video_fade_in_time(), target);
  }

  // optional float project_video_fade_out_time = 121;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(121, this->_internal_project_video_fade_out_time(), target);
  }

  // optional bool is_project_video_fade_in_on = 122;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(122, this->_internal_is_project_video_fade_in_on(), target);
  }

  // optional bool is_project_video_fade_out_on = 123;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(123, this->_internal_is_project_video_fade_out_on(), target);
  }

  // optional int32 project_default_img_duration = 124;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(124, this->_internal_project_default_img_duration(), target);
  }

  // optional int32 project_default_layer_duration = 125;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(125, this->_internal_project_default_layer_duration(), target);
  }

  // optional string project_default_img_crop_mode = 126;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        126, this->_internal_project_default_img_crop_mode(), target);
  }

  // optional bool project_auto_master = 127;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(127, this->_internal_project_auto_master(), target);
  }

  // optional int32 project_master_volume = 128;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(128, this->_internal_project_master_volume(), target);
  }

  // optional int32 project_resolution_setting = 129;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(129, this->_internal_project_resolution_setting(), target);
  }

  // optional int32 project_frame_rate = 130;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(130, this->_internal_project_frame_rate(), target);
  }

  // optional int32 project_default_img_crop_mode_ios = 131;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(131, this->_internal_project_default_img_crop_mode_ios(), target);
  }

  // optional int32 project_capability_mode = 132;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(132, this->_internal_project_capability_mode(), target);
  }

  // optional int32 aspect_ratio_width = 133;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(133, this->_internal_aspect_ratio_width(), target);
  }

  // optional int32 aspect_ratio_height = 134;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(134, this->_internal_aspect_ratio_height(), target);
  }

  // optional .KMProto.KMProject.Fade audio_fade = 135;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        135, _Internal::audio_fade(this), target, stream);
  }

  // optional .KMProto.KMProject.Fade video_fade = 136;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        136, _Internal::video_fade(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KMProto.KMProject)
  return target;
}

size_t KMProto_KMProject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KMProto.KMProject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KMProto.KMProject.TimelineItem primary_items = 1;
  total_size += 1UL * this->_internal_primary_items_size();
  for (const auto& msg : this->primary_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KMProto.KMProject.TimelineItem secondary_items = 2;
  total_size += 1UL * this->_internal_secondary_items_size();
  for (const auto& msg : this->secondary_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KMProto.KMProject.Track tracks = 3;
  total_size += 1UL * this->_internal_tracks_size();
  for (const auto& msg : this->tracks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 bookmarks = 103 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->bookmarks_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bookmarks_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string project_default_img_crop_mode = 126;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_project_default_img_crop_mode());
    }

    // optional .KMProto.KMProject.Fade audio_fade = 135;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *audio_fade_);
    }

    // optional .KMProto.KMProject.Fade video_fade = 136;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *video_fade_);
    }

    // optional int32 aspect_ratio_height = 134;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_aspect_ratio_height());
    }

    // optional int32 timeline_format_version = 100;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_timeline_format_version());
    }

    // optional int32 recent_scroll_time = 109;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_recent_scroll_time());
    }

    // optional float project_audio_fade_in_time = 112;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

    // optional float project_audio_fade_out_time = 113;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool is_project_audio_fade_in_on = 114;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool is_project_audio_fade_out_on = 115;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool is_project_video_fade_in_on = 122;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool is_project_video_fade_out_on = 123;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional float project_video_fade_in_time = 120;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 4;
    }

    // optional float project_video_fade_out_time = 121;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 4;
    }

    // optional int32 project_default_img_duration = 124;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_project_default_img_duration());
    }

    // optional int32 project_default_layer_duration = 125;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_project_default_layer_duration());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool project_auto_master = 127;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional int32 project_master_volume = 128;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_project_master_volume());
    }

    // optional int32 project_resolution_setting = 129;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_project_resolution_setting());
    }

    // optional int32 project_frame_rate = 130;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_project_frame_rate());
    }

    // optional int32 project_default_img_crop_mode_ios = 131;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_project_default_img_crop_mode_ios());
    }

    // optional int32 project_capability_mode = 132;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_project_capability_mode());
    }

    // optional int32 aspect_ratio_width = 133;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_aspect_ratio_width());
    }

    // optional .KMProto.KMProject.AspectRatio project_ratio = 111;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_project_ratio());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KMProto_KMProject::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const KMProto_KMProject*>(
      &from));
}

void KMProto_KMProject::MergeFrom(const KMProto_KMProject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KMProto.KMProject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  primary_items_.MergeFrom(from.primary_items_);
  secondary_items_.MergeFrom(from.secondary_items_);
  tracks_.MergeFrom(from.tracks_);
  bookmarks_.MergeFrom(from.bookmarks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_project_default_img_crop_mode(from._internal_project_default_img_crop_mode());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_audio_fade()->::KMProto_KMProject_Fade::MergeFrom(from._internal_audio_fade());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_video_fade()->::KMProto_KMProject_Fade::MergeFrom(from._internal_video_fade());
    }
    if (cached_has_bits & 0x00000008u) {
      aspect_ratio_height_ = from.aspect_ratio_height_;
    }
    if (cached_has_bits & 0x00000010u) {
      timeline_format_version_ = from.timeline_format_version_;
    }
    if (cached_has_bits & 0x00000020u) {
      recent_scroll_time_ = from.recent_scroll_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      project_audio_fade_in_time_ = from.project_audio_fade_in_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      project_audio_fade_out_time_ = from.project_audio_fade_out_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      is_project_audio_fade_in_on_ = from.is_project_audio_fade_in_on_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_project_audio_fade_out_on_ = from.is_project_audio_fade_out_on_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_project_video_fade_in_on_ = from.is_project_video_fade_in_on_;
    }
    if (cached_has_bits & 0x00000800u) {
      is_project_video_fade_out_on_ = from.is_project_video_fade_out_on_;
    }
    if (cached_has_bits & 0x00001000u) {
      project_video_fade_in_time_ = from.project_video_fade_in_time_;
    }
    if (cached_has_bits & 0x00002000u) {
      project_video_fade_out_time_ = from.project_video_fade_out_time_;
    }
    if (cached_has_bits & 0x00004000u) {
      project_default_img_duration_ = from.project_default_img_duration_;
    }
    if (cached_has_bits & 0x00008000u) {
      project_default_layer_duration_ = from.project_default_layer_duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      project_auto_master_ = from.project_auto_master_;
    }
    if (cached_has_bits & 0x00020000u) {
      project_master_volume_ = from.project_master_volume_;
    }
    if (cached_has_bits & 0x00040000u) {
      project_resolution_setting_ = from.project_resolution_setting_;
    }
    if (cached_has_bits & 0x00080000u) {
      project_frame_rate_ = from.project_frame_rate_;
    }
    if (cached_has_bits & 0x00100000u) {
      project_default_img_crop_mode_ios_ = from.project_default_img_crop_mode_ios_;
    }
    if (cached_has_bits & 0x00200000u) {
      project_capability_mode_ = from.project_capability_mode_;
    }
    if (cached_has_bits & 0x00400000u) {
      aspect_ratio_width_ = from.aspect_ratio_width_;
    }
    if (cached_has_bits & 0x00800000u) {
      project_ratio_ = from.project_ratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KMProto_KMProject::CopyFrom(const KMProto_KMProject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KMProto.KMProject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KMProto_KMProject::IsInitialized() const {
  return true;
}

void KMProto_KMProject::InternalSwap(KMProto_KMProject* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  primary_items_.InternalSwap(&other->primary_items_);
  secondary_items_.InternalSwap(&other->secondary_items_);
  tracks_.InternalSwap(&other->tracks_);
  bookmarks_.InternalSwap(&other->bookmarks_);
  project_default_img_crop_mode_.Swap(&other->project_default_img_crop_mode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KMProto_KMProject, aspect_ratio_width_)
      + sizeof(KMProto_KMProject::aspect_ratio_width_)
      - PROTOBUF_FIELD_OFFSET(KMProto_KMProject, audio_fade_)>(
          reinterpret_cast<char*>(&audio_fade_),
          reinterpret_cast<char*>(&other->audio_fade_));
  swap(project_ratio_, other->project_ratio_);
}

std::string KMProto_KMProject::GetTypeName() const {
  return "KMProto.KMProject";
}


// ===================================================================

class KMProto_KMProjectHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<KMProto_KMProjectHeader>()._has_bits_);
  static void set_has_project_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_saved_with_km_version(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_creation_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_last_edit_time(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_jpeg_thumbnail(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_need_update_large_thumbnail(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_project_uuid_lsb(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_project_uuid_msb(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_theme_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bgm_theme_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_total_play_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_saved_with_km_ver_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_saved_on_platform(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_using_icloud_for_ios_only(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

KMProto_KMProjectHeader::KMProto_KMProjectHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KMProto.KMProjectHeader)
}
KMProto_KMProjectHeader::KMProto_KMProjectHeader(const KMProto_KMProjectHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  jpeg_thumbnail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_jpeg_thumbnail()) {
    jpeg_thumbnail_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_jpeg_thumbnail(), 
      GetArena());
  }
  theme_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_theme_id()) {
    theme_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_theme_id(), 
      GetArena());
  }
  bgm_theme_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_bgm_theme_id()) {
    bgm_theme_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bgm_theme_id(), 
      GetArena());
  }
  saved_with_km_ver_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_saved_with_km_ver_name()) {
    saved_with_km_ver_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_saved_with_km_ver_name(), 
      GetArena());
  }
  ::memcpy(&project_version_, &from.project_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&saved_on_platform_) -
    reinterpret_cast<char*>(&project_version_)) + sizeof(saved_on_platform_));
  // @@protoc_insertion_point(copy_constructor:KMProto.KMProjectHeader)
}

void KMProto_KMProjectHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KMProto_KMProjectHeader_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  jpeg_thumbnail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  theme_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bgm_theme_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  saved_with_km_ver_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&project_version_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&using_icloud_for_ios_only_) -
      reinterpret_cast<char*>(&project_version_)) + sizeof(using_icloud_for_ios_only_));
  saved_on_platform_ = 1;
}

KMProto_KMProjectHeader::~KMProto_KMProjectHeader() {
  // @@protoc_insertion_point(destructor:KMProto.KMProjectHeader)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void KMProto_KMProjectHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  jpeg_thumbnail_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  theme_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bgm_theme_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  saved_with_km_ver_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KMProto_KMProjectHeader::ArenaDtor(void* object) {
  KMProto_KMProjectHeader* _this = reinterpret_cast< KMProto_KMProjectHeader* >(object);
  (void)_this;
}
void KMProto_KMProjectHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KMProto_KMProjectHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KMProto_KMProjectHeader& KMProto_KMProjectHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KMProto_KMProjectHeader_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  return *internal_default_instance();
}


void KMProto_KMProjectHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:KMProto.KMProjectHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      jpeg_thumbnail_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      theme_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      bgm_theme_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      saved_with_km_ver_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&project_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_edit_time_) -
        reinterpret_cast<char*>(&project_version_)) + sizeof(last_edit_time_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&project_uuid_lsb_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&using_icloud_for_ios_only_) -
        reinterpret_cast<char*>(&project_uuid_lsb_)) + sizeof(using_icloud_for_ios_only_));
    saved_on_platform_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* KMProto_KMProjectHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 project_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_project_version(&has_bits);
          project_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 saved_with_km_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_saved_with_km_version(&has_bits);
          saved_with_km_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 creation_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_creation_time(&has_bits);
          creation_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 last_edit_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_last_edit_time(&has_bits);
          last_edit_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes jpeg_thumbnail = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_jpeg_thumbnail();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 project_uuid_lsb = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_project_uuid_lsb(&has_bits);
          project_uuid_lsb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 project_uuid_msb = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_project_uuid_msb(&has_bits);
          project_uuid_msb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 total_play_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_total_play_time(&has_bits);
          total_play_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool need_update_large_thumbnail = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_need_update_large_thumbnail(&has_bits);
          need_update_large_thumbnail_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string theme_id = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_theme_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string bgm_theme_id = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_bgm_theme_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string saved_with_km_ver_name = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_saved_with_km_ver_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .KMProto.Platform saved_on_platform = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KMProto_Platform_IsValid(val))) {
            _internal_set_saved_on_platform(static_cast<::KMProto_Platform>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(104, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool using_icloud_for_ios_only = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_using_icloud_for_ios_only(&has_bits);
          using_icloud_for_ios_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KMProto_KMProjectHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KMProto.KMProjectHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 project_version = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_project_version(), target);
  }

  // optional uint32 saved_with_km_version = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_saved_with_km_version(), target);
  }

  // optional uint64 creation_time = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_creation_time(), target);
  }

  // optional uint64 last_edit_time = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_last_edit_time(), target);
  }

  // optional bytes jpeg_thumbnail = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_jpeg_thumbnail(), target);
  }

  // optional uint64 project_uuid_lsb = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_project_uuid_lsb(), target);
  }

  // optional uint64 project_uuid_msb = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_project_uuid_msb(), target);
  }

  // optional uint32 total_play_time = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_total_play_time(), target);
  }

  // optional bool need_update_large_thumbnail = 100;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(100, this->_internal_need_update_large_thumbnail(), target);
  }

  // optional string theme_id = 101;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        101, this->_internal_theme_id(), target);
  }

  // optional string bgm_theme_id = 102;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        102, this->_internal_bgm_theme_id(), target);
  }

  // optional string saved_with_km_ver_name = 103;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        103, this->_internal_saved_with_km_ver_name(), target);
  }

  // optional .KMProto.Platform saved_on_platform = 104;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      104, this->_internal_saved_on_platform(), target);
  }

  // optional bool using_icloud_for_ios_only = 105;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(105, this->_internal_using_icloud_for_ios_only(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KMProto.KMProjectHeader)
  return target;
}

size_t KMProto_KMProjectHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KMProto.KMProjectHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes jpeg_thumbnail = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_jpeg_thumbnail());
    }

    // optional string theme_id = 101;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_theme_id());
    }

    // optional string bgm_theme_id = 102;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bgm_theme_id());
    }

    // optional string saved_with_km_ver_name = 103;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_saved_with_km_ver_name());
    }

    // optional uint32 project_version = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_project_version());
    }

    // optional uint32 saved_with_km_version = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_saved_with_km_version());
    }

    // optional uint64 creation_time = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_creation_time());
    }

    // optional uint64 last_edit_time = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_last_edit_time());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional uint64 project_uuid_lsb = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_project_uuid_lsb());
    }

    // optional uint64 project_uuid_msb = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_project_uuid_msb());
    }

    // optional uint32 total_play_time = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_total_play_time());
    }

    // optional bool need_update_large_thumbnail = 100;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool using_icloud_for_ios_only = 105;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional .KMProto.Platform saved_on_platform = 104;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_saved_on_platform());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KMProto_KMProjectHeader::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const KMProto_KMProjectHeader*>(
      &from));
}

void KMProto_KMProjectHeader::MergeFrom(const KMProto_KMProjectHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KMProto.KMProjectHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_jpeg_thumbnail(from._internal_jpeg_thumbnail());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_theme_id(from._internal_theme_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_bgm_theme_id(from._internal_bgm_theme_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_saved_with_km_ver_name(from._internal_saved_with_km_ver_name());
    }
    if (cached_has_bits & 0x00000010u) {
      project_version_ = from.project_version_;
    }
    if (cached_has_bits & 0x00000020u) {
      saved_with_km_version_ = from.saved_with_km_version_;
    }
    if (cached_has_bits & 0x00000040u) {
      creation_time_ = from.creation_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      last_edit_time_ = from.last_edit_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      project_uuid_lsb_ = from.project_uuid_lsb_;
    }
    if (cached_has_bits & 0x00000200u) {
      project_uuid_msb_ = from.project_uuid_msb_;
    }
    if (cached_has_bits & 0x00000400u) {
      total_play_time_ = from.total_play_time_;
    }
    if (cached_has_bits & 0x00000800u) {
      need_update_large_thumbnail_ = from.need_update_large_thumbnail_;
    }
    if (cached_has_bits & 0x00001000u) {
      using_icloud_for_ios_only_ = from.using_icloud_for_ios_only_;
    }
    if (cached_has_bits & 0x00002000u) {
      saved_on_platform_ = from.saved_on_platform_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KMProto_KMProjectHeader::CopyFrom(const KMProto_KMProjectHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KMProto.KMProjectHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KMProto_KMProjectHeader::IsInitialized() const {
  return true;
}

void KMProto_KMProjectHeader::InternalSwap(KMProto_KMProjectHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  jpeg_thumbnail_.Swap(&other->jpeg_thumbnail_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  theme_id_.Swap(&other->theme_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bgm_theme_id_.Swap(&other->bgm_theme_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  saved_with_km_ver_name_.Swap(&other->saved_with_km_ver_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KMProto_KMProjectHeader, using_icloud_for_ios_only_)
      + sizeof(KMProto_KMProjectHeader::using_icloud_for_ios_only_)
      - PROTOBUF_FIELD_OFFSET(KMProto_KMProjectHeader, project_version_)>(
          reinterpret_cast<char*>(&project_version_),
          reinterpret_cast<char*>(&other->project_version_));
  swap(saved_on_platform_, other->saved_on_platform_);
}

std::string KMProto_KMProjectHeader::GetTypeName() const {
  return "KMProto.KMProjectHeader";
}


// ===================================================================

class KMProto::_Internal {
 public:
};

KMProto::KMProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KMProto)
}
KMProto::KMProto(const KMProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KMProto)
}

void KMProto::SharedCtor() {
}

KMProto::~KMProto() {
  // @@protoc_insertion_point(destructor:KMProto)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void KMProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void KMProto::ArenaDtor(void* object) {
  KMProto* _this = reinterpret_cast< KMProto* >(object);
  (void)_this;
}
void KMProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KMProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KMProto& KMProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KMProto_kinemaster_5fproject_5fwire_2dlite_2eproto.base);
  return *internal_default_instance();
}


void KMProto::Clear() {
// @@protoc_insertion_point(message_clear_start:KMProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* KMProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KMProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KMProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KMProto)
  return target;
}

size_t KMProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KMProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KMProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const KMProto*>(
      &from));
}

void KMProto::MergeFrom(const KMProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KMProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void KMProto::CopyFrom(const KMProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KMProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KMProto::IsInitialized() const {
  return true;
}

void KMProto::InternalSwap(KMProto* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string KMProto::GetTypeName() const {
  return "KMProto";
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::KMProto_KMProject_Fade* Arena::CreateMaybeMessage< ::KMProto_KMProject_Fade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KMProto_KMProject_Fade >(arena);
}
template<> PROTOBUF_NOINLINE ::KMProto_KMProject_Track* Arena::CreateMaybeMessage< ::KMProto_KMProject_Track >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KMProto_KMProject_Track >(arena);
}
template<> PROTOBUF_NOINLINE ::KMProto_KMProject_TimelineItem* Arena::CreateMaybeMessage< ::KMProto_KMProject_TimelineItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KMProto_KMProject_TimelineItem >(arena);
}
template<> PROTOBUF_NOINLINE ::KMProto_KMProject_VisualClip* Arena::CreateMaybeMessage< ::KMProto_KMProject_VisualClip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KMProto_KMProject_VisualClip >(arena);
}
template<> PROTOBUF_NOINLINE ::KMProto_KMProject_ClipRange* Arena::CreateMaybeMessage< ::KMProto_KMProject_ClipRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KMProto_KMProject_ClipRange >(arena);
}
template<> PROTOBUF_NOINLINE ::KMProto_KMProject_EffectOptionItem* Arena::CreateMaybeMessage< ::KMProto_KMProject_EffectOptionItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KMProto_KMProject_EffectOptionItem >(arena);
}
template<> PROTOBUF_NOINLINE ::KMProto_KMProject_StringHashMap* Arena::CreateMaybeMessage< ::KMProto_KMProject_StringHashMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KMProto_KMProject_StringHashMap >(arena);
}
template<> PROTOBUF_NOINLINE ::KMProto_KMProject_StringHashMapEntry* Arena::CreateMaybeMessage< ::KMProto_KMProject_StringHashMapEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KMProto_KMProject_StringHashMapEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::KMProto_KMProject_Matrix* Arena::CreateMaybeMessage< ::KMProto_KMProject_Matrix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KMProto_KMProject_Matrix >(arena);
}
template<> PROTOBUF_NOINLINE ::KMProto_KMProject_Transition* Arena::CreateMaybeMessage< ::KMProto_KMProject_Transition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KMProto_KMProject_Transition >(arena);
}
template<> PROTOBUF_NOINLINE ::KMProto_KMProject_AudioClip* Arena::CreateMaybeMessage< ::KMProto_KMProject_AudioClip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KMProto_KMProject_AudioClip >(arena);
}
template<> PROTOBUF_NOINLINE ::KMProto_KMProject_LayerCommon* Arena::CreateMaybeMessage< ::KMProto_KMProject_LayerCommon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KMProto_KMProject_LayerCommon >(arena);
}
template<> PROTOBUF_NOINLINE ::KMProto_KMProject_KeyFrame* Arena::CreateMaybeMessage< ::KMProto_KMProject_KeyFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KMProto_KMProject_KeyFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::KMProto_KMProject_TextLayer* Arena::CreateMaybeMessage< ::KMProto_KMProject_TextLayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KMProto_KMProject_TextLayer >(arena);
}
template<> PROTOBUF_NOINLINE ::KMProto_KMProject_HandwritingLayer* Arena::CreateMaybeMessage< ::KMProto_KMProject_HandwritingLayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KMProto_KMProject_HandwritingLayer >(arena);
}
template<> PROTOBUF_NOINLINE ::KMProto_KMProject_StickerLayer* Arena::CreateMaybeMessage< ::KMProto_KMProject_StickerLayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KMProto_KMProject_StickerLayer >(arena);
}
template<> PROTOBUF_NOINLINE ::KMProto_KMProject_AssetLayer* Arena::CreateMaybeMessage< ::KMProto_KMProject_AssetLayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KMProto_KMProject_AssetLayer >(arena);
}
template<> PROTOBUF_NOINLINE ::KMProto_KMProject_EffectLayer* Arena::CreateMaybeMessage< ::KMProto_KMProject_EffectLayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KMProto_KMProject_EffectLayer >(arena);
}
template<> PROTOBUF_NOINLINE ::KMProto_KMProject_ImageLayer* Arena::CreateMaybeMessage< ::KMProto_KMProject_ImageLayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KMProto_KMProject_ImageLayer >(arena);
}
template<> PROTOBUF_NOINLINE ::KMProto_KMProject_VideoLayer* Arena::CreateMaybeMessage< ::KMProto_KMProject_VideoLayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KMProto_KMProject_VideoLayer >(arena);
}
template<> PROTOBUF_NOINLINE ::KMProto_KMProject_ColorAdjustment* Arena::CreateMaybeMessage< ::KMProto_KMProject_ColorAdjustment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KMProto_KMProject_ColorAdjustment >(arena);
}
template<> PROTOBUF_NOINLINE ::KMProto_KMProject_WritingPoint* Arena::CreateMaybeMessage< ::KMProto_KMProject_WritingPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KMProto_KMProject_WritingPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::KMProto_KMProject_GroupLayer* Arena::CreateMaybeMessage< ::KMProto_KMProject_GroupLayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KMProto_KMProject_GroupLayer >(arena);
}
template<> PROTOBUF_NOINLINE ::KMProto_KMProject_DrawingAction* Arena::CreateMaybeMessage< ::KMProto_KMProject_DrawingAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KMProto_KMProject_DrawingAction >(arena);
}
template<> PROTOBUF_NOINLINE ::KMProto_KMProject_ColorEffect* Arena::CreateMaybeMessage< ::KMProto_KMProject_ColorEffect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KMProto_KMProject_ColorEffect >(arena);
}
template<> PROTOBUF_NOINLINE ::KMProto_KMProject_ColorFilter* Arena::CreateMaybeMessage< ::KMProto_KMProject_ColorFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KMProto_KMProject_ColorFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::KMProto_KMProject* Arena::CreateMaybeMessage< ::KMProto_KMProject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KMProto_KMProject >(arena);
}
template<> PROTOBUF_NOINLINE ::KMProto_KMProjectHeader* Arena::CreateMaybeMessage< ::KMProto_KMProjectHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KMProto_KMProjectHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::KMProto* Arena::CreateMaybeMessage< ::KMProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KMProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
