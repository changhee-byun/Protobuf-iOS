// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kinemaster_project_wire-lite.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kinemaster_5fproject_5fwire_2dlite_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kinemaster_5fproject_5fwire_2dlite_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kinemaster_5fproject_5fwire_2dlite_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kinemaster_5fproject_5fwire_2dlite_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[29]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
class KMProto;
class KMProtoDefaultTypeInternal;
extern KMProtoDefaultTypeInternal _KMProto_default_instance_;
class KMProto_KMProject;
class KMProto_KMProjectDefaultTypeInternal;
extern KMProto_KMProjectDefaultTypeInternal _KMProto_KMProject_default_instance_;
class KMProto_KMProjectHeader;
class KMProto_KMProjectHeaderDefaultTypeInternal;
extern KMProto_KMProjectHeaderDefaultTypeInternal _KMProto_KMProjectHeader_default_instance_;
class KMProto_KMProject_AssetLayer;
class KMProto_KMProject_AssetLayerDefaultTypeInternal;
extern KMProto_KMProject_AssetLayerDefaultTypeInternal _KMProto_KMProject_AssetLayer_default_instance_;
class KMProto_KMProject_AudioClip;
class KMProto_KMProject_AudioClipDefaultTypeInternal;
extern KMProto_KMProject_AudioClipDefaultTypeInternal _KMProto_KMProject_AudioClip_default_instance_;
class KMProto_KMProject_ClipRange;
class KMProto_KMProject_ClipRangeDefaultTypeInternal;
extern KMProto_KMProject_ClipRangeDefaultTypeInternal _KMProto_KMProject_ClipRange_default_instance_;
class KMProto_KMProject_ColorAdjustment;
class KMProto_KMProject_ColorAdjustmentDefaultTypeInternal;
extern KMProto_KMProject_ColorAdjustmentDefaultTypeInternal _KMProto_KMProject_ColorAdjustment_default_instance_;
class KMProto_KMProject_ColorEffect;
class KMProto_KMProject_ColorEffectDefaultTypeInternal;
extern KMProto_KMProject_ColorEffectDefaultTypeInternal _KMProto_KMProject_ColorEffect_default_instance_;
class KMProto_KMProject_ColorFilter;
class KMProto_KMProject_ColorFilterDefaultTypeInternal;
extern KMProto_KMProject_ColorFilterDefaultTypeInternal _KMProto_KMProject_ColorFilter_default_instance_;
class KMProto_KMProject_DrawingAction;
class KMProto_KMProject_DrawingActionDefaultTypeInternal;
extern KMProto_KMProject_DrawingActionDefaultTypeInternal _KMProto_KMProject_DrawingAction_default_instance_;
class KMProto_KMProject_EffectLayer;
class KMProto_KMProject_EffectLayerDefaultTypeInternal;
extern KMProto_KMProject_EffectLayerDefaultTypeInternal _KMProto_KMProject_EffectLayer_default_instance_;
class KMProto_KMProject_EffectOptionItem;
class KMProto_KMProject_EffectOptionItemDefaultTypeInternal;
extern KMProto_KMProject_EffectOptionItemDefaultTypeInternal _KMProto_KMProject_EffectOptionItem_default_instance_;
class KMProto_KMProject_Fade;
class KMProto_KMProject_FadeDefaultTypeInternal;
extern KMProto_KMProject_FadeDefaultTypeInternal _KMProto_KMProject_Fade_default_instance_;
class KMProto_KMProject_GroupLayer;
class KMProto_KMProject_GroupLayerDefaultTypeInternal;
extern KMProto_KMProject_GroupLayerDefaultTypeInternal _KMProto_KMProject_GroupLayer_default_instance_;
class KMProto_KMProject_HandwritingLayer;
class KMProto_KMProject_HandwritingLayerDefaultTypeInternal;
extern KMProto_KMProject_HandwritingLayerDefaultTypeInternal _KMProto_KMProject_HandwritingLayer_default_instance_;
class KMProto_KMProject_ImageLayer;
class KMProto_KMProject_ImageLayerDefaultTypeInternal;
extern KMProto_KMProject_ImageLayerDefaultTypeInternal _KMProto_KMProject_ImageLayer_default_instance_;
class KMProto_KMProject_KeyFrame;
class KMProto_KMProject_KeyFrameDefaultTypeInternal;
extern KMProto_KMProject_KeyFrameDefaultTypeInternal _KMProto_KMProject_KeyFrame_default_instance_;
class KMProto_KMProject_LayerCommon;
class KMProto_KMProject_LayerCommonDefaultTypeInternal;
extern KMProto_KMProject_LayerCommonDefaultTypeInternal _KMProto_KMProject_LayerCommon_default_instance_;
class KMProto_KMProject_Matrix;
class KMProto_KMProject_MatrixDefaultTypeInternal;
extern KMProto_KMProject_MatrixDefaultTypeInternal _KMProto_KMProject_Matrix_default_instance_;
class KMProto_KMProject_StickerLayer;
class KMProto_KMProject_StickerLayerDefaultTypeInternal;
extern KMProto_KMProject_StickerLayerDefaultTypeInternal _KMProto_KMProject_StickerLayer_default_instance_;
class KMProto_KMProject_StringHashMap;
class KMProto_KMProject_StringHashMapDefaultTypeInternal;
extern KMProto_KMProject_StringHashMapDefaultTypeInternal _KMProto_KMProject_StringHashMap_default_instance_;
class KMProto_KMProject_StringHashMapEntry;
class KMProto_KMProject_StringHashMapEntryDefaultTypeInternal;
extern KMProto_KMProject_StringHashMapEntryDefaultTypeInternal _KMProto_KMProject_StringHashMapEntry_default_instance_;
class KMProto_KMProject_TextLayer;
class KMProto_KMProject_TextLayerDefaultTypeInternal;
extern KMProto_KMProject_TextLayerDefaultTypeInternal _KMProto_KMProject_TextLayer_default_instance_;
class KMProto_KMProject_TimelineItem;
class KMProto_KMProject_TimelineItemDefaultTypeInternal;
extern KMProto_KMProject_TimelineItemDefaultTypeInternal _KMProto_KMProject_TimelineItem_default_instance_;
class KMProto_KMProject_Track;
class KMProto_KMProject_TrackDefaultTypeInternal;
extern KMProto_KMProject_TrackDefaultTypeInternal _KMProto_KMProject_Track_default_instance_;
class KMProto_KMProject_Transition;
class KMProto_KMProject_TransitionDefaultTypeInternal;
extern KMProto_KMProject_TransitionDefaultTypeInternal _KMProto_KMProject_Transition_default_instance_;
class KMProto_KMProject_VideoLayer;
class KMProto_KMProject_VideoLayerDefaultTypeInternal;
extern KMProto_KMProject_VideoLayerDefaultTypeInternal _KMProto_KMProject_VideoLayer_default_instance_;
class KMProto_KMProject_VisualClip;
class KMProto_KMProject_VisualClipDefaultTypeInternal;
extern KMProto_KMProject_VisualClipDefaultTypeInternal _KMProto_KMProject_VisualClip_default_instance_;
class KMProto_KMProject_WritingPoint;
class KMProto_KMProject_WritingPointDefaultTypeInternal;
extern KMProto_KMProject_WritingPointDefaultTypeInternal _KMProto_KMProject_WritingPoint_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::KMProto* Arena::CreateMaybeMessage<::KMProto>(Arena*);
template<> ::KMProto_KMProject* Arena::CreateMaybeMessage<::KMProto_KMProject>(Arena*);
template<> ::KMProto_KMProjectHeader* Arena::CreateMaybeMessage<::KMProto_KMProjectHeader>(Arena*);
template<> ::KMProto_KMProject_AssetLayer* Arena::CreateMaybeMessage<::KMProto_KMProject_AssetLayer>(Arena*);
template<> ::KMProto_KMProject_AudioClip* Arena::CreateMaybeMessage<::KMProto_KMProject_AudioClip>(Arena*);
template<> ::KMProto_KMProject_ClipRange* Arena::CreateMaybeMessage<::KMProto_KMProject_ClipRange>(Arena*);
template<> ::KMProto_KMProject_ColorAdjustment* Arena::CreateMaybeMessage<::KMProto_KMProject_ColorAdjustment>(Arena*);
template<> ::KMProto_KMProject_ColorEffect* Arena::CreateMaybeMessage<::KMProto_KMProject_ColorEffect>(Arena*);
template<> ::KMProto_KMProject_ColorFilter* Arena::CreateMaybeMessage<::KMProto_KMProject_ColorFilter>(Arena*);
template<> ::KMProto_KMProject_DrawingAction* Arena::CreateMaybeMessage<::KMProto_KMProject_DrawingAction>(Arena*);
template<> ::KMProto_KMProject_EffectLayer* Arena::CreateMaybeMessage<::KMProto_KMProject_EffectLayer>(Arena*);
template<> ::KMProto_KMProject_EffectOptionItem* Arena::CreateMaybeMessage<::KMProto_KMProject_EffectOptionItem>(Arena*);
template<> ::KMProto_KMProject_Fade* Arena::CreateMaybeMessage<::KMProto_KMProject_Fade>(Arena*);
template<> ::KMProto_KMProject_GroupLayer* Arena::CreateMaybeMessage<::KMProto_KMProject_GroupLayer>(Arena*);
template<> ::KMProto_KMProject_HandwritingLayer* Arena::CreateMaybeMessage<::KMProto_KMProject_HandwritingLayer>(Arena*);
template<> ::KMProto_KMProject_ImageLayer* Arena::CreateMaybeMessage<::KMProto_KMProject_ImageLayer>(Arena*);
template<> ::KMProto_KMProject_KeyFrame* Arena::CreateMaybeMessage<::KMProto_KMProject_KeyFrame>(Arena*);
template<> ::KMProto_KMProject_LayerCommon* Arena::CreateMaybeMessage<::KMProto_KMProject_LayerCommon>(Arena*);
template<> ::KMProto_KMProject_Matrix* Arena::CreateMaybeMessage<::KMProto_KMProject_Matrix>(Arena*);
template<> ::KMProto_KMProject_StickerLayer* Arena::CreateMaybeMessage<::KMProto_KMProject_StickerLayer>(Arena*);
template<> ::KMProto_KMProject_StringHashMap* Arena::CreateMaybeMessage<::KMProto_KMProject_StringHashMap>(Arena*);
template<> ::KMProto_KMProject_StringHashMapEntry* Arena::CreateMaybeMessage<::KMProto_KMProject_StringHashMapEntry>(Arena*);
template<> ::KMProto_KMProject_TextLayer* Arena::CreateMaybeMessage<::KMProto_KMProject_TextLayer>(Arena*);
template<> ::KMProto_KMProject_TimelineItem* Arena::CreateMaybeMessage<::KMProto_KMProject_TimelineItem>(Arena*);
template<> ::KMProto_KMProject_Track* Arena::CreateMaybeMessage<::KMProto_KMProject_Track>(Arena*);
template<> ::KMProto_KMProject_Transition* Arena::CreateMaybeMessage<::KMProto_KMProject_Transition>(Arena*);
template<> ::KMProto_KMProject_VideoLayer* Arena::CreateMaybeMessage<::KMProto_KMProject_VideoLayer>(Arena*);
template<> ::KMProto_KMProject_VisualClip* Arena::CreateMaybeMessage<::KMProto_KMProject_VisualClip>(Arena*);
template<> ::KMProto_KMProject_WritingPoint* Arena::CreateMaybeMessage<::KMProto_KMProject_WritingPoint>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum KMProto_KMProject_AssetLayer_AssetLayerType : int {
  KMProto_KMProject_AssetLayer_AssetLayerType_EFFECT_LAYER = 1,
  KMProto_KMProject_AssetLayer_AssetLayerType_OVERLAY_LAYER = 2
};
bool KMProto_KMProject_AssetLayer_AssetLayerType_IsValid(int value);
constexpr KMProto_KMProject_AssetLayer_AssetLayerType KMProto_KMProject_AssetLayer_AssetLayerType_AssetLayerType_MIN = KMProto_KMProject_AssetLayer_AssetLayerType_EFFECT_LAYER;
constexpr KMProto_KMProject_AssetLayer_AssetLayerType KMProto_KMProject_AssetLayer_AssetLayerType_AssetLayerType_MAX = KMProto_KMProject_AssetLayer_AssetLayerType_OVERLAY_LAYER;
constexpr int KMProto_KMProject_AssetLayer_AssetLayerType_AssetLayerType_ARRAYSIZE = KMProto_KMProject_AssetLayer_AssetLayerType_AssetLayerType_MAX + 1;

const std::string& KMProto_KMProject_AssetLayer_AssetLayerType_Name(KMProto_KMProject_AssetLayer_AssetLayerType value);
template<typename T>
inline const std::string& KMProto_KMProject_AssetLayer_AssetLayerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KMProto_KMProject_AssetLayer_AssetLayerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KMProto_KMProject_AssetLayer_AssetLayerType_Name.");
  return KMProto_KMProject_AssetLayer_AssetLayerType_Name(static_cast<KMProto_KMProject_AssetLayer_AssetLayerType>(enum_t_value));
}
bool KMProto_KMProject_AssetLayer_AssetLayerType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KMProto_KMProject_AssetLayer_AssetLayerType* value);
enum KMProto_KMProject_AspectRatio : int {
  KMProto_KMProject_AspectRatio_ASPECT_R_16_9 = 1,
  KMProto_KMProject_AspectRatio_ASPECT_SQUARE = 2,
  KMProto_KMProject_AspectRatio_ASPECT_R_9_16 = 3
};
bool KMProto_KMProject_AspectRatio_IsValid(int value);
constexpr KMProto_KMProject_AspectRatio KMProto_KMProject_AspectRatio_AspectRatio_MIN = KMProto_KMProject_AspectRatio_ASPECT_R_16_9;
constexpr KMProto_KMProject_AspectRatio KMProto_KMProject_AspectRatio_AspectRatio_MAX = KMProto_KMProject_AspectRatio_ASPECT_R_9_16;
constexpr int KMProto_KMProject_AspectRatio_AspectRatio_ARRAYSIZE = KMProto_KMProject_AspectRatio_AspectRatio_MAX + 1;

const std::string& KMProto_KMProject_AspectRatio_Name(KMProto_KMProject_AspectRatio value);
template<typename T>
inline const std::string& KMProto_KMProject_AspectRatio_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KMProto_KMProject_AspectRatio>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KMProto_KMProject_AspectRatio_Name.");
  return KMProto_KMProject_AspectRatio_Name(static_cast<KMProto_KMProject_AspectRatio>(enum_t_value));
}
bool KMProto_KMProject_AspectRatio_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KMProto_KMProject_AspectRatio* value);
enum KMProto_KMProject_ClipType : int {
  KMProto_KMProject_ClipType_VISUAL_CLIP = 1,
  KMProto_KMProject_ClipType_TRANSITION = 2,
  KMProto_KMProject_ClipType_AUDIO_CLIP = 3,
  KMProto_KMProject_ClipType_LAYER_TEXT = 4,
  KMProto_KMProject_ClipType_LAYER_STICKER = 5,
  KMProto_KMProject_ClipType_LAYER_HANDWRITING = 6,
  KMProto_KMProject_ClipType_LAYER_IMAGE = 7,
  KMProto_KMProject_ClipType_LAYER_VIDEO = 8,
  KMProto_KMProject_ClipType_LAYER_EFFECT = 9,
  KMProto_KMProject_ClipType_LAYER_ASSET = 10,
  KMProto_KMProject_ClipType_LAYER_GROUP = 11
};
bool KMProto_KMProject_ClipType_IsValid(int value);
constexpr KMProto_KMProject_ClipType KMProto_KMProject_ClipType_ClipType_MIN = KMProto_KMProject_ClipType_VISUAL_CLIP;
constexpr KMProto_KMProject_ClipType KMProto_KMProject_ClipType_ClipType_MAX = KMProto_KMProject_ClipType_LAYER_GROUP;
constexpr int KMProto_KMProject_ClipType_ClipType_ARRAYSIZE = KMProto_KMProject_ClipType_ClipType_MAX + 1;

const std::string& KMProto_KMProject_ClipType_Name(KMProto_KMProject_ClipType value);
template<typename T>
inline const std::string& KMProto_KMProject_ClipType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KMProto_KMProject_ClipType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KMProto_KMProject_ClipType_Name.");
  return KMProto_KMProject_ClipType_Name(static_cast<KMProto_KMProject_ClipType>(enum_t_value));
}
bool KMProto_KMProject_ClipType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KMProto_KMProject_ClipType* value);
enum KMProto_KMProject_ClipState : int {
  KMProto_KMProject_ClipState_BUSY = 1,
  KMProto_KMProject_ClipState_TEMPORARY_FAILURE = 2,
  KMProto_KMProject_ClipState_PERMANENT_FAILURE = 3,
  KMProto_KMProject_ClipState_READY_TO_PLAY = 4
};
bool KMProto_KMProject_ClipState_IsValid(int value);
constexpr KMProto_KMProject_ClipState KMProto_KMProject_ClipState_ClipState_MIN = KMProto_KMProject_ClipState_BUSY;
constexpr KMProto_KMProject_ClipState KMProto_KMProject_ClipState_ClipState_MAX = KMProto_KMProject_ClipState_READY_TO_PLAY;
constexpr int KMProto_KMProject_ClipState_ClipState_ARRAYSIZE = KMProto_KMProject_ClipState_ClipState_MAX + 1;

const std::string& KMProto_KMProject_ClipState_Name(KMProto_KMProject_ClipState value);
template<typename T>
inline const std::string& KMProto_KMProject_ClipState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KMProto_KMProject_ClipState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KMProto_KMProject_ClipState_Name.");
  return KMProto_KMProject_ClipState_Name(static_cast<KMProto_KMProject_ClipState>(enum_t_value));
}
bool KMProto_KMProject_ClipState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KMProto_KMProject_ClipState* value);
enum KMProto_KMProject_EffectOptionItemType : int {
  KMProto_KMProject_EffectOptionItemType_EFFECT_OPTION_TEXT = 0,
  KMProto_KMProject_EffectOptionItemType_EFFECT_OPTION_RGB = 1,
  KMProto_KMProject_EffectOptionItemType_EFFECT_OPTION_RGBA = 2,
  KMProto_KMProject_EffectOptionItemType_EFFECT_OPTION_XY = 3,
  KMProto_KMProject_EffectOptionItemType_EFFECT_OPTION_XYZ = 4,
  KMProto_KMProject_EffectOptionItemType_EFFECT_OPTION_RECT = 5,
  KMProto_KMProject_EffectOptionItemType_EFFECT_OPTION_RANGE = 6,
  KMProto_KMProject_EffectOptionItemType_EFFECT_OPTION_CHOICE = 7,
  KMProto_KMProject_EffectOptionItemType_EFFECT_OPTION_IMAGE = 8,
  KMProto_KMProject_EffectOptionItemType_EFFECT_OPTION_SWITCH = 9
};
bool KMProto_KMProject_EffectOptionItemType_IsValid(int value);
constexpr KMProto_KMProject_EffectOptionItemType KMProto_KMProject_EffectOptionItemType_EffectOptionItemType_MIN = KMProto_KMProject_EffectOptionItemType_EFFECT_OPTION_TEXT;
constexpr KMProto_KMProject_EffectOptionItemType KMProto_KMProject_EffectOptionItemType_EffectOptionItemType_MAX = KMProto_KMProject_EffectOptionItemType_EFFECT_OPTION_SWITCH;
constexpr int KMProto_KMProject_EffectOptionItemType_EffectOptionItemType_ARRAYSIZE = KMProto_KMProject_EffectOptionItemType_EffectOptionItemType_MAX + 1;

const std::string& KMProto_KMProject_EffectOptionItemType_Name(KMProto_KMProject_EffectOptionItemType value);
template<typename T>
inline const std::string& KMProto_KMProject_EffectOptionItemType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KMProto_KMProject_EffectOptionItemType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KMProto_KMProject_EffectOptionItemType_Name.");
  return KMProto_KMProject_EffectOptionItemType_Name(static_cast<KMProto_KMProject_EffectOptionItemType>(enum_t_value));
}
bool KMProto_KMProject_EffectOptionItemType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KMProto_KMProject_EffectOptionItemType* value);
enum KMProto_KMProject_SplitScreenType : int {
  KMProto_KMProject_SplitScreenType_OFF = 0,
  KMProto_KMProject_SplitScreenType_FULL = 1,
  KMProto_KMProject_SplitScreenType_BOTTOM = 2,
  KMProto_KMProject_SplitScreenType_TOP = 3,
  KMProto_KMProject_SplitScreenType_LEFT = 4,
  KMProto_KMProject_SplitScreenType_RIGHT = 5
};
bool KMProto_KMProject_SplitScreenType_IsValid(int value);
constexpr KMProto_KMProject_SplitScreenType KMProto_KMProject_SplitScreenType_SplitScreenType_MIN = KMProto_KMProject_SplitScreenType_OFF;
constexpr KMProto_KMProject_SplitScreenType KMProto_KMProject_SplitScreenType_SplitScreenType_MAX = KMProto_KMProject_SplitScreenType_RIGHT;
constexpr int KMProto_KMProject_SplitScreenType_SplitScreenType_ARRAYSIZE = KMProto_KMProject_SplitScreenType_SplitScreenType_MAX + 1;

const std::string& KMProto_KMProject_SplitScreenType_Name(KMProto_KMProject_SplitScreenType value);
template<typename T>
inline const std::string& KMProto_KMProject_SplitScreenType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KMProto_KMProject_SplitScreenType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KMProto_KMProject_SplitScreenType_Name.");
  return KMProto_KMProject_SplitScreenType_Name(static_cast<KMProto_KMProject_SplitScreenType>(enum_t_value));
}
bool KMProto_KMProject_SplitScreenType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KMProto_KMProject_SplitScreenType* value);
enum KMProto_KMProject_PathStyle : int {
  KMProto_KMProject_PathStyle_SMOOTH = 1,
  KMProto_KMProject_PathStyle_SHARP = 2,
  KMProto_KMProject_PathStyle_RECT = 3,
  KMProto_KMProject_PathStyle_ROUND_RECT = 4,
  KMProto_KMProject_PathStyle_ELLIPSE = 5,
  KMProto_KMProject_PathStyle_XSHAPE = 6,
  KMProto_KMProject_PathStyle_FILL_RECT = 7,
  KMProto_KMProject_PathStyle_FILL_ROUND_RECT = 8,
  KMProto_KMProject_PathStyle_FILL_ELLIPSE = 9
};
bool KMProto_KMProject_PathStyle_IsValid(int value);
constexpr KMProto_KMProject_PathStyle KMProto_KMProject_PathStyle_PathStyle_MIN = KMProto_KMProject_PathStyle_SMOOTH;
constexpr KMProto_KMProject_PathStyle KMProto_KMProject_PathStyle_PathStyle_MAX = KMProto_KMProject_PathStyle_FILL_ELLIPSE;
constexpr int KMProto_KMProject_PathStyle_PathStyle_ARRAYSIZE = KMProto_KMProject_PathStyle_PathStyle_MAX + 1;

const std::string& KMProto_KMProject_PathStyle_Name(KMProto_KMProject_PathStyle value);
template<typename T>
inline const std::string& KMProto_KMProject_PathStyle_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KMProto_KMProject_PathStyle>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KMProto_KMProject_PathStyle_Name.");
  return KMProto_KMProject_PathStyle_Name(static_cast<KMProto_KMProject_PathStyle>(enum_t_value));
}
bool KMProto_KMProject_PathStyle_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KMProto_KMProject_PathStyle* value);
enum KMProto_KMProject_CapDecorationStyle : int {
  KMProto_KMProject_CapDecorationStyle_NONE = 1,
  KMProto_KMProject_CapDecorationStyle_ROUND = 2,
  KMProto_KMProject_CapDecorationStyle_SOLID_ARROW = 3,
  KMProto_KMProject_CapDecorationStyle_HOLLOW_ARROW = 4
};
bool KMProto_KMProject_CapDecorationStyle_IsValid(int value);
constexpr KMProto_KMProject_CapDecorationStyle KMProto_KMProject_CapDecorationStyle_CapDecorationStyle_MIN = KMProto_KMProject_CapDecorationStyle_NONE;
constexpr KMProto_KMProject_CapDecorationStyle KMProto_KMProject_CapDecorationStyle_CapDecorationStyle_MAX = KMProto_KMProject_CapDecorationStyle_HOLLOW_ARROW;
constexpr int KMProto_KMProject_CapDecorationStyle_CapDecorationStyle_ARRAYSIZE = KMProto_KMProject_CapDecorationStyle_CapDecorationStyle_MAX + 1;

const std::string& KMProto_KMProject_CapDecorationStyle_Name(KMProto_KMProject_CapDecorationStyle value);
template<typename T>
inline const std::string& KMProto_KMProject_CapDecorationStyle_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KMProto_KMProject_CapDecorationStyle>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KMProto_KMProject_CapDecorationStyle_Name.");
  return KMProto_KMProject_CapDecorationStyle_Name(static_cast<KMProto_KMProject_CapDecorationStyle>(enum_t_value));
}
bool KMProto_KMProject_CapDecorationStyle_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KMProto_KMProject_CapDecorationStyle* value);
enum KMProto_KMProject_DrawingActionType : int {
  KMProto_KMProject_DrawingActionType_STROKE = 1,
  KMProto_KMProject_DrawingActionType_ERASE_ALL = 2
};
bool KMProto_KMProject_DrawingActionType_IsValid(int value);
constexpr KMProto_KMProject_DrawingActionType KMProto_KMProject_DrawingActionType_DrawingActionType_MIN = KMProto_KMProject_DrawingActionType_STROKE;
constexpr KMProto_KMProject_DrawingActionType KMProto_KMProject_DrawingActionType_DrawingActionType_MAX = KMProto_KMProject_DrawingActionType_ERASE_ALL;
constexpr int KMProto_KMProject_DrawingActionType_DrawingActionType_ARRAYSIZE = KMProto_KMProject_DrawingActionType_DrawingActionType_MAX + 1;

const std::string& KMProto_KMProject_DrawingActionType_Name(KMProto_KMProject_DrawingActionType value);
template<typename T>
inline const std::string& KMProto_KMProject_DrawingActionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KMProto_KMProject_DrawingActionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KMProto_KMProject_DrawingActionType_Name.");
  return KMProto_KMProject_DrawingActionType_Name(static_cast<KMProto_KMProject_DrawingActionType>(enum_t_value));
}
bool KMProto_KMProject_DrawingActionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KMProto_KMProject_DrawingActionType* value);
enum KMProto_KMProject_TitleStyle : int {
  KMProto_KMProject_TitleStyle_TITLE_STYLE_NONE = 0,
  KMProto_KMProject_TitleStyle_TITLE_STYLE_HEADLINE = 1,
  KMProto_KMProject_TitleStyle_TITLE_STYLE_OPENING = 2,
  KMProto_KMProject_TitleStyle_TITLE_STYLE_PLAYING = 3,
  KMProto_KMProject_TitleStyle_TITLE_STYLE_ENDING = 4
};
bool KMProto_KMProject_TitleStyle_IsValid(int value);
constexpr KMProto_KMProject_TitleStyle KMProto_KMProject_TitleStyle_TitleStyle_MIN = KMProto_KMProject_TitleStyle_TITLE_STYLE_NONE;
constexpr KMProto_KMProject_TitleStyle KMProto_KMProject_TitleStyle_TitleStyle_MAX = KMProto_KMProject_TitleStyle_TITLE_STYLE_ENDING;
constexpr int KMProto_KMProject_TitleStyle_TitleStyle_ARRAYSIZE = KMProto_KMProject_TitleStyle_TitleStyle_MAX + 1;

const std::string& KMProto_KMProject_TitleStyle_Name(KMProto_KMProject_TitleStyle value);
template<typename T>
inline const std::string& KMProto_KMProject_TitleStyle_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KMProto_KMProject_TitleStyle>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KMProto_KMProject_TitleStyle_Name.");
  return KMProto_KMProject_TitleStyle_Name(static_cast<KMProto_KMProject_TitleStyle>(enum_t_value));
}
bool KMProto_KMProject_TitleStyle_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KMProto_KMProject_TitleStyle* value);
enum KMProto_KMProject_ThemeEffectType : int {
  KMProto_KMProject_ThemeEffectType_THEME_EFFECT_TYPE_OPENING = 1,
  KMProto_KMProject_ThemeEffectType_THEME_EFFECT_TYPE_MIDDLE = 2,
  KMProto_KMProject_ThemeEffectType_THEME_EFFECT_TYPE_ENDING = 3,
  KMProto_KMProject_ThemeEffectType_THEME_EFFECT_TYPE_ACCENT = 4,
  KMProto_KMProject_ThemeEffectType_THEME_EFFECT_TYPE_TRANSITION = 5,
  KMProto_KMProject_ThemeEffectType_THEME_EFFECT_TYPE_CLIP = 6
};
bool KMProto_KMProject_ThemeEffectType_IsValid(int value);
constexpr KMProto_KMProject_ThemeEffectType KMProto_KMProject_ThemeEffectType_ThemeEffectType_MIN = KMProto_KMProject_ThemeEffectType_THEME_EFFECT_TYPE_OPENING;
constexpr KMProto_KMProject_ThemeEffectType KMProto_KMProject_ThemeEffectType_ThemeEffectType_MAX = KMProto_KMProject_ThemeEffectType_THEME_EFFECT_TYPE_CLIP;
constexpr int KMProto_KMProject_ThemeEffectType_ThemeEffectType_ARRAYSIZE = KMProto_KMProject_ThemeEffectType_ThemeEffectType_MAX + 1;

const std::string& KMProto_KMProject_ThemeEffectType_Name(KMProto_KMProject_ThemeEffectType value);
template<typename T>
inline const std::string& KMProto_KMProject_ThemeEffectType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KMProto_KMProject_ThemeEffectType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KMProto_KMProject_ThemeEffectType_Name.");
  return KMProto_KMProject_ThemeEffectType_Name(static_cast<KMProto_KMProject_ThemeEffectType>(enum_t_value));
}
bool KMProto_KMProject_ThemeEffectType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KMProto_KMProject_ThemeEffectType* value);
enum KMProto_KMProject_LayerBlendModeType : int {
  KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_NONE = 0,
  KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_ADD = 1,
  KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_AVERAGE = 2,
  KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_COLOR_BURN = 3,
  KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_COLOR_DODGE = 4,
  KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_DARKEN = 5,
  KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_DIFFERENCE = 6,
  KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_EXCLUSION = 7,
  KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_GLOW = 8,
  KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_HARD_LIGHT = 9,
  KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_HARD_MIX = 10,
  KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_LIGHTEN = 11,
  KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_LINEAR_BURN = 12,
  KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_LINEAR_DODGE = 13,
  KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_LINEAR_LIGHT = 14,
  KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_MULTIPLY = 15,
  KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_NEGATION = 16,
  KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_NORMAL = 17,
  KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_OVERLAY = 18,
  KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_PHOENIX = 19,
  KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_PIN_LIGHT = 20,
  KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_REFLECT = 21,
  KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_SCREEN = 22,
  KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_SOFT_LIGHT = 23,
  KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_SUBTRACT = 24,
  KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_VIVID_LIGHT = 25
};
bool KMProto_KMProject_LayerBlendModeType_IsValid(int value);
constexpr KMProto_KMProject_LayerBlendModeType KMProto_KMProject_LayerBlendModeType_LayerBlendModeType_MIN = KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_NONE;
constexpr KMProto_KMProject_LayerBlendModeType KMProto_KMProject_LayerBlendModeType_LayerBlendModeType_MAX = KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_VIVID_LIGHT;
constexpr int KMProto_KMProject_LayerBlendModeType_LayerBlendModeType_ARRAYSIZE = KMProto_KMProject_LayerBlendModeType_LayerBlendModeType_MAX + 1;

const std::string& KMProto_KMProject_LayerBlendModeType_Name(KMProto_KMProject_LayerBlendModeType value);
template<typename T>
inline const std::string& KMProto_KMProject_LayerBlendModeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KMProto_KMProject_LayerBlendModeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KMProto_KMProject_LayerBlendModeType_Name.");
  return KMProto_KMProject_LayerBlendModeType_Name(static_cast<KMProto_KMProject_LayerBlendModeType>(enum_t_value));
}
bool KMProto_KMProject_LayerBlendModeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KMProto_KMProject_LayerBlendModeType* value);
enum KMProto_Platform : int {
  KMProto_Platform_IOS = 1,
  KMProto_Platform_ANDROID = 2
};
bool KMProto_Platform_IsValid(int value);
constexpr KMProto_Platform KMProto_Platform_Platform_MIN = KMProto_Platform_IOS;
constexpr KMProto_Platform KMProto_Platform_Platform_MAX = KMProto_Platform_ANDROID;
constexpr int KMProto_Platform_Platform_ARRAYSIZE = KMProto_Platform_Platform_MAX + 1;

const std::string& KMProto_Platform_Name(KMProto_Platform value);
template<typename T>
inline const std::string& KMProto_Platform_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KMProto_Platform>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KMProto_Platform_Name.");
  return KMProto_Platform_Name(static_cast<KMProto_Platform>(enum_t_value));
}
bool KMProto_Platform_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KMProto_Platform* value);
// ===================================================================

class KMProto_KMProject_Fade PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:KMProto.KMProject.Fade) */ {
 public:
  inline KMProto_KMProject_Fade() : KMProto_KMProject_Fade(nullptr) {}
  virtual ~KMProto_KMProject_Fade();

  KMProto_KMProject_Fade(const KMProto_KMProject_Fade& from);
  KMProto_KMProject_Fade(KMProto_KMProject_Fade&& from) noexcept
    : KMProto_KMProject_Fade() {
    *this = ::std::move(from);
  }

  inline KMProto_KMProject_Fade& operator=(const KMProto_KMProject_Fade& from) {
    CopyFrom(from);
    return *this;
  }
  inline KMProto_KMProject_Fade& operator=(KMProto_KMProject_Fade&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const KMProto_KMProject_Fade& default_instance();

  static inline const KMProto_KMProject_Fade* internal_default_instance() {
    return reinterpret_cast<const KMProto_KMProject_Fade*>(
               &_KMProto_KMProject_Fade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KMProto_KMProject_Fade& a, KMProto_KMProject_Fade& b) {
    a.Swap(&b);
  }
  inline void Swap(KMProto_KMProject_Fade* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KMProto_KMProject_Fade* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KMProto_KMProject_Fade* New() const final {
    return CreateMaybeMessage<KMProto_KMProject_Fade>(nullptr);
  }

  KMProto_KMProject_Fade* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KMProto_KMProject_Fade>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const KMProto_KMProject_Fade& from);
  void MergeFrom(const KMProto_KMProject_Fade& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KMProto_KMProject_Fade* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KMProto.KMProject.Fade";
  }
  protected:
  explicit KMProto_KMProject_Fade(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInSecondsFieldNumber = 2,
    kInOnFieldNumber = 1,
    kOutOnFieldNumber = 3,
    kOutSecondsFieldNumber = 4,
  };
  // optional float in_seconds = 2;
  bool has_in_seconds() const;
  private:
  bool _internal_has_in_seconds() const;
  public:
  void clear_in_seconds();
  float in_seconds() const;
  void set_in_seconds(float value);
  private:
  float _internal_in_seconds() const;
  void _internal_set_in_seconds(float value);
  public:

  // optional bool in_on = 1;
  bool has_in_on() const;
  private:
  bool _internal_has_in_on() const;
  public:
  void clear_in_on();
  bool in_on() const;
  void set_in_on(bool value);
  private:
  bool _internal_in_on() const;
  void _internal_set_in_on(bool value);
  public:

  // optional bool out_on = 3;
  bool has_out_on() const;
  private:
  bool _internal_has_out_on() const;
  public:
  void clear_out_on();
  bool out_on() const;
  void set_out_on(bool value);
  private:
  bool _internal_out_on() const;
  void _internal_set_out_on(bool value);
  public:

  // optional float out_seconds = 4;
  bool has_out_seconds() const;
  private:
  bool _internal_has_out_seconds() const;
  public:
  void clear_out_seconds();
  float out_seconds() const;
  void set_out_seconds(float value);
  private:
  float _internal_out_seconds() const;
  void _internal_set_out_seconds(float value);
  public:

  // @@protoc_insertion_point(class_scope:KMProto.KMProject.Fade)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float in_seconds_;
  bool in_on_;
  bool out_on_;
  float out_seconds_;
  friend struct ::TableStruct_kinemaster_5fproject_5fwire_2dlite_2eproto;
};
// -------------------------------------------------------------------

class KMProto_KMProject_Track PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:KMProto.KMProject.Track) */ {
 public:
  inline KMProto_KMProject_Track() : KMProto_KMProject_Track(nullptr) {}
  virtual ~KMProto_KMProject_Track();

  KMProto_KMProject_Track(const KMProto_KMProject_Track& from);
  KMProto_KMProject_Track(KMProto_KMProject_Track&& from) noexcept
    : KMProto_KMProject_Track() {
    *this = ::std::move(from);
  }

  inline KMProto_KMProject_Track& operator=(const KMProto_KMProject_Track& from) {
    CopyFrom(from);
    return *this;
  }
  inline KMProto_KMProject_Track& operator=(KMProto_KMProject_Track&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const KMProto_KMProject_Track& default_instance();

  static inline const KMProto_KMProject_Track* internal_default_instance() {
    return reinterpret_cast<const KMProto_KMProject_Track*>(
               &_KMProto_KMProject_Track_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(KMProto_KMProject_Track& a, KMProto_KMProject_Track& b) {
    a.Swap(&b);
  }
  inline void Swap(KMProto_KMProject_Track* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KMProto_KMProject_Track* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KMProto_KMProject_Track* New() const final {
    return CreateMaybeMessage<KMProto_KMProject_Track>(nullptr);
  }

  KMProto_KMProject_Track* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KMProto_KMProject_Track>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const KMProto_KMProject_Track& from);
  void MergeFrom(const KMProto_KMProject_Track& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KMProto_KMProject_Track* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KMProto.KMProject.Track";
  }
  protected:
  explicit KMProto_KMProject_Track(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFontIdFieldNumber = 111,
    kTextOutlineColorFieldNumber = 118,
    kTrackIdFieldNumber = 1,
    kClipVolumeFieldNumber = 102,
    kCompressorFieldNumber = 103,
    kPanLeftFieldNumber = 104,
    kPanRightFieldNumber = 105,
    kPitchFactorFieldNumber = 106,
    kVisibleFieldNumber = 100,
    kMuteAudioFieldNumber = 101,
    kOverrideTextStyleFieldNumber = 110,
    kTextShadowFieldNumber = 113,
    kOverallAlphaFieldNumber = 107,
    kTextColorFieldNumber = 112,
    kTextShadowColorFieldNumber = 114,
    kTextGlowColorFieldNumber = 116,
    kTextGlowFieldNumber = 115,
    kTextOutlineFieldNumber = 117,
  };
  // optional string text_font_id = 111;
  bool has_text_font_id() const;
  private:
  bool _internal_has_text_font_id() const;
  public:
  void clear_text_font_id();
  const std::string& text_font_id() const;
  void set_text_font_id(const std::string& value);
  void set_text_font_id(std::string&& value);
  void set_text_font_id(const char* value);
  void set_text_font_id(const char* value, size_t size);
  std::string* mutable_text_font_id();
  std::string* release_text_font_id();
  void set_allocated_text_font_id(std::string* text_font_id);
  private:
  const std::string& _internal_text_font_id() const;
  void _internal_set_text_font_id(const std::string& value);
  std::string* _internal_mutable_text_font_id();
  public:

  // optional int32 text_outline_color = 118;
  bool has_text_outline_color() const;
  private:
  bool _internal_has_text_outline_color() const;
  public:
  void clear_text_outline_color();
  ::PROTOBUF_NAMESPACE_ID::int32 text_outline_color() const;
  void set_text_outline_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_text_outline_color() const;
  void _internal_set_text_outline_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 track_id = 1;
  bool has_track_id() const;
  private:
  bool _internal_has_track_id() const;
  public:
  void clear_track_id();
  ::PROTOBUF_NAMESPACE_ID::int32 track_id() const;
  void set_track_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_track_id() const;
  void _internal_set_track_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 clip_volume = 102;
  bool has_clip_volume() const;
  private:
  bool _internal_has_clip_volume() const;
  public:
  void clear_clip_volume();
  ::PROTOBUF_NAMESPACE_ID::int32 clip_volume() const;
  void set_clip_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_clip_volume() const;
  void _internal_set_clip_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 compressor = 103;
  bool has_compressor() const;
  private:
  bool _internal_has_compressor() const;
  public:
  void clear_compressor();
  ::PROTOBUF_NAMESPACE_ID::int32 compressor() const;
  void set_compressor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_compressor() const;
  void _internal_set_compressor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 pan_left = 104;
  bool has_pan_left() const;
  private:
  bool _internal_has_pan_left() const;
  public:
  void clear_pan_left();
  ::PROTOBUF_NAMESPACE_ID::int32 pan_left() const;
  void set_pan_left(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pan_left() const;
  void _internal_set_pan_left(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 pan_right = 105;
  bool has_pan_right() const;
  private:
  bool _internal_has_pan_right() const;
  public:
  void clear_pan_right();
  ::PROTOBUF_NAMESPACE_ID::int32 pan_right() const;
  void set_pan_right(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pan_right() const;
  void _internal_set_pan_right(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 pitch_factor = 106;
  bool has_pitch_factor() const;
  private:
  bool _internal_has_pitch_factor() const;
  public:
  void clear_pitch_factor();
  ::PROTOBUF_NAMESPACE_ID::int32 pitch_factor() const;
  void set_pitch_factor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pitch_factor() const;
  void _internal_set_pitch_factor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool visible = 100;
  bool has_visible() const;
  private:
  bool _internal_has_visible() const;
  public:
  void clear_visible();
  bool visible() const;
  void set_visible(bool value);
  private:
  bool _internal_visible() const;
  void _internal_set_visible(bool value);
  public:

  // optional bool mute_audio = 101;
  bool has_mute_audio() const;
  private:
  bool _internal_has_mute_audio() const;
  public:
  void clear_mute_audio();
  bool mute_audio() const;
  void set_mute_audio(bool value);
  private:
  bool _internal_mute_audio() const;
  void _internal_set_mute_audio(bool value);
  public:

  // optional bool override_text_style = 110;
  bool has_override_text_style() const;
  private:
  bool _internal_has_override_text_style() const;
  public:
  void clear_override_text_style();
  bool override_text_style() const;
  void set_override_text_style(bool value);
  private:
  bool _internal_override_text_style() const;
  void _internal_set_override_text_style(bool value);
  public:

  // optional bool text_shadow = 113;
  bool has_text_shadow() const;
  private:
  bool _internal_has_text_shadow() const;
  public:
  void clear_text_shadow();
  bool text_shadow() const;
  void set_text_shadow(bool value);
  private:
  bool _internal_text_shadow() const;
  void _internal_set_text_shadow(bool value);
  public:

  // optional int32 overall_alpha = 107;
  bool has_overall_alpha() const;
  private:
  bool _internal_has_overall_alpha() const;
  public:
  void clear_overall_alpha();
  ::PROTOBUF_NAMESPACE_ID::int32 overall_alpha() const;
  void set_overall_alpha(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_overall_alpha() const;
  void _internal_set_overall_alpha(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 text_color = 112;
  bool has_text_color() const;
  private:
  bool _internal_has_text_color() const;
  public:
  void clear_text_color();
  ::PROTOBUF_NAMESPACE_ID::int32 text_color() const;
  void set_text_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_text_color() const;
  void _internal_set_text_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 text_shadow_color = 114;
  bool has_text_shadow_color() const;
  private:
  bool _internal_has_text_shadow_color() const;
  public:
  void clear_text_shadow_color();
  ::PROTOBUF_NAMESPACE_ID::int32 text_shadow_color() const;
  void set_text_shadow_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_text_shadow_color() const;
  void _internal_set_text_shadow_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 text_glow_color = 116;
  bool has_text_glow_color() const;
  private:
  bool _internal_has_text_glow_color() const;
  public:
  void clear_text_glow_color();
  ::PROTOBUF_NAMESPACE_ID::int32 text_glow_color() const;
  void set_text_glow_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_text_glow_color() const;
  void _internal_set_text_glow_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool text_glow = 115;
  bool has_text_glow() const;
  private:
  bool _internal_has_text_glow() const;
  public:
  void clear_text_glow();
  bool text_glow() const;
  void set_text_glow(bool value);
  private:
  bool _internal_text_glow() const;
  void _internal_set_text_glow(bool value);
  public:

  // optional bool text_outline = 117;
  bool has_text_outline() const;
  private:
  bool _internal_has_text_outline() const;
  public:
  void clear_text_outline();
  bool text_outline() const;
  void set_text_outline(bool value);
  private:
  bool _internal_text_outline() const;
  void _internal_set_text_outline(bool value);
  public:

  // @@protoc_insertion_point(class_scope:KMProto.KMProject.Track)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_font_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 text_outline_color_;
  ::PROTOBUF_NAMESPACE_ID::int32 track_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 clip_volume_;
  ::PROTOBUF_NAMESPACE_ID::int32 compressor_;
  ::PROTOBUF_NAMESPACE_ID::int32 pan_left_;
  ::PROTOBUF_NAMESPACE_ID::int32 pan_right_;
  ::PROTOBUF_NAMESPACE_ID::int32 pitch_factor_;
  bool visible_;
  bool mute_audio_;
  bool override_text_style_;
  bool text_shadow_;
  ::PROTOBUF_NAMESPACE_ID::int32 overall_alpha_;
  ::PROTOBUF_NAMESPACE_ID::int32 text_color_;
  ::PROTOBUF_NAMESPACE_ID::int32 text_shadow_color_;
  ::PROTOBUF_NAMESPACE_ID::int32 text_glow_color_;
  bool text_glow_;
  bool text_outline_;
  friend struct ::TableStruct_kinemaster_5fproject_5fwire_2dlite_2eproto;
};
// -------------------------------------------------------------------

class KMProto_KMProject_TimelineItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:KMProto.KMProject.TimelineItem) */ {
 public:
  inline KMProto_KMProject_TimelineItem() : KMProto_KMProject_TimelineItem(nullptr) {}
  virtual ~KMProto_KMProject_TimelineItem();

  KMProto_KMProject_TimelineItem(const KMProto_KMProject_TimelineItem& from);
  KMProto_KMProject_TimelineItem(KMProto_KMProject_TimelineItem&& from) noexcept
    : KMProto_KMProject_TimelineItem() {
    *this = ::std::move(from);
  }

  inline KMProto_KMProject_TimelineItem& operator=(const KMProto_KMProject_TimelineItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline KMProto_KMProject_TimelineItem& operator=(KMProto_KMProject_TimelineItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const KMProto_KMProject_TimelineItem& default_instance();

  static inline const KMProto_KMProject_TimelineItem* internal_default_instance() {
    return reinterpret_cast<const KMProto_KMProject_TimelineItem*>(
               &_KMProto_KMProject_TimelineItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(KMProto_KMProject_TimelineItem& a, KMProto_KMProject_TimelineItem& b) {
    a.Swap(&b);
  }
  inline void Swap(KMProto_KMProject_TimelineItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KMProto_KMProject_TimelineItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KMProto_KMProject_TimelineItem* New() const final {
    return CreateMaybeMessage<KMProto_KMProject_TimelineItem>(nullptr);
  }

  KMProto_KMProject_TimelineItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KMProto_KMProject_TimelineItem>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const KMProto_KMProject_TimelineItem& from);
  void MergeFrom(const KMProto_KMProject_TimelineItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KMProto_KMProject_TimelineItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KMProto.KMProject.TimelineItem";
  }
  protected:
  explicit KMProto_KMProject_TimelineItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVisualClipFieldNumber = 4,
    kTransitionFieldNumber = 5,
    kAudioClipFieldNumber = 6,
    kTextLayerFieldNumber = 7,
    kStickerLayerFieldNumber = 8,
    kImageLayerFieldNumber = 9,
    kHandwritingLayerFieldNumber = 10,
    kVideoLayerFieldNumber = 11,
    kEffectLayerFieldNumber = 12,
    kAssetLayerFieldNumber = 13,
    kGroupLayerFieldNumber = 15,
    kUniqueIdLsbFieldNumber = 1,
    kUniqueIdMsbFieldNumber = 2,
    kTrackIdFieldNumber = 14,
    kClipTypeFieldNumber = 3,
  };
  // optional .KMProto.KMProject.VisualClip visual_clip = 4;
  bool has_visual_clip() const;
  private:
  bool _internal_has_visual_clip() const;
  public:
  void clear_visual_clip();
  const ::KMProto_KMProject_VisualClip& visual_clip() const;
  ::KMProto_KMProject_VisualClip* release_visual_clip();
  ::KMProto_KMProject_VisualClip* mutable_visual_clip();
  void set_allocated_visual_clip(::KMProto_KMProject_VisualClip* visual_clip);
  private:
  const ::KMProto_KMProject_VisualClip& _internal_visual_clip() const;
  ::KMProto_KMProject_VisualClip* _internal_mutable_visual_clip();
  public:
  void unsafe_arena_set_allocated_visual_clip(
      ::KMProto_KMProject_VisualClip* visual_clip);
  ::KMProto_KMProject_VisualClip* unsafe_arena_release_visual_clip();

  // optional .KMProto.KMProject.Transition transition = 5;
  bool has_transition() const;
  private:
  bool _internal_has_transition() const;
  public:
  void clear_transition();
  const ::KMProto_KMProject_Transition& transition() const;
  ::KMProto_KMProject_Transition* release_transition();
  ::KMProto_KMProject_Transition* mutable_transition();
  void set_allocated_transition(::KMProto_KMProject_Transition* transition);
  private:
  const ::KMProto_KMProject_Transition& _internal_transition() const;
  ::KMProto_KMProject_Transition* _internal_mutable_transition();
  public:
  void unsafe_arena_set_allocated_transition(
      ::KMProto_KMProject_Transition* transition);
  ::KMProto_KMProject_Transition* unsafe_arena_release_transition();

  // optional .KMProto.KMProject.AudioClip audio_clip = 6;
  bool has_audio_clip() const;
  private:
  bool _internal_has_audio_clip() const;
  public:
  void clear_audio_clip();
  const ::KMProto_KMProject_AudioClip& audio_clip() const;
  ::KMProto_KMProject_AudioClip* release_audio_clip();
  ::KMProto_KMProject_AudioClip* mutable_audio_clip();
  void set_allocated_audio_clip(::KMProto_KMProject_AudioClip* audio_clip);
  private:
  const ::KMProto_KMProject_AudioClip& _internal_audio_clip() const;
  ::KMProto_KMProject_AudioClip* _internal_mutable_audio_clip();
  public:
  void unsafe_arena_set_allocated_audio_clip(
      ::KMProto_KMProject_AudioClip* audio_clip);
  ::KMProto_KMProject_AudioClip* unsafe_arena_release_audio_clip();

  // optional .KMProto.KMProject.TextLayer text_layer = 7;
  bool has_text_layer() const;
  private:
  bool _internal_has_text_layer() const;
  public:
  void clear_text_layer();
  const ::KMProto_KMProject_TextLayer& text_layer() const;
  ::KMProto_KMProject_TextLayer* release_text_layer();
  ::KMProto_KMProject_TextLayer* mutable_text_layer();
  void set_allocated_text_layer(::KMProto_KMProject_TextLayer* text_layer);
  private:
  const ::KMProto_KMProject_TextLayer& _internal_text_layer() const;
  ::KMProto_KMProject_TextLayer* _internal_mutable_text_layer();
  public:
  void unsafe_arena_set_allocated_text_layer(
      ::KMProto_KMProject_TextLayer* text_layer);
  ::KMProto_KMProject_TextLayer* unsafe_arena_release_text_layer();

  // optional .KMProto.KMProject.StickerLayer sticker_layer = 8;
  bool has_sticker_layer() const;
  private:
  bool _internal_has_sticker_layer() const;
  public:
  void clear_sticker_layer();
  const ::KMProto_KMProject_StickerLayer& sticker_layer() const;
  ::KMProto_KMProject_StickerLayer* release_sticker_layer();
  ::KMProto_KMProject_StickerLayer* mutable_sticker_layer();
  void set_allocated_sticker_layer(::KMProto_KMProject_StickerLayer* sticker_layer);
  private:
  const ::KMProto_KMProject_StickerLayer& _internal_sticker_layer() const;
  ::KMProto_KMProject_StickerLayer* _internal_mutable_sticker_layer();
  public:
  void unsafe_arena_set_allocated_sticker_layer(
      ::KMProto_KMProject_StickerLayer* sticker_layer);
  ::KMProto_KMProject_StickerLayer* unsafe_arena_release_sticker_layer();

  // optional .KMProto.KMProject.ImageLayer image_layer = 9;
  bool has_image_layer() const;
  private:
  bool _internal_has_image_layer() const;
  public:
  void clear_image_layer();
  const ::KMProto_KMProject_ImageLayer& image_layer() const;
  ::KMProto_KMProject_ImageLayer* release_image_layer();
  ::KMProto_KMProject_ImageLayer* mutable_image_layer();
  void set_allocated_image_layer(::KMProto_KMProject_ImageLayer* image_layer);
  private:
  const ::KMProto_KMProject_ImageLayer& _internal_image_layer() const;
  ::KMProto_KMProject_ImageLayer* _internal_mutable_image_layer();
  public:
  void unsafe_arena_set_allocated_image_layer(
      ::KMProto_KMProject_ImageLayer* image_layer);
  ::KMProto_KMProject_ImageLayer* unsafe_arena_release_image_layer();

  // optional .KMProto.KMProject.HandwritingLayer handwriting_layer = 10;
  bool has_handwriting_layer() const;
  private:
  bool _internal_has_handwriting_layer() const;
  public:
  void clear_handwriting_layer();
  const ::KMProto_KMProject_HandwritingLayer& handwriting_layer() const;
  ::KMProto_KMProject_HandwritingLayer* release_handwriting_layer();
  ::KMProto_KMProject_HandwritingLayer* mutable_handwriting_layer();
  void set_allocated_handwriting_layer(::KMProto_KMProject_HandwritingLayer* handwriting_layer);
  private:
  const ::KMProto_KMProject_HandwritingLayer& _internal_handwriting_layer() const;
  ::KMProto_KMProject_HandwritingLayer* _internal_mutable_handwriting_layer();
  public:
  void unsafe_arena_set_allocated_handwriting_layer(
      ::KMProto_KMProject_HandwritingLayer* handwriting_layer);
  ::KMProto_KMProject_HandwritingLayer* unsafe_arena_release_handwriting_layer();

  // optional .KMProto.KMProject.VideoLayer video_layer = 11;
  bool has_video_layer() const;
  private:
  bool _internal_has_video_layer() const;
  public:
  void clear_video_layer();
  const ::KMProto_KMProject_VideoLayer& video_layer() const;
  ::KMProto_KMProject_VideoLayer* release_video_layer();
  ::KMProto_KMProject_VideoLayer* mutable_video_layer();
  void set_allocated_video_layer(::KMProto_KMProject_VideoLayer* video_layer);
  private:
  const ::KMProto_KMProject_VideoLayer& _internal_video_layer() const;
  ::KMProto_KMProject_VideoLayer* _internal_mutable_video_layer();
  public:
  void unsafe_arena_set_allocated_video_layer(
      ::KMProto_KMProject_VideoLayer* video_layer);
  ::KMProto_KMProject_VideoLayer* unsafe_arena_release_video_layer();

  // optional .KMProto.KMProject.EffectLayer effect_layer = 12;
  bool has_effect_layer() const;
  private:
  bool _internal_has_effect_layer() const;
  public:
  void clear_effect_layer();
  const ::KMProto_KMProject_EffectLayer& effect_layer() const;
  ::KMProto_KMProject_EffectLayer* release_effect_layer();
  ::KMProto_KMProject_EffectLayer* mutable_effect_layer();
  void set_allocated_effect_layer(::KMProto_KMProject_EffectLayer* effect_layer);
  private:
  const ::KMProto_KMProject_EffectLayer& _internal_effect_layer() const;
  ::KMProto_KMProject_EffectLayer* _internal_mutable_effect_layer();
  public:
  void unsafe_arena_set_allocated_effect_layer(
      ::KMProto_KMProject_EffectLayer* effect_layer);
  ::KMProto_KMProject_EffectLayer* unsafe_arena_release_effect_layer();

  // optional .KMProto.KMProject.AssetLayer asset_layer = 13;
  bool has_asset_layer() const;
  private:
  bool _internal_has_asset_layer() const;
  public:
  void clear_asset_layer();
  const ::KMProto_KMProject_AssetLayer& asset_layer() const;
  ::KMProto_KMProject_AssetLayer* release_asset_layer();
  ::KMProto_KMProject_AssetLayer* mutable_asset_layer();
  void set_allocated_asset_layer(::KMProto_KMProject_AssetLayer* asset_layer);
  private:
  const ::KMProto_KMProject_AssetLayer& _internal_asset_layer() const;
  ::KMProto_KMProject_AssetLayer* _internal_mutable_asset_layer();
  public:
  void unsafe_arena_set_allocated_asset_layer(
      ::KMProto_KMProject_AssetLayer* asset_layer);
  ::KMProto_KMProject_AssetLayer* unsafe_arena_release_asset_layer();

  // optional .KMProto.KMProject.GroupLayer group_layer = 15;
  bool has_group_layer() const;
  private:
  bool _internal_has_group_layer() const;
  public:
  void clear_group_layer();
  const ::KMProto_KMProject_GroupLayer& group_layer() const;
  ::KMProto_KMProject_GroupLayer* release_group_layer();
  ::KMProto_KMProject_GroupLayer* mutable_group_layer();
  void set_allocated_group_layer(::KMProto_KMProject_GroupLayer* group_layer);
  private:
  const ::KMProto_KMProject_GroupLayer& _internal_group_layer() const;
  ::KMProto_KMProject_GroupLayer* _internal_mutable_group_layer();
  public:
  void unsafe_arena_set_allocated_group_layer(
      ::KMProto_KMProject_GroupLayer* group_layer);
  ::KMProto_KMProject_GroupLayer* unsafe_arena_release_group_layer();

  // optional uint64 unique_id_lsb = 1;
  bool has_unique_id_lsb() const;
  private:
  bool _internal_has_unique_id_lsb() const;
  public:
  void clear_unique_id_lsb();
  ::PROTOBUF_NAMESPACE_ID::uint64 unique_id_lsb() const;
  void set_unique_id_lsb(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_unique_id_lsb() const;
  void _internal_set_unique_id_lsb(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 unique_id_msb = 2;
  bool has_unique_id_msb() const;
  private:
  bool _internal_has_unique_id_msb() const;
  public:
  void clear_unique_id_msb();
  ::PROTOBUF_NAMESPACE_ID::uint64 unique_id_msb() const;
  void set_unique_id_msb(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_unique_id_msb() const;
  void _internal_set_unique_id_msb(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 track_id = 14;
  bool has_track_id() const;
  private:
  bool _internal_has_track_id() const;
  public:
  void clear_track_id();
  ::PROTOBUF_NAMESPACE_ID::int32 track_id() const;
  void set_track_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_track_id() const;
  void _internal_set_track_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .KMProto.KMProject.ClipType clip_type = 3;
  bool has_clip_type() const;
  private:
  bool _internal_has_clip_type() const;
  public:
  void clear_clip_type();
  ::KMProto_KMProject_ClipType clip_type() const;
  void set_clip_type(::KMProto_KMProject_ClipType value);
  private:
  ::KMProto_KMProject_ClipType _internal_clip_type() const;
  void _internal_set_clip_type(::KMProto_KMProject_ClipType value);
  public:

  // @@protoc_insertion_point(class_scope:KMProto.KMProject.TimelineItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::KMProto_KMProject_VisualClip* visual_clip_;
  ::KMProto_KMProject_Transition* transition_;
  ::KMProto_KMProject_AudioClip* audio_clip_;
  ::KMProto_KMProject_TextLayer* text_layer_;
  ::KMProto_KMProject_StickerLayer* sticker_layer_;
  ::KMProto_KMProject_ImageLayer* image_layer_;
  ::KMProto_KMProject_HandwritingLayer* handwriting_layer_;
  ::KMProto_KMProject_VideoLayer* video_layer_;
  ::KMProto_KMProject_EffectLayer* effect_layer_;
  ::KMProto_KMProject_AssetLayer* asset_layer_;
  ::KMProto_KMProject_GroupLayer* group_layer_;
  ::PROTOBUF_NAMESPACE_ID::uint64 unique_id_lsb_;
  ::PROTOBUF_NAMESPACE_ID::uint64 unique_id_msb_;
  ::PROTOBUF_NAMESPACE_ID::int32 track_id_;
  int clip_type_;
  friend struct ::TableStruct_kinemaster_5fproject_5fwire_2dlite_2eproto;
};
// -------------------------------------------------------------------

class KMProto_KMProject_VisualClip PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:KMProto.KMProject.VisualClip) */ {
 public:
  inline KMProto_KMProject_VisualClip() : KMProto_KMProject_VisualClip(nullptr) {}
  virtual ~KMProto_KMProject_VisualClip();

  KMProto_KMProject_VisualClip(const KMProto_KMProject_VisualClip& from);
  KMProto_KMProject_VisualClip(KMProto_KMProject_VisualClip&& from) noexcept
    : KMProto_KMProject_VisualClip() {
    *this = ::std::move(from);
  }

  inline KMProto_KMProject_VisualClip& operator=(const KMProto_KMProject_VisualClip& from) {
    CopyFrom(from);
    return *this;
  }
  inline KMProto_KMProject_VisualClip& operator=(KMProto_KMProject_VisualClip&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const KMProto_KMProject_VisualClip& default_instance();

  static inline const KMProto_KMProject_VisualClip* internal_default_instance() {
    return reinterpret_cast<const KMProto_KMProject_VisualClip*>(
               &_KMProto_KMProject_VisualClip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(KMProto_KMProject_VisualClip& a, KMProto_KMProject_VisualClip& b) {
    a.Swap(&b);
  }
  inline void Swap(KMProto_KMProject_VisualClip* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KMProto_KMProject_VisualClip* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KMProto_KMProject_VisualClip* New() const final {
    return CreateMaybeMessage<KMProto_KMProject_VisualClip>(nullptr);
  }

  KMProto_KMProject_VisualClip* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KMProto_KMProject_VisualClip>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const KMProto_KMProject_VisualClip& from);
  void MergeFrom(const KMProto_KMProject_VisualClip& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KMProto_KMProject_VisualClip* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KMProto.KMProject.VisualClip";
  }
  protected:
  explicit KMProto_KMProject_VisualClip(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVolumeEnvelopeTimeFieldNumber = 165,
    kVolumeEnvelopeLevelFieldNumber = 166,
    kEffectOptionFieldNumber = 194,
    kCaptureFilenameFieldNumber = 105,
    kTitleEffectIdFieldNumber = 132,
    kThumbPathFieldNumber = 152,
    kMediaPathFieldNumber = 153,
    kMediaMsidFieldNumber = 174,
    kClipNameFieldNumber = 184,
    kIosMediaAssetIdFieldNumber = 185,
    kEnhancedAudioFilterFieldNumber = 188,
    kEqualizerFieldNumber = 189,
    kReverbFieldNumber = 191,
    kStartMatrixFieldNumber = 162,
    kEndMatrixFieldNumber = 163,
    kColorEffectFieldNumber = 169,
    kEffectOptionsFieldNumber = 170,
    kUnattachedTransitionFieldNumber = 171,
    kClipRangeFieldNumber = 190,
    kColorAdjustmentFieldNumber = 192,
    kColorFilterFieldNumber = 193,
    kFaceBoundsLeftFieldNumber = 100,
    kFaceBoundsTopFieldNumber = 101,
    kFaceBoundsRightFieldNumber = 102,
    kFaceBoundsBottomFieldNumber = 103,
    kEngineClipIdFieldNumber = 106,
    kStartPositionLeftFieldNumber = 108,
    kStartPositionBottomFieldNumber = 109,
    kStartPositionRightFieldNumber = 110,
    kStartPositionTopFieldNumber = 111,
    kEndPositionLeftFieldNumber = 112,
    kEndPositionBottomFieldNumber = 113,
    kEndPositionRightFieldNumber = 114,
    kEndPositionTopFieldNumber = 115,
    kFaceBoundsSetFieldNumber = 104,
    kAbstractCropFieldNumber = 107,
    kFliphFieldNumber = 125,
    kFlipvFieldNumber = 126,
    kRotatedStartPositionLeftFieldNumber = 116,
    kRotatedStartPositionBottomFieldNumber = 117,
    kRotatedStartPositionRightFieldNumber = 118,
    kRotatedStartPositionTopFieldNumber = 119,
    kRotatedEndPositionLeftFieldNumber = 120,
    kRotatedEndPositionBottomFieldNumber = 121,
    kRotatedEndPositionRightFieldNumber = 122,
    kRotatedEndPositionTopFieldNumber = 123,
    kRotationFieldNumber = 124,
    kDiffAvDurationFieldNumber = 127,
    kTrimTimeStartFieldNumber = 128,
    kTrimTimeEndFieldNumber = 129,
    kTrimmedDurationFieldNumber = 130,
    kPreTrimmedDurationFieldNumber = 131,
    kTitleStartTimeFieldNumber = 133,
    kTitleEndTimeFieldNumber = 134,
    kDurationFieldNumber = 135,
    kAudioDurationFieldNumber = 136,
    kVideoDurationFieldNumber = 137,
    kStartOverlapFieldNumber = 138,
    kEndOverlapFieldNumber = 139,
    kWidthFieldNumber = 140,
    kHeightFieldNumber = 141,
    kOriginalWidthFieldNumber = 142,
    kOriginalHeightFieldNumber = 143,
    kClipVolumeFieldNumber = 144,
    kMusicVolumeFieldNumber = 145,
    kTitleStyleFieldNumber = 146,
    kIsImageFieldNumber = 147,
    kMuteAudioFieldNumber = 148,
    kMuteMusicFieldNumber = 149,
    kHasAudioFieldNumber = 150,
    kBrightnessFieldNumber = 156,
    kTransitionItemUuidLsbFieldNumber = 154,
    kTransitionItemUuidMsbFieldNumber = 155,
    kContrastFieldNumber = 157,
    kSaturationFieldNumber = 158,
    kTintcolorFieldNumber = 159,
    kEffectStartTimeFieldNumber = 160,
    kEffectEndTimeFieldNumber = 161,
    kClipWidthFieldNumber = 167,
    kPlaybackSpeedFieldNumber = 168,
    kHasVideoFieldNumber = 151,
    kTranscodeApprovedFieldNumber = 172,
    kCropLinkFieldNumber = 175,
    kIsReverseFieldNumber = 177,
    kVoiceChangerFieldNumber = 178,
    kPanLeftFieldNumber = 180,
    kPanRightFieldNumber = 181,
    kCompressorFieldNumber = 182,
    kPitchFactorFieldNumber = 183,
    kVignetteFieldNumber = 179,
    kKeepPitchFieldNumber = 186,
    kUseIFrameOnlyFieldNumber = 187,
    kAutoThemeEffectFieldNumber = 164,
    kClipStateFieldNumber = 173,
  };
  // repeated int32 volume_envelope_time = 165 [packed = true];
  int volume_envelope_time_size() const;
  private:
  int _internal_volume_envelope_time_size() const;
  public:
  void clear_volume_envelope_time();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_volume_envelope_time(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_volume_envelope_time() const;
  void _internal_add_volume_envelope_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_volume_envelope_time();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 volume_envelope_time(int index) const;
  void set_volume_envelope_time(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_volume_envelope_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      volume_envelope_time() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_volume_envelope_time();

  // repeated int32 volume_envelope_level = 166 [packed = true];
  int volume_envelope_level_size() const;
  private:
  int _internal_volume_envelope_level_size() const;
  public:
  void clear_volume_envelope_level();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_volume_envelope_level(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_volume_envelope_level() const;
  void _internal_add_volume_envelope_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_volume_envelope_level();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 volume_envelope_level(int index) const;
  void set_volume_envelope_level(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_volume_envelope_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      volume_envelope_level() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_volume_envelope_level();

  // repeated .KMProto.KMProject.EffectOptionItem effectOption = 194;
  int effectoption_size() const;
  private:
  int _internal_effectoption_size() const;
  public:
  void clear_effectoption();
  ::KMProto_KMProject_EffectOptionItem* mutable_effectoption(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_EffectOptionItem >*
      mutable_effectoption();
  private:
  const ::KMProto_KMProject_EffectOptionItem& _internal_effectoption(int index) const;
  ::KMProto_KMProject_EffectOptionItem* _internal_add_effectoption();
  public:
  const ::KMProto_KMProject_EffectOptionItem& effectoption(int index) const;
  ::KMProto_KMProject_EffectOptionItem* add_effectoption();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_EffectOptionItem >&
      effectoption() const;

  // optional string capture_filename = 105;
  bool has_capture_filename() const;
  private:
  bool _internal_has_capture_filename() const;
  public:
  void clear_capture_filename();
  const std::string& capture_filename() const;
  void set_capture_filename(const std::string& value);
  void set_capture_filename(std::string&& value);
  void set_capture_filename(const char* value);
  void set_capture_filename(const char* value, size_t size);
  std::string* mutable_capture_filename();
  std::string* release_capture_filename();
  void set_allocated_capture_filename(std::string* capture_filename);
  private:
  const std::string& _internal_capture_filename() const;
  void _internal_set_capture_filename(const std::string& value);
  std::string* _internal_mutable_capture_filename();
  public:

  // optional string title_effect_id = 132;
  bool has_title_effect_id() const;
  private:
  bool _internal_has_title_effect_id() const;
  public:
  void clear_title_effect_id();
  const std::string& title_effect_id() const;
  void set_title_effect_id(const std::string& value);
  void set_title_effect_id(std::string&& value);
  void set_title_effect_id(const char* value);
  void set_title_effect_id(const char* value, size_t size);
  std::string* mutable_title_effect_id();
  std::string* release_title_effect_id();
  void set_allocated_title_effect_id(std::string* title_effect_id);
  private:
  const std::string& _internal_title_effect_id() const;
  void _internal_set_title_effect_id(const std::string& value);
  std::string* _internal_mutable_title_effect_id();
  public:

  // optional string thumb_path = 152;
  bool has_thumb_path() const;
  private:
  bool _internal_has_thumb_path() const;
  public:
  void clear_thumb_path();
  const std::string& thumb_path() const;
  void set_thumb_path(const std::string& value);
  void set_thumb_path(std::string&& value);
  void set_thumb_path(const char* value);
  void set_thumb_path(const char* value, size_t size);
  std::string* mutable_thumb_path();
  std::string* release_thumb_path();
  void set_allocated_thumb_path(std::string* thumb_path);
  private:
  const std::string& _internal_thumb_path() const;
  void _internal_set_thumb_path(const std::string& value);
  std::string* _internal_mutable_thumb_path();
  public:

  // optional string media_path = 153;
  bool has_media_path() const;
  private:
  bool _internal_has_media_path() const;
  public:
  void clear_media_path();
  const std::string& media_path() const;
  void set_media_path(const std::string& value);
  void set_media_path(std::string&& value);
  void set_media_path(const char* value);
  void set_media_path(const char* value, size_t size);
  std::string* mutable_media_path();
  std::string* release_media_path();
  void set_allocated_media_path(std::string* media_path);
  private:
  const std::string& _internal_media_path() const;
  void _internal_set_media_path(const std::string& value);
  std::string* _internal_mutable_media_path();
  public:

  // optional string media_msid = 174;
  bool has_media_msid() const;
  private:
  bool _internal_has_media_msid() const;
  public:
  void clear_media_msid();
  const std::string& media_msid() const;
  void set_media_msid(const std::string& value);
  void set_media_msid(std::string&& value);
  void set_media_msid(const char* value);
  void set_media_msid(const char* value, size_t size);
  std::string* mutable_media_msid();
  std::string* release_media_msid();
  void set_allocated_media_msid(std::string* media_msid);
  private:
  const std::string& _internal_media_msid() const;
  void _internal_set_media_msid(const std::string& value);
  std::string* _internal_mutable_media_msid();
  public:

  // optional string clip_name = 184;
  bool has_clip_name() const;
  private:
  bool _internal_has_clip_name() const;
  public:
  void clear_clip_name();
  const std::string& clip_name() const;
  void set_clip_name(const std::string& value);
  void set_clip_name(std::string&& value);
  void set_clip_name(const char* value);
  void set_clip_name(const char* value, size_t size);
  std::string* mutable_clip_name();
  std::string* release_clip_name();
  void set_allocated_clip_name(std::string* clip_name);
  private:
  const std::string& _internal_clip_name() const;
  void _internal_set_clip_name(const std::string& value);
  std::string* _internal_mutable_clip_name();
  public:

  // optional string ios_media_asset_id = 185;
  bool has_ios_media_asset_id() const;
  private:
  bool _internal_has_ios_media_asset_id() const;
  public:
  void clear_ios_media_asset_id();
  const std::string& ios_media_asset_id() const;
  void set_ios_media_asset_id(const std::string& value);
  void set_ios_media_asset_id(std::string&& value);
  void set_ios_media_asset_id(const char* value);
  void set_ios_media_asset_id(const char* value, size_t size);
  std::string* mutable_ios_media_asset_id();
  std::string* release_ios_media_asset_id();
  void set_allocated_ios_media_asset_id(std::string* ios_media_asset_id);
  private:
  const std::string& _internal_ios_media_asset_id() const;
  void _internal_set_ios_media_asset_id(const std::string& value);
  std::string* _internal_mutable_ios_media_asset_id();
  public:

  // optional string enhancedAudioFilter = 188;
  bool has_enhancedaudiofilter() const;
  private:
  bool _internal_has_enhancedaudiofilter() const;
  public:
  void clear_enhancedaudiofilter();
  const std::string& enhancedaudiofilter() const;
  void set_enhancedaudiofilter(const std::string& value);
  void set_enhancedaudiofilter(std::string&& value);
  void set_enhancedaudiofilter(const char* value);
  void set_enhancedaudiofilter(const char* value, size_t size);
  std::string* mutable_enhancedaudiofilter();
  std::string* release_enhancedaudiofilter();
  void set_allocated_enhancedaudiofilter(std::string* enhancedaudiofilter);
  private:
  const std::string& _internal_enhancedaudiofilter() const;
  void _internal_set_enhancedaudiofilter(const std::string& value);
  std::string* _internal_mutable_enhancedaudiofilter();
  public:

  // optional string equalizer = 189;
  bool has_equalizer() const;
  private:
  bool _internal_has_equalizer() const;
  public:
  void clear_equalizer();
  const std::string& equalizer() const;
  void set_equalizer(const std::string& value);
  void set_equalizer(std::string&& value);
  void set_equalizer(const char* value);
  void set_equalizer(const char* value, size_t size);
  std::string* mutable_equalizer();
  std::string* release_equalizer();
  void set_allocated_equalizer(std::string* equalizer);
  private:
  const std::string& _internal_equalizer() const;
  void _internal_set_equalizer(const std::string& value);
  std::string* _internal_mutable_equalizer();
  public:

  // optional string reverb = 191;
  bool has_reverb() const;
  private:
  bool _internal_has_reverb() const;
  public:
  void clear_reverb();
  const std::string& reverb() const;
  void set_reverb(const std::string& value);
  void set_reverb(std::string&& value);
  void set_reverb(const char* value);
  void set_reverb(const char* value, size_t size);
  std::string* mutable_reverb();
  std::string* release_reverb();
  void set_allocated_reverb(std::string* reverb);
  private:
  const std::string& _internal_reverb() const;
  void _internal_set_reverb(const std::string& value);
  std::string* _internal_mutable_reverb();
  public:

  // optional .KMProto.KMProject.Matrix start_matrix = 162;
  bool has_start_matrix() const;
  private:
  bool _internal_has_start_matrix() const;
  public:
  void clear_start_matrix();
  const ::KMProto_KMProject_Matrix& start_matrix() const;
  ::KMProto_KMProject_Matrix* release_start_matrix();
  ::KMProto_KMProject_Matrix* mutable_start_matrix();
  void set_allocated_start_matrix(::KMProto_KMProject_Matrix* start_matrix);
  private:
  const ::KMProto_KMProject_Matrix& _internal_start_matrix() const;
  ::KMProto_KMProject_Matrix* _internal_mutable_start_matrix();
  public:
  void unsafe_arena_set_allocated_start_matrix(
      ::KMProto_KMProject_Matrix* start_matrix);
  ::KMProto_KMProject_Matrix* unsafe_arena_release_start_matrix();

  // optional .KMProto.KMProject.Matrix end_matrix = 163;
  bool has_end_matrix() const;
  private:
  bool _internal_has_end_matrix() const;
  public:
  void clear_end_matrix();
  const ::KMProto_KMProject_Matrix& end_matrix() const;
  ::KMProto_KMProject_Matrix* release_end_matrix();
  ::KMProto_KMProject_Matrix* mutable_end_matrix();
  void set_allocated_end_matrix(::KMProto_KMProject_Matrix* end_matrix);
  private:
  const ::KMProto_KMProject_Matrix& _internal_end_matrix() const;
  ::KMProto_KMProject_Matrix* _internal_mutable_end_matrix();
  public:
  void unsafe_arena_set_allocated_end_matrix(
      ::KMProto_KMProject_Matrix* end_matrix);
  ::KMProto_KMProject_Matrix* unsafe_arena_release_end_matrix();

  // optional .KMProto.KMProject.ColorEffect color_effect = 169;
  bool has_color_effect() const;
  private:
  bool _internal_has_color_effect() const;
  public:
  void clear_color_effect();
  const ::KMProto_KMProject_ColorEffect& color_effect() const;
  ::KMProto_KMProject_ColorEffect* release_color_effect();
  ::KMProto_KMProject_ColorEffect* mutable_color_effect();
  void set_allocated_color_effect(::KMProto_KMProject_ColorEffect* color_effect);
  private:
  const ::KMProto_KMProject_ColorEffect& _internal_color_effect() const;
  ::KMProto_KMProject_ColorEffect* _internal_mutable_color_effect();
  public:
  void unsafe_arena_set_allocated_color_effect(
      ::KMProto_KMProject_ColorEffect* color_effect);
  ::KMProto_KMProject_ColorEffect* unsafe_arena_release_color_effect();

  // optional .KMProto.KMProject.StringHashMap effect_options = 170;
  bool has_effect_options() const;
  private:
  bool _internal_has_effect_options() const;
  public:
  void clear_effect_options();
  const ::KMProto_KMProject_StringHashMap& effect_options() const;
  ::KMProto_KMProject_StringHashMap* release_effect_options();
  ::KMProto_KMProject_StringHashMap* mutable_effect_options();
  void set_allocated_effect_options(::KMProto_KMProject_StringHashMap* effect_options);
  private:
  const ::KMProto_KMProject_StringHashMap& _internal_effect_options() const;
  ::KMProto_KMProject_StringHashMap* _internal_mutable_effect_options();
  public:
  void unsafe_arena_set_allocated_effect_options(
      ::KMProto_KMProject_StringHashMap* effect_options);
  ::KMProto_KMProject_StringHashMap* unsafe_arena_release_effect_options();

  // optional .KMProto.KMProject.TimelineItem unattached_transition = 171;
  bool has_unattached_transition() const;
  private:
  bool _internal_has_unattached_transition() const;
  public:
  void clear_unattached_transition();
  const ::KMProto_KMProject_TimelineItem& unattached_transition() const;
  ::KMProto_KMProject_TimelineItem* release_unattached_transition();
  ::KMProto_KMProject_TimelineItem* mutable_unattached_transition();
  void set_allocated_unattached_transition(::KMProto_KMProject_TimelineItem* unattached_transition);
  private:
  const ::KMProto_KMProject_TimelineItem& _internal_unattached_transition() const;
  ::KMProto_KMProject_TimelineItem* _internal_mutable_unattached_transition();
  public:
  void unsafe_arena_set_allocated_unattached_transition(
      ::KMProto_KMProject_TimelineItem* unattached_transition);
  ::KMProto_KMProject_TimelineItem* unsafe_arena_release_unattached_transition();

  // optional .KMProto.KMProject.ClipRange clipRange = 190;
  bool has_cliprange() const;
  private:
  bool _internal_has_cliprange() const;
  public:
  void clear_cliprange();
  const ::KMProto_KMProject_ClipRange& cliprange() const;
  ::KMProto_KMProject_ClipRange* release_cliprange();
  ::KMProto_KMProject_ClipRange* mutable_cliprange();
  void set_allocated_cliprange(::KMProto_KMProject_ClipRange* cliprange);
  private:
  const ::KMProto_KMProject_ClipRange& _internal_cliprange() const;
  ::KMProto_KMProject_ClipRange* _internal_mutable_cliprange();
  public:
  void unsafe_arena_set_allocated_cliprange(
      ::KMProto_KMProject_ClipRange* cliprange);
  ::KMProto_KMProject_ClipRange* unsafe_arena_release_cliprange();

  // optional .KMProto.KMProject.ColorAdjustment colorAdjustment = 192;
  bool has_coloradjustment() const;
  private:
  bool _internal_has_coloradjustment() const;
  public:
  void clear_coloradjustment();
  const ::KMProto_KMProject_ColorAdjustment& coloradjustment() const;
  ::KMProto_KMProject_ColorAdjustment* release_coloradjustment();
  ::KMProto_KMProject_ColorAdjustment* mutable_coloradjustment();
  void set_allocated_coloradjustment(::KMProto_KMProject_ColorAdjustment* coloradjustment);
  private:
  const ::KMProto_KMProject_ColorAdjustment& _internal_coloradjustment() const;
  ::KMProto_KMProject_ColorAdjustment* _internal_mutable_coloradjustment();
  public:
  void unsafe_arena_set_allocated_coloradjustment(
      ::KMProto_KMProject_ColorAdjustment* coloradjustment);
  ::KMProto_KMProject_ColorAdjustment* unsafe_arena_release_coloradjustment();

  // optional .KMProto.KMProject.ColorFilter colorFilter = 193;
  bool has_colorfilter() const;
  private:
  bool _internal_has_colorfilter() const;
  public:
  void clear_colorfilter();
  const ::KMProto_KMProject_ColorFilter& colorfilter() const;
  ::KMProto_KMProject_ColorFilter* release_colorfilter();
  ::KMProto_KMProject_ColorFilter* mutable_colorfilter();
  void set_allocated_colorfilter(::KMProto_KMProject_ColorFilter* colorfilter);
  private:
  const ::KMProto_KMProject_ColorFilter& _internal_colorfilter() const;
  ::KMProto_KMProject_ColorFilter* _internal_mutable_colorfilter();
  public:
  void unsafe_arena_set_allocated_colorfilter(
      ::KMProto_KMProject_ColorFilter* colorfilter);
  ::KMProto_KMProject_ColorFilter* unsafe_arena_release_colorfilter();

  // optional float face_bounds_left = 100;
  bool has_face_bounds_left() const;
  private:
  bool _internal_has_face_bounds_left() const;
  public:
  void clear_face_bounds_left();
  float face_bounds_left() const;
  void set_face_bounds_left(float value);
  private:
  float _internal_face_bounds_left() const;
  void _internal_set_face_bounds_left(float value);
  public:

  // optional float face_bounds_top = 101;
  bool has_face_bounds_top() const;
  private:
  bool _internal_has_face_bounds_top() const;
  public:
  void clear_face_bounds_top();
  float face_bounds_top() const;
  void set_face_bounds_top(float value);
  private:
  float _internal_face_bounds_top() const;
  void _internal_set_face_bounds_top(float value);
  public:

  // optional float face_bounds_right = 102;
  bool has_face_bounds_right() const;
  private:
  bool _internal_has_face_bounds_right() const;
  public:
  void clear_face_bounds_right();
  float face_bounds_right() const;
  void set_face_bounds_right(float value);
  private:
  float _internal_face_bounds_right() const;
  void _internal_set_face_bounds_right(float value);
  public:

  // optional float face_bounds_bottom = 103;
  bool has_face_bounds_bottom() const;
  private:
  bool _internal_has_face_bounds_bottom() const;
  public:
  void clear_face_bounds_bottom();
  float face_bounds_bottom() const;
  void set_face_bounds_bottom(float value);
  private:
  float _internal_face_bounds_bottom() const;
  void _internal_set_face_bounds_bottom(float value);
  public:

  // optional int32 engine_clip_id = 106;
  bool has_engine_clip_id() const;
  private:
  bool _internal_has_engine_clip_id() const;
  public:
  void clear_engine_clip_id();
  ::PROTOBUF_NAMESPACE_ID::int32 engine_clip_id() const;
  void set_engine_clip_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_engine_clip_id() const;
  void _internal_set_engine_clip_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 start_position_left = 108;
  bool has_start_position_left() const;
  private:
  bool _internal_has_start_position_left() const;
  public:
  void clear_start_position_left();
  ::PROTOBUF_NAMESPACE_ID::int32 start_position_left() const;
  void set_start_position_left(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start_position_left() const;
  void _internal_set_start_position_left(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 start_position_bottom = 109;
  bool has_start_position_bottom() const;
  private:
  bool _internal_has_start_position_bottom() const;
  public:
  void clear_start_position_bottom();
  ::PROTOBUF_NAMESPACE_ID::int32 start_position_bottom() const;
  void set_start_position_bottom(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start_position_bottom() const;
  void _internal_set_start_position_bottom(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 start_position_right = 110;
  bool has_start_position_right() const;
  private:
  bool _internal_has_start_position_right() const;
  public:
  void clear_start_position_right();
  ::PROTOBUF_NAMESPACE_ID::int32 start_position_right() const;
  void set_start_position_right(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start_position_right() const;
  void _internal_set_start_position_right(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 start_position_top = 111;
  bool has_start_position_top() const;
  private:
  bool _internal_has_start_position_top() const;
  public:
  void clear_start_position_top();
  ::PROTOBUF_NAMESPACE_ID::int32 start_position_top() const;
  void set_start_position_top(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start_position_top() const;
  void _internal_set_start_position_top(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 end_position_left = 112;
  bool has_end_position_left() const;
  private:
  bool _internal_has_end_position_left() const;
  public:
  void clear_end_position_left();
  ::PROTOBUF_NAMESPACE_ID::int32 end_position_left() const;
  void set_end_position_left(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_end_position_left() const;
  void _internal_set_end_position_left(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 end_position_bottom = 113;
  bool has_end_position_bottom() const;
  private:
  bool _internal_has_end_position_bottom() const;
  public:
  void clear_end_position_bottom();
  ::PROTOBUF_NAMESPACE_ID::int32 end_position_bottom() const;
  void set_end_position_bottom(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_end_position_bottom() const;
  void _internal_set_end_position_bottom(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 end_position_right = 114;
  bool has_end_position_right() const;
  private:
  bool _internal_has_end_position_right() const;
  public:
  void clear_end_position_right();
  ::PROTOBUF_NAMESPACE_ID::int32 end_position_right() const;
  void set_end_position_right(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_end_position_right() const;
  void _internal_set_end_position_right(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 end_position_top = 115;
  bool has_end_position_top() const;
  private:
  bool _internal_has_end_position_top() const;
  public:
  void clear_end_position_top();
  ::PROTOBUF_NAMESPACE_ID::int32 end_position_top() const;
  void set_end_position_top(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_end_position_top() const;
  void _internal_set_end_position_top(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool face_bounds_set = 104;
  bool has_face_bounds_set() const;
  private:
  bool _internal_has_face_bounds_set() const;
  public:
  void clear_face_bounds_set();
  bool face_bounds_set() const;
  void set_face_bounds_set(bool value);
  private:
  bool _internal_face_bounds_set() const;
  void _internal_set_face_bounds_set(bool value);
  public:

  // optional bool abstract_crop = 107;
  bool has_abstract_crop() const;
  private:
  bool _internal_has_abstract_crop() const;
  public:
  void clear_abstract_crop();
  bool abstract_crop() const;
  void set_abstract_crop(bool value);
  private:
  bool _internal_abstract_crop() const;
  void _internal_set_abstract_crop(bool value);
  public:

  // optional bool fliph = 125;
  bool has_fliph() const;
  private:
  bool _internal_has_fliph() const;
  public:
  void clear_fliph();
  bool fliph() const;
  void set_fliph(bool value);
  private:
  bool _internal_fliph() const;
  void _internal_set_fliph(bool value);
  public:

  // optional bool flipv = 126;
  bool has_flipv() const;
  private:
  bool _internal_has_flipv() const;
  public:
  void clear_flipv();
  bool flipv() const;
  void set_flipv(bool value);
  private:
  bool _internal_flipv() const;
  void _internal_set_flipv(bool value);
  public:

  // optional int32 rotated_start_position_left = 116;
  bool has_rotated_start_position_left() const;
  private:
  bool _internal_has_rotated_start_position_left() const;
  public:
  void clear_rotated_start_position_left();
  ::PROTOBUF_NAMESPACE_ID::int32 rotated_start_position_left() const;
  void set_rotated_start_position_left(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rotated_start_position_left() const;
  void _internal_set_rotated_start_position_left(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 rotated_start_position_bottom = 117;
  bool has_rotated_start_position_bottom() const;
  private:
  bool _internal_has_rotated_start_position_bottom() const;
  public:
  void clear_rotated_start_position_bottom();
  ::PROTOBUF_NAMESPACE_ID::int32 rotated_start_position_bottom() const;
  void set_rotated_start_position_bottom(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rotated_start_position_bottom() const;
  void _internal_set_rotated_start_position_bottom(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 rotated_start_position_right = 118;
  bool has_rotated_start_position_right() const;
  private:
  bool _internal_has_rotated_start_position_right() const;
  public:
  void clear_rotated_start_position_right();
  ::PROTOBUF_NAMESPACE_ID::int32 rotated_start_position_right() const;
  void set_rotated_start_position_right(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rotated_start_position_right() const;
  void _internal_set_rotated_start_position_right(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 rotated_start_position_top = 119;
  bool has_rotated_start_position_top() const;
  private:
  bool _internal_has_rotated_start_position_top() const;
  public:
  void clear_rotated_start_position_top();
  ::PROTOBUF_NAMESPACE_ID::int32 rotated_start_position_top() const;
  void set_rotated_start_position_top(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rotated_start_position_top() const;
  void _internal_set_rotated_start_position_top(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 rotated_end_position_left = 120;
  bool has_rotated_end_position_left() const;
  private:
  bool _internal_has_rotated_end_position_left() const;
  public:
  void clear_rotated_end_position_left();
  ::PROTOBUF_NAMESPACE_ID::int32 rotated_end_position_left() const;
  void set_rotated_end_position_left(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rotated_end_position_left() const;
  void _internal_set_rotated_end_position_left(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 rotated_end_position_bottom = 121;
  bool has_rotated_end_position_bottom() const;
  private:
  bool _internal_has_rotated_end_position_bottom() const;
  public:
  void clear_rotated_end_position_bottom();
  ::PROTOBUF_NAMESPACE_ID::int32 rotated_end_position_bottom() const;
  void set_rotated_end_position_bottom(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rotated_end_position_bottom() const;
  void _internal_set_rotated_end_position_bottom(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 rotated_end_position_right = 122;
  bool has_rotated_end_position_right() const;
  private:
  bool _internal_has_rotated_end_position_right() const;
  public:
  void clear_rotated_end_position_right();
  ::PROTOBUF_NAMESPACE_ID::int32 rotated_end_position_right() const;
  void set_rotated_end_position_right(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rotated_end_position_right() const;
  void _internal_set_rotated_end_position_right(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 rotated_end_position_top = 123;
  bool has_rotated_end_position_top() const;
  private:
  bool _internal_has_rotated_end_position_top() const;
  public:
  void clear_rotated_end_position_top();
  ::PROTOBUF_NAMESPACE_ID::int32 rotated_end_position_top() const;
  void set_rotated_end_position_top(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rotated_end_position_top() const;
  void _internal_set_rotated_end_position_top(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 rotation = 124;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  ::PROTOBUF_NAMESPACE_ID::int32 rotation() const;
  void set_rotation(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rotation() const;
  void _internal_set_rotation(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 diff_av_duration = 127;
  bool has_diff_av_duration() const;
  private:
  bool _internal_has_diff_av_duration() const;
  public:
  void clear_diff_av_duration();
  ::PROTOBUF_NAMESPACE_ID::int32 diff_av_duration() const;
  void set_diff_av_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_diff_av_duration() const;
  void _internal_set_diff_av_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 trim_time_start = 128;
  bool has_trim_time_start() const;
  private:
  bool _internal_has_trim_time_start() const;
  public:
  void clear_trim_time_start();
  ::PROTOBUF_NAMESPACE_ID::int32 trim_time_start() const;
  void set_trim_time_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_trim_time_start() const;
  void _internal_set_trim_time_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 trim_time_end = 129;
  bool has_trim_time_end() const;
  private:
  bool _internal_has_trim_time_end() const;
  public:
  void clear_trim_time_end();
  ::PROTOBUF_NAMESPACE_ID::int32 trim_time_end() const;
  void set_trim_time_end(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_trim_time_end() const;
  void _internal_set_trim_time_end(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 trimmed_duration = 130;
  bool has_trimmed_duration() const;
  private:
  bool _internal_has_trimmed_duration() const;
  public:
  void clear_trimmed_duration();
  ::PROTOBUF_NAMESPACE_ID::int32 trimmed_duration() const;
  void set_trimmed_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_trimmed_duration() const;
  void _internal_set_trimmed_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 pre_trimmed_duration = 131;
  bool has_pre_trimmed_duration() const;
  private:
  bool _internal_has_pre_trimmed_duration() const;
  public:
  void clear_pre_trimmed_duration();
  ::PROTOBUF_NAMESPACE_ID::int32 pre_trimmed_duration() const;
  void set_pre_trimmed_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pre_trimmed_duration() const;
  void _internal_set_pre_trimmed_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 title_start_time = 133;
  bool has_title_start_time() const;
  private:
  bool _internal_has_title_start_time() const;
  public:
  void clear_title_start_time();
  ::PROTOBUF_NAMESPACE_ID::int32 title_start_time() const;
  void set_title_start_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_title_start_time() const;
  void _internal_set_title_start_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 title_end_time = 134;
  bool has_title_end_time() const;
  private:
  bool _internal_has_title_end_time() const;
  public:
  void clear_title_end_time();
  ::PROTOBUF_NAMESPACE_ID::int32 title_end_time() const;
  void set_title_end_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_title_end_time() const;
  void _internal_set_title_end_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 duration = 135;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::int32 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 audio_duration = 136;
  bool has_audio_duration() const;
  private:
  bool _internal_has_audio_duration() const;
  public:
  void clear_audio_duration();
  ::PROTOBUF_NAMESPACE_ID::int32 audio_duration() const;
  void set_audio_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_audio_duration() const;
  void _internal_set_audio_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 video_duration = 137;
  bool has_video_duration() const;
  private:
  bool _internal_has_video_duration() const;
  public:
  void clear_video_duration();
  ::PROTOBUF_NAMESPACE_ID::int32 video_duration() const;
  void set_video_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_video_duration() const;
  void _internal_set_video_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 start_overlap = 138;
  bool has_start_overlap() const;
  private:
  bool _internal_has_start_overlap() const;
  public:
  void clear_start_overlap();
  ::PROTOBUF_NAMESPACE_ID::int32 start_overlap() const;
  void set_start_overlap(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start_overlap() const;
  void _internal_set_start_overlap(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 end_overlap = 139;
  bool has_end_overlap() const;
  private:
  bool _internal_has_end_overlap() const;
  public:
  void clear_end_overlap();
  ::PROTOBUF_NAMESPACE_ID::int32 end_overlap() const;
  void set_end_overlap(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_end_overlap() const;
  void _internal_set_end_overlap(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 width = 140;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 height = 141;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 original_width = 142;
  bool has_original_width() const;
  private:
  bool _internal_has_original_width() const;
  public:
  void clear_original_width();
  ::PROTOBUF_NAMESPACE_ID::int32 original_width() const;
  void set_original_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_original_width() const;
  void _internal_set_original_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 original_height = 143;
  bool has_original_height() const;
  private:
  bool _internal_has_original_height() const;
  public:
  void clear_original_height();
  ::PROTOBUF_NAMESPACE_ID::int32 original_height() const;
  void set_original_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_original_height() const;
  void _internal_set_original_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 clip_volume = 144;
  bool has_clip_volume() const;
  private:
  bool _internal_has_clip_volume() const;
  public:
  void clear_clip_volume();
  ::PROTOBUF_NAMESPACE_ID::int32 clip_volume() const;
  void set_clip_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_clip_volume() const;
  void _internal_set_clip_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 music_volume = 145;
  bool has_music_volume() const;
  private:
  bool _internal_has_music_volume() const;
  public:
  void clear_music_volume();
  ::PROTOBUF_NAMESPACE_ID::int32 music_volume() const;
  void set_music_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_music_volume() const;
  void _internal_set_music_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .KMProto.KMProject.TitleStyle title_style = 146;
  bool has_title_style() const;
  private:
  bool _internal_has_title_style() const;
  public:
  void clear_title_style();
  ::KMProto_KMProject_TitleStyle title_style() const;
  void set_title_style(::KMProto_KMProject_TitleStyle value);
  private:
  ::KMProto_KMProject_TitleStyle _internal_title_style() const;
  void _internal_set_title_style(::KMProto_KMProject_TitleStyle value);
  public:

  // optional bool is_image = 147;
  bool has_is_image() const;
  private:
  bool _internal_has_is_image() const;
  public:
  void clear_is_image();
  bool is_image() const;
  void set_is_image(bool value);
  private:
  bool _internal_is_image() const;
  void _internal_set_is_image(bool value);
  public:

  // optional bool mute_audio = 148;
  bool has_mute_audio() const;
  private:
  bool _internal_has_mute_audio() const;
  public:
  void clear_mute_audio();
  bool mute_audio() const;
  void set_mute_audio(bool value);
  private:
  bool _internal_mute_audio() const;
  void _internal_set_mute_audio(bool value);
  public:

  // optional bool mute_music = 149;
  bool has_mute_music() const;
  private:
  bool _internal_has_mute_music() const;
  public:
  void clear_mute_music();
  bool mute_music() const;
  void set_mute_music(bool value);
  private:
  bool _internal_mute_music() const;
  void _internal_set_mute_music(bool value);
  public:

  // optional bool has_audio = 150;
  bool has_has_audio() const;
  private:
  bool _internal_has_has_audio() const;
  public:
  void clear_has_audio();
  bool has_audio() const;
  void set_has_audio(bool value);
  private:
  bool _internal_has_audio() const;
  void _internal_set_has_audio(bool value);
  public:

  // optional int32 brightness = 156;
  bool has_brightness() const;
  private:
  bool _internal_has_brightness() const;
  public:
  void clear_brightness();
  ::PROTOBUF_NAMESPACE_ID::int32 brightness() const;
  void set_brightness(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_brightness() const;
  void _internal_set_brightness(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint64 transition_item_uuid_lsb = 154;
  bool has_transition_item_uuid_lsb() const;
  private:
  bool _internal_has_transition_item_uuid_lsb() const;
  public:
  void clear_transition_item_uuid_lsb();
  ::PROTOBUF_NAMESPACE_ID::uint64 transition_item_uuid_lsb() const;
  void set_transition_item_uuid_lsb(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_transition_item_uuid_lsb() const;
  void _internal_set_transition_item_uuid_lsb(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 transition_item_uuid_msb = 155;
  bool has_transition_item_uuid_msb() const;
  private:
  bool _internal_has_transition_item_uuid_msb() const;
  public:
  void clear_transition_item_uuid_msb();
  ::PROTOBUF_NAMESPACE_ID::uint64 transition_item_uuid_msb() const;
  void set_transition_item_uuid_msb(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_transition_item_uuid_msb() const;
  void _internal_set_transition_item_uuid_msb(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 contrast = 157;
  bool has_contrast() const;
  private:
  bool _internal_has_contrast() const;
  public:
  void clear_contrast();
  ::PROTOBUF_NAMESPACE_ID::int32 contrast() const;
  void set_contrast(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_contrast() const;
  void _internal_set_contrast(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 saturation = 158;
  bool has_saturation() const;
  private:
  bool _internal_has_saturation() const;
  public:
  void clear_saturation();
  ::PROTOBUF_NAMESPACE_ID::int32 saturation() const;
  void set_saturation(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_saturation() const;
  void _internal_set_saturation(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tintcolor = 159;
  bool has_tintcolor() const;
  private:
  bool _internal_has_tintcolor() const;
  public:
  void clear_tintcolor();
  ::PROTOBUF_NAMESPACE_ID::int32 tintcolor() const;
  void set_tintcolor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tintcolor() const;
  void _internal_set_tintcolor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 effect_start_time = 160;
  bool has_effect_start_time() const;
  private:
  bool _internal_has_effect_start_time() const;
  public:
  void clear_effect_start_time();
  ::PROTOBUF_NAMESPACE_ID::int32 effect_start_time() const;
  void set_effect_start_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_effect_start_time() const;
  void _internal_set_effect_start_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 effect_end_time = 161;
  bool has_effect_end_time() const;
  private:
  bool _internal_has_effect_end_time() const;
  public:
  void clear_effect_end_time();
  ::PROTOBUF_NAMESPACE_ID::int32 effect_end_time() const;
  void set_effect_end_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_effect_end_time() const;
  void _internal_set_effect_end_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float clip_width = 167;
  bool has_clip_width() const;
  private:
  bool _internal_has_clip_width() const;
  public:
  void clear_clip_width();
  float clip_width() const;
  void set_clip_width(float value);
  private:
  float _internal_clip_width() const;
  void _internal_set_clip_width(float value);
  public:

  // optional int32 playback_speed = 168;
  bool has_playback_speed() const;
  private:
  bool _internal_has_playback_speed() const;
  public:
  void clear_playback_speed();
  ::PROTOBUF_NAMESPACE_ID::int32 playback_speed() const;
  void set_playback_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playback_speed() const;
  void _internal_set_playback_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool has_video = 151;
  bool has_has_video() const;
  private:
  bool _internal_has_has_video() const;
  public:
  void clear_has_video();
  bool has_video() const;
  void set_has_video(bool value);
  private:
  bool _internal_has_video() const;
  void _internal_set_has_video(bool value);
  public:

  // optional bool transcode_approved = 172;
  bool has_transcode_approved() const;
  private:
  bool _internal_has_transcode_approved() const;
  public:
  void clear_transcode_approved();
  bool transcode_approved() const;
  void set_transcode_approved(bool value);
  private:
  bool _internal_transcode_approved() const;
  void _internal_set_transcode_approved(bool value);
  public:

  // optional bool crop_link = 175;
  bool has_crop_link() const;
  private:
  bool _internal_has_crop_link() const;
  public:
  void clear_crop_link();
  bool crop_link() const;
  void set_crop_link(bool value);
  private:
  bool _internal_crop_link() const;
  void _internal_set_crop_link(bool value);
  public:

  // optional bool is_reverse = 177;
  bool has_is_reverse() const;
  private:
  bool _internal_has_is_reverse() const;
  public:
  void clear_is_reverse();
  bool is_reverse() const;
  void set_is_reverse(bool value);
  private:
  bool _internal_is_reverse() const;
  void _internal_set_is_reverse(bool value);
  public:

  // optional int32 voice_changer = 178;
  bool has_voice_changer() const;
  private:
  bool _internal_has_voice_changer() const;
  public:
  void clear_voice_changer();
  ::PROTOBUF_NAMESPACE_ID::int32 voice_changer() const;
  void set_voice_changer(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_voice_changer() const;
  void _internal_set_voice_changer(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 pan_left = 180;
  bool has_pan_left() const;
  private:
  bool _internal_has_pan_left() const;
  public:
  void clear_pan_left();
  ::PROTOBUF_NAMESPACE_ID::int32 pan_left() const;
  void set_pan_left(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pan_left() const;
  void _internal_set_pan_left(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 pan_right = 181;
  bool has_pan_right() const;
  private:
  bool _internal_has_pan_right() const;
  public:
  void clear_pan_right();
  ::PROTOBUF_NAMESPACE_ID::int32 pan_right() const;
  void set_pan_right(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pan_right() const;
  void _internal_set_pan_right(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 compressor = 182;
  bool has_compressor() const;
  private:
  bool _internal_has_compressor() const;
  public:
  void clear_compressor();
  ::PROTOBUF_NAMESPACE_ID::int32 compressor() const;
  void set_compressor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_compressor() const;
  void _internal_set_compressor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 pitch_factor = 183;
  bool has_pitch_factor() const;
  private:
  bool _internal_has_pitch_factor() const;
  public:
  void clear_pitch_factor();
  ::PROTOBUF_NAMESPACE_ID::int32 pitch_factor() const;
  void set_pitch_factor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pitch_factor() const;
  void _internal_set_pitch_factor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool vignette = 179;
  bool has_vignette() const;
  private:
  bool _internal_has_vignette() const;
  public:
  void clear_vignette();
  bool vignette() const;
  void set_vignette(bool value);
  private:
  bool _internal_vignette() const;
  void _internal_set_vignette(bool value);
  public:

  // optional bool keepPitch = 186;
  bool has_keeppitch() const;
  private:
  bool _internal_has_keeppitch() const;
  public:
  void clear_keeppitch();
  bool keeppitch() const;
  void set_keeppitch(bool value);
  private:
  bool _internal_keeppitch() const;
  void _internal_set_keeppitch(bool value);
  public:

  // optional bool useIFrameOnly = 187;
  bool has_useiframeonly() const;
  private:
  bool _internal_has_useiframeonly() const;
  public:
  void clear_useiframeonly();
  bool useiframeonly() const;
  void set_useiframeonly(bool value);
  private:
  bool _internal_useiframeonly() const;
  void _internal_set_useiframeonly(bool value);
  public:

  // optional .KMProto.KMProject.ThemeEffectType auto_theme_effect = 164;
  bool has_auto_theme_effect() const;
  private:
  bool _internal_has_auto_theme_effect() const;
  public:
  void clear_auto_theme_effect();
  ::KMProto_KMProject_ThemeEffectType auto_theme_effect() const;
  void set_auto_theme_effect(::KMProto_KMProject_ThemeEffectType value);
  private:
  ::KMProto_KMProject_ThemeEffectType _internal_auto_theme_effect() const;
  void _internal_set_auto_theme_effect(::KMProto_KMProject_ThemeEffectType value);
  public:

  // optional .KMProto.KMProject.ClipState clip_state = 173;
  bool has_clip_state() const;
  private:
  bool _internal_has_clip_state() const;
  public:
  void clear_clip_state();
  ::KMProto_KMProject_ClipState clip_state() const;
  void set_clip_state(::KMProto_KMProject_ClipState value);
  private:
  ::KMProto_KMProject_ClipState _internal_clip_state() const;
  void _internal_set_clip_state(::KMProto_KMProject_ClipState value);
  public:

  // @@protoc_insertion_point(class_scope:KMProto.KMProject.VisualClip)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<3> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > volume_envelope_time_;
  mutable std::atomic<int> _volume_envelope_time_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > volume_envelope_level_;
  mutable std::atomic<int> _volume_envelope_level_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_EffectOptionItem > effectoption_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr capture_filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_effect_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr thumb_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr media_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr media_msid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clip_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ios_media_asset_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enhancedaudiofilter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr equalizer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reverb_;
  ::KMProto_KMProject_Matrix* start_matrix_;
  ::KMProto_KMProject_Matrix* end_matrix_;
  ::KMProto_KMProject_ColorEffect* color_effect_;
  ::KMProto_KMProject_StringHashMap* effect_options_;
  ::KMProto_KMProject_TimelineItem* unattached_transition_;
  ::KMProto_KMProject_ClipRange* cliprange_;
  ::KMProto_KMProject_ColorAdjustment* coloradjustment_;
  ::KMProto_KMProject_ColorFilter* colorfilter_;
  float face_bounds_left_;
  float face_bounds_top_;
  float face_bounds_right_;
  float face_bounds_bottom_;
  ::PROTOBUF_NAMESPACE_ID::int32 engine_clip_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_position_left_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_position_bottom_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_position_right_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_position_top_;
  ::PROTOBUF_NAMESPACE_ID::int32 end_position_left_;
  ::PROTOBUF_NAMESPACE_ID::int32 end_position_bottom_;
  ::PROTOBUF_NAMESPACE_ID::int32 end_position_right_;
  ::PROTOBUF_NAMESPACE_ID::int32 end_position_top_;
  bool face_bounds_set_;
  bool abstract_crop_;
  bool fliph_;
  bool flipv_;
  ::PROTOBUF_NAMESPACE_ID::int32 rotated_start_position_left_;
  ::PROTOBUF_NAMESPACE_ID::int32 rotated_start_position_bottom_;
  ::PROTOBUF_NAMESPACE_ID::int32 rotated_start_position_right_;
  ::PROTOBUF_NAMESPACE_ID::int32 rotated_start_position_top_;
  ::PROTOBUF_NAMESPACE_ID::int32 rotated_end_position_left_;
  ::PROTOBUF_NAMESPACE_ID::int32 rotated_end_position_bottom_;
  ::PROTOBUF_NAMESPACE_ID::int32 rotated_end_position_right_;
  ::PROTOBUF_NAMESPACE_ID::int32 rotated_end_position_top_;
  ::PROTOBUF_NAMESPACE_ID::int32 rotation_;
  ::PROTOBUF_NAMESPACE_ID::int32 diff_av_duration_;
  ::PROTOBUF_NAMESPACE_ID::int32 trim_time_start_;
  ::PROTOBUF_NAMESPACE_ID::int32 trim_time_end_;
  ::PROTOBUF_NAMESPACE_ID::int32 trimmed_duration_;
  ::PROTOBUF_NAMESPACE_ID::int32 pre_trimmed_duration_;
  ::PROTOBUF_NAMESPACE_ID::int32 title_start_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 title_end_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 duration_;
  ::PROTOBUF_NAMESPACE_ID::int32 audio_duration_;
  ::PROTOBUF_NAMESPACE_ID::int32 video_duration_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_overlap_;
  ::PROTOBUF_NAMESPACE_ID::int32 end_overlap_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 original_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 original_height_;
  ::PROTOBUF_NAMESPACE_ID::int32 clip_volume_;
  ::PROTOBUF_NAMESPACE_ID::int32 music_volume_;
  int title_style_;
  bool is_image_;
  bool mute_audio_;
  bool mute_music_;
  bool has_audio_;
  ::PROTOBUF_NAMESPACE_ID::int32 brightness_;
  ::PROTOBUF_NAMESPACE_ID::uint64 transition_item_uuid_lsb_;
  ::PROTOBUF_NAMESPACE_ID::uint64 transition_item_uuid_msb_;
  ::PROTOBUF_NAMESPACE_ID::int32 contrast_;
  ::PROTOBUF_NAMESPACE_ID::int32 saturation_;
  ::PROTOBUF_NAMESPACE_ID::int32 tintcolor_;
  ::PROTOBUF_NAMESPACE_ID::int32 effect_start_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 effect_end_time_;
  float clip_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 playback_speed_;
  bool has_video_;
  bool transcode_approved_;
  bool crop_link_;
  bool is_reverse_;
  ::PROTOBUF_NAMESPACE_ID::int32 voice_changer_;
  ::PROTOBUF_NAMESPACE_ID::int32 pan_left_;
  ::PROTOBUF_NAMESPACE_ID::int32 pan_right_;
  ::PROTOBUF_NAMESPACE_ID::int32 compressor_;
  ::PROTOBUF_NAMESPACE_ID::int32 pitch_factor_;
  bool vignette_;
  bool keeppitch_;
  bool useiframeonly_;
  int auto_theme_effect_;
  int clip_state_;
  friend struct ::TableStruct_kinemaster_5fproject_5fwire_2dlite_2eproto;
};
// -------------------------------------------------------------------

class KMProto_KMProject_ClipRange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:KMProto.KMProject.ClipRange) */ {
 public:
  inline KMProto_KMProject_ClipRange() : KMProto_KMProject_ClipRange(nullptr) {}
  virtual ~KMProto_KMProject_ClipRange();

  KMProto_KMProject_ClipRange(const KMProto_KMProject_ClipRange& from);
  KMProto_KMProject_ClipRange(KMProto_KMProject_ClipRange&& from) noexcept
    : KMProto_KMProject_ClipRange() {
    *this = ::std::move(from);
  }

  inline KMProto_KMProject_ClipRange& operator=(const KMProto_KMProject_ClipRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline KMProto_KMProject_ClipRange& operator=(KMProto_KMProject_ClipRange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const KMProto_KMProject_ClipRange& default_instance();

  static inline const KMProto_KMProject_ClipRange* internal_default_instance() {
    return reinterpret_cast<const KMProto_KMProject_ClipRange*>(
               &_KMProto_KMProject_ClipRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(KMProto_KMProject_ClipRange& a, KMProto_KMProject_ClipRange& b) {
    a.Swap(&b);
  }
  inline void Swap(KMProto_KMProject_ClipRange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KMProto_KMProject_ClipRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KMProto_KMProject_ClipRange* New() const final {
    return CreateMaybeMessage<KMProto_KMProject_ClipRange>(nullptr);
  }

  KMProto_KMProject_ClipRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KMProto_KMProject_ClipRange>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const KMProto_KMProject_ClipRange& from);
  void MergeFrom(const KMProto_KMProject_ClipRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KMProto_KMProject_ClipRange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KMProto.KMProject.ClipRange";
  }
  protected:
  explicit KMProto_KMProject_ClipRange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourcePathFieldNumber = 1,
    kSourcePhAssetIdFieldNumber = 2,
    kSourceRagneStartTimeFieldNumber = 3,
    kSourceRagneDurationFieldNumber = 4,
  };
  // optional string sourcePath = 1;
  bool has_sourcepath() const;
  private:
  bool _internal_has_sourcepath() const;
  public:
  void clear_sourcepath();
  const std::string& sourcepath() const;
  void set_sourcepath(const std::string& value);
  void set_sourcepath(std::string&& value);
  void set_sourcepath(const char* value);
  void set_sourcepath(const char* value, size_t size);
  std::string* mutable_sourcepath();
  std::string* release_sourcepath();
  void set_allocated_sourcepath(std::string* sourcepath);
  private:
  const std::string& _internal_sourcepath() const;
  void _internal_set_sourcepath(const std::string& value);
  std::string* _internal_mutable_sourcepath();
  public:

  // optional string sourcePhAssetId = 2;
  bool has_sourcephassetid() const;
  private:
  bool _internal_has_sourcephassetid() const;
  public:
  void clear_sourcephassetid();
  const std::string& sourcephassetid() const;
  void set_sourcephassetid(const std::string& value);
  void set_sourcephassetid(std::string&& value);
  void set_sourcephassetid(const char* value);
  void set_sourcephassetid(const char* value, size_t size);
  std::string* mutable_sourcephassetid();
  std::string* release_sourcephassetid();
  void set_allocated_sourcephassetid(std::string* sourcephassetid);
  private:
  const std::string& _internal_sourcephassetid() const;
  void _internal_set_sourcephassetid(const std::string& value);
  std::string* _internal_mutable_sourcephassetid();
  public:

  // optional int64 sourceRagneStartTime = 3;
  bool has_sourceragnestarttime() const;
  private:
  bool _internal_has_sourceragnestarttime() const;
  public:
  void clear_sourceragnestarttime();
  ::PROTOBUF_NAMESPACE_ID::int64 sourceragnestarttime() const;
  void set_sourceragnestarttime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sourceragnestarttime() const;
  void _internal_set_sourceragnestarttime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 sourceRagneDuration = 4;
  bool has_sourceragneduration() const;
  private:
  bool _internal_has_sourceragneduration() const;
  public:
  void clear_sourceragneduration();
  ::PROTOBUF_NAMESPACE_ID::int64 sourceragneduration() const;
  void set_sourceragneduration(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sourceragneduration() const;
  void _internal_set_sourceragneduration(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:KMProto.KMProject.ClipRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sourcepath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sourcephassetid_;
  ::PROTOBUF_NAMESPACE_ID::int64 sourceragnestarttime_;
  ::PROTOBUF_NAMESPACE_ID::int64 sourceragneduration_;
  friend struct ::TableStruct_kinemaster_5fproject_5fwire_2dlite_2eproto;
};
// -------------------------------------------------------------------

class KMProto_KMProject_EffectOptionItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:KMProto.KMProject.EffectOptionItem) */ {
 public:
  inline KMProto_KMProject_EffectOptionItem() : KMProto_KMProject_EffectOptionItem(nullptr) {}
  virtual ~KMProto_KMProject_EffectOptionItem();

  KMProto_KMProject_EffectOptionItem(const KMProto_KMProject_EffectOptionItem& from);
  KMProto_KMProject_EffectOptionItem(KMProto_KMProject_EffectOptionItem&& from) noexcept
    : KMProto_KMProject_EffectOptionItem() {
    *this = ::std::move(from);
  }

  inline KMProto_KMProject_EffectOptionItem& operator=(const KMProto_KMProject_EffectOptionItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline KMProto_KMProject_EffectOptionItem& operator=(KMProto_KMProject_EffectOptionItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const KMProto_KMProject_EffectOptionItem& default_instance();

  static inline const KMProto_KMProject_EffectOptionItem* internal_default_instance() {
    return reinterpret_cast<const KMProto_KMProject_EffectOptionItem*>(
               &_KMProto_KMProject_EffectOptionItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(KMProto_KMProject_EffectOptionItem& a, KMProto_KMProject_EffectOptionItem& b) {
    a.Swap(&b);
  }
  inline void Swap(KMProto_KMProject_EffectOptionItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KMProto_KMProject_EffectOptionItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KMProto_KMProject_EffectOptionItem* New() const final {
    return CreateMaybeMessage<KMProto_KMProject_EffectOptionItem>(nullptr);
  }

  KMProto_KMProject_EffectOptionItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KMProto_KMProject_EffectOptionItem>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const KMProto_KMProject_EffectOptionItem& from);
  void MergeFrom(const KMProto_KMProject_EffectOptionItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KMProto_KMProject_EffectOptionItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KMProto.KMProject.EffectOptionItem";
  }
  protected:
  explicit KMProto_KMProject_EffectOptionItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldNameFieldNumber = 2,
    kValueFieldNumber = 3,
    kTextFontFieldNumber = 4,
    kTypeFieldNumber = 1,
  };
  // optional string field_name = 2;
  bool has_field_name() const;
  private:
  bool _internal_has_field_name() const;
  public:
  void clear_field_name();
  const std::string& field_name() const;
  void set_field_name(const std::string& value);
  void set_field_name(std::string&& value);
  void set_field_name(const char* value);
  void set_field_name(const char* value, size_t size);
  std::string* mutable_field_name();
  std::string* release_field_name();
  void set_allocated_field_name(std::string* field_name);
  private:
  const std::string& _internal_field_name() const;
  void _internal_set_field_name(const std::string& value);
  std::string* _internal_mutable_field_name();
  public:

  // optional string value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // optional string text_font = 4;
  bool has_text_font() const;
  private:
  bool _internal_has_text_font() const;
  public:
  void clear_text_font();
  const std::string& text_font() const;
  void set_text_font(const std::string& value);
  void set_text_font(std::string&& value);
  void set_text_font(const char* value);
  void set_text_font(const char* value, size_t size);
  std::string* mutable_text_font();
  std::string* release_text_font();
  void set_allocated_text_font(std::string* text_font);
  private:
  const std::string& _internal_text_font() const;
  void _internal_set_text_font(const std::string& value);
  std::string* _internal_mutable_text_font();
  public:

  // optional .KMProto.KMProject.EffectOptionItemType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::KMProto_KMProject_EffectOptionItemType type() const;
  void set_type(::KMProto_KMProject_EffectOptionItemType value);
  private:
  ::KMProto_KMProject_EffectOptionItemType _internal_type() const;
  void _internal_set_type(::KMProto_KMProject_EffectOptionItemType value);
  public:

  // @@protoc_insertion_point(class_scope:KMProto.KMProject.EffectOptionItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_font_;
  int type_;
  friend struct ::TableStruct_kinemaster_5fproject_5fwire_2dlite_2eproto;
};
// -------------------------------------------------------------------

class KMProto_KMProject_StringHashMap PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:KMProto.KMProject.StringHashMap) */ {
 public:
  inline KMProto_KMProject_StringHashMap() : KMProto_KMProject_StringHashMap(nullptr) {}
  virtual ~KMProto_KMProject_StringHashMap();

  KMProto_KMProject_StringHashMap(const KMProto_KMProject_StringHashMap& from);
  KMProto_KMProject_StringHashMap(KMProto_KMProject_StringHashMap&& from) noexcept
    : KMProto_KMProject_StringHashMap() {
    *this = ::std::move(from);
  }

  inline KMProto_KMProject_StringHashMap& operator=(const KMProto_KMProject_StringHashMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline KMProto_KMProject_StringHashMap& operator=(KMProto_KMProject_StringHashMap&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const KMProto_KMProject_StringHashMap& default_instance();

  static inline const KMProto_KMProject_StringHashMap* internal_default_instance() {
    return reinterpret_cast<const KMProto_KMProject_StringHashMap*>(
               &_KMProto_KMProject_StringHashMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(KMProto_KMProject_StringHashMap& a, KMProto_KMProject_StringHashMap& b) {
    a.Swap(&b);
  }
  inline void Swap(KMProto_KMProject_StringHashMap* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KMProto_KMProject_StringHashMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KMProto_KMProject_StringHashMap* New() const final {
    return CreateMaybeMessage<KMProto_KMProject_StringHashMap>(nullptr);
  }

  KMProto_KMProject_StringHashMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KMProto_KMProject_StringHashMap>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const KMProto_KMProject_StringHashMap& from);
  void MergeFrom(const KMProto_KMProject_StringHashMap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KMProto_KMProject_StringHashMap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KMProto.KMProject.StringHashMap";
  }
  protected:
  explicit KMProto_KMProject_StringHashMap(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
  };
  // repeated .KMProto.KMProject.StringHashMapEntry entries = 1;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::KMProto_KMProject_StringHashMapEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_StringHashMapEntry >*
      mutable_entries();
  private:
  const ::KMProto_KMProject_StringHashMapEntry& _internal_entries(int index) const;
  ::KMProto_KMProject_StringHashMapEntry* _internal_add_entries();
  public:
  const ::KMProto_KMProject_StringHashMapEntry& entries(int index) const;
  ::KMProto_KMProject_StringHashMapEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_StringHashMapEntry >&
      entries() const;

  // @@protoc_insertion_point(class_scope:KMProto.KMProject.StringHashMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_StringHashMapEntry > entries_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kinemaster_5fproject_5fwire_2dlite_2eproto;
};
// -------------------------------------------------------------------

class KMProto_KMProject_StringHashMapEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:KMProto.KMProject.StringHashMapEntry) */ {
 public:
  inline KMProto_KMProject_StringHashMapEntry() : KMProto_KMProject_StringHashMapEntry(nullptr) {}
  virtual ~KMProto_KMProject_StringHashMapEntry();

  KMProto_KMProject_StringHashMapEntry(const KMProto_KMProject_StringHashMapEntry& from);
  KMProto_KMProject_StringHashMapEntry(KMProto_KMProject_StringHashMapEntry&& from) noexcept
    : KMProto_KMProject_StringHashMapEntry() {
    *this = ::std::move(from);
  }

  inline KMProto_KMProject_StringHashMapEntry& operator=(const KMProto_KMProject_StringHashMapEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline KMProto_KMProject_StringHashMapEntry& operator=(KMProto_KMProject_StringHashMapEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const KMProto_KMProject_StringHashMapEntry& default_instance();

  static inline const KMProto_KMProject_StringHashMapEntry* internal_default_instance() {
    return reinterpret_cast<const KMProto_KMProject_StringHashMapEntry*>(
               &_KMProto_KMProject_StringHashMapEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(KMProto_KMProject_StringHashMapEntry& a, KMProto_KMProject_StringHashMapEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(KMProto_KMProject_StringHashMapEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KMProto_KMProject_StringHashMapEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KMProto_KMProject_StringHashMapEntry* New() const final {
    return CreateMaybeMessage<KMProto_KMProject_StringHashMapEntry>(nullptr);
  }

  KMProto_KMProject_StringHashMapEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KMProto_KMProject_StringHashMapEntry>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const KMProto_KMProject_StringHashMapEntry& from);
  void MergeFrom(const KMProto_KMProject_StringHashMapEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KMProto_KMProject_StringHashMapEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KMProto.KMProject.StringHashMapEntry";
  }
  protected:
  explicit KMProto_KMProject_StringHashMapEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:KMProto.KMProject.StringHashMapEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_kinemaster_5fproject_5fwire_2dlite_2eproto;
};
// -------------------------------------------------------------------

class KMProto_KMProject_Matrix PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:KMProto.KMProject.Matrix) */ {
 public:
  inline KMProto_KMProject_Matrix() : KMProto_KMProject_Matrix(nullptr) {}
  virtual ~KMProto_KMProject_Matrix();

  KMProto_KMProject_Matrix(const KMProto_KMProject_Matrix& from);
  KMProto_KMProject_Matrix(KMProto_KMProject_Matrix&& from) noexcept
    : KMProto_KMProject_Matrix() {
    *this = ::std::move(from);
  }

  inline KMProto_KMProject_Matrix& operator=(const KMProto_KMProject_Matrix& from) {
    CopyFrom(from);
    return *this;
  }
  inline KMProto_KMProject_Matrix& operator=(KMProto_KMProject_Matrix&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const KMProto_KMProject_Matrix& default_instance();

  static inline const KMProto_KMProject_Matrix* internal_default_instance() {
    return reinterpret_cast<const KMProto_KMProject_Matrix*>(
               &_KMProto_KMProject_Matrix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(KMProto_KMProject_Matrix& a, KMProto_KMProject_Matrix& b) {
    a.Swap(&b);
  }
  inline void Swap(KMProto_KMProject_Matrix* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KMProto_KMProject_Matrix* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KMProto_KMProject_Matrix* New() const final {
    return CreateMaybeMessage<KMProto_KMProject_Matrix>(nullptr);
  }

  KMProto_KMProject_Matrix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KMProto_KMProject_Matrix>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const KMProto_KMProject_Matrix& from);
  void MergeFrom(const KMProto_KMProject_Matrix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KMProto_KMProject_Matrix* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KMProto.KMProject.Matrix";
  }
  protected:
  explicit KMProto_KMProject_Matrix(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementFieldNumber = 1,
  };
  // repeated float element = 1 [packed = true];
  int element_size() const;
  private:
  int _internal_element_size() const;
  public:
  void clear_element();
  private:
  float _internal_element(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_element() const;
  void _internal_add_element(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_element();
  public:
  float element(int index) const;
  void set_element(int index, float value);
  void add_element(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      element() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_element();

  // @@protoc_insertion_point(class_scope:KMProto.KMProject.Matrix)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > element_;
  mutable std::atomic<int> _element_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kinemaster_5fproject_5fwire_2dlite_2eproto;
};
// -------------------------------------------------------------------

class KMProto_KMProject_Transition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:KMProto.KMProject.Transition) */ {
 public:
  inline KMProto_KMProject_Transition() : KMProto_KMProject_Transition(nullptr) {}
  virtual ~KMProto_KMProject_Transition();

  KMProto_KMProject_Transition(const KMProto_KMProject_Transition& from);
  KMProto_KMProject_Transition(KMProto_KMProject_Transition&& from) noexcept
    : KMProto_KMProject_Transition() {
    *this = ::std::move(from);
  }

  inline KMProto_KMProject_Transition& operator=(const KMProto_KMProject_Transition& from) {
    CopyFrom(from);
    return *this;
  }
  inline KMProto_KMProject_Transition& operator=(KMProto_KMProject_Transition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const KMProto_KMProject_Transition& default_instance();

  static inline const KMProto_KMProject_Transition* internal_default_instance() {
    return reinterpret_cast<const KMProto_KMProject_Transition*>(
               &_KMProto_KMProject_Transition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(KMProto_KMProject_Transition& a, KMProto_KMProject_Transition& b) {
    a.Swap(&b);
  }
  inline void Swap(KMProto_KMProject_Transition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KMProto_KMProject_Transition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KMProto_KMProject_Transition* New() const final {
    return CreateMaybeMessage<KMProto_KMProject_Transition>(nullptr);
  }

  KMProto_KMProject_Transition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KMProto_KMProject_Transition>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const KMProto_KMProject_Transition& from);
  void MergeFrom(const KMProto_KMProject_Transition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KMProto_KMProject_Transition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KMProto.KMProject.Transition";
  }
  protected:
  explicit KMProto_KMProject_Transition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEffectOptionFieldNumber = 113,
    kCaptureFilenameFieldNumber = 100,
    kTransitionEffectIdFieldNumber = 101,
    kEffectOptionsFieldNumber = 110,
    kTransitionDurationFieldNumber = 103,
    kTransitionEngineDurationFieldNumber = 104,
    kTransitionOverlapPercentFieldNumber = 105,
    kTransitionOffsetPercentFieldNumber = 106,
    kMinimumDurationFieldNumber = 108,
    kMaximumDurationFieldNumber = 109,
    kDisabledFieldNumber = 107,
    kAllowOverlapFieldNumber = 112,
    kDurationLimitFieldNumber = 111,
    kAutoThemeEffectFieldNumber = 102,
  };
  // repeated .KMProto.KMProject.EffectOptionItem effectOption = 113;
  int effectoption_size() const;
  private:
  int _internal_effectoption_size() const;
  public:
  void clear_effectoption();
  ::KMProto_KMProject_EffectOptionItem* mutable_effectoption(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_EffectOptionItem >*
      mutable_effectoption();
  private:
  const ::KMProto_KMProject_EffectOptionItem& _internal_effectoption(int index) const;
  ::KMProto_KMProject_EffectOptionItem* _internal_add_effectoption();
  public:
  const ::KMProto_KMProject_EffectOptionItem& effectoption(int index) const;
  ::KMProto_KMProject_EffectOptionItem* add_effectoption();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_EffectOptionItem >&
      effectoption() const;

  // optional string captureFilename = 100;
  bool has_capturefilename() const;
  private:
  bool _internal_has_capturefilename() const;
  public:
  void clear_capturefilename();
  const std::string& capturefilename() const;
  void set_capturefilename(const std::string& value);
  void set_capturefilename(std::string&& value);
  void set_capturefilename(const char* value);
  void set_capturefilename(const char* value, size_t size);
  std::string* mutable_capturefilename();
  std::string* release_capturefilename();
  void set_allocated_capturefilename(std::string* capturefilename);
  private:
  const std::string& _internal_capturefilename() const;
  void _internal_set_capturefilename(const std::string& value);
  std::string* _internal_mutable_capturefilename();
  public:

  // optional string transition_effect_id = 101;
  bool has_transition_effect_id() const;
  private:
  bool _internal_has_transition_effect_id() const;
  public:
  void clear_transition_effect_id();
  const std::string& transition_effect_id() const;
  void set_transition_effect_id(const std::string& value);
  void set_transition_effect_id(std::string&& value);
  void set_transition_effect_id(const char* value);
  void set_transition_effect_id(const char* value, size_t size);
  std::string* mutable_transition_effect_id();
  std::string* release_transition_effect_id();
  void set_allocated_transition_effect_id(std::string* transition_effect_id);
  private:
  const std::string& _internal_transition_effect_id() const;
  void _internal_set_transition_effect_id(const std::string& value);
  std::string* _internal_mutable_transition_effect_id();
  public:

  // optional .KMProto.KMProject.StringHashMap effect_options = 110;
  bool has_effect_options() const;
  private:
  bool _internal_has_effect_options() const;
  public:
  void clear_effect_options();
  const ::KMProto_KMProject_StringHashMap& effect_options() const;
  ::KMProto_KMProject_StringHashMap* release_effect_options();
  ::KMProto_KMProject_StringHashMap* mutable_effect_options();
  void set_allocated_effect_options(::KMProto_KMProject_StringHashMap* effect_options);
  private:
  const ::KMProto_KMProject_StringHashMap& _internal_effect_options() const;
  ::KMProto_KMProject_StringHashMap* _internal_mutable_effect_options();
  public:
  void unsafe_arena_set_allocated_effect_options(
      ::KMProto_KMProject_StringHashMap* effect_options);
  ::KMProto_KMProject_StringHashMap* unsafe_arena_release_effect_options();

  // optional int32 transition_duration = 103;
  bool has_transition_duration() const;
  private:
  bool _internal_has_transition_duration() const;
  public:
  void clear_transition_duration();
  ::PROTOBUF_NAMESPACE_ID::int32 transition_duration() const;
  void set_transition_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_transition_duration() const;
  void _internal_set_transition_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 transition_engine_duration = 104;
  bool has_transition_engine_duration() const;
  private:
  bool _internal_has_transition_engine_duration() const;
  public:
  void clear_transition_engine_duration();
  ::PROTOBUF_NAMESPACE_ID::int32 transition_engine_duration() const;
  void set_transition_engine_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_transition_engine_duration() const;
  void _internal_set_transition_engine_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 transition_overlap_percent = 105;
  bool has_transition_overlap_percent() const;
  private:
  bool _internal_has_transition_overlap_percent() const;
  public:
  void clear_transition_overlap_percent();
  ::PROTOBUF_NAMESPACE_ID::int32 transition_overlap_percent() const;
  void set_transition_overlap_percent(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_transition_overlap_percent() const;
  void _internal_set_transition_overlap_percent(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 transition_offset_percent = 106;
  bool has_transition_offset_percent() const;
  private:
  bool _internal_has_transition_offset_percent() const;
  public:
  void clear_transition_offset_percent();
  ::PROTOBUF_NAMESPACE_ID::int32 transition_offset_percent() const;
  void set_transition_offset_percent(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_transition_offset_percent() const;
  void _internal_set_transition_offset_percent(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 minimum_duration = 108;
  bool has_minimum_duration() const;
  private:
  bool _internal_has_minimum_duration() const;
  public:
  void clear_minimum_duration();
  ::PROTOBUF_NAMESPACE_ID::int32 minimum_duration() const;
  void set_minimum_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_minimum_duration() const;
  void _internal_set_minimum_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 maximum_duration = 109;
  bool has_maximum_duration() const;
  private:
  bool _internal_has_maximum_duration() const;
  public:
  void clear_maximum_duration();
  ::PROTOBUF_NAMESPACE_ID::int32 maximum_duration() const;
  void set_maximum_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maximum_duration() const;
  void _internal_set_maximum_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool disabled = 107;
  bool has_disabled() const;
  private:
  bool _internal_has_disabled() const;
  public:
  void clear_disabled();
  bool disabled() const;
  void set_disabled(bool value);
  private:
  bool _internal_disabled() const;
  void _internal_set_disabled(bool value);
  public:

  // optional bool allow_overlap = 112;
  bool has_allow_overlap() const;
  private:
  bool _internal_has_allow_overlap() const;
  public:
  void clear_allow_overlap();
  bool allow_overlap() const;
  void set_allow_overlap(bool value);
  private:
  bool _internal_allow_overlap() const;
  void _internal_set_allow_overlap(bool value);
  public:

  // optional int32 duration_limit = 111;
  bool has_duration_limit() const;
  private:
  bool _internal_has_duration_limit() const;
  public:
  void clear_duration_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 duration_limit() const;
  void set_duration_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_duration_limit() const;
  void _internal_set_duration_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .KMProto.KMProject.ThemeEffectType auto_theme_effect = 102;
  bool has_auto_theme_effect() const;
  private:
  bool _internal_has_auto_theme_effect() const;
  public:
  void clear_auto_theme_effect();
  ::KMProto_KMProject_ThemeEffectType auto_theme_effect() const;
  void set_auto_theme_effect(::KMProto_KMProject_ThemeEffectType value);
  private:
  ::KMProto_KMProject_ThemeEffectType _internal_auto_theme_effect() const;
  void _internal_set_auto_theme_effect(::KMProto_KMProject_ThemeEffectType value);
  public:

  // @@protoc_insertion_point(class_scope:KMProto.KMProject.Transition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_EffectOptionItem > effectoption_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr capturefilename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transition_effect_id_;
  ::KMProto_KMProject_StringHashMap* effect_options_;
  ::PROTOBUF_NAMESPACE_ID::int32 transition_duration_;
  ::PROTOBUF_NAMESPACE_ID::int32 transition_engine_duration_;
  ::PROTOBUF_NAMESPACE_ID::int32 transition_overlap_percent_;
  ::PROTOBUF_NAMESPACE_ID::int32 transition_offset_percent_;
  ::PROTOBUF_NAMESPACE_ID::int32 minimum_duration_;
  ::PROTOBUF_NAMESPACE_ID::int32 maximum_duration_;
  bool disabled_;
  bool allow_overlap_;
  ::PROTOBUF_NAMESPACE_ID::int32 duration_limit_;
  int auto_theme_effect_;
  friend struct ::TableStruct_kinemaster_5fproject_5fwire_2dlite_2eproto;
};
// -------------------------------------------------------------------

class KMProto_KMProject_AudioClip PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:KMProto.KMProject.AudioClip) */ {
 public:
  inline KMProto_KMProject_AudioClip() : KMProto_KMProject_AudioClip(nullptr) {}
  virtual ~KMProto_KMProject_AudioClip();

  KMProto_KMProject_AudioClip(const KMProto_KMProject_AudioClip& from);
  KMProto_KMProject_AudioClip(KMProto_KMProject_AudioClip&& from) noexcept
    : KMProto_KMProject_AudioClip() {
    *this = ::std::move(from);
  }

  inline KMProto_KMProject_AudioClip& operator=(const KMProto_KMProject_AudioClip& from) {
    CopyFrom(from);
    return *this;
  }
  inline KMProto_KMProject_AudioClip& operator=(KMProto_KMProject_AudioClip&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const KMProto_KMProject_AudioClip& default_instance();

  static inline const KMProto_KMProject_AudioClip* internal_default_instance() {
    return reinterpret_cast<const KMProto_KMProject_AudioClip*>(
               &_KMProto_KMProject_AudioClip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(KMProto_KMProject_AudioClip& a, KMProto_KMProject_AudioClip& b) {
    a.Swap(&b);
  }
  inline void Swap(KMProto_KMProject_AudioClip* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KMProto_KMProject_AudioClip* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KMProto_KMProject_AudioClip* New() const final {
    return CreateMaybeMessage<KMProto_KMProject_AudioClip>(nullptr);
  }

  KMProto_KMProject_AudioClip* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KMProto_KMProject_AudioClip>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const KMProto_KMProject_AudioClip& from);
  void MergeFrom(const KMProto_KMProject_AudioClip& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KMProto_KMProject_AudioClip* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KMProto.KMProject.AudioClip";
  }
  protected:
  explicit KMProto_KMProject_AudioClip(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVolumeEnvelopeTimeFieldNumber = 123,
    kVolumeEnvelopeLevelFieldNumber = 124,
    kMediaPathFieldNumber = 112,
    kOriginalMediaPathFieldNumber = 113,
    kMediaTitleFieldNumber = 114,
    kClipNameFieldNumber = 134,
    kAudioAssetIdIosFieldNumber = 135,
    kEnhancedAudioFilterFieldNumber = 136,
    kEqualizerFieldNumber = 137,
    kReverbFieldNumber = 138,
    kPitchFactorFieldNumber = 133,
    kExtraRelativeStartTimeFieldNumber = 100,
    kRelativeStartTimeFieldNumber = 101,
    kRelativeEndTimeFieldNumber = 102,
    kSavedRelativeEndTimeFieldNumber = 103,
    kSavedRelativeStartTimeFieldNumber = 104,
    kEngineClipIdFieldNumber = 105,
    kDurationFieldNumber = 106,
    kTrimTimeStartFieldNumber = 107,
    kTrimTimeEndFieldNumber = 108,
    kSavedTrimTimeStartFieldNumber = 109,
    kSavedTrimTimeEndFieldNumber = 110,
    kClipVolumeFieldNumber = 111,
    kVideoClipItemUuidLsbFieldNumber = 120,
    kMuteAudioFieldNumber = 115,
    kLoopFieldNumber = 116,
    kIsVoiceRecordingFieldNumber = 117,
    kIsPendingVoiceRecordingFieldNumber = 118,
    kIsExtractAudioFieldNumber = 119,
    kIsBgMusicFieldNumber = 122,
    kPinnedFieldNumber = 126,
    kExtendToEndFieldNumber = 128,
    kVideoClipItemUuidMsbFieldNumber = 121,
    kClipWidthFieldNumber = 125,
    kSavedLoopDurationFieldNumber = 127,
    kVoiceChangerFieldNumber = 129,
    kPanLeftFieldNumber = 130,
    kPanRightFieldNumber = 131,
    kCompressorFieldNumber = 132,
  };
  // repeated int32 volume_envelope_time = 123 [packed = true];
  int volume_envelope_time_size() const;
  private:
  int _internal_volume_envelope_time_size() const;
  public:
  void clear_volume_envelope_time();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_volume_envelope_time(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_volume_envelope_time() const;
  void _internal_add_volume_envelope_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_volume_envelope_time();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 volume_envelope_time(int index) const;
  void set_volume_envelope_time(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_volume_envelope_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      volume_envelope_time() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_volume_envelope_time();

  // repeated int32 volume_envelope_level = 124 [packed = true];
  int volume_envelope_level_size() const;
  private:
  int _internal_volume_envelope_level_size() const;
  public:
  void clear_volume_envelope_level();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_volume_envelope_level(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_volume_envelope_level() const;
  void _internal_add_volume_envelope_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_volume_envelope_level();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 volume_envelope_level(int index) const;
  void set_volume_envelope_level(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_volume_envelope_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      volume_envelope_level() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_volume_envelope_level();

  // optional string media_path = 112;
  bool has_media_path() const;
  private:
  bool _internal_has_media_path() const;
  public:
  void clear_media_path();
  const std::string& media_path() const;
  void set_media_path(const std::string& value);
  void set_media_path(std::string&& value);
  void set_media_path(const char* value);
  void set_media_path(const char* value, size_t size);
  std::string* mutable_media_path();
  std::string* release_media_path();
  void set_allocated_media_path(std::string* media_path);
  private:
  const std::string& _internal_media_path() const;
  void _internal_set_media_path(const std::string& value);
  std::string* _internal_mutable_media_path();
  public:

  // optional string original_media_path = 113;
  bool has_original_media_path() const;
  private:
  bool _internal_has_original_media_path() const;
  public:
  void clear_original_media_path();
  const std::string& original_media_path() const;
  void set_original_media_path(const std::string& value);
  void set_original_media_path(std::string&& value);
  void set_original_media_path(const char* value);
  void set_original_media_path(const char* value, size_t size);
  std::string* mutable_original_media_path();
  std::string* release_original_media_path();
  void set_allocated_original_media_path(std::string* original_media_path);
  private:
  const std::string& _internal_original_media_path() const;
  void _internal_set_original_media_path(const std::string& value);
  std::string* _internal_mutable_original_media_path();
  public:

  // optional string media_title = 114;
  bool has_media_title() const;
  private:
  bool _internal_has_media_title() const;
  public:
  void clear_media_title();
  const std::string& media_title() const;
  void set_media_title(const std::string& value);
  void set_media_title(std::string&& value);
  void set_media_title(const char* value);
  void set_media_title(const char* value, size_t size);
  std::string* mutable_media_title();
  std::string* release_media_title();
  void set_allocated_media_title(std::string* media_title);
  private:
  const std::string& _internal_media_title() const;
  void _internal_set_media_title(const std::string& value);
  std::string* _internal_mutable_media_title();
  public:

  // optional string clip_name = 134;
  bool has_clip_name() const;
  private:
  bool _internal_has_clip_name() const;
  public:
  void clear_clip_name();
  const std::string& clip_name() const;
  void set_clip_name(const std::string& value);
  void set_clip_name(std::string&& value);
  void set_clip_name(const char* value);
  void set_clip_name(const char* value, size_t size);
  std::string* mutable_clip_name();
  std::string* release_clip_name();
  void set_allocated_clip_name(std::string* clip_name);
  private:
  const std::string& _internal_clip_name() const;
  void _internal_set_clip_name(const std::string& value);
  std::string* _internal_mutable_clip_name();
  public:

  // optional string audio_asset_id_ios = 135;
  bool has_audio_asset_id_ios() const;
  private:
  bool _internal_has_audio_asset_id_ios() const;
  public:
  void clear_audio_asset_id_ios();
  const std::string& audio_asset_id_ios() const;
  void set_audio_asset_id_ios(const std::string& value);
  void set_audio_asset_id_ios(std::string&& value);
  void set_audio_asset_id_ios(const char* value);
  void set_audio_asset_id_ios(const char* value, size_t size);
  std::string* mutable_audio_asset_id_ios();
  std::string* release_audio_asset_id_ios();
  void set_allocated_audio_asset_id_ios(std::string* audio_asset_id_ios);
  private:
  const std::string& _internal_audio_asset_id_ios() const;
  void _internal_set_audio_asset_id_ios(const std::string& value);
  std::string* _internal_mutable_audio_asset_id_ios();
  public:

  // optional string enhancedAudioFilter = 136;
  bool has_enhancedaudiofilter() const;
  private:
  bool _internal_has_enhancedaudiofilter() const;
  public:
  void clear_enhancedaudiofilter();
  const std::string& enhancedaudiofilter() const;
  void set_enhancedaudiofilter(const std::string& value);
  void set_enhancedaudiofilter(std::string&& value);
  void set_enhancedaudiofilter(const char* value);
  void set_enhancedaudiofilter(const char* value, size_t size);
  std::string* mutable_enhancedaudiofilter();
  std::string* release_enhancedaudiofilter();
  void set_allocated_enhancedaudiofilter(std::string* enhancedaudiofilter);
  private:
  const std::string& _internal_enhancedaudiofilter() const;
  void _internal_set_enhancedaudiofilter(const std::string& value);
  std::string* _internal_mutable_enhancedaudiofilter();
  public:

  // optional string equalizer = 137;
  bool has_equalizer() const;
  private:
  bool _internal_has_equalizer() const;
  public:
  void clear_equalizer();
  const std::string& equalizer() const;
  void set_equalizer(const std::string& value);
  void set_equalizer(std::string&& value);
  void set_equalizer(const char* value);
  void set_equalizer(const char* value, size_t size);
  std::string* mutable_equalizer();
  std::string* release_equalizer();
  void set_allocated_equalizer(std::string* equalizer);
  private:
  const std::string& _internal_equalizer() const;
  void _internal_set_equalizer(const std::string& value);
  std::string* _internal_mutable_equalizer();
  public:

  // optional string reverb = 138;
  bool has_reverb() const;
  private:
  bool _internal_has_reverb() const;
  public:
  void clear_reverb();
  const std::string& reverb() const;
  void set_reverb(const std::string& value);
  void set_reverb(std::string&& value);
  void set_reverb(const char* value);
  void set_reverb(const char* value, size_t size);
  std::string* mutable_reverb();
  std::string* release_reverb();
  void set_allocated_reverb(std::string* reverb);
  private:
  const std::string& _internal_reverb() const;
  void _internal_set_reverb(const std::string& value);
  std::string* _internal_mutable_reverb();
  public:

  // optional int32 pitch_factor = 133;
  bool has_pitch_factor() const;
  private:
  bool _internal_has_pitch_factor() const;
  public:
  void clear_pitch_factor();
  ::PROTOBUF_NAMESPACE_ID::int32 pitch_factor() const;
  void set_pitch_factor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pitch_factor() const;
  void _internal_set_pitch_factor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 extra_relative_start_time = 100;
  bool has_extra_relative_start_time() const;
  private:
  bool _internal_has_extra_relative_start_time() const;
  public:
  void clear_extra_relative_start_time();
  ::PROTOBUF_NAMESPACE_ID::int32 extra_relative_start_time() const;
  void set_extra_relative_start_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_extra_relative_start_time() const;
  void _internal_set_extra_relative_start_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 relative_start_time = 101;
  bool has_relative_start_time() const;
  private:
  bool _internal_has_relative_start_time() const;
  public:
  void clear_relative_start_time();
  ::PROTOBUF_NAMESPACE_ID::int32 relative_start_time() const;
  void set_relative_start_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_relative_start_time() const;
  void _internal_set_relative_start_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 relative_end_time = 102;
  bool has_relative_end_time() const;
  private:
  bool _internal_has_relative_end_time() const;
  public:
  void clear_relative_end_time();
  ::PROTOBUF_NAMESPACE_ID::int32 relative_end_time() const;
  void set_relative_end_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_relative_end_time() const;
  void _internal_set_relative_end_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 saved_relative_end_time = 103;
  bool has_saved_relative_end_time() const;
  private:
  bool _internal_has_saved_relative_end_time() const;
  public:
  void clear_saved_relative_end_time();
  ::PROTOBUF_NAMESPACE_ID::int32 saved_relative_end_time() const;
  void set_saved_relative_end_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_saved_relative_end_time() const;
  void _internal_set_saved_relative_end_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 saved_relative_start_time = 104;
  bool has_saved_relative_start_time() const;
  private:
  bool _internal_has_saved_relative_start_time() const;
  public:
  void clear_saved_relative_start_time();
  ::PROTOBUF_NAMESPACE_ID::int32 saved_relative_start_time() const;
  void set_saved_relative_start_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_saved_relative_start_time() const;
  void _internal_set_saved_relative_start_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 engine_clip_id = 105;
  bool has_engine_clip_id() const;
  private:
  bool _internal_has_engine_clip_id() const;
  public:
  void clear_engine_clip_id();
  ::PROTOBUF_NAMESPACE_ID::int32 engine_clip_id() const;
  void set_engine_clip_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_engine_clip_id() const;
  void _internal_set_engine_clip_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 duration = 106;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::int32 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 trim_time_start = 107;
  bool has_trim_time_start() const;
  private:
  bool _internal_has_trim_time_start() const;
  public:
  void clear_trim_time_start();
  ::PROTOBUF_NAMESPACE_ID::int32 trim_time_start() const;
  void set_trim_time_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_trim_time_start() const;
  void _internal_set_trim_time_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 trim_time_end = 108;
  bool has_trim_time_end() const;
  private:
  bool _internal_has_trim_time_end() const;
  public:
  void clear_trim_time_end();
  ::PROTOBUF_NAMESPACE_ID::int32 trim_time_end() const;
  void set_trim_time_end(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_trim_time_end() const;
  void _internal_set_trim_time_end(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 saved_trim_time_start = 109;
  bool has_saved_trim_time_start() const;
  private:
  bool _internal_has_saved_trim_time_start() const;
  public:
  void clear_saved_trim_time_start();
  ::PROTOBUF_NAMESPACE_ID::int32 saved_trim_time_start() const;
  void set_saved_trim_time_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_saved_trim_time_start() const;
  void _internal_set_saved_trim_time_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 saved_trim_time_end = 110;
  bool has_saved_trim_time_end() const;
  private:
  bool _internal_has_saved_trim_time_end() const;
  public:
  void clear_saved_trim_time_end();
  ::PROTOBUF_NAMESPACE_ID::int32 saved_trim_time_end() const;
  void set_saved_trim_time_end(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_saved_trim_time_end() const;
  void _internal_set_saved_trim_time_end(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 clip_volume = 111;
  bool has_clip_volume() const;
  private:
  bool _internal_has_clip_volume() const;
  public:
  void clear_clip_volume();
  ::PROTOBUF_NAMESPACE_ID::int32 clip_volume() const;
  void set_clip_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_clip_volume() const;
  void _internal_set_clip_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint64 video_clip_item_uuid_lsb = 120;
  bool has_video_clip_item_uuid_lsb() const;
  private:
  bool _internal_has_video_clip_item_uuid_lsb() const;
  public:
  void clear_video_clip_item_uuid_lsb();
  ::PROTOBUF_NAMESPACE_ID::uint64 video_clip_item_uuid_lsb() const;
  void set_video_clip_item_uuid_lsb(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_video_clip_item_uuid_lsb() const;
  void _internal_set_video_clip_item_uuid_lsb(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool mute_audio = 115;
  bool has_mute_audio() const;
  private:
  bool _internal_has_mute_audio() const;
  public:
  void clear_mute_audio();
  bool mute_audio() const;
  void set_mute_audio(bool value);
  private:
  bool _internal_mute_audio() const;
  void _internal_set_mute_audio(bool value);
  public:

  // optional bool loop = 116;
  bool has_loop() const;
  private:
  bool _internal_has_loop() const;
  public:
  void clear_loop();
  bool loop() const;
  void set_loop(bool value);
  private:
  bool _internal_loop() const;
  void _internal_set_loop(bool value);
  public:

  // optional bool is_voice_recording = 117;
  bool has_is_voice_recording() const;
  private:
  bool _internal_has_is_voice_recording() const;
  public:
  void clear_is_voice_recording();
  bool is_voice_recording() const;
  void set_is_voice_recording(bool value);
  private:
  bool _internal_is_voice_recording() const;
  void _internal_set_is_voice_recording(bool value);
  public:

  // optional bool is_pending_voice_recording = 118;
  bool has_is_pending_voice_recording() const;
  private:
  bool _internal_has_is_pending_voice_recording() const;
  public:
  void clear_is_pending_voice_recording();
  bool is_pending_voice_recording() const;
  void set_is_pending_voice_recording(bool value);
  private:
  bool _internal_is_pending_voice_recording() const;
  void _internal_set_is_pending_voice_recording(bool value);
  public:

  // optional bool is_extract_audio = 119;
  bool has_is_extract_audio() const;
  private:
  bool _internal_has_is_extract_audio() const;
  public:
  void clear_is_extract_audio();
  bool is_extract_audio() const;
  void set_is_extract_audio(bool value);
  private:
  bool _internal_is_extract_audio() const;
  void _internal_set_is_extract_audio(bool value);
  public:

  // optional bool is_bg_music = 122;
  bool has_is_bg_music() const;
  private:
  bool _internal_has_is_bg_music() const;
  public:
  void clear_is_bg_music();
  bool is_bg_music() const;
  void set_is_bg_music(bool value);
  private:
  bool _internal_is_bg_music() const;
  void _internal_set_is_bg_music(bool value);
  public:

  // optional bool pinned = 126;
  bool has_pinned() const;
  private:
  bool _internal_has_pinned() const;
  public:
  void clear_pinned();
  bool pinned() const;
  void set_pinned(bool value);
  private:
  bool _internal_pinned() const;
  void _internal_set_pinned(bool value);
  public:

  // optional bool extend_to_end = 128;
  bool has_extend_to_end() const;
  private:
  bool _internal_has_extend_to_end() const;
  public:
  void clear_extend_to_end();
  bool extend_to_end() const;
  void set_extend_to_end(bool value);
  private:
  bool _internal_extend_to_end() const;
  void _internal_set_extend_to_end(bool value);
  public:

  // optional uint64 video_clip_item_uuid_msb = 121;
  bool has_video_clip_item_uuid_msb() const;
  private:
  bool _internal_has_video_clip_item_uuid_msb() const;
  public:
  void clear_video_clip_item_uuid_msb();
  ::PROTOBUF_NAMESPACE_ID::uint64 video_clip_item_uuid_msb() const;
  void set_video_clip_item_uuid_msb(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_video_clip_item_uuid_msb() const;
  void _internal_set_video_clip_item_uuid_msb(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional float clip_width = 125;
  bool has_clip_width() const;
  private:
  bool _internal_has_clip_width() const;
  public:
  void clear_clip_width();
  float clip_width() const;
  void set_clip_width(float value);
  private:
  float _internal_clip_width() const;
  void _internal_set_clip_width(float value);
  public:

  // optional int32 saved_loop_duration = 127;
  bool has_saved_loop_duration() const;
  private:
  bool _internal_has_saved_loop_duration() const;
  public:
  void clear_saved_loop_duration();
  ::PROTOBUF_NAMESPACE_ID::int32 saved_loop_duration() const;
  void set_saved_loop_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_saved_loop_duration() const;
  void _internal_set_saved_loop_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 voice_changer = 129;
  bool has_voice_changer() const;
  private:
  bool _internal_has_voice_changer() const;
  public:
  void clear_voice_changer();
  ::PROTOBUF_NAMESPACE_ID::int32 voice_changer() const;
  void set_voice_changer(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_voice_changer() const;
  void _internal_set_voice_changer(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 pan_left = 130;
  bool has_pan_left() const;
  private:
  bool _internal_has_pan_left() const;
  public:
  void clear_pan_left();
  ::PROTOBUF_NAMESPACE_ID::int32 pan_left() const;
  void set_pan_left(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pan_left() const;
  void _internal_set_pan_left(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 pan_right = 131;
  bool has_pan_right() const;
  private:
  bool _internal_has_pan_right() const;
  public:
  void clear_pan_right();
  ::PROTOBUF_NAMESPACE_ID::int32 pan_right() const;
  void set_pan_right(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pan_right() const;
  void _internal_set_pan_right(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 compressor = 132;
  bool has_compressor() const;
  private:
  bool _internal_has_compressor() const;
  public:
  void clear_compressor();
  ::PROTOBUF_NAMESPACE_ID::int32 compressor() const;
  void set_compressor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_compressor() const;
  void _internal_set_compressor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KMProto.KMProject.AudioClip)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > volume_envelope_time_;
  mutable std::atomic<int> _volume_envelope_time_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > volume_envelope_level_;
  mutable std::atomic<int> _volume_envelope_level_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr media_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr original_media_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr media_title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clip_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_asset_id_ios_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enhancedaudiofilter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr equalizer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reverb_;
  ::PROTOBUF_NAMESPACE_ID::int32 pitch_factor_;
  ::PROTOBUF_NAMESPACE_ID::int32 extra_relative_start_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 relative_start_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 relative_end_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 saved_relative_end_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 saved_relative_start_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 engine_clip_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 duration_;
  ::PROTOBUF_NAMESPACE_ID::int32 trim_time_start_;
  ::PROTOBUF_NAMESPACE_ID::int32 trim_time_end_;
  ::PROTOBUF_NAMESPACE_ID::int32 saved_trim_time_start_;
  ::PROTOBUF_NAMESPACE_ID::int32 saved_trim_time_end_;
  ::PROTOBUF_NAMESPACE_ID::int32 clip_volume_;
  ::PROTOBUF_NAMESPACE_ID::uint64 video_clip_item_uuid_lsb_;
  bool mute_audio_;
  bool loop_;
  bool is_voice_recording_;
  bool is_pending_voice_recording_;
  bool is_extract_audio_;
  bool is_bg_music_;
  bool pinned_;
  bool extend_to_end_;
  ::PROTOBUF_NAMESPACE_ID::uint64 video_clip_item_uuid_msb_;
  float clip_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 saved_loop_duration_;
  ::PROTOBUF_NAMESPACE_ID::int32 voice_changer_;
  ::PROTOBUF_NAMESPACE_ID::int32 pan_left_;
  ::PROTOBUF_NAMESPACE_ID::int32 pan_right_;
  ::PROTOBUF_NAMESPACE_ID::int32 compressor_;
  friend struct ::TableStruct_kinemaster_5fproject_5fwire_2dlite_2eproto;
};
// -------------------------------------------------------------------

class KMProto_KMProject_LayerCommon PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:KMProto.KMProject.LayerCommon) */ {
 public:
  inline KMProto_KMProject_LayerCommon() : KMProto_KMProject_LayerCommon(nullptr) {}
  virtual ~KMProto_KMProject_LayerCommon();

  KMProto_KMProject_LayerCommon(const KMProto_KMProject_LayerCommon& from);
  KMProto_KMProject_LayerCommon(KMProto_KMProject_LayerCommon&& from) noexcept
    : KMProto_KMProject_LayerCommon() {
    *this = ::std::move(from);
  }

  inline KMProto_KMProject_LayerCommon& operator=(const KMProto_KMProject_LayerCommon& from) {
    CopyFrom(from);
    return *this;
  }
  inline KMProto_KMProject_LayerCommon& operator=(KMProto_KMProject_LayerCommon&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const KMProto_KMProject_LayerCommon& default_instance();

  static inline const KMProto_KMProject_LayerCommon* internal_default_instance() {
    return reinterpret_cast<const KMProto_KMProject_LayerCommon*>(
               &_KMProto_KMProject_LayerCommon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(KMProto_KMProject_LayerCommon& a, KMProto_KMProject_LayerCommon& b) {
    a.Swap(&b);
  }
  inline void Swap(KMProto_KMProject_LayerCommon* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KMProto_KMProject_LayerCommon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KMProto_KMProject_LayerCommon* New() const final {
    return CreateMaybeMessage<KMProto_KMProject_LayerCommon>(nullptr);
  }

  KMProto_KMProject_LayerCommon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KMProto_KMProject_LayerCommon>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const KMProto_KMProject_LayerCommon& from);
  void MergeFrom(const KMProto_KMProject_LayerCommon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KMProto_KMProject_LayerCommon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KMProto.KMProject.LayerCommon";
  }
  protected:
  explicit KMProto_KMProject_LayerCommon(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyframesFieldNumber = 108,
    kLayerNameFieldNumber = 127,
    kSplitKeyframeFieldNumber = 115,
    kRenderSizeScaleYFieldNumber = 138,
    kStartTimeFieldNumber = 100,
    kEndTimeFieldNumber = 101,
    kStartTrimFieldNumber = 103,
    kEndTrimFieldNumber = 104,
    kZOrderFieldNumber = 105,
    kLayerExpressionFieldNumber = 106,
    kLayerExpressionDurationFieldNumber = 107,
    kLayerInExpressionFieldNumber = 109,
    kLayerInExpressionDurationFieldNumber = 110,
    kLayerOutExpressionFieldNumber = 111,
    kLayerOutExpressionDurationFieldNumber = 112,
    kLayerOverallExpressionFieldNumber = 113,
    kLayerOverallExpressionSpeedFieldNumber = 114,
    kSplitScreenTypeFieldNumber = 116,
    kSplitSizeLeftFieldNumber = 117,
    kPinnedFieldNumber = 102,
    kFlipHFieldNumber = 122,
    kFlipVFieldNumber = 123,
    kLayermaskEnabledFieldNumber = 124,
    kSplitSizeRightFieldNumber = 118,
    kSplitSizeTopFieldNumber = 119,
    kSplitSizeBottomFieldNumber = 120,
    kOverallAlphaFieldNumber = 121,
    kLayermaskTypeFieldNumber = 125,
    kLayermaskIndexFieldNumber = 126,
    kCropBoundsLeftFieldNumber = 128,
    kCropBoundsTopFieldNumber = 129,
    kCropBoundsRightFieldNumber = 130,
    kCropBoundsBottomFieldNumber = 131,
    kCropBoundsShapeFieldNumber = 132,
    kCropMaskFeatherFieldNumber = 133,
    kNaturalOrientationFieldNumber = 134,
    kUseCropMaskFieldNumber = 135,
    kRenderSizeScaleXFieldNumber = 137,
    kBlendModeFieldNumber = 136,
  };
  // repeated .KMProto.KMProject.KeyFrame keyframes = 108;
  int keyframes_size() const;
  private:
  int _internal_keyframes_size() const;
  public:
  void clear_keyframes();
  ::KMProto_KMProject_KeyFrame* mutable_keyframes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_KeyFrame >*
      mutable_keyframes();
  private:
  const ::KMProto_KMProject_KeyFrame& _internal_keyframes(int index) const;
  ::KMProto_KMProject_KeyFrame* _internal_add_keyframes();
  public:
  const ::KMProto_KMProject_KeyFrame& keyframes(int index) const;
  ::KMProto_KMProject_KeyFrame* add_keyframes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_KeyFrame >&
      keyframes() const;

  // optional string layer_name = 127;
  bool has_layer_name() const;
  private:
  bool _internal_has_layer_name() const;
  public:
  void clear_layer_name();
  const std::string& layer_name() const;
  void set_layer_name(const std::string& value);
  void set_layer_name(std::string&& value);
  void set_layer_name(const char* value);
  void set_layer_name(const char* value, size_t size);
  std::string* mutable_layer_name();
  std::string* release_layer_name();
  void set_allocated_layer_name(std::string* layer_name);
  private:
  const std::string& _internal_layer_name() const;
  void _internal_set_layer_name(const std::string& value);
  std::string* _internal_mutable_layer_name();
  public:

  // optional .KMProto.KMProject.KeyFrame split_keyframe = 115;
  bool has_split_keyframe() const;
  private:
  bool _internal_has_split_keyframe() const;
  public:
  void clear_split_keyframe();
  const ::KMProto_KMProject_KeyFrame& split_keyframe() const;
  ::KMProto_KMProject_KeyFrame* release_split_keyframe();
  ::KMProto_KMProject_KeyFrame* mutable_split_keyframe();
  void set_allocated_split_keyframe(::KMProto_KMProject_KeyFrame* split_keyframe);
  private:
  const ::KMProto_KMProject_KeyFrame& _internal_split_keyframe() const;
  ::KMProto_KMProject_KeyFrame* _internal_mutable_split_keyframe();
  public:
  void unsafe_arena_set_allocated_split_keyframe(
      ::KMProto_KMProject_KeyFrame* split_keyframe);
  ::KMProto_KMProject_KeyFrame* unsafe_arena_release_split_keyframe();

  // optional float render_size_scale_y = 138;
  bool has_render_size_scale_y() const;
  private:
  bool _internal_has_render_size_scale_y() const;
  public:
  void clear_render_size_scale_y();
  float render_size_scale_y() const;
  void set_render_size_scale_y(float value);
  private:
  float _internal_render_size_scale_y() const;
  void _internal_set_render_size_scale_y(float value);
  public:

  // optional int32 start_time = 100;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  ::PROTOBUF_NAMESPACE_ID::int32 start_time() const;
  void set_start_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start_time() const;
  void _internal_set_start_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 end_time = 101;
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  ::PROTOBUF_NAMESPACE_ID::int32 end_time() const;
  void set_end_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_end_time() const;
  void _internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 start_trim = 103;
  bool has_start_trim() const;
  private:
  bool _internal_has_start_trim() const;
  public:
  void clear_start_trim();
  ::PROTOBUF_NAMESPACE_ID::int32 start_trim() const;
  void set_start_trim(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start_trim() const;
  void _internal_set_start_trim(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 end_trim = 104;
  bool has_end_trim() const;
  private:
  bool _internal_has_end_trim() const;
  public:
  void clear_end_trim();
  ::PROTOBUF_NAMESPACE_ID::int32 end_trim() const;
  void set_end_trim(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_end_trim() const;
  void _internal_set_end_trim(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int64 z_order = 105;
  bool has_z_order() const;
  private:
  bool _internal_has_z_order() const;
  public:
  void clear_z_order();
  ::PROTOBUF_NAMESPACE_ID::int64 z_order() const;
  void set_z_order(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_z_order() const;
  void _internal_set_z_order(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 layer_expression = 106;
  bool has_layer_expression() const;
  private:
  bool _internal_has_layer_expression() const;
  public:
  void clear_layer_expression();
  ::PROTOBUF_NAMESPACE_ID::int32 layer_expression() const;
  void set_layer_expression(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_layer_expression() const;
  void _internal_set_layer_expression(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 layer_expression_duration = 107;
  bool has_layer_expression_duration() const;
  private:
  bool _internal_has_layer_expression_duration() const;
  public:
  void clear_layer_expression_duration();
  ::PROTOBUF_NAMESPACE_ID::int32 layer_expression_duration() const;
  void set_layer_expression_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_layer_expression_duration() const;
  void _internal_set_layer_expression_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 layer_in_expression = 109;
  bool has_layer_in_expression() const;
  private:
  bool _internal_has_layer_in_expression() const;
  public:
  void clear_layer_in_expression();
  ::PROTOBUF_NAMESPACE_ID::int32 layer_in_expression() const;
  void set_layer_in_expression(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_layer_in_expression() const;
  void _internal_set_layer_in_expression(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 layer_in_expression_duration = 110;
  bool has_layer_in_expression_duration() const;
  private:
  bool _internal_has_layer_in_expression_duration() const;
  public:
  void clear_layer_in_expression_duration();
  ::PROTOBUF_NAMESPACE_ID::int32 layer_in_expression_duration() const;
  void set_layer_in_expression_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_layer_in_expression_duration() const;
  void _internal_set_layer_in_expression_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 layer_out_expression = 111;
  bool has_layer_out_expression() const;
  private:
  bool _internal_has_layer_out_expression() const;
  public:
  void clear_layer_out_expression();
  ::PROTOBUF_NAMESPACE_ID::int32 layer_out_expression() const;
  void set_layer_out_expression(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_layer_out_expression() const;
  void _internal_set_layer_out_expression(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 layer_out_expression_duration = 112;
  bool has_layer_out_expression_duration() const;
  private:
  bool _internal_has_layer_out_expression_duration() const;
  public:
  void clear_layer_out_expression_duration();
  ::PROTOBUF_NAMESPACE_ID::int32 layer_out_expression_duration() const;
  void set_layer_out_expression_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_layer_out_expression_duration() const;
  void _internal_set_layer_out_expression_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 layer_overall_expression = 113;
  bool has_layer_overall_expression() const;
  private:
  bool _internal_has_layer_overall_expression() const;
  public:
  void clear_layer_overall_expression();
  ::PROTOBUF_NAMESPACE_ID::int32 layer_overall_expression() const;
  void set_layer_overall_expression(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_layer_overall_expression() const;
  void _internal_set_layer_overall_expression(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float layer_overall_expression_speed = 114;
  bool has_layer_overall_expression_speed() const;
  private:
  bool _internal_has_layer_overall_expression_speed() const;
  public:
  void clear_layer_overall_expression_speed();
  float layer_overall_expression_speed() const;
  void set_layer_overall_expression_speed(float value);
  private:
  float _internal_layer_overall_expression_speed() const;
  void _internal_set_layer_overall_expression_speed(float value);
  public:

  // optional .KMProto.KMProject.SplitScreenType split_screen_type = 116;
  bool has_split_screen_type() const;
  private:
  bool _internal_has_split_screen_type() const;
  public:
  void clear_split_screen_type();
  ::KMProto_KMProject_SplitScreenType split_screen_type() const;
  void set_split_screen_type(::KMProto_KMProject_SplitScreenType value);
  private:
  ::KMProto_KMProject_SplitScreenType _internal_split_screen_type() const;
  void _internal_set_split_screen_type(::KMProto_KMProject_SplitScreenType value);
  public:

  // optional int32 split_size_left = 117;
  bool has_split_size_left() const;
  private:
  bool _internal_has_split_size_left() const;
  public:
  void clear_split_size_left();
  ::PROTOBUF_NAMESPACE_ID::int32 split_size_left() const;
  void set_split_size_left(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_split_size_left() const;
  void _internal_set_split_size_left(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool pinned = 102;
  bool has_pinned() const;
  private:
  bool _internal_has_pinned() const;
  public:
  void clear_pinned();
  bool pinned() const;
  void set_pinned(bool value);
  private:
  bool _internal_pinned() const;
  void _internal_set_pinned(bool value);
  public:

  // optional bool flip_h = 122;
  bool has_flip_h() const;
  private:
  bool _internal_has_flip_h() const;
  public:
  void clear_flip_h();
  bool flip_h() const;
  void set_flip_h(bool value);
  private:
  bool _internal_flip_h() const;
  void _internal_set_flip_h(bool value);
  public:

  // optional bool flip_v = 123;
  bool has_flip_v() const;
  private:
  bool _internal_has_flip_v() const;
  public:
  void clear_flip_v();
  bool flip_v() const;
  void set_flip_v(bool value);
  private:
  bool _internal_flip_v() const;
  void _internal_set_flip_v(bool value);
  public:

  // optional bool layermask_enabled = 124;
  bool has_layermask_enabled() const;
  private:
  bool _internal_has_layermask_enabled() const;
  public:
  void clear_layermask_enabled();
  bool layermask_enabled() const;
  void set_layermask_enabled(bool value);
  private:
  bool _internal_layermask_enabled() const;
  void _internal_set_layermask_enabled(bool value);
  public:

  // optional int32 split_size_right = 118;
  bool has_split_size_right() const;
  private:
  bool _internal_has_split_size_right() const;
  public:
  void clear_split_size_right();
  ::PROTOBUF_NAMESPACE_ID::int32 split_size_right() const;
  void set_split_size_right(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_split_size_right() const;
  void _internal_set_split_size_right(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 split_size_top = 119;
  bool has_split_size_top() const;
  private:
  bool _internal_has_split_size_top() const;
  public:
  void clear_split_size_top();
  ::PROTOBUF_NAMESPACE_ID::int32 split_size_top() const;
  void set_split_size_top(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_split_size_top() const;
  void _internal_set_split_size_top(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 split_size_bottom = 120;
  bool has_split_size_bottom() const;
  private:
  bool _internal_has_split_size_bottom() const;
  public:
  void clear_split_size_bottom();
  ::PROTOBUF_NAMESPACE_ID::int32 split_size_bottom() const;
  void set_split_size_bottom(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_split_size_bottom() const;
  void _internal_set_split_size_bottom(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 overall_alpha = 121;
  bool has_overall_alpha() const;
  private:
  bool _internal_has_overall_alpha() const;
  public:
  void clear_overall_alpha();
  ::PROTOBUF_NAMESPACE_ID::int32 overall_alpha() const;
  void set_overall_alpha(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_overall_alpha() const;
  void _internal_set_overall_alpha(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 layermask_type = 125;
  bool has_layermask_type() const;
  private:
  bool _internal_has_layermask_type() const;
  public:
  void clear_layermask_type();
  ::PROTOBUF_NAMESPACE_ID::int32 layermask_type() const;
  void set_layermask_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_layermask_type() const;
  void _internal_set_layermask_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 layermask_index = 126;
  bool has_layermask_index() const;
  private:
  bool _internal_has_layermask_index() const;
  public:
  void clear_layermask_index();
  ::PROTOBUF_NAMESPACE_ID::int32 layermask_index() const;
  void set_layermask_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_layermask_index() const;
  void _internal_set_layermask_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float crop_bounds_left = 128;
  bool has_crop_bounds_left() const;
  private:
  bool _internal_has_crop_bounds_left() const;
  public:
  void clear_crop_bounds_left();
  float crop_bounds_left() const;
  void set_crop_bounds_left(float value);
  private:
  float _internal_crop_bounds_left() const;
  void _internal_set_crop_bounds_left(float value);
  public:

  // optional float crop_bounds_top = 129;
  bool has_crop_bounds_top() const;
  private:
  bool _internal_has_crop_bounds_top() const;
  public:
  void clear_crop_bounds_top();
  float crop_bounds_top() const;
  void set_crop_bounds_top(float value);
  private:
  float _internal_crop_bounds_top() const;
  void _internal_set_crop_bounds_top(float value);
  public:

  // optional float crop_bounds_right = 130;
  bool has_crop_bounds_right() const;
  private:
  bool _internal_has_crop_bounds_right() const;
  public:
  void clear_crop_bounds_right();
  float crop_bounds_right() const;
  void set_crop_bounds_right(float value);
  private:
  float _internal_crop_bounds_right() const;
  void _internal_set_crop_bounds_right(float value);
  public:

  // optional float crop_bounds_bottom = 131;
  bool has_crop_bounds_bottom() const;
  private:
  bool _internal_has_crop_bounds_bottom() const;
  public:
  void clear_crop_bounds_bottom();
  float crop_bounds_bottom() const;
  void set_crop_bounds_bottom(float value);
  private:
  float _internal_crop_bounds_bottom() const;
  void _internal_set_crop_bounds_bottom(float value);
  public:

  // optional int32 crop_bounds_shape = 132;
  bool has_crop_bounds_shape() const;
  private:
  bool _internal_has_crop_bounds_shape() const;
  public:
  void clear_crop_bounds_shape();
  ::PROTOBUF_NAMESPACE_ID::int32 crop_bounds_shape() const;
  void set_crop_bounds_shape(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_crop_bounds_shape() const;
  void _internal_set_crop_bounds_shape(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float crop_mask_feather = 133;
  bool has_crop_mask_feather() const;
  private:
  bool _internal_has_crop_mask_feather() const;
  public:
  void clear_crop_mask_feather();
  float crop_mask_feather() const;
  void set_crop_mask_feather(float value);
  private:
  float _internal_crop_mask_feather() const;
  void _internal_set_crop_mask_feather(float value);
  public:

  // optional int32 natural_orientation = 134;
  bool has_natural_orientation() const;
  private:
  bool _internal_has_natural_orientation() const;
  public:
  void clear_natural_orientation();
  ::PROTOBUF_NAMESPACE_ID::int32 natural_orientation() const;
  void set_natural_orientation(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_natural_orientation() const;
  void _internal_set_natural_orientation(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool use_crop_mask = 135;
  bool has_use_crop_mask() const;
  private:
  bool _internal_has_use_crop_mask() const;
  public:
  void clear_use_crop_mask();
  bool use_crop_mask() const;
  void set_use_crop_mask(bool value);
  private:
  bool _internal_use_crop_mask() const;
  void _internal_set_use_crop_mask(bool value);
  public:

  // optional float render_size_scale_x = 137;
  bool has_render_size_scale_x() const;
  private:
  bool _internal_has_render_size_scale_x() const;
  public:
  void clear_render_size_scale_x();
  float render_size_scale_x() const;
  void set_render_size_scale_x(float value);
  private:
  float _internal_render_size_scale_x() const;
  void _internal_set_render_size_scale_x(float value);
  public:

  // optional .KMProto.KMProject.LayerBlendModeType blend_mode = 136 [default = LAYER_BLEND_NORMAL];
  bool has_blend_mode() const;
  private:
  bool _internal_has_blend_mode() const;
  public:
  void clear_blend_mode();
  ::KMProto_KMProject_LayerBlendModeType blend_mode() const;
  void set_blend_mode(::KMProto_KMProject_LayerBlendModeType value);
  private:
  ::KMProto_KMProject_LayerBlendModeType _internal_blend_mode() const;
  void _internal_set_blend_mode(::KMProto_KMProject_LayerBlendModeType value);
  public:

  // @@protoc_insertion_point(class_scope:KMProto.KMProject.LayerCommon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_KeyFrame > keyframes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr layer_name_;
  ::KMProto_KMProject_KeyFrame* split_keyframe_;
  float render_size_scale_y_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 end_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_trim_;
  ::PROTOBUF_NAMESPACE_ID::int32 end_trim_;
  ::PROTOBUF_NAMESPACE_ID::int64 z_order_;
  ::PROTOBUF_NAMESPACE_ID::int32 layer_expression_;
  ::PROTOBUF_NAMESPACE_ID::int32 layer_expression_duration_;
  ::PROTOBUF_NAMESPACE_ID::int32 layer_in_expression_;
  ::PROTOBUF_NAMESPACE_ID::int32 layer_in_expression_duration_;
  ::PROTOBUF_NAMESPACE_ID::int32 layer_out_expression_;
  ::PROTOBUF_NAMESPACE_ID::int32 layer_out_expression_duration_;
  ::PROTOBUF_NAMESPACE_ID::int32 layer_overall_expression_;
  float layer_overall_expression_speed_;
  int split_screen_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 split_size_left_;
  bool pinned_;
  bool flip_h_;
  bool flip_v_;
  bool layermask_enabled_;
  ::PROTOBUF_NAMESPACE_ID::int32 split_size_right_;
  ::PROTOBUF_NAMESPACE_ID::int32 split_size_top_;
  ::PROTOBUF_NAMESPACE_ID::int32 split_size_bottom_;
  ::PROTOBUF_NAMESPACE_ID::int32 overall_alpha_;
  ::PROTOBUF_NAMESPACE_ID::int32 layermask_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 layermask_index_;
  float crop_bounds_left_;
  float crop_bounds_top_;
  float crop_bounds_right_;
  float crop_bounds_bottom_;
  ::PROTOBUF_NAMESPACE_ID::int32 crop_bounds_shape_;
  float crop_mask_feather_;
  ::PROTOBUF_NAMESPACE_ID::int32 natural_orientation_;
  bool use_crop_mask_;
  float render_size_scale_x_;
  int blend_mode_;
  friend struct ::TableStruct_kinemaster_5fproject_5fwire_2dlite_2eproto;
};
// -------------------------------------------------------------------

class KMProto_KMProject_KeyFrame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:KMProto.KMProject.KeyFrame) */ {
 public:
  inline KMProto_KMProject_KeyFrame() : KMProto_KMProject_KeyFrame(nullptr) {}
  virtual ~KMProto_KMProject_KeyFrame();

  KMProto_KMProject_KeyFrame(const KMProto_KMProject_KeyFrame& from);
  KMProto_KMProject_KeyFrame(KMProto_KMProject_KeyFrame&& from) noexcept
    : KMProto_KMProject_KeyFrame() {
    *this = ::std::move(from);
  }

  inline KMProto_KMProject_KeyFrame& operator=(const KMProto_KMProject_KeyFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline KMProto_KMProject_KeyFrame& operator=(KMProto_KMProject_KeyFrame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const KMProto_KMProject_KeyFrame& default_instance();

  static inline const KMProto_KMProject_KeyFrame* internal_default_instance() {
    return reinterpret_cast<const KMProto_KMProject_KeyFrame*>(
               &_KMProto_KMProject_KeyFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(KMProto_KMProject_KeyFrame& a, KMProto_KMProject_KeyFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(KMProto_KMProject_KeyFrame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KMProto_KMProject_KeyFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KMProto_KMProject_KeyFrame* New() const final {
    return CreateMaybeMessage<KMProto_KMProject_KeyFrame>(nullptr);
  }

  KMProto_KMProject_KeyFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KMProto_KMProject_KeyFrame>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const KMProto_KMProject_KeyFrame& from);
  void MergeFrom(const KMProto_KMProject_KeyFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KMProto_KMProject_KeyFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KMProto.KMProject.KeyFrame";
  }
  protected:
  explicit KMProto_KMProject_KeyFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 101,
    kScaleFieldNumber = 102,
    kXFieldNumber = 103,
    kYFieldNumber = 104,
    kAngleFieldNumber = 105,
    kAlphaFieldNumber = 106,
    kScalexFieldNumber = 107,
    kScaleyFieldNumber = 108,
  };
  // optional float time = 101;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  float time() const;
  void set_time(float value);
  private:
  float _internal_time() const;
  void _internal_set_time(float value);
  public:

  // optional float scale = 102;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // optional float x = 103;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 104;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional float angle = 105;
  bool has_angle() const;
  private:
  bool _internal_has_angle() const;
  public:
  void clear_angle();
  float angle() const;
  void set_angle(float value);
  private:
  float _internal_angle() const;
  void _internal_set_angle(float value);
  public:

  // optional float alpha = 106;
  bool has_alpha() const;
  private:
  bool _internal_has_alpha() const;
  public:
  void clear_alpha();
  float alpha() const;
  void set_alpha(float value);
  private:
  float _internal_alpha() const;
  void _internal_set_alpha(float value);
  public:

  // optional float scalex = 107;
  bool has_scalex() const;
  private:
  bool _internal_has_scalex() const;
  public:
  void clear_scalex();
  float scalex() const;
  void set_scalex(float value);
  private:
  float _internal_scalex() const;
  void _internal_set_scalex(float value);
  public:

  // optional float scaley = 108;
  bool has_scaley() const;
  private:
  bool _internal_has_scaley() const;
  public:
  void clear_scaley();
  float scaley() const;
  void set_scaley(float value);
  private:
  float _internal_scaley() const;
  void _internal_set_scaley(float value);
  public:

  // @@protoc_insertion_point(class_scope:KMProto.KMProject.KeyFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float time_;
  float scale_;
  float x_;
  float y_;
  float angle_;
  float alpha_;
  float scalex_;
  float scaley_;
  friend struct ::TableStruct_kinemaster_5fproject_5fwire_2dlite_2eproto;
};
// -------------------------------------------------------------------

class KMProto_KMProject_TextLayer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:KMProto.KMProject.TextLayer) */ {
 public:
  inline KMProto_KMProject_TextLayer() : KMProto_KMProject_TextLayer(nullptr) {}
  virtual ~KMProto_KMProject_TextLayer();

  KMProto_KMProject_TextLayer(const KMProto_KMProject_TextLayer& from);
  KMProto_KMProject_TextLayer(KMProto_KMProject_TextLayer&& from) noexcept
    : KMProto_KMProject_TextLayer() {
    *this = ::std::move(from);
  }

  inline KMProto_KMProject_TextLayer& operator=(const KMProto_KMProject_TextLayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline KMProto_KMProject_TextLayer& operator=(KMProto_KMProject_TextLayer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const KMProto_KMProject_TextLayer& default_instance();

  static inline const KMProto_KMProject_TextLayer* internal_default_instance() {
    return reinterpret_cast<const KMProto_KMProject_TextLayer*>(
               &_KMProto_KMProject_TextLayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(KMProto_KMProject_TextLayer& a, KMProto_KMProject_TextLayer& b) {
    a.Swap(&b);
  }
  inline void Swap(KMProto_KMProject_TextLayer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KMProto_KMProject_TextLayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KMProto_KMProject_TextLayer* New() const final {
    return CreateMaybeMessage<KMProto_KMProject_TextLayer>(nullptr);
  }

  KMProto_KMProject_TextLayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KMProto_KMProject_TextLayer>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const KMProto_KMProject_TextLayer& from);
  void MergeFrom(const KMProto_KMProject_TextLayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KMProto_KMProject_TextLayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KMProto.KMProject.TextLayer";
  }
  protected:
  explicit KMProto_KMProject_TextLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGradientColorsFieldNumber = 118,
    kLayerTextFieldNumber = 101,
    kFontIdFieldNumber = 103,
    kLayerCommonFieldNumber = 100,
    kOutlineWeightFieldNumber = 134,
    kTextSizeFieldNumber = 102,
    kTextColorFieldNumber = 104,
    kShadowColorFieldNumber = 106,
    kShadowRadiusFieldNumber = 107,
    kShadowDxFieldNumber = 108,
    kShadowDyFieldNumber = 109,
    kGlowColorFieldNumber = 111,
    kEnableShadowFieldNumber = 105,
    kEnableGlowFieldNumber = 110,
    kEnableOutlineFieldNumber = 114,
    kEnableGradientFieldNumber = 117,
    kGlowRadiusFieldNumber = 112,
    kGlowTypeFieldNumber = 113,
    kOutlineColorFieldNumber = 115,
    kOutlineWidthFieldNumber = 116,
    kBackgroundColorFieldNumber = 120,
    kTextAlignFieldNumber = 122,
    kShadowAngleFieldNumber = 123,
    kShadowDistanceFieldNumber = 124,
    kShadowSpreadFieldNumber = 125,
    kEnableBackgroundFieldNumber = 119,
    kExtendBackgroundFieldNumber = 121,
    kUnderlineFieldNumber = 130,
    kStrikeThroughFieldNumber = 133,
    kShadowSizeFieldNumber = 126,
    kGlowSpreadFieldNumber = 127,
    kGlowSizeFieldNumber = 128,
    kVerticalAlignFieldNumber = 129,
    kSpaceBetweenCharactersFieldNumber = 131,
    kSpaceBetweenLinesFieldNumber = 132,
  };
  // repeated int32 gradient_colors = 118;
  int gradient_colors_size() const;
  private:
  int _internal_gradient_colors_size() const;
  public:
  void clear_gradient_colors();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gradient_colors(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_gradient_colors() const;
  void _internal_add_gradient_colors(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_gradient_colors();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 gradient_colors(int index) const;
  void set_gradient_colors(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_gradient_colors(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      gradient_colors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_gradient_colors();

  // optional string layer_text = 101;
  bool has_layer_text() const;
  private:
  bool _internal_has_layer_text() const;
  public:
  void clear_layer_text();
  const std::string& layer_text() const;
  void set_layer_text(const std::string& value);
  void set_layer_text(std::string&& value);
  void set_layer_text(const char* value);
  void set_layer_text(const char* value, size_t size);
  std::string* mutable_layer_text();
  std::string* release_layer_text();
  void set_allocated_layer_text(std::string* layer_text);
  private:
  const std::string& _internal_layer_text() const;
  void _internal_set_layer_text(const std::string& value);
  std::string* _internal_mutable_layer_text();
  public:

  // optional string font_id = 103;
  bool has_font_id() const;
  private:
  bool _internal_has_font_id() const;
  public:
  void clear_font_id();
  const std::string& font_id() const;
  void set_font_id(const std::string& value);
  void set_font_id(std::string&& value);
  void set_font_id(const char* value);
  void set_font_id(const char* value, size_t size);
  std::string* mutable_font_id();
  std::string* release_font_id();
  void set_allocated_font_id(std::string* font_id);
  private:
  const std::string& _internal_font_id() const;
  void _internal_set_font_id(const std::string& value);
  std::string* _internal_mutable_font_id();
  public:

  // optional .KMProto.KMProject.LayerCommon layer_common = 100;
  bool has_layer_common() const;
  private:
  bool _internal_has_layer_common() const;
  public:
  void clear_layer_common();
  const ::KMProto_KMProject_LayerCommon& layer_common() const;
  ::KMProto_KMProject_LayerCommon* release_layer_common();
  ::KMProto_KMProject_LayerCommon* mutable_layer_common();
  void set_allocated_layer_common(::KMProto_KMProject_LayerCommon* layer_common);
  private:
  const ::KMProto_KMProject_LayerCommon& _internal_layer_common() const;
  ::KMProto_KMProject_LayerCommon* _internal_mutable_layer_common();
  public:
  void unsafe_arena_set_allocated_layer_common(
      ::KMProto_KMProject_LayerCommon* layer_common);
  ::KMProto_KMProject_LayerCommon* unsafe_arena_release_layer_common();

  // optional float outline_weight = 134;
  bool has_outline_weight() const;
  private:
  bool _internal_has_outline_weight() const;
  public:
  void clear_outline_weight();
  float outline_weight() const;
  void set_outline_weight(float value);
  private:
  float _internal_outline_weight() const;
  void _internal_set_outline_weight(float value);
  public:

  // optional float text_size = 102;
  bool has_text_size() const;
  private:
  bool _internal_has_text_size() const;
  public:
  void clear_text_size();
  float text_size() const;
  void set_text_size(float value);
  private:
  float _internal_text_size() const;
  void _internal_set_text_size(float value);
  public:

  // optional uint32 text_color = 104;
  bool has_text_color() const;
  private:
  bool _internal_has_text_color() const;
  public:
  void clear_text_color();
  ::PROTOBUF_NAMESPACE_ID::uint32 text_color() const;
  void set_text_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_text_color() const;
  void _internal_set_text_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 shadow_color = 106;
  bool has_shadow_color() const;
  private:
  bool _internal_has_shadow_color() const;
  public:
  void clear_shadow_color();
  ::PROTOBUF_NAMESPACE_ID::uint32 shadow_color() const;
  void set_shadow_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_shadow_color() const;
  void _internal_set_shadow_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float shadow_radius = 107;
  bool has_shadow_radius() const;
  private:
  bool _internal_has_shadow_radius() const;
  public:
  void clear_shadow_radius();
  float shadow_radius() const;
  void set_shadow_radius(float value);
  private:
  float _internal_shadow_radius() const;
  void _internal_set_shadow_radius(float value);
  public:

  // optional float shadow_dx = 108;
  bool has_shadow_dx() const;
  private:
  bool _internal_has_shadow_dx() const;
  public:
  void clear_shadow_dx();
  float shadow_dx() const;
  void set_shadow_dx(float value);
  private:
  float _internal_shadow_dx() const;
  void _internal_set_shadow_dx(float value);
  public:

  // optional float shadow_dy = 109;
  bool has_shadow_dy() const;
  private:
  bool _internal_has_shadow_dy() const;
  public:
  void clear_shadow_dy();
  float shadow_dy() const;
  void set_shadow_dy(float value);
  private:
  float _internal_shadow_dy() const;
  void _internal_set_shadow_dy(float value);
  public:

  // optional uint32 glow_color = 111;
  bool has_glow_color() const;
  private:
  bool _internal_has_glow_color() const;
  public:
  void clear_glow_color();
  ::PROTOBUF_NAMESPACE_ID::uint32 glow_color() const;
  void set_glow_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_glow_color() const;
  void _internal_set_glow_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool enable_shadow = 105;
  bool has_enable_shadow() const;
  private:
  bool _internal_has_enable_shadow() const;
  public:
  void clear_enable_shadow();
  bool enable_shadow() const;
  void set_enable_shadow(bool value);
  private:
  bool _internal_enable_shadow() const;
  void _internal_set_enable_shadow(bool value);
  public:

  // optional bool enable_glow = 110;
  bool has_enable_glow() const;
  private:
  bool _internal_has_enable_glow() const;
  public:
  void clear_enable_glow();
  bool enable_glow() const;
  void set_enable_glow(bool value);
  private:
  bool _internal_enable_glow() const;
  void _internal_set_enable_glow(bool value);
  public:

  // optional bool enable_outline = 114;
  bool has_enable_outline() const;
  private:
  bool _internal_has_enable_outline() const;
  public:
  void clear_enable_outline();
  bool enable_outline() const;
  void set_enable_outline(bool value);
  private:
  bool _internal_enable_outline() const;
  void _internal_set_enable_outline(bool value);
  public:

  // optional bool enable_gradient = 117;
  bool has_enable_gradient() const;
  private:
  bool _internal_has_enable_gradient() const;
  public:
  void clear_enable_gradient();
  bool enable_gradient() const;
  void set_enable_gradient(bool value);
  private:
  bool _internal_enable_gradient() const;
  void _internal_set_enable_gradient(bool value);
  public:

  // optional float glow_radius = 112;
  bool has_glow_radius() const;
  private:
  bool _internal_has_glow_radius() const;
  public:
  void clear_glow_radius();
  float glow_radius() const;
  void set_glow_radius(float value);
  private:
  float _internal_glow_radius() const;
  void _internal_set_glow_radius(float value);
  public:

  // optional int32 glow_type = 113;
  bool has_glow_type() const;
  private:
  bool _internal_has_glow_type() const;
  public:
  void clear_glow_type();
  ::PROTOBUF_NAMESPACE_ID::int32 glow_type() const;
  void set_glow_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_glow_type() const;
  void _internal_set_glow_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 outline_color = 115;
  bool has_outline_color() const;
  private:
  bool _internal_has_outline_color() const;
  public:
  void clear_outline_color();
  ::PROTOBUF_NAMESPACE_ID::uint32 outline_color() const;
  void set_outline_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_outline_color() const;
  void _internal_set_outline_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float outline_width = 116;
  bool has_outline_width() const;
  private:
  bool _internal_has_outline_width() const;
  public:
  void clear_outline_width();
  float outline_width() const;
  void set_outline_width(float value);
  private:
  float _internal_outline_width() const;
  void _internal_set_outline_width(float value);
  public:

  // optional uint32 background_color = 120;
  bool has_background_color() const;
  private:
  bool _internal_has_background_color() const;
  public:
  void clear_background_color();
  ::PROTOBUF_NAMESPACE_ID::uint32 background_color() const;
  void set_background_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_background_color() const;
  void _internal_set_background_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 text_align = 122;
  bool has_text_align() const;
  private:
  bool _internal_has_text_align() const;
  public:
  void clear_text_align();
  ::PROTOBUF_NAMESPACE_ID::int32 text_align() const;
  void set_text_align(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_text_align() const;
  void _internal_set_text_align(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float shadow_angle = 123;
  bool has_shadow_angle() const;
  private:
  bool _internal_has_shadow_angle() const;
  public:
  void clear_shadow_angle();
  float shadow_angle() const;
  void set_shadow_angle(float value);
  private:
  float _internal_shadow_angle() const;
  void _internal_set_shadow_angle(float value);
  public:

  // optional float shadow_distance = 124;
  bool has_shadow_distance() const;
  private:
  bool _internal_has_shadow_distance() const;
  public:
  void clear_shadow_distance();
  float shadow_distance() const;
  void set_shadow_distance(float value);
  private:
  float _internal_shadow_distance() const;
  void _internal_set_shadow_distance(float value);
  public:

  // optional float shadow_spread = 125;
  bool has_shadow_spread() const;
  private:
  bool _internal_has_shadow_spread() const;
  public:
  void clear_shadow_spread();
  float shadow_spread() const;
  void set_shadow_spread(float value);
  private:
  float _internal_shadow_spread() const;
  void _internal_set_shadow_spread(float value);
  public:

  // optional bool enable_background = 119;
  bool has_enable_background() const;
  private:
  bool _internal_has_enable_background() const;
  public:
  void clear_enable_background();
  bool enable_background() const;
  void set_enable_background(bool value);
  private:
  bool _internal_enable_background() const;
  void _internal_set_enable_background(bool value);
  public:

  // optional bool extend_background = 121;
  bool has_extend_background() const;
  private:
  bool _internal_has_extend_background() const;
  public:
  void clear_extend_background();
  bool extend_background() const;
  void set_extend_background(bool value);
  private:
  bool _internal_extend_background() const;
  void _internal_set_extend_background(bool value);
  public:

  // optional bool underline = 130;
  bool has_underline() const;
  private:
  bool _internal_has_underline() const;
  public:
  void clear_underline();
  bool underline() const;
  void set_underline(bool value);
  private:
  bool _internal_underline() const;
  void _internal_set_underline(bool value);
  public:

  // optional bool strike_through = 133;
  bool has_strike_through() const;
  private:
  bool _internal_has_strike_through() const;
  public:
  void clear_strike_through();
  bool strike_through() const;
  void set_strike_through(bool value);
  private:
  bool _internal_strike_through() const;
  void _internal_set_strike_through(bool value);
  public:

  // optional float shadow_size = 126;
  bool has_shadow_size() const;
  private:
  bool _internal_has_shadow_size() const;
  public:
  void clear_shadow_size();
  float shadow_size() const;
  void set_shadow_size(float value);
  private:
  float _internal_shadow_size() const;
  void _internal_set_shadow_size(float value);
  public:

  // optional float glow_spread = 127;
  bool has_glow_spread() const;
  private:
  bool _internal_has_glow_spread() const;
  public:
  void clear_glow_spread();
  float glow_spread() const;
  void set_glow_spread(float value);
  private:
  float _internal_glow_spread() const;
  void _internal_set_glow_spread(float value);
  public:

  // optional float glow_size = 128;
  bool has_glow_size() const;
  private:
  bool _internal_has_glow_size() const;
  public:
  void clear_glow_size();
  float glow_size() const;
  void set_glow_size(float value);
  private:
  float _internal_glow_size() const;
  void _internal_set_glow_size(float value);
  public:

  // optional int32 vertical_align = 129;
  bool has_vertical_align() const;
  private:
  bool _internal_has_vertical_align() const;
  public:
  void clear_vertical_align();
  ::PROTOBUF_NAMESPACE_ID::int32 vertical_align() const;
  void set_vertical_align(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vertical_align() const;
  void _internal_set_vertical_align(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float space_between_characters = 131;
  bool has_space_between_characters() const;
  private:
  bool _internal_has_space_between_characters() const;
  public:
  void clear_space_between_characters();
  float space_between_characters() const;
  void set_space_between_characters(float value);
  private:
  float _internal_space_between_characters() const;
  void _internal_set_space_between_characters(float value);
  public:

  // optional float space_between_lines = 132;
  bool has_space_between_lines() const;
  private:
  bool _internal_has_space_between_lines() const;
  public:
  void clear_space_between_lines();
  float space_between_lines() const;
  void set_space_between_lines(float value);
  private:
  float _internal_space_between_lines() const;
  void _internal_set_space_between_lines(float value);
  public:

  // @@protoc_insertion_point(class_scope:KMProto.KMProject.TextLayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > gradient_colors_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr layer_text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr font_id_;
  ::KMProto_KMProject_LayerCommon* layer_common_;
  float outline_weight_;
  float text_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 text_color_;
  ::PROTOBUF_NAMESPACE_ID::uint32 shadow_color_;
  float shadow_radius_;
  float shadow_dx_;
  float shadow_dy_;
  ::PROTOBUF_NAMESPACE_ID::uint32 glow_color_;
  bool enable_shadow_;
  bool enable_glow_;
  bool enable_outline_;
  bool enable_gradient_;
  float glow_radius_;
  ::PROTOBUF_NAMESPACE_ID::int32 glow_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 outline_color_;
  float outline_width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 background_color_;
  ::PROTOBUF_NAMESPACE_ID::int32 text_align_;
  float shadow_angle_;
  float shadow_distance_;
  float shadow_spread_;
  bool enable_background_;
  bool extend_background_;
  bool underline_;
  bool strike_through_;
  float shadow_size_;
  float glow_spread_;
  float glow_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 vertical_align_;
  float space_between_characters_;
  float space_between_lines_;
  friend struct ::TableStruct_kinemaster_5fproject_5fwire_2dlite_2eproto;
};
// -------------------------------------------------------------------

class KMProto_KMProject_HandwritingLayer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:KMProto.KMProject.HandwritingLayer) */ {
 public:
  inline KMProto_KMProject_HandwritingLayer() : KMProto_KMProject_HandwritingLayer(nullptr) {}
  virtual ~KMProto_KMProject_HandwritingLayer();

  KMProto_KMProject_HandwritingLayer(const KMProto_KMProject_HandwritingLayer& from);
  KMProto_KMProject_HandwritingLayer(KMProto_KMProject_HandwritingLayer&& from) noexcept
    : KMProto_KMProject_HandwritingLayer() {
    *this = ::std::move(from);
  }

  inline KMProto_KMProject_HandwritingLayer& operator=(const KMProto_KMProject_HandwritingLayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline KMProto_KMProject_HandwritingLayer& operator=(KMProto_KMProject_HandwritingLayer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const KMProto_KMProject_HandwritingLayer& default_instance();

  static inline const KMProto_KMProject_HandwritingLayer* internal_default_instance() {
    return reinterpret_cast<const KMProto_KMProject_HandwritingLayer*>(
               &_KMProto_KMProject_HandwritingLayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(KMProto_KMProject_HandwritingLayer& a, KMProto_KMProject_HandwritingLayer& b) {
    a.Swap(&b);
  }
  inline void Swap(KMProto_KMProject_HandwritingLayer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KMProto_KMProject_HandwritingLayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KMProto_KMProject_HandwritingLayer* New() const final {
    return CreateMaybeMessage<KMProto_KMProject_HandwritingLayer>(nullptr);
  }

  KMProto_KMProject_HandwritingLayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KMProto_KMProject_HandwritingLayer>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const KMProto_KMProject_HandwritingLayer& from);
  void MergeFrom(const KMProto_KMProject_HandwritingLayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KMProto_KMProject_HandwritingLayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KMProto.KMProject.HandwritingLayer";
  }
  protected:
  explicit KMProto_KMProject_HandwritingLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDrawingActionsFieldNumber = 1,
    kHandwritingFrameIosFieldNumber = 103,
    kLayerCommonFieldNumber = 100,
    kPivotXFieldNumber = 101,
    kPivotYFieldNumber = 102,
  };
  // repeated .KMProto.KMProject.DrawingAction drawing_actions = 1;
  int drawing_actions_size() const;
  private:
  int _internal_drawing_actions_size() const;
  public:
  void clear_drawing_actions();
  ::KMProto_KMProject_DrawingAction* mutable_drawing_actions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_DrawingAction >*
      mutable_drawing_actions();
  private:
  const ::KMProto_KMProject_DrawingAction& _internal_drawing_actions(int index) const;
  ::KMProto_KMProject_DrawingAction* _internal_add_drawing_actions();
  public:
  const ::KMProto_KMProject_DrawingAction& drawing_actions(int index) const;
  ::KMProto_KMProject_DrawingAction* add_drawing_actions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_DrawingAction >&
      drawing_actions() const;

  // repeated .KMProto.KMProject.WritingPoint handwriting_frame_ios = 103;
  int handwriting_frame_ios_size() const;
  private:
  int _internal_handwriting_frame_ios_size() const;
  public:
  void clear_handwriting_frame_ios();
  ::KMProto_KMProject_WritingPoint* mutable_handwriting_frame_ios(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_WritingPoint >*
      mutable_handwriting_frame_ios();
  private:
  const ::KMProto_KMProject_WritingPoint& _internal_handwriting_frame_ios(int index) const;
  ::KMProto_KMProject_WritingPoint* _internal_add_handwriting_frame_ios();
  public:
  const ::KMProto_KMProject_WritingPoint& handwriting_frame_ios(int index) const;
  ::KMProto_KMProject_WritingPoint* add_handwriting_frame_ios();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_WritingPoint >&
      handwriting_frame_ios() const;

  // optional .KMProto.KMProject.LayerCommon layer_common = 100;
  bool has_layer_common() const;
  private:
  bool _internal_has_layer_common() const;
  public:
  void clear_layer_common();
  const ::KMProto_KMProject_LayerCommon& layer_common() const;
  ::KMProto_KMProject_LayerCommon* release_layer_common();
  ::KMProto_KMProject_LayerCommon* mutable_layer_common();
  void set_allocated_layer_common(::KMProto_KMProject_LayerCommon* layer_common);
  private:
  const ::KMProto_KMProject_LayerCommon& _internal_layer_common() const;
  ::KMProto_KMProject_LayerCommon* _internal_mutable_layer_common();
  public:
  void unsafe_arena_set_allocated_layer_common(
      ::KMProto_KMProject_LayerCommon* layer_common);
  ::KMProto_KMProject_LayerCommon* unsafe_arena_release_layer_common();

  // optional int32 pivot_x = 101;
  bool has_pivot_x() const;
  private:
  bool _internal_has_pivot_x() const;
  public:
  void clear_pivot_x();
  ::PROTOBUF_NAMESPACE_ID::int32 pivot_x() const;
  void set_pivot_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pivot_x() const;
  void _internal_set_pivot_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 pivot_y = 102;
  bool has_pivot_y() const;
  private:
  bool _internal_has_pivot_y() const;
  public:
  void clear_pivot_y();
  ::PROTOBUF_NAMESPACE_ID::int32 pivot_y() const;
  void set_pivot_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pivot_y() const;
  void _internal_set_pivot_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KMProto.KMProject.HandwritingLayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_DrawingAction > drawing_actions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_WritingPoint > handwriting_frame_ios_;
  ::KMProto_KMProject_LayerCommon* layer_common_;
  ::PROTOBUF_NAMESPACE_ID::int32 pivot_x_;
  ::PROTOBUF_NAMESPACE_ID::int32 pivot_y_;
  friend struct ::TableStruct_kinemaster_5fproject_5fwire_2dlite_2eproto;
};
// -------------------------------------------------------------------

class KMProto_KMProject_StickerLayer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:KMProto.KMProject.StickerLayer) */ {
 public:
  inline KMProto_KMProject_StickerLayer() : KMProto_KMProject_StickerLayer(nullptr) {}
  virtual ~KMProto_KMProject_StickerLayer();

  KMProto_KMProject_StickerLayer(const KMProto_KMProject_StickerLayer& from);
  KMProto_KMProject_StickerLayer(KMProto_KMProject_StickerLayer&& from) noexcept
    : KMProto_KMProject_StickerLayer() {
    *this = ::std::move(from);
  }

  inline KMProto_KMProject_StickerLayer& operator=(const KMProto_KMProject_StickerLayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline KMProto_KMProject_StickerLayer& operator=(KMProto_KMProject_StickerLayer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const KMProto_KMProject_StickerLayer& default_instance();

  static inline const KMProto_KMProject_StickerLayer* internal_default_instance() {
    return reinterpret_cast<const KMProto_KMProject_StickerLayer*>(
               &_KMProto_KMProject_StickerLayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(KMProto_KMProject_StickerLayer& a, KMProto_KMProject_StickerLayer& b) {
    a.Swap(&b);
  }
  inline void Swap(KMProto_KMProject_StickerLayer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KMProto_KMProject_StickerLayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KMProto_KMProject_StickerLayer* New() const final {
    return CreateMaybeMessage<KMProto_KMProject_StickerLayer>(nullptr);
  }

  KMProto_KMProject_StickerLayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KMProto_KMProject_StickerLayer>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const KMProto_KMProject_StickerLayer& from);
  void MergeFrom(const KMProto_KMProject_StickerLayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KMProto_KMProject_StickerLayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KMProto.KMProject.StickerLayer";
  }
  protected:
  explicit KMProto_KMProject_StickerLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayerCommonFieldNumber = 100,
    kStickerIdFieldNumber = 103,
    kColorizeEnabledFieldNumber = 101,
    kColorizeColorFieldNumber = 102,
  };
  // optional .KMProto.KMProject.LayerCommon layer_common = 100;
  bool has_layer_common() const;
  private:
  bool _internal_has_layer_common() const;
  public:
  void clear_layer_common();
  const ::KMProto_KMProject_LayerCommon& layer_common() const;
  ::KMProto_KMProject_LayerCommon* release_layer_common();
  ::KMProto_KMProject_LayerCommon* mutable_layer_common();
  void set_allocated_layer_common(::KMProto_KMProject_LayerCommon* layer_common);
  private:
  const ::KMProto_KMProject_LayerCommon& _internal_layer_common() const;
  ::KMProto_KMProject_LayerCommon* _internal_mutable_layer_common();
  public:
  void unsafe_arena_set_allocated_layer_common(
      ::KMProto_KMProject_LayerCommon* layer_common);
  ::KMProto_KMProject_LayerCommon* unsafe_arena_release_layer_common();

  // optional int32 sticker_id = 103;
  bool has_sticker_id() const;
  private:
  bool _internal_has_sticker_id() const;
  public:
  void clear_sticker_id();
  ::PROTOBUF_NAMESPACE_ID::int32 sticker_id() const;
  void set_sticker_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sticker_id() const;
  void _internal_set_sticker_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool colorize_enabled = 101;
  bool has_colorize_enabled() const;
  private:
  bool _internal_has_colorize_enabled() const;
  public:
  void clear_colorize_enabled();
  bool colorize_enabled() const;
  void set_colorize_enabled(bool value);
  private:
  bool _internal_colorize_enabled() const;
  void _internal_set_colorize_enabled(bool value);
  public:

  // optional int32 colorize_color = 102;
  bool has_colorize_color() const;
  private:
  bool _internal_has_colorize_color() const;
  public:
  void clear_colorize_color();
  ::PROTOBUF_NAMESPACE_ID::int32 colorize_color() const;
  void set_colorize_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_colorize_color() const;
  void _internal_set_colorize_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KMProto.KMProject.StickerLayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::KMProto_KMProject_LayerCommon* layer_common_;
  ::PROTOBUF_NAMESPACE_ID::int32 sticker_id_;
  bool colorize_enabled_;
  ::PROTOBUF_NAMESPACE_ID::int32 colorize_color_;
  friend struct ::TableStruct_kinemaster_5fproject_5fwire_2dlite_2eproto;
};
// -------------------------------------------------------------------

class KMProto_KMProject_AssetLayer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:KMProto.KMProject.AssetLayer) */ {
 public:
  inline KMProto_KMProject_AssetLayer() : KMProto_KMProject_AssetLayer(nullptr) {}
  virtual ~KMProto_KMProject_AssetLayer();

  KMProto_KMProject_AssetLayer(const KMProto_KMProject_AssetLayer& from);
  KMProto_KMProject_AssetLayer(KMProto_KMProject_AssetLayer&& from) noexcept
    : KMProto_KMProject_AssetLayer() {
    *this = ::std::move(from);
  }

  inline KMProto_KMProject_AssetLayer& operator=(const KMProto_KMProject_AssetLayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline KMProto_KMProject_AssetLayer& operator=(KMProto_KMProject_AssetLayer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const KMProto_KMProject_AssetLayer& default_instance();

  static inline const KMProto_KMProject_AssetLayer* internal_default_instance() {
    return reinterpret_cast<const KMProto_KMProject_AssetLayer*>(
               &_KMProto_KMProject_AssetLayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(KMProto_KMProject_AssetLayer& a, KMProto_KMProject_AssetLayer& b) {
    a.Swap(&b);
  }
  inline void Swap(KMProto_KMProject_AssetLayer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KMProto_KMProject_AssetLayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KMProto_KMProject_AssetLayer* New() const final {
    return CreateMaybeMessage<KMProto_KMProject_AssetLayer>(nullptr);
  }

  KMProto_KMProject_AssetLayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KMProto_KMProject_AssetLayer>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const KMProto_KMProject_AssetLayer& from);
  void MergeFrom(const KMProto_KMProject_AssetLayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KMProto_KMProject_AssetLayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KMProto.KMProject.AssetLayer";
  }
  protected:
  explicit KMProto_KMProject_AssetLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef KMProto_KMProject_AssetLayer_AssetLayerType AssetLayerType;
  static constexpr AssetLayerType EFFECT_LAYER =
    KMProto_KMProject_AssetLayer_AssetLayerType_EFFECT_LAYER;
  static constexpr AssetLayerType OVERLAY_LAYER =
    KMProto_KMProject_AssetLayer_AssetLayerType_OVERLAY_LAYER;
  static inline bool AssetLayerType_IsValid(int value) {
    return KMProto_KMProject_AssetLayer_AssetLayerType_IsValid(value);
  }
  static constexpr AssetLayerType AssetLayerType_MIN =
    KMProto_KMProject_AssetLayer_AssetLayerType_AssetLayerType_MIN;
  static constexpr AssetLayerType AssetLayerType_MAX =
    KMProto_KMProject_AssetLayer_AssetLayerType_AssetLayerType_MAX;
  static constexpr int AssetLayerType_ARRAYSIZE =
    KMProto_KMProject_AssetLayer_AssetLayerType_AssetLayerType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& AssetLayerType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AssetLayerType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AssetLayerType_Name.");
    return KMProto_KMProject_AssetLayer_AssetLayerType_Name(enum_t_value);
  }
  static inline bool AssetLayerType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AssetLayerType* value) {
    return KMProto_KMProject_AssetLayer_AssetLayerType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEffectOptionFieldNumber = 107,
    kAssetItemIdFieldNumber = 101,
    kAssetItemNameForIosFieldNumber = 104,
    kAssetNameForIosFieldNumber = 105,
    kLayerCommonFieldNumber = 100,
    kEffectOptionsFieldNumber = 102,
    kSyncXyScaleFieldNumber = 106,
    kAssetLayerTypeFieldNumber = 103,
  };
  // repeated .KMProto.KMProject.EffectOptionItem effectOption = 107;
  int effectoption_size() const;
  private:
  int _internal_effectoption_size() const;
  public:
  void clear_effectoption();
  ::KMProto_KMProject_EffectOptionItem* mutable_effectoption(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_EffectOptionItem >*
      mutable_effectoption();
  private:
  const ::KMProto_KMProject_EffectOptionItem& _internal_effectoption(int index) const;
  ::KMProto_KMProject_EffectOptionItem* _internal_add_effectoption();
  public:
  const ::KMProto_KMProject_EffectOptionItem& effectoption(int index) const;
  ::KMProto_KMProject_EffectOptionItem* add_effectoption();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_EffectOptionItem >&
      effectoption() const;

  // optional string asset_item_id = 101;
  bool has_asset_item_id() const;
  private:
  bool _internal_has_asset_item_id() const;
  public:
  void clear_asset_item_id();
  const std::string& asset_item_id() const;
  void set_asset_item_id(const std::string& value);
  void set_asset_item_id(std::string&& value);
  void set_asset_item_id(const char* value);
  void set_asset_item_id(const char* value, size_t size);
  std::string* mutable_asset_item_id();
  std::string* release_asset_item_id();
  void set_allocated_asset_item_id(std::string* asset_item_id);
  private:
  const std::string& _internal_asset_item_id() const;
  void _internal_set_asset_item_id(const std::string& value);
  std::string* _internal_mutable_asset_item_id();
  public:

  // optional string asset_item_name_for_ios = 104;
  bool has_asset_item_name_for_ios() const;
  private:
  bool _internal_has_asset_item_name_for_ios() const;
  public:
  void clear_asset_item_name_for_ios();
  const std::string& asset_item_name_for_ios() const;
  void set_asset_item_name_for_ios(const std::string& value);
  void set_asset_item_name_for_ios(std::string&& value);
  void set_asset_item_name_for_ios(const char* value);
  void set_asset_item_name_for_ios(const char* value, size_t size);
  std::string* mutable_asset_item_name_for_ios();
  std::string* release_asset_item_name_for_ios();
  void set_allocated_asset_item_name_for_ios(std::string* asset_item_name_for_ios);
  private:
  const std::string& _internal_asset_item_name_for_ios() const;
  void _internal_set_asset_item_name_for_ios(const std::string& value);
  std::string* _internal_mutable_asset_item_name_for_ios();
  public:

  // optional string asset_name_for_ios = 105;
  bool has_asset_name_for_ios() const;
  private:
  bool _internal_has_asset_name_for_ios() const;
  public:
  void clear_asset_name_for_ios();
  const std::string& asset_name_for_ios() const;
  void set_asset_name_for_ios(const std::string& value);
  void set_asset_name_for_ios(std::string&& value);
  void set_asset_name_for_ios(const char* value);
  void set_asset_name_for_ios(const char* value, size_t size);
  std::string* mutable_asset_name_for_ios();
  std::string* release_asset_name_for_ios();
  void set_allocated_asset_name_for_ios(std::string* asset_name_for_ios);
  private:
  const std::string& _internal_asset_name_for_ios() const;
  void _internal_set_asset_name_for_ios(const std::string& value);
  std::string* _internal_mutable_asset_name_for_ios();
  public:

  // optional .KMProto.KMProject.LayerCommon layer_common = 100;
  bool has_layer_common() const;
  private:
  bool _internal_has_layer_common() const;
  public:
  void clear_layer_common();
  const ::KMProto_KMProject_LayerCommon& layer_common() const;
  ::KMProto_KMProject_LayerCommon* release_layer_common();
  ::KMProto_KMProject_LayerCommon* mutable_layer_common();
  void set_allocated_layer_common(::KMProto_KMProject_LayerCommon* layer_common);
  private:
  const ::KMProto_KMProject_LayerCommon& _internal_layer_common() const;
  ::KMProto_KMProject_LayerCommon* _internal_mutable_layer_common();
  public:
  void unsafe_arena_set_allocated_layer_common(
      ::KMProto_KMProject_LayerCommon* layer_common);
  ::KMProto_KMProject_LayerCommon* unsafe_arena_release_layer_common();

  // optional .KMProto.KMProject.StringHashMap effect_options = 102;
  bool has_effect_options() const;
  private:
  bool _internal_has_effect_options() const;
  public:
  void clear_effect_options();
  const ::KMProto_KMProject_StringHashMap& effect_options() const;
  ::KMProto_KMProject_StringHashMap* release_effect_options();
  ::KMProto_KMProject_StringHashMap* mutable_effect_options();
  void set_allocated_effect_options(::KMProto_KMProject_StringHashMap* effect_options);
  private:
  const ::KMProto_KMProject_StringHashMap& _internal_effect_options() const;
  ::KMProto_KMProject_StringHashMap* _internal_mutable_effect_options();
  public:
  void unsafe_arena_set_allocated_effect_options(
      ::KMProto_KMProject_StringHashMap* effect_options);
  ::KMProto_KMProject_StringHashMap* unsafe_arena_release_effect_options();

  // optional bool sync_xy_scale = 106;
  bool has_sync_xy_scale() const;
  private:
  bool _internal_has_sync_xy_scale() const;
  public:
  void clear_sync_xy_scale();
  bool sync_xy_scale() const;
  void set_sync_xy_scale(bool value);
  private:
  bool _internal_sync_xy_scale() const;
  void _internal_set_sync_xy_scale(bool value);
  public:

  // optional .KMProto.KMProject.AssetLayer.AssetLayerType asset_layer_type = 103;
  bool has_asset_layer_type() const;
  private:
  bool _internal_has_asset_layer_type() const;
  public:
  void clear_asset_layer_type();
  ::KMProto_KMProject_AssetLayer_AssetLayerType asset_layer_type() const;
  void set_asset_layer_type(::KMProto_KMProject_AssetLayer_AssetLayerType value);
  private:
  ::KMProto_KMProject_AssetLayer_AssetLayerType _internal_asset_layer_type() const;
  void _internal_set_asset_layer_type(::KMProto_KMProject_AssetLayer_AssetLayerType value);
  public:

  // @@protoc_insertion_point(class_scope:KMProto.KMProject.AssetLayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_EffectOptionItem > effectoption_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_item_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_item_name_for_ios_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_name_for_ios_;
  ::KMProto_KMProject_LayerCommon* layer_common_;
  ::KMProto_KMProject_StringHashMap* effect_options_;
  bool sync_xy_scale_;
  int asset_layer_type_;
  friend struct ::TableStruct_kinemaster_5fproject_5fwire_2dlite_2eproto;
};
// -------------------------------------------------------------------

class KMProto_KMProject_EffectLayer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:KMProto.KMProject.EffectLayer) */ {
 public:
  inline KMProto_KMProject_EffectLayer() : KMProto_KMProject_EffectLayer(nullptr) {}
  virtual ~KMProto_KMProject_EffectLayer();

  KMProto_KMProject_EffectLayer(const KMProto_KMProject_EffectLayer& from);
  KMProto_KMProject_EffectLayer(KMProto_KMProject_EffectLayer&& from) noexcept
    : KMProto_KMProject_EffectLayer() {
    *this = ::std::move(from);
  }

  inline KMProto_KMProject_EffectLayer& operator=(const KMProto_KMProject_EffectLayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline KMProto_KMProject_EffectLayer& operator=(KMProto_KMProject_EffectLayer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const KMProto_KMProject_EffectLayer& default_instance();

  static inline const KMProto_KMProject_EffectLayer* internal_default_instance() {
    return reinterpret_cast<const KMProto_KMProject_EffectLayer*>(
               &_KMProto_KMProject_EffectLayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(KMProto_KMProject_EffectLayer& a, KMProto_KMProject_EffectLayer& b) {
    a.Swap(&b);
  }
  inline void Swap(KMProto_KMProject_EffectLayer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KMProto_KMProject_EffectLayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KMProto_KMProject_EffectLayer* New() const final {
    return CreateMaybeMessage<KMProto_KMProject_EffectLayer>(nullptr);
  }

  KMProto_KMProject_EffectLayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KMProto_KMProject_EffectLayer>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const KMProto_KMProject_EffectLayer& from);
  void MergeFrom(const KMProto_KMProject_EffectLayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KMProto_KMProject_EffectLayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KMProto.KMProject.EffectLayer";
  }
  protected:
  explicit KMProto_KMProject_EffectLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEffectIdFieldNumber = 101,
    kLayerCommonFieldNumber = 100,
    kEffectStrengthFieldNumber = 102,
    kEffectVariationFieldNumber = 103,
  };
  // optional string effect_id = 101;
  bool has_effect_id() const;
  private:
  bool _internal_has_effect_id() const;
  public:
  void clear_effect_id();
  const std::string& effect_id() const;
  void set_effect_id(const std::string& value);
  void set_effect_id(std::string&& value);
  void set_effect_id(const char* value);
  void set_effect_id(const char* value, size_t size);
  std::string* mutable_effect_id();
  std::string* release_effect_id();
  void set_allocated_effect_id(std::string* effect_id);
  private:
  const std::string& _internal_effect_id() const;
  void _internal_set_effect_id(const std::string& value);
  std::string* _internal_mutable_effect_id();
  public:

  // optional .KMProto.KMProject.LayerCommon layer_common = 100;
  bool has_layer_common() const;
  private:
  bool _internal_has_layer_common() const;
  public:
  void clear_layer_common();
  const ::KMProto_KMProject_LayerCommon& layer_common() const;
  ::KMProto_KMProject_LayerCommon* release_layer_common();
  ::KMProto_KMProject_LayerCommon* mutable_layer_common();
  void set_allocated_layer_common(::KMProto_KMProject_LayerCommon* layer_common);
  private:
  const ::KMProto_KMProject_LayerCommon& _internal_layer_common() const;
  ::KMProto_KMProject_LayerCommon* _internal_mutable_layer_common();
  public:
  void unsafe_arena_set_allocated_layer_common(
      ::KMProto_KMProject_LayerCommon* layer_common);
  ::KMProto_KMProject_LayerCommon* unsafe_arena_release_layer_common();

  // optional float effect_strength = 102;
  bool has_effect_strength() const;
  private:
  bool _internal_has_effect_strength() const;
  public:
  void clear_effect_strength();
  float effect_strength() const;
  void set_effect_strength(float value);
  private:
  float _internal_effect_strength() const;
  void _internal_set_effect_strength(float value);
  public:

  // optional float effect_variation = 103;
  bool has_effect_variation() const;
  private:
  bool _internal_has_effect_variation() const;
  public:
  void clear_effect_variation();
  float effect_variation() const;
  void set_effect_variation(float value);
  private:
  float _internal_effect_variation() const;
  void _internal_set_effect_variation(float value);
  public:

  // @@protoc_insertion_point(class_scope:KMProto.KMProject.EffectLayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr effect_id_;
  ::KMProto_KMProject_LayerCommon* layer_common_;
  float effect_strength_;
  float effect_variation_;
  friend struct ::TableStruct_kinemaster_5fproject_5fwire_2dlite_2eproto;
};
// -------------------------------------------------------------------

class KMProto_KMProject_ImageLayer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:KMProto.KMProject.ImageLayer) */ {
 public:
  inline KMProto_KMProject_ImageLayer() : KMProto_KMProject_ImageLayer(nullptr) {}
  virtual ~KMProto_KMProject_ImageLayer();

  KMProto_KMProject_ImageLayer(const KMProto_KMProject_ImageLayer& from);
  KMProto_KMProject_ImageLayer(KMProto_KMProject_ImageLayer&& from) noexcept
    : KMProto_KMProject_ImageLayer() {
    *this = ::std::move(from);
  }

  inline KMProto_KMProject_ImageLayer& operator=(const KMProto_KMProject_ImageLayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline KMProto_KMProject_ImageLayer& operator=(KMProto_KMProject_ImageLayer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const KMProto_KMProject_ImageLayer& default_instance();

  static inline const KMProto_KMProject_ImageLayer* internal_default_instance() {
    return reinterpret_cast<const KMProto_KMProject_ImageLayer*>(
               &_KMProto_KMProject_ImageLayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(KMProto_KMProject_ImageLayer& a, KMProto_KMProject_ImageLayer& b) {
    a.Swap(&b);
  }
  inline void Swap(KMProto_KMProject_ImageLayer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KMProto_KMProject_ImageLayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KMProto_KMProject_ImageLayer* New() const final {
    return CreateMaybeMessage<KMProto_KMProject_ImageLayer>(nullptr);
  }

  KMProto_KMProject_ImageLayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KMProto_KMProject_ImageLayer>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const KMProto_KMProject_ImageLayer& from);
  void MergeFrom(const KMProto_KMProject_ImageLayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KMProto_KMProject_ImageLayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KMProto.KMProject.ImageLayer";
  }
  protected:
  explicit KMProto_KMProject_ImageLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDrawingActionsFieldNumber = 107,
    kImagePathFieldNumber = 101,
    kImageMsidFieldNumber = 102,
    kLayerCommonFieldNumber = 100,
    kColorEffectFieldNumber = 106,
    kColorAdjustmentFieldNumber = 116,
    kColorFilterFieldNumber = 117,
    kBrightnessFieldNumber = 103,
    kContrastFieldNumber = 104,
    kSaturationFieldNumber = 105,
    kChromaKeyColorFieldNumber = 108,
    kChromaKeyEnabledFieldNumber = 109,
    kChromaKeyClipFgFieldNumber = 110,
    kChromaKeyClipBgFieldNumber = 111,
    kChromaKeyBlendX0FieldNumber = 112,
    kChromaKeyBlendY0FieldNumber = 113,
    kChromaKeyBlendX1FieldNumber = 114,
    kChromaKeyBlendY1FieldNumber = 115,
    kEngineClipIdFieldNumber = 118,
  };
  // repeated .KMProto.KMProject.DrawingAction drawing_actions = 107;
  int drawing_actions_size() const;
  private:
  int _internal_drawing_actions_size() const;
  public:
  void clear_drawing_actions();
  ::KMProto_KMProject_DrawingAction* mutable_drawing_actions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_DrawingAction >*
      mutable_drawing_actions();
  private:
  const ::KMProto_KMProject_DrawingAction& _internal_drawing_actions(int index) const;
  ::KMProto_KMProject_DrawingAction* _internal_add_drawing_actions();
  public:
  const ::KMProto_KMProject_DrawingAction& drawing_actions(int index) const;
  ::KMProto_KMProject_DrawingAction* add_drawing_actions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_DrawingAction >&
      drawing_actions() const;

  // optional string image_path = 101;
  bool has_image_path() const;
  private:
  bool _internal_has_image_path() const;
  public:
  void clear_image_path();
  const std::string& image_path() const;
  void set_image_path(const std::string& value);
  void set_image_path(std::string&& value);
  void set_image_path(const char* value);
  void set_image_path(const char* value, size_t size);
  std::string* mutable_image_path();
  std::string* release_image_path();
  void set_allocated_image_path(std::string* image_path);
  private:
  const std::string& _internal_image_path() const;
  void _internal_set_image_path(const std::string& value);
  std::string* _internal_mutable_image_path();
  public:

  // optional string image_msid = 102;
  bool has_image_msid() const;
  private:
  bool _internal_has_image_msid() const;
  public:
  void clear_image_msid();
  const std::string& image_msid() const;
  void set_image_msid(const std::string& value);
  void set_image_msid(std::string&& value);
  void set_image_msid(const char* value);
  void set_image_msid(const char* value, size_t size);
  std::string* mutable_image_msid();
  std::string* release_image_msid();
  void set_allocated_image_msid(std::string* image_msid);
  private:
  const std::string& _internal_image_msid() const;
  void _internal_set_image_msid(const std::string& value);
  std::string* _internal_mutable_image_msid();
  public:

  // optional .KMProto.KMProject.LayerCommon layer_common = 100;
  bool has_layer_common() const;
  private:
  bool _internal_has_layer_common() const;
  public:
  void clear_layer_common();
  const ::KMProto_KMProject_LayerCommon& layer_common() const;
  ::KMProto_KMProject_LayerCommon* release_layer_common();
  ::KMProto_KMProject_LayerCommon* mutable_layer_common();
  void set_allocated_layer_common(::KMProto_KMProject_LayerCommon* layer_common);
  private:
  const ::KMProto_KMProject_LayerCommon& _internal_layer_common() const;
  ::KMProto_KMProject_LayerCommon* _internal_mutable_layer_common();
  public:
  void unsafe_arena_set_allocated_layer_common(
      ::KMProto_KMProject_LayerCommon* layer_common);
  ::KMProto_KMProject_LayerCommon* unsafe_arena_release_layer_common();

  // optional .KMProto.KMProject.ColorEffect color_effect = 106;
  bool has_color_effect() const;
  private:
  bool _internal_has_color_effect() const;
  public:
  void clear_color_effect();
  const ::KMProto_KMProject_ColorEffect& color_effect() const;
  ::KMProto_KMProject_ColorEffect* release_color_effect();
  ::KMProto_KMProject_ColorEffect* mutable_color_effect();
  void set_allocated_color_effect(::KMProto_KMProject_ColorEffect* color_effect);
  private:
  const ::KMProto_KMProject_ColorEffect& _internal_color_effect() const;
  ::KMProto_KMProject_ColorEffect* _internal_mutable_color_effect();
  public:
  void unsafe_arena_set_allocated_color_effect(
      ::KMProto_KMProject_ColorEffect* color_effect);
  ::KMProto_KMProject_ColorEffect* unsafe_arena_release_color_effect();

  // optional .KMProto.KMProject.ColorAdjustment colorAdjustment = 116;
  bool has_coloradjustment() const;
  private:
  bool _internal_has_coloradjustment() const;
  public:
  void clear_coloradjustment();
  const ::KMProto_KMProject_ColorAdjustment& coloradjustment() const;
  ::KMProto_KMProject_ColorAdjustment* release_coloradjustment();
  ::KMProto_KMProject_ColorAdjustment* mutable_coloradjustment();
  void set_allocated_coloradjustment(::KMProto_KMProject_ColorAdjustment* coloradjustment);
  private:
  const ::KMProto_KMProject_ColorAdjustment& _internal_coloradjustment() const;
  ::KMProto_KMProject_ColorAdjustment* _internal_mutable_coloradjustment();
  public:
  void unsafe_arena_set_allocated_coloradjustment(
      ::KMProto_KMProject_ColorAdjustment* coloradjustment);
  ::KMProto_KMProject_ColorAdjustment* unsafe_arena_release_coloradjustment();

  // optional .KMProto.KMProject.ColorFilter colorFilter = 117;
  bool has_colorfilter() const;
  private:
  bool _internal_has_colorfilter() const;
  public:
  void clear_colorfilter();
  const ::KMProto_KMProject_ColorFilter& colorfilter() const;
  ::KMProto_KMProject_ColorFilter* release_colorfilter();
  ::KMProto_KMProject_ColorFilter* mutable_colorfilter();
  void set_allocated_colorfilter(::KMProto_KMProject_ColorFilter* colorfilter);
  private:
  const ::KMProto_KMProject_ColorFilter& _internal_colorfilter() const;
  ::KMProto_KMProject_ColorFilter* _internal_mutable_colorfilter();
  public:
  void unsafe_arena_set_allocated_colorfilter(
      ::KMProto_KMProject_ColorFilter* colorfilter);
  ::KMProto_KMProject_ColorFilter* unsafe_arena_release_colorfilter();

  // optional int32 brightness = 103;
  bool has_brightness() const;
  private:
  bool _internal_has_brightness() const;
  public:
  void clear_brightness();
  ::PROTOBUF_NAMESPACE_ID::int32 brightness() const;
  void set_brightness(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_brightness() const;
  void _internal_set_brightness(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 contrast = 104;
  bool has_contrast() const;
  private:
  bool _internal_has_contrast() const;
  public:
  void clear_contrast();
  ::PROTOBUF_NAMESPACE_ID::int32 contrast() const;
  void set_contrast(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_contrast() const;
  void _internal_set_contrast(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 saturation = 105;
  bool has_saturation() const;
  private:
  bool _internal_has_saturation() const;
  public:
  void clear_saturation();
  ::PROTOBUF_NAMESPACE_ID::int32 saturation() const;
  void set_saturation(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_saturation() const;
  void _internal_set_saturation(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 chroma_key_color = 108;
  bool has_chroma_key_color() const;
  private:
  bool _internal_has_chroma_key_color() const;
  public:
  void clear_chroma_key_color();
  ::PROTOBUF_NAMESPACE_ID::int32 chroma_key_color() const;
  void set_chroma_key_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chroma_key_color() const;
  void _internal_set_chroma_key_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool chroma_key_enabled = 109;
  bool has_chroma_key_enabled() const;
  private:
  bool _internal_has_chroma_key_enabled() const;
  public:
  void clear_chroma_key_enabled();
  bool chroma_key_enabled() const;
  void set_chroma_key_enabled(bool value);
  private:
  bool _internal_chroma_key_enabled() const;
  void _internal_set_chroma_key_enabled(bool value);
  public:

  // optional float chroma_key_clip_fg = 110;
  bool has_chroma_key_clip_fg() const;
  private:
  bool _internal_has_chroma_key_clip_fg() const;
  public:
  void clear_chroma_key_clip_fg();
  float chroma_key_clip_fg() const;
  void set_chroma_key_clip_fg(float value);
  private:
  float _internal_chroma_key_clip_fg() const;
  void _internal_set_chroma_key_clip_fg(float value);
  public:

  // optional float chroma_key_clip_bg = 111;
  bool has_chroma_key_clip_bg() const;
  private:
  bool _internal_has_chroma_key_clip_bg() const;
  public:
  void clear_chroma_key_clip_bg();
  float chroma_key_clip_bg() const;
  void set_chroma_key_clip_bg(float value);
  private:
  float _internal_chroma_key_clip_bg() const;
  void _internal_set_chroma_key_clip_bg(float value);
  public:

  // optional float chroma_key_blend_x0 = 112;
  bool has_chroma_key_blend_x0() const;
  private:
  bool _internal_has_chroma_key_blend_x0() const;
  public:
  void clear_chroma_key_blend_x0();
  float chroma_key_blend_x0() const;
  void set_chroma_key_blend_x0(float value);
  private:
  float _internal_chroma_key_blend_x0() const;
  void _internal_set_chroma_key_blend_x0(float value);
  public:

  // optional float chroma_key_blend_y0 = 113;
  bool has_chroma_key_blend_y0() const;
  private:
  bool _internal_has_chroma_key_blend_y0() const;
  public:
  void clear_chroma_key_blend_y0();
  float chroma_key_blend_y0() const;
  void set_chroma_key_blend_y0(float value);
  private:
  float _internal_chroma_key_blend_y0() const;
  void _internal_set_chroma_key_blend_y0(float value);
  public:

  // optional float chroma_key_blend_x1 = 114;
  bool has_chroma_key_blend_x1() const;
  private:
  bool _internal_has_chroma_key_blend_x1() const;
  public:
  void clear_chroma_key_blend_x1();
  float chroma_key_blend_x1() const;
  void set_chroma_key_blend_x1(float value);
  private:
  float _internal_chroma_key_blend_x1() const;
  void _internal_set_chroma_key_blend_x1(float value);
  public:

  // optional float chroma_key_blend_y1 = 115;
  bool has_chroma_key_blend_y1() const;
  private:
  bool _internal_has_chroma_key_blend_y1() const;
  public:
  void clear_chroma_key_blend_y1();
  float chroma_key_blend_y1() const;
  void set_chroma_key_blend_y1(float value);
  private:
  float _internal_chroma_key_blend_y1() const;
  void _internal_set_chroma_key_blend_y1(float value);
  public:

  // optional int32 engine_clip_id = 118;
  bool has_engine_clip_id() const;
  private:
  bool _internal_has_engine_clip_id() const;
  public:
  void clear_engine_clip_id();
  ::PROTOBUF_NAMESPACE_ID::int32 engine_clip_id() const;
  void set_engine_clip_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_engine_clip_id() const;
  void _internal_set_engine_clip_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KMProto.KMProject.ImageLayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_DrawingAction > drawing_actions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_msid_;
  ::KMProto_KMProject_LayerCommon* layer_common_;
  ::KMProto_KMProject_ColorEffect* color_effect_;
  ::KMProto_KMProject_ColorAdjustment* coloradjustment_;
  ::KMProto_KMProject_ColorFilter* colorfilter_;
  ::PROTOBUF_NAMESPACE_ID::int32 brightness_;
  ::PROTOBUF_NAMESPACE_ID::int32 contrast_;
  ::PROTOBUF_NAMESPACE_ID::int32 saturation_;
  ::PROTOBUF_NAMESPACE_ID::int32 chroma_key_color_;
  bool chroma_key_enabled_;
  float chroma_key_clip_fg_;
  float chroma_key_clip_bg_;
  float chroma_key_blend_x0_;
  float chroma_key_blend_y0_;
  float chroma_key_blend_x1_;
  float chroma_key_blend_y1_;
  ::PROTOBUF_NAMESPACE_ID::int32 engine_clip_id_;
  friend struct ::TableStruct_kinemaster_5fproject_5fwire_2dlite_2eproto;
};
// -------------------------------------------------------------------

class KMProto_KMProject_VideoLayer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:KMProto.KMProject.VideoLayer) */ {
 public:
  inline KMProto_KMProject_VideoLayer() : KMProto_KMProject_VideoLayer(nullptr) {}
  virtual ~KMProto_KMProject_VideoLayer();

  KMProto_KMProject_VideoLayer(const KMProto_KMProject_VideoLayer& from);
  KMProto_KMProject_VideoLayer(KMProto_KMProject_VideoLayer&& from) noexcept
    : KMProto_KMProject_VideoLayer() {
    *this = ::std::move(from);
  }

  inline KMProto_KMProject_VideoLayer& operator=(const KMProto_KMProject_VideoLayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline KMProto_KMProject_VideoLayer& operator=(KMProto_KMProject_VideoLayer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const KMProto_KMProject_VideoLayer& default_instance();

  static inline const KMProto_KMProject_VideoLayer* internal_default_instance() {
    return reinterpret_cast<const KMProto_KMProject_VideoLayer*>(
               &_KMProto_KMProject_VideoLayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(KMProto_KMProject_VideoLayer& a, KMProto_KMProject_VideoLayer& b) {
    a.Swap(&b);
  }
  inline void Swap(KMProto_KMProject_VideoLayer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KMProto_KMProject_VideoLayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KMProto_KMProject_VideoLayer* New() const final {
    return CreateMaybeMessage<KMProto_KMProject_VideoLayer>(nullptr);
  }

  KMProto_KMProject_VideoLayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KMProto_KMProject_VideoLayer>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const KMProto_KMProject_VideoLayer& from);
  void MergeFrom(const KMProto_KMProject_VideoLayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KMProto_KMProject_VideoLayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KMProto.KMProject.VideoLayer";
  }
  protected:
  explicit KMProto_KMProject_VideoLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChromaKeyDivisionsFieldNumber = 1,
    kChromaKeyStrengthsFieldNumber = 2,
    kVolumeEnvelopeTimeFieldNumber = 116,
    kVolumeEnvelopeLevelFieldNumber = 117,
    kVideoPathFieldNumber = 101,
    kVideoMsidFieldNumber = 102,
    kIosMediaAssetIdFieldNumber = 131,
    kEnhancedAudioFilterFieldNumber = 132,
    kEqualizerFieldNumber = 133,
    kReverbFieldNumber = 135,
    kLayerCommonFieldNumber = 100,
    kColorEffectFieldNumber = 106,
    kClipRangeFieldNumber = 134,
    kColorAdjustmentFieldNumber = 136,
    kColorFilterFieldNumber = 137,
    kKeepPitchFieldNumber = 138,
    kBrightnessFieldNumber = 103,
    kContrastFieldNumber = 104,
    kSaturationFieldNumber = 105,
    kEngineClipIdFieldNumber = 107,
    kOriginalClipDurationFieldNumber = 108,
    kOriginalVideoWidthFieldNumber = 109,
    kOriginalVideoHeightFieldNumber = 110,
    kHasAudioFieldNumber = 111,
    kHasVideoFieldNumber = 112,
    kMuteAudioFieldNumber = 113,
    kChromaKeyEnabledFieldNumber = 119,
    kClipVolumeFieldNumber = 114,
    kPlaybackSpeedFieldNumber = 115,
    kChromaKeyColorFieldNumber = 118,
    kChromaKeyClipFgFieldNumber = 120,
    kChromaKeyClipBgFieldNumber = 121,
    kChromaKeyBlendX0FieldNumber = 122,
    kChromaKeyBlendY0FieldNumber = 123,
    kChromaKeyBlendX1FieldNumber = 124,
    kChromaKeyBlendY1FieldNumber = 125,
    kVoiceChangerFieldNumber = 126,
    kPanLeftFieldNumber = 127,
    kPanRightFieldNumber = 128,
    kCompressorFieldNumber = 129,
    kPitchFactorFieldNumber = 130,
  };
  // repeated float chroma_key_divisions = 1 [packed = true];
  int chroma_key_divisions_size() const;
  private:
  int _internal_chroma_key_divisions_size() const;
  public:
  void clear_chroma_key_divisions();
  private:
  float _internal_chroma_key_divisions(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_chroma_key_divisions() const;
  void _internal_add_chroma_key_divisions(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_chroma_key_divisions();
  public:
  float chroma_key_divisions(int index) const;
  void set_chroma_key_divisions(int index, float value);
  void add_chroma_key_divisions(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      chroma_key_divisions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_chroma_key_divisions();

  // repeated float chroma_key_strengths = 2 [packed = true];
  int chroma_key_strengths_size() const;
  private:
  int _internal_chroma_key_strengths_size() const;
  public:
  void clear_chroma_key_strengths();
  private:
  float _internal_chroma_key_strengths(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_chroma_key_strengths() const;
  void _internal_add_chroma_key_strengths(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_chroma_key_strengths();
  public:
  float chroma_key_strengths(int index) const;
  void set_chroma_key_strengths(int index, float value);
  void add_chroma_key_strengths(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      chroma_key_strengths() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_chroma_key_strengths();

  // repeated int32 volume_envelope_time = 116 [packed = true];
  int volume_envelope_time_size() const;
  private:
  int _internal_volume_envelope_time_size() const;
  public:
  void clear_volume_envelope_time();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_volume_envelope_time(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_volume_envelope_time() const;
  void _internal_add_volume_envelope_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_volume_envelope_time();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 volume_envelope_time(int index) const;
  void set_volume_envelope_time(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_volume_envelope_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      volume_envelope_time() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_volume_envelope_time();

  // repeated int32 volume_envelope_level = 117 [packed = true];
  int volume_envelope_level_size() const;
  private:
  int _internal_volume_envelope_level_size() const;
  public:
  void clear_volume_envelope_level();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_volume_envelope_level(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_volume_envelope_level() const;
  void _internal_add_volume_envelope_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_volume_envelope_level();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 volume_envelope_level(int index) const;
  void set_volume_envelope_level(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_volume_envelope_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      volume_envelope_level() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_volume_envelope_level();

  // optional string video_path = 101;
  bool has_video_path() const;
  private:
  bool _internal_has_video_path() const;
  public:
  void clear_video_path();
  const std::string& video_path() const;
  void set_video_path(const std::string& value);
  void set_video_path(std::string&& value);
  void set_video_path(const char* value);
  void set_video_path(const char* value, size_t size);
  std::string* mutable_video_path();
  std::string* release_video_path();
  void set_allocated_video_path(std::string* video_path);
  private:
  const std::string& _internal_video_path() const;
  void _internal_set_video_path(const std::string& value);
  std::string* _internal_mutable_video_path();
  public:

  // optional string video_msid = 102;
  bool has_video_msid() const;
  private:
  bool _internal_has_video_msid() const;
  public:
  void clear_video_msid();
  const std::string& video_msid() const;
  void set_video_msid(const std::string& value);
  void set_video_msid(std::string&& value);
  void set_video_msid(const char* value);
  void set_video_msid(const char* value, size_t size);
  std::string* mutable_video_msid();
  std::string* release_video_msid();
  void set_allocated_video_msid(std::string* video_msid);
  private:
  const std::string& _internal_video_msid() const;
  void _internal_set_video_msid(const std::string& value);
  std::string* _internal_mutable_video_msid();
  public:

  // optional string ios_media_asset_id = 131;
  bool has_ios_media_asset_id() const;
  private:
  bool _internal_has_ios_media_asset_id() const;
  public:
  void clear_ios_media_asset_id();
  const std::string& ios_media_asset_id() const;
  void set_ios_media_asset_id(const std::string& value);
  void set_ios_media_asset_id(std::string&& value);
  void set_ios_media_asset_id(const char* value);
  void set_ios_media_asset_id(const char* value, size_t size);
  std::string* mutable_ios_media_asset_id();
  std::string* release_ios_media_asset_id();
  void set_allocated_ios_media_asset_id(std::string* ios_media_asset_id);
  private:
  const std::string& _internal_ios_media_asset_id() const;
  void _internal_set_ios_media_asset_id(const std::string& value);
  std::string* _internal_mutable_ios_media_asset_id();
  public:

  // optional string enhancedAudioFilter = 132;
  bool has_enhancedaudiofilter() const;
  private:
  bool _internal_has_enhancedaudiofilter() const;
  public:
  void clear_enhancedaudiofilter();
  const std::string& enhancedaudiofilter() const;
  void set_enhancedaudiofilter(const std::string& value);
  void set_enhancedaudiofilter(std::string&& value);
  void set_enhancedaudiofilter(const char* value);
  void set_enhancedaudiofilter(const char* value, size_t size);
  std::string* mutable_enhancedaudiofilter();
  std::string* release_enhancedaudiofilter();
  void set_allocated_enhancedaudiofilter(std::string* enhancedaudiofilter);
  private:
  const std::string& _internal_enhancedaudiofilter() const;
  void _internal_set_enhancedaudiofilter(const std::string& value);
  std::string* _internal_mutable_enhancedaudiofilter();
  public:

  // optional string equalizer = 133;
  bool has_equalizer() const;
  private:
  bool _internal_has_equalizer() const;
  public:
  void clear_equalizer();
  const std::string& equalizer() const;
  void set_equalizer(const std::string& value);
  void set_equalizer(std::string&& value);
  void set_equalizer(const char* value);
  void set_equalizer(const char* value, size_t size);
  std::string* mutable_equalizer();
  std::string* release_equalizer();
  void set_allocated_equalizer(std::string* equalizer);
  private:
  const std::string& _internal_equalizer() const;
  void _internal_set_equalizer(const std::string& value);
  std::string* _internal_mutable_equalizer();
  public:

  // optional string reverb = 135;
  bool has_reverb() const;
  private:
  bool _internal_has_reverb() const;
  public:
  void clear_reverb();
  const std::string& reverb() const;
  void set_reverb(const std::string& value);
  void set_reverb(std::string&& value);
  void set_reverb(const char* value);
  void set_reverb(const char* value, size_t size);
  std::string* mutable_reverb();
  std::string* release_reverb();
  void set_allocated_reverb(std::string* reverb);
  private:
  const std::string& _internal_reverb() const;
  void _internal_set_reverb(const std::string& value);
  std::string* _internal_mutable_reverb();
  public:

  // optional .KMProto.KMProject.LayerCommon layer_common = 100;
  bool has_layer_common() const;
  private:
  bool _internal_has_layer_common() const;
  public:
  void clear_layer_common();
  const ::KMProto_KMProject_LayerCommon& layer_common() const;
  ::KMProto_KMProject_LayerCommon* release_layer_common();
  ::KMProto_KMProject_LayerCommon* mutable_layer_common();
  void set_allocated_layer_common(::KMProto_KMProject_LayerCommon* layer_common);
  private:
  const ::KMProto_KMProject_LayerCommon& _internal_layer_common() const;
  ::KMProto_KMProject_LayerCommon* _internal_mutable_layer_common();
  public:
  void unsafe_arena_set_allocated_layer_common(
      ::KMProto_KMProject_LayerCommon* layer_common);
  ::KMProto_KMProject_LayerCommon* unsafe_arena_release_layer_common();

  // optional .KMProto.KMProject.ColorEffect color_effect = 106;
  bool has_color_effect() const;
  private:
  bool _internal_has_color_effect() const;
  public:
  void clear_color_effect();
  const ::KMProto_KMProject_ColorEffect& color_effect() const;
  ::KMProto_KMProject_ColorEffect* release_color_effect();
  ::KMProto_KMProject_ColorEffect* mutable_color_effect();
  void set_allocated_color_effect(::KMProto_KMProject_ColorEffect* color_effect);
  private:
  const ::KMProto_KMProject_ColorEffect& _internal_color_effect() const;
  ::KMProto_KMProject_ColorEffect* _internal_mutable_color_effect();
  public:
  void unsafe_arena_set_allocated_color_effect(
      ::KMProto_KMProject_ColorEffect* color_effect);
  ::KMProto_KMProject_ColorEffect* unsafe_arena_release_color_effect();

  // optional .KMProto.KMProject.ClipRange clipRange = 134;
  bool has_cliprange() const;
  private:
  bool _internal_has_cliprange() const;
  public:
  void clear_cliprange();
  const ::KMProto_KMProject_ClipRange& cliprange() const;
  ::KMProto_KMProject_ClipRange* release_cliprange();
  ::KMProto_KMProject_ClipRange* mutable_cliprange();
  void set_allocated_cliprange(::KMProto_KMProject_ClipRange* cliprange);
  private:
  const ::KMProto_KMProject_ClipRange& _internal_cliprange() const;
  ::KMProto_KMProject_ClipRange* _internal_mutable_cliprange();
  public:
  void unsafe_arena_set_allocated_cliprange(
      ::KMProto_KMProject_ClipRange* cliprange);
  ::KMProto_KMProject_ClipRange* unsafe_arena_release_cliprange();

  // optional .KMProto.KMProject.ColorAdjustment colorAdjustment = 136;
  bool has_coloradjustment() const;
  private:
  bool _internal_has_coloradjustment() const;
  public:
  void clear_coloradjustment();
  const ::KMProto_KMProject_ColorAdjustment& coloradjustment() const;
  ::KMProto_KMProject_ColorAdjustment* release_coloradjustment();
  ::KMProto_KMProject_ColorAdjustment* mutable_coloradjustment();
  void set_allocated_coloradjustment(::KMProto_KMProject_ColorAdjustment* coloradjustment);
  private:
  const ::KMProto_KMProject_ColorAdjustment& _internal_coloradjustment() const;
  ::KMProto_KMProject_ColorAdjustment* _internal_mutable_coloradjustment();
  public:
  void unsafe_arena_set_allocated_coloradjustment(
      ::KMProto_KMProject_ColorAdjustment* coloradjustment);
  ::KMProto_KMProject_ColorAdjustment* unsafe_arena_release_coloradjustment();

  // optional .KMProto.KMProject.ColorFilter colorFilter = 137;
  bool has_colorfilter() const;
  private:
  bool _internal_has_colorfilter() const;
  public:
  void clear_colorfilter();
  const ::KMProto_KMProject_ColorFilter& colorfilter() const;
  ::KMProto_KMProject_ColorFilter* release_colorfilter();
  ::KMProto_KMProject_ColorFilter* mutable_colorfilter();
  void set_allocated_colorfilter(::KMProto_KMProject_ColorFilter* colorfilter);
  private:
  const ::KMProto_KMProject_ColorFilter& _internal_colorfilter() const;
  ::KMProto_KMProject_ColorFilter* _internal_mutable_colorfilter();
  public:
  void unsafe_arena_set_allocated_colorfilter(
      ::KMProto_KMProject_ColorFilter* colorfilter);
  ::KMProto_KMProject_ColorFilter* unsafe_arena_release_colorfilter();

  // optional bool keepPitch = 138;
  bool has_keeppitch() const;
  private:
  bool _internal_has_keeppitch() const;
  public:
  void clear_keeppitch();
  bool keeppitch() const;
  void set_keeppitch(bool value);
  private:
  bool _internal_keeppitch() const;
  void _internal_set_keeppitch(bool value);
  public:

  // optional int32 brightness = 103;
  bool has_brightness() const;
  private:
  bool _internal_has_brightness() const;
  public:
  void clear_brightness();
  ::PROTOBUF_NAMESPACE_ID::int32 brightness() const;
  void set_brightness(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_brightness() const;
  void _internal_set_brightness(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 contrast = 104;
  bool has_contrast() const;
  private:
  bool _internal_has_contrast() const;
  public:
  void clear_contrast();
  ::PROTOBUF_NAMESPACE_ID::int32 contrast() const;
  void set_contrast(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_contrast() const;
  void _internal_set_contrast(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 saturation = 105;
  bool has_saturation() const;
  private:
  bool _internal_has_saturation() const;
  public:
  void clear_saturation();
  ::PROTOBUF_NAMESPACE_ID::int32 saturation() const;
  void set_saturation(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_saturation() const;
  void _internal_set_saturation(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 engine_clip_id = 107;
  bool has_engine_clip_id() const;
  private:
  bool _internal_has_engine_clip_id() const;
  public:
  void clear_engine_clip_id();
  ::PROTOBUF_NAMESPACE_ID::int32 engine_clip_id() const;
  void set_engine_clip_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_engine_clip_id() const;
  void _internal_set_engine_clip_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 original_clip_duration = 108;
  bool has_original_clip_duration() const;
  private:
  bool _internal_has_original_clip_duration() const;
  public:
  void clear_original_clip_duration();
  ::PROTOBUF_NAMESPACE_ID::int32 original_clip_duration() const;
  void set_original_clip_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_original_clip_duration() const;
  void _internal_set_original_clip_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 original_video_width = 109;
  bool has_original_video_width() const;
  private:
  bool _internal_has_original_video_width() const;
  public:
  void clear_original_video_width();
  ::PROTOBUF_NAMESPACE_ID::int32 original_video_width() const;
  void set_original_video_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_original_video_width() const;
  void _internal_set_original_video_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 original_video_height = 110;
  bool has_original_video_height() const;
  private:
  bool _internal_has_original_video_height() const;
  public:
  void clear_original_video_height();
  ::PROTOBUF_NAMESPACE_ID::int32 original_video_height() const;
  void set_original_video_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_original_video_height() const;
  void _internal_set_original_video_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool has_audio = 111;
  bool has_has_audio() const;
  private:
  bool _internal_has_has_audio() const;
  public:
  void clear_has_audio();
  bool has_audio() const;
  void set_has_audio(bool value);
  private:
  bool _internal_has_audio() const;
  void _internal_set_has_audio(bool value);
  public:

  // optional bool has_video = 112;
  bool has_has_video() const;
  private:
  bool _internal_has_has_video() const;
  public:
  void clear_has_video();
  bool has_video() const;
  void set_has_video(bool value);
  private:
  bool _internal_has_video() const;
  void _internal_set_has_video(bool value);
  public:

  // optional bool mute_audio = 113;
  bool has_mute_audio() const;
  private:
  bool _internal_has_mute_audio() const;
  public:
  void clear_mute_audio();
  bool mute_audio() const;
  void set_mute_audio(bool value);
  private:
  bool _internal_mute_audio() const;
  void _internal_set_mute_audio(bool value);
  public:

  // optional bool chroma_key_enabled = 119;
  bool has_chroma_key_enabled() const;
  private:
  bool _internal_has_chroma_key_enabled() const;
  public:
  void clear_chroma_key_enabled();
  bool chroma_key_enabled() const;
  void set_chroma_key_enabled(bool value);
  private:
  bool _internal_chroma_key_enabled() const;
  void _internal_set_chroma_key_enabled(bool value);
  public:

  // optional int32 clip_volume = 114;
  bool has_clip_volume() const;
  private:
  bool _internal_has_clip_volume() const;
  public:
  void clear_clip_volume();
  ::PROTOBUF_NAMESPACE_ID::int32 clip_volume() const;
  void set_clip_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_clip_volume() const;
  void _internal_set_clip_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 playback_speed = 115;
  bool has_playback_speed() const;
  private:
  bool _internal_has_playback_speed() const;
  public:
  void clear_playback_speed();
  ::PROTOBUF_NAMESPACE_ID::int32 playback_speed() const;
  void set_playback_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playback_speed() const;
  void _internal_set_playback_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 chroma_key_color = 118;
  bool has_chroma_key_color() const;
  private:
  bool _internal_has_chroma_key_color() const;
  public:
  void clear_chroma_key_color();
  ::PROTOBUF_NAMESPACE_ID::int32 chroma_key_color() const;
  void set_chroma_key_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chroma_key_color() const;
  void _internal_set_chroma_key_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float chroma_key_clip_fg = 120;
  bool has_chroma_key_clip_fg() const;
  private:
  bool _internal_has_chroma_key_clip_fg() const;
  public:
  void clear_chroma_key_clip_fg();
  float chroma_key_clip_fg() const;
  void set_chroma_key_clip_fg(float value);
  private:
  float _internal_chroma_key_clip_fg() const;
  void _internal_set_chroma_key_clip_fg(float value);
  public:

  // optional float chroma_key_clip_bg = 121;
  bool has_chroma_key_clip_bg() const;
  private:
  bool _internal_has_chroma_key_clip_bg() const;
  public:
  void clear_chroma_key_clip_bg();
  float chroma_key_clip_bg() const;
  void set_chroma_key_clip_bg(float value);
  private:
  float _internal_chroma_key_clip_bg() const;
  void _internal_set_chroma_key_clip_bg(float value);
  public:

  // optional float chroma_key_blend_x0 = 122;
  bool has_chroma_key_blend_x0() const;
  private:
  bool _internal_has_chroma_key_blend_x0() const;
  public:
  void clear_chroma_key_blend_x0();
  float chroma_key_blend_x0() const;
  void set_chroma_key_blend_x0(float value);
  private:
  float _internal_chroma_key_blend_x0() const;
  void _internal_set_chroma_key_blend_x0(float value);
  public:

  // optional float chroma_key_blend_y0 = 123;
  bool has_chroma_key_blend_y0() const;
  private:
  bool _internal_has_chroma_key_blend_y0() const;
  public:
  void clear_chroma_key_blend_y0();
  float chroma_key_blend_y0() const;
  void set_chroma_key_blend_y0(float value);
  private:
  float _internal_chroma_key_blend_y0() const;
  void _internal_set_chroma_key_blend_y0(float value);
  public:

  // optional float chroma_key_blend_x1 = 124;
  bool has_chroma_key_blend_x1() const;
  private:
  bool _internal_has_chroma_key_blend_x1() const;
  public:
  void clear_chroma_key_blend_x1();
  float chroma_key_blend_x1() const;
  void set_chroma_key_blend_x1(float value);
  private:
  float _internal_chroma_key_blend_x1() const;
  void _internal_set_chroma_key_blend_x1(float value);
  public:

  // optional float chroma_key_blend_y1 = 125;
  bool has_chroma_key_blend_y1() const;
  private:
  bool _internal_has_chroma_key_blend_y1() const;
  public:
  void clear_chroma_key_blend_y1();
  float chroma_key_blend_y1() const;
  void set_chroma_key_blend_y1(float value);
  private:
  float _internal_chroma_key_blend_y1() const;
  void _internal_set_chroma_key_blend_y1(float value);
  public:

  // optional int32 voice_changer = 126;
  bool has_voice_changer() const;
  private:
  bool _internal_has_voice_changer() const;
  public:
  void clear_voice_changer();
  ::PROTOBUF_NAMESPACE_ID::int32 voice_changer() const;
  void set_voice_changer(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_voice_changer() const;
  void _internal_set_voice_changer(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 pan_left = 127;
  bool has_pan_left() const;
  private:
  bool _internal_has_pan_left() const;
  public:
  void clear_pan_left();
  ::PROTOBUF_NAMESPACE_ID::int32 pan_left() const;
  void set_pan_left(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pan_left() const;
  void _internal_set_pan_left(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 pan_right = 128;
  bool has_pan_right() const;
  private:
  bool _internal_has_pan_right() const;
  public:
  void clear_pan_right();
  ::PROTOBUF_NAMESPACE_ID::int32 pan_right() const;
  void set_pan_right(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pan_right() const;
  void _internal_set_pan_right(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 compressor = 129;
  bool has_compressor() const;
  private:
  bool _internal_has_compressor() const;
  public:
  void clear_compressor();
  ::PROTOBUF_NAMESPACE_ID::int32 compressor() const;
  void set_compressor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_compressor() const;
  void _internal_set_compressor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 pitch_factor = 130;
  bool has_pitch_factor() const;
  private:
  bool _internal_has_pitch_factor() const;
  public:
  void clear_pitch_factor();
  ::PROTOBUF_NAMESPACE_ID::int32 pitch_factor() const;
  void set_pitch_factor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pitch_factor() const;
  void _internal_set_pitch_factor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KMProto.KMProject.VideoLayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > chroma_key_divisions_;
  mutable std::atomic<int> _chroma_key_divisions_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > chroma_key_strengths_;
  mutable std::atomic<int> _chroma_key_strengths_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > volume_envelope_time_;
  mutable std::atomic<int> _volume_envelope_time_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > volume_envelope_level_;
  mutable std::atomic<int> _volume_envelope_level_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr video_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr video_msid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ios_media_asset_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enhancedaudiofilter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr equalizer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reverb_;
  ::KMProto_KMProject_LayerCommon* layer_common_;
  ::KMProto_KMProject_ColorEffect* color_effect_;
  ::KMProto_KMProject_ClipRange* cliprange_;
  ::KMProto_KMProject_ColorAdjustment* coloradjustment_;
  ::KMProto_KMProject_ColorFilter* colorfilter_;
  bool keeppitch_;
  ::PROTOBUF_NAMESPACE_ID::int32 brightness_;
  ::PROTOBUF_NAMESPACE_ID::int32 contrast_;
  ::PROTOBUF_NAMESPACE_ID::int32 saturation_;
  ::PROTOBUF_NAMESPACE_ID::int32 engine_clip_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 original_clip_duration_;
  ::PROTOBUF_NAMESPACE_ID::int32 original_video_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 original_video_height_;
  bool has_audio_;
  bool has_video_;
  bool mute_audio_;
  bool chroma_key_enabled_;
  ::PROTOBUF_NAMESPACE_ID::int32 clip_volume_;
  ::PROTOBUF_NAMESPACE_ID::int32 playback_speed_;
  ::PROTOBUF_NAMESPACE_ID::int32 chroma_key_color_;
  float chroma_key_clip_fg_;
  float chroma_key_clip_bg_;
  float chroma_key_blend_x0_;
  float chroma_key_blend_y0_;
  float chroma_key_blend_x1_;
  float chroma_key_blend_y1_;
  ::PROTOBUF_NAMESPACE_ID::int32 voice_changer_;
  ::PROTOBUF_NAMESPACE_ID::int32 pan_left_;
  ::PROTOBUF_NAMESPACE_ID::int32 pan_right_;
  ::PROTOBUF_NAMESPACE_ID::int32 compressor_;
  ::PROTOBUF_NAMESPACE_ID::int32 pitch_factor_;
  friend struct ::TableStruct_kinemaster_5fproject_5fwire_2dlite_2eproto;
};
// -------------------------------------------------------------------

class KMProto_KMProject_ColorAdjustment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:KMProto.KMProject.ColorAdjustment) */ {
 public:
  inline KMProto_KMProject_ColorAdjustment() : KMProto_KMProject_ColorAdjustment(nullptr) {}
  virtual ~KMProto_KMProject_ColorAdjustment();

  KMProto_KMProject_ColorAdjustment(const KMProto_KMProject_ColorAdjustment& from);
  KMProto_KMProject_ColorAdjustment(KMProto_KMProject_ColorAdjustment&& from) noexcept
    : KMProto_KMProject_ColorAdjustment() {
    *this = ::std::move(from);
  }

  inline KMProto_KMProject_ColorAdjustment& operator=(const KMProto_KMProject_ColorAdjustment& from) {
    CopyFrom(from);
    return *this;
  }
  inline KMProto_KMProject_ColorAdjustment& operator=(KMProto_KMProject_ColorAdjustment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const KMProto_KMProject_ColorAdjustment& default_instance();

  static inline const KMProto_KMProject_ColorAdjustment* internal_default_instance() {
    return reinterpret_cast<const KMProto_KMProject_ColorAdjustment*>(
               &_KMProto_KMProject_ColorAdjustment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(KMProto_KMProject_ColorAdjustment& a, KMProto_KMProject_ColorAdjustment& b) {
    a.Swap(&b);
  }
  inline void Swap(KMProto_KMProject_ColorAdjustment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KMProto_KMProject_ColorAdjustment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KMProto_KMProject_ColorAdjustment* New() const final {
    return CreateMaybeMessage<KMProto_KMProject_ColorAdjustment>(nullptr);
  }

  KMProto_KMProject_ColorAdjustment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KMProto_KMProject_ColorAdjustment>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const KMProto_KMProject_ColorAdjustment& from);
  void MergeFrom(const KMProto_KMProject_ColorAdjustment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KMProto_KMProject_ColorAdjustment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KMProto.KMProject.ColorAdjustment";
  }
  protected:
  explicit KMProto_KMProject_ColorAdjustment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrightnessFieldNumber = 1,
    kContrastFieldNumber = 2,
    kSaturationFieldNumber = 3,
    kVibranceFieldNumber = 4,
    kTemperatureFieldNumber = 5,
    kHighlightFieldNumber = 6,
    kShadowFieldNumber = 7,
    kGainFieldNumber = 8,
    kGammaFieldNumber = 9,
    kLiftFieldNumber = 10,
    kHueFieldNumber = 11,
  };
  // optional float brightness = 1;
  bool has_brightness() const;
  private:
  bool _internal_has_brightness() const;
  public:
  void clear_brightness();
  float brightness() const;
  void set_brightness(float value);
  private:
  float _internal_brightness() const;
  void _internal_set_brightness(float value);
  public:

  // optional float contrast = 2;
  bool has_contrast() const;
  private:
  bool _internal_has_contrast() const;
  public:
  void clear_contrast();
  float contrast() const;
  void set_contrast(float value);
  private:
  float _internal_contrast() const;
  void _internal_set_contrast(float value);
  public:

  // optional float saturation = 3;
  bool has_saturation() const;
  private:
  bool _internal_has_saturation() const;
  public:
  void clear_saturation();
  float saturation() const;
  void set_saturation(float value);
  private:
  float _internal_saturation() const;
  void _internal_set_saturation(float value);
  public:

  // optional float vibrance = 4;
  bool has_vibrance() const;
  private:
  bool _internal_has_vibrance() const;
  public:
  void clear_vibrance();
  float vibrance() const;
  void set_vibrance(float value);
  private:
  float _internal_vibrance() const;
  void _internal_set_vibrance(float value);
  public:

  // optional float temperature = 5;
  bool has_temperature() const;
  private:
  bool _internal_has_temperature() const;
  public:
  void clear_temperature();
  float temperature() const;
  void set_temperature(float value);
  private:
  float _internal_temperature() const;
  void _internal_set_temperature(float value);
  public:

  // optional float highlight = 6;
  bool has_highlight() const;
  private:
  bool _internal_has_highlight() const;
  public:
  void clear_highlight();
  float highlight() const;
  void set_highlight(float value);
  private:
  float _internal_highlight() const;
  void _internal_set_highlight(float value);
  public:

  // optional float shadow = 7;
  bool has_shadow() const;
  private:
  bool _internal_has_shadow() const;
  public:
  void clear_shadow();
  float shadow() const;
  void set_shadow(float value);
  private:
  float _internal_shadow() const;
  void _internal_set_shadow(float value);
  public:

  // optional float gain = 8;
  bool has_gain() const;
  private:
  bool _internal_has_gain() const;
  public:
  void clear_gain();
  float gain() const;
  void set_gain(float value);
  private:
  float _internal_gain() const;
  void _internal_set_gain(float value);
  public:

  // optional float gamma = 9;
  bool has_gamma() const;
  private:
  bool _internal_has_gamma() const;
  public:
  void clear_gamma();
  float gamma() const;
  void set_gamma(float value);
  private:
  float _internal_gamma() const;
  void _internal_set_gamma(float value);
  public:

  // optional float lift = 10;
  bool has_lift() const;
  private:
  bool _internal_has_lift() const;
  public:
  void clear_lift();
  float lift() const;
  void set_lift(float value);
  private:
  float _internal_lift() const;
  void _internal_set_lift(float value);
  public:

  // optional float hue = 11;
  bool has_hue() const;
  private:
  bool _internal_has_hue() const;
  public:
  void clear_hue();
  float hue() const;
  void set_hue(float value);
  private:
  float _internal_hue() const;
  void _internal_set_hue(float value);
  public:

  // @@protoc_insertion_point(class_scope:KMProto.KMProject.ColorAdjustment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float brightness_;
  float contrast_;
  float saturation_;
  float vibrance_;
  float temperature_;
  float highlight_;
  float shadow_;
  float gain_;
  float gamma_;
  float lift_;
  float hue_;
  friend struct ::TableStruct_kinemaster_5fproject_5fwire_2dlite_2eproto;
};
// -------------------------------------------------------------------

class KMProto_KMProject_WritingPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:KMProto.KMProject.WritingPoint) */ {
 public:
  inline KMProto_KMProject_WritingPoint() : KMProto_KMProject_WritingPoint(nullptr) {}
  virtual ~KMProto_KMProject_WritingPoint();

  KMProto_KMProject_WritingPoint(const KMProto_KMProject_WritingPoint& from);
  KMProto_KMProject_WritingPoint(KMProto_KMProject_WritingPoint&& from) noexcept
    : KMProto_KMProject_WritingPoint() {
    *this = ::std::move(from);
  }

  inline KMProto_KMProject_WritingPoint& operator=(const KMProto_KMProject_WritingPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline KMProto_KMProject_WritingPoint& operator=(KMProto_KMProject_WritingPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const KMProto_KMProject_WritingPoint& default_instance();

  static inline const KMProto_KMProject_WritingPoint* internal_default_instance() {
    return reinterpret_cast<const KMProto_KMProject_WritingPoint*>(
               &_KMProto_KMProject_WritingPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(KMProto_KMProject_WritingPoint& a, KMProto_KMProject_WritingPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(KMProto_KMProject_WritingPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KMProto_KMProject_WritingPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KMProto_KMProject_WritingPoint* New() const final {
    return CreateMaybeMessage<KMProto_KMProject_WritingPoint>(nullptr);
  }

  KMProto_KMProject_WritingPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KMProto_KMProject_WritingPoint>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const KMProto_KMProject_WritingPoint& from);
  void MergeFrom(const KMProto_KMProject_WritingPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KMProto_KMProject_WritingPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KMProto.KMProject.WritingPoint";
  }
  protected:
  explicit KMProto_KMProject_WritingPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointxFieldNumber = 1,
    kPointyFieldNumber = 2,
  };
  // optional float pointx = 1;
  bool has_pointx() const;
  private:
  bool _internal_has_pointx() const;
  public:
  void clear_pointx();
  float pointx() const;
  void set_pointx(float value);
  private:
  float _internal_pointx() const;
  void _internal_set_pointx(float value);
  public:

  // optional float pointy = 2;
  bool has_pointy() const;
  private:
  bool _internal_has_pointy() const;
  public:
  void clear_pointy();
  float pointy() const;
  void set_pointy(float value);
  private:
  float _internal_pointy() const;
  void _internal_set_pointy(float value);
  public:

  // @@protoc_insertion_point(class_scope:KMProto.KMProject.WritingPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float pointx_;
  float pointy_;
  friend struct ::TableStruct_kinemaster_5fproject_5fwire_2dlite_2eproto;
};
// -------------------------------------------------------------------

class KMProto_KMProject_GroupLayer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:KMProto.KMProject.GroupLayer) */ {
 public:
  inline KMProto_KMProject_GroupLayer() : KMProto_KMProject_GroupLayer(nullptr) {}
  virtual ~KMProto_KMProject_GroupLayer();

  KMProto_KMProject_GroupLayer(const KMProto_KMProject_GroupLayer& from);
  KMProto_KMProject_GroupLayer(KMProto_KMProject_GroupLayer&& from) noexcept
    : KMProto_KMProject_GroupLayer() {
    *this = ::std::move(from);
  }

  inline KMProto_KMProject_GroupLayer& operator=(const KMProto_KMProject_GroupLayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline KMProto_KMProject_GroupLayer& operator=(KMProto_KMProject_GroupLayer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const KMProto_KMProject_GroupLayer& default_instance();

  static inline const KMProto_KMProject_GroupLayer* internal_default_instance() {
    return reinterpret_cast<const KMProto_KMProject_GroupLayer*>(
               &_KMProto_KMProject_GroupLayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(KMProto_KMProject_GroupLayer& a, KMProto_KMProject_GroupLayer& b) {
    a.Swap(&b);
  }
  inline void Swap(KMProto_KMProject_GroupLayer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KMProto_KMProject_GroupLayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KMProto_KMProject_GroupLayer* New() const final {
    return CreateMaybeMessage<KMProto_KMProject_GroupLayer>(nullptr);
  }

  KMProto_KMProject_GroupLayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KMProto_KMProject_GroupLayer>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const KMProto_KMProject_GroupLayer& from);
  void MergeFrom(const KMProto_KMProject_GroupLayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KMProto_KMProject_GroupLayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KMProto.KMProject.GroupLayer";
  }
  protected:
  explicit KMProto_KMProject_GroupLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildItemsFieldNumber = 101,
    kLayerCommonFieldNumber = 100,
  };
  // repeated .KMProto.KMProject.TimelineItem child_items = 101;
  int child_items_size() const;
  private:
  int _internal_child_items_size() const;
  public:
  void clear_child_items();
  ::KMProto_KMProject_TimelineItem* mutable_child_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_TimelineItem >*
      mutable_child_items();
  private:
  const ::KMProto_KMProject_TimelineItem& _internal_child_items(int index) const;
  ::KMProto_KMProject_TimelineItem* _internal_add_child_items();
  public:
  const ::KMProto_KMProject_TimelineItem& child_items(int index) const;
  ::KMProto_KMProject_TimelineItem* add_child_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_TimelineItem >&
      child_items() const;

  // optional .KMProto.KMProject.LayerCommon layer_common = 100;
  bool has_layer_common() const;
  private:
  bool _internal_has_layer_common() const;
  public:
  void clear_layer_common();
  const ::KMProto_KMProject_LayerCommon& layer_common() const;
  ::KMProto_KMProject_LayerCommon* release_layer_common();
  ::KMProto_KMProject_LayerCommon* mutable_layer_common();
  void set_allocated_layer_common(::KMProto_KMProject_LayerCommon* layer_common);
  private:
  const ::KMProto_KMProject_LayerCommon& _internal_layer_common() const;
  ::KMProto_KMProject_LayerCommon* _internal_mutable_layer_common();
  public:
  void unsafe_arena_set_allocated_layer_common(
      ::KMProto_KMProject_LayerCommon* layer_common);
  ::KMProto_KMProject_LayerCommon* unsafe_arena_release_layer_common();

  // @@protoc_insertion_point(class_scope:KMProto.KMProject.GroupLayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_TimelineItem > child_items_;
  ::KMProto_KMProject_LayerCommon* layer_common_;
  friend struct ::TableStruct_kinemaster_5fproject_5fwire_2dlite_2eproto;
};
// -------------------------------------------------------------------

class KMProto_KMProject_DrawingAction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:KMProto.KMProject.DrawingAction) */ {
 public:
  inline KMProto_KMProject_DrawingAction() : KMProto_KMProject_DrawingAction(nullptr) {}
  virtual ~KMProto_KMProject_DrawingAction();

  KMProto_KMProject_DrawingAction(const KMProto_KMProject_DrawingAction& from);
  KMProto_KMProject_DrawingAction(KMProto_KMProject_DrawingAction&& from) noexcept
    : KMProto_KMProject_DrawingAction() {
    *this = ::std::move(from);
  }

  inline KMProto_KMProject_DrawingAction& operator=(const KMProto_KMProject_DrawingAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline KMProto_KMProject_DrawingAction& operator=(KMProto_KMProject_DrawingAction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const KMProto_KMProject_DrawingAction& default_instance();

  static inline const KMProto_KMProject_DrawingAction* internal_default_instance() {
    return reinterpret_cast<const KMProto_KMProject_DrawingAction*>(
               &_KMProto_KMProject_DrawingAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(KMProto_KMProject_DrawingAction& a, KMProto_KMProject_DrawingAction& b) {
    a.Swap(&b);
  }
  inline void Swap(KMProto_KMProject_DrawingAction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KMProto_KMProject_DrawingAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KMProto_KMProject_DrawingAction* New() const final {
    return CreateMaybeMessage<KMProto_KMProject_DrawingAction>(nullptr);
  }

  KMProto_KMProject_DrawingAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KMProto_KMProject_DrawingAction>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const KMProto_KMProject_DrawingAction& from);
  void MergeFrom(const KMProto_KMProject_DrawingAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KMProto_KMProject_DrawingAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KMProto.KMProject.DrawingAction";
  }
  protected:
  explicit KMProto_KMProject_DrawingAction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 2,
    kColorFieldNumber = 3,
    kStrokeWidthFieldNumber = 4,
    kHardnessFieldNumber = 5,
    kIsEraserFieldNumber = 6,
    kStraightLineFieldNumber = 7,
    kDrawingActionTypeFieldNumber = 1,
    kPathStyleFieldNumber = 8,
    kStartCapFieldNumber = 9,
    kEndCapFieldNumber = 10,
  };
  // repeated float points = 2;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  private:
  float _internal_points(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_points() const;
  void _internal_add_points(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_points();
  public:
  float points(int index) const;
  void set_points(int index, float value);
  void add_points(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      points() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_points();

  // optional int32 color = 3;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  ::PROTOBUF_NAMESPACE_ID::int32 color() const;
  void set_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_color() const;
  void _internal_set_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float stroke_width = 4;
  bool has_stroke_width() const;
  private:
  bool _internal_has_stroke_width() const;
  public:
  void clear_stroke_width();
  float stroke_width() const;
  void set_stroke_width(float value);
  private:
  float _internal_stroke_width() const;
  void _internal_set_stroke_width(float value);
  public:

  // optional float hardness = 5;
  bool has_hardness() const;
  private:
  bool _internal_has_hardness() const;
  public:
  void clear_hardness();
  float hardness() const;
  void set_hardness(float value);
  private:
  float _internal_hardness() const;
  void _internal_set_hardness(float value);
  public:

  // optional bool is_eraser = 6;
  bool has_is_eraser() const;
  private:
  bool _internal_has_is_eraser() const;
  public:
  void clear_is_eraser();
  bool is_eraser() const;
  void set_is_eraser(bool value);
  private:
  bool _internal_is_eraser() const;
  void _internal_set_is_eraser(bool value);
  public:

  // optional bool straight_line = 7;
  bool has_straight_line() const;
  private:
  bool _internal_has_straight_line() const;
  public:
  void clear_straight_line();
  bool straight_line() const;
  void set_straight_line(bool value);
  private:
  bool _internal_straight_line() const;
  void _internal_set_straight_line(bool value);
  public:

  // optional .KMProto.KMProject.DrawingActionType drawing_action_type = 1;
  bool has_drawing_action_type() const;
  private:
  bool _internal_has_drawing_action_type() const;
  public:
  void clear_drawing_action_type();
  ::KMProto_KMProject_DrawingActionType drawing_action_type() const;
  void set_drawing_action_type(::KMProto_KMProject_DrawingActionType value);
  private:
  ::KMProto_KMProject_DrawingActionType _internal_drawing_action_type() const;
  void _internal_set_drawing_action_type(::KMProto_KMProject_DrawingActionType value);
  public:

  // optional .KMProto.KMProject.PathStyle path_style = 8;
  bool has_path_style() const;
  private:
  bool _internal_has_path_style() const;
  public:
  void clear_path_style();
  ::KMProto_KMProject_PathStyle path_style() const;
  void set_path_style(::KMProto_KMProject_PathStyle value);
  private:
  ::KMProto_KMProject_PathStyle _internal_path_style() const;
  void _internal_set_path_style(::KMProto_KMProject_PathStyle value);
  public:

  // optional .KMProto.KMProject.CapDecorationStyle start_cap = 9;
  bool has_start_cap() const;
  private:
  bool _internal_has_start_cap() const;
  public:
  void clear_start_cap();
  ::KMProto_KMProject_CapDecorationStyle start_cap() const;
  void set_start_cap(::KMProto_KMProject_CapDecorationStyle value);
  private:
  ::KMProto_KMProject_CapDecorationStyle _internal_start_cap() const;
  void _internal_set_start_cap(::KMProto_KMProject_CapDecorationStyle value);
  public:

  // optional .KMProto.KMProject.CapDecorationStyle end_cap = 10;
  bool has_end_cap() const;
  private:
  bool _internal_has_end_cap() const;
  public:
  void clear_end_cap();
  ::KMProto_KMProject_CapDecorationStyle end_cap() const;
  void set_end_cap(::KMProto_KMProject_CapDecorationStyle value);
  private:
  ::KMProto_KMProject_CapDecorationStyle _internal_end_cap() const;
  void _internal_set_end_cap(::KMProto_KMProject_CapDecorationStyle value);
  public:

  // @@protoc_insertion_point(class_scope:KMProto.KMProject.DrawingAction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > points_;
  ::PROTOBUF_NAMESPACE_ID::int32 color_;
  float stroke_width_;
  float hardness_;
  bool is_eraser_;
  bool straight_line_;
  int drawing_action_type_;
  int path_style_;
  int start_cap_;
  int end_cap_;
  friend struct ::TableStruct_kinemaster_5fproject_5fwire_2dlite_2eproto;
};
// -------------------------------------------------------------------

class KMProto_KMProject_ColorEffect PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:KMProto.KMProject.ColorEffect) */ {
 public:
  inline KMProto_KMProject_ColorEffect() : KMProto_KMProject_ColorEffect(nullptr) {}
  virtual ~KMProto_KMProject_ColorEffect();

  KMProto_KMProject_ColorEffect(const KMProto_KMProject_ColorEffect& from);
  KMProto_KMProject_ColorEffect(KMProto_KMProject_ColorEffect&& from) noexcept
    : KMProto_KMProject_ColorEffect() {
    *this = ::std::move(from);
  }

  inline KMProto_KMProject_ColorEffect& operator=(const KMProto_KMProject_ColorEffect& from) {
    CopyFrom(from);
    return *this;
  }
  inline KMProto_KMProject_ColorEffect& operator=(KMProto_KMProject_ColorEffect&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const KMProto_KMProject_ColorEffect& default_instance();

  static inline const KMProto_KMProject_ColorEffect* internal_default_instance() {
    return reinterpret_cast<const KMProto_KMProject_ColorEffect*>(
               &_KMProto_KMProject_ColorEffect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(KMProto_KMProject_ColorEffect& a, KMProto_KMProject_ColorEffect& b) {
    a.Swap(&b);
  }
  inline void Swap(KMProto_KMProject_ColorEffect* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KMProto_KMProject_ColorEffect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KMProto_KMProject_ColorEffect* New() const final {
    return CreateMaybeMessage<KMProto_KMProject_ColorEffect>(nullptr);
  }

  KMProto_KMProject_ColorEffect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KMProto_KMProject_ColorEffect>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const KMProto_KMProject_ColorEffect& from);
  void MergeFrom(const KMProto_KMProject_ColorEffect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KMProto_KMProject_ColorEffect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KMProto.KMProject.ColorEffect";
  }
  protected:
  explicit KMProto_KMProject_ColorEffect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPresetNameFieldNumber = 5,
    kBrightnessFieldNumber = 1,
    kContrastFieldNumber = 2,
    kSaturationFieldNumber = 3,
    kTintColorFieldNumber = 4,
  };
  // optional string preset_name = 5;
  bool has_preset_name() const;
  private:
  bool _internal_has_preset_name() const;
  public:
  void clear_preset_name();
  const std::string& preset_name() const;
  void set_preset_name(const std::string& value);
  void set_preset_name(std::string&& value);
  void set_preset_name(const char* value);
  void set_preset_name(const char* value, size_t size);
  std::string* mutable_preset_name();
  std::string* release_preset_name();
  void set_allocated_preset_name(std::string* preset_name);
  private:
  const std::string& _internal_preset_name() const;
  void _internal_set_preset_name(const std::string& value);
  std::string* _internal_mutable_preset_name();
  public:

  // optional float brightness = 1;
  bool has_brightness() const;
  private:
  bool _internal_has_brightness() const;
  public:
  void clear_brightness();
  float brightness() const;
  void set_brightness(float value);
  private:
  float _internal_brightness() const;
  void _internal_set_brightness(float value);
  public:

  // optional float contrast = 2;
  bool has_contrast() const;
  private:
  bool _internal_has_contrast() const;
  public:
  void clear_contrast();
  float contrast() const;
  void set_contrast(float value);
  private:
  float _internal_contrast() const;
  void _internal_set_contrast(float value);
  public:

  // optional float saturation = 3;
  bool has_saturation() const;
  private:
  bool _internal_has_saturation() const;
  public:
  void clear_saturation();
  float saturation() const;
  void set_saturation(float value);
  private:
  float _internal_saturation() const;
  void _internal_set_saturation(float value);
  public:

  // optional fixed32 tint_color = 4;
  bool has_tint_color() const;
  private:
  bool _internal_has_tint_color() const;
  public:
  void clear_tint_color();
  ::PROTOBUF_NAMESPACE_ID::uint32 tint_color() const;
  void set_tint_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tint_color() const;
  void _internal_set_tint_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:KMProto.KMProject.ColorEffect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr preset_name_;
  float brightness_;
  float contrast_;
  float saturation_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tint_color_;
  friend struct ::TableStruct_kinemaster_5fproject_5fwire_2dlite_2eproto;
};
// -------------------------------------------------------------------

class KMProto_KMProject_ColorFilter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:KMProto.KMProject.ColorFilter) */ {
 public:
  inline KMProto_KMProject_ColorFilter() : KMProto_KMProject_ColorFilter(nullptr) {}
  virtual ~KMProto_KMProject_ColorFilter();

  KMProto_KMProject_ColorFilter(const KMProto_KMProject_ColorFilter& from);
  KMProto_KMProject_ColorFilter(KMProto_KMProject_ColorFilter&& from) noexcept
    : KMProto_KMProject_ColorFilter() {
    *this = ::std::move(from);
  }

  inline KMProto_KMProject_ColorFilter& operator=(const KMProto_KMProject_ColorFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline KMProto_KMProject_ColorFilter& operator=(KMProto_KMProject_ColorFilter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const KMProto_KMProject_ColorFilter& default_instance();

  static inline const KMProto_KMProject_ColorFilter* internal_default_instance() {
    return reinterpret_cast<const KMProto_KMProject_ColorFilter*>(
               &_KMProto_KMProject_ColorFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(KMProto_KMProject_ColorFilter& a, KMProto_KMProject_ColorFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(KMProto_KMProject_ColorFilter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KMProto_KMProject_ColorFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KMProto_KMProject_ColorFilter* New() const final {
    return CreateMaybeMessage<KMProto_KMProject_ColorFilter>(nullptr);
  }

  KMProto_KMProject_ColorFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KMProto_KMProject_ColorFilter>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const KMProto_KMProject_ColorFilter& from);
  void MergeFrom(const KMProto_KMProject_ColorFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KMProto_KMProject_ColorFilter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KMProto.KMProject.ColorFilter";
  }
  protected:
  explicit KMProto_KMProject_ColorFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilterFieldNumber = 1,
    kStrengthFieldNumber = 2,
  };
  // optional string filter = 1;
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  const std::string& filter() const;
  void set_filter(const std::string& value);
  void set_filter(std::string&& value);
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  std::string* mutable_filter();
  std::string* release_filter();
  void set_allocated_filter(std::string* filter);
  private:
  const std::string& _internal_filter() const;
  void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // optional float strength = 2;
  bool has_strength() const;
  private:
  bool _internal_has_strength() const;
  public:
  void clear_strength();
  float strength() const;
  void set_strength(float value);
  private:
  float _internal_strength() const;
  void _internal_set_strength(float value);
  public:

  // @@protoc_insertion_point(class_scope:KMProto.KMProject.ColorFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
  float strength_;
  friend struct ::TableStruct_kinemaster_5fproject_5fwire_2dlite_2eproto;
};
// -------------------------------------------------------------------

class KMProto_KMProject PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:KMProto.KMProject) */ {
 public:
  inline KMProto_KMProject() : KMProto_KMProject(nullptr) {}
  virtual ~KMProto_KMProject();

  KMProto_KMProject(const KMProto_KMProject& from);
  KMProto_KMProject(KMProto_KMProject&& from) noexcept
    : KMProto_KMProject() {
    *this = ::std::move(from);
  }

  inline KMProto_KMProject& operator=(const KMProto_KMProject& from) {
    CopyFrom(from);
    return *this;
  }
  inline KMProto_KMProject& operator=(KMProto_KMProject&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const KMProto_KMProject& default_instance();

  static inline const KMProto_KMProject* internal_default_instance() {
    return reinterpret_cast<const KMProto_KMProject*>(
               &_KMProto_KMProject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(KMProto_KMProject& a, KMProto_KMProject& b) {
    a.Swap(&b);
  }
  inline void Swap(KMProto_KMProject* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KMProto_KMProject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KMProto_KMProject* New() const final {
    return CreateMaybeMessage<KMProto_KMProject>(nullptr);
  }

  KMProto_KMProject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KMProto_KMProject>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const KMProto_KMProject& from);
  void MergeFrom(const KMProto_KMProject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KMProto_KMProject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KMProto.KMProject";
  }
  protected:
  explicit KMProto_KMProject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef KMProto_KMProject_Fade Fade;
  typedef KMProto_KMProject_Track Track;
  typedef KMProto_KMProject_TimelineItem TimelineItem;
  typedef KMProto_KMProject_VisualClip VisualClip;
  typedef KMProto_KMProject_ClipRange ClipRange;
  typedef KMProto_KMProject_EffectOptionItem EffectOptionItem;
  typedef KMProto_KMProject_StringHashMap StringHashMap;
  typedef KMProto_KMProject_StringHashMapEntry StringHashMapEntry;
  typedef KMProto_KMProject_Matrix Matrix;
  typedef KMProto_KMProject_Transition Transition;
  typedef KMProto_KMProject_AudioClip AudioClip;
  typedef KMProto_KMProject_LayerCommon LayerCommon;
  typedef KMProto_KMProject_KeyFrame KeyFrame;
  typedef KMProto_KMProject_TextLayer TextLayer;
  typedef KMProto_KMProject_HandwritingLayer HandwritingLayer;
  typedef KMProto_KMProject_StickerLayer StickerLayer;
  typedef KMProto_KMProject_AssetLayer AssetLayer;
  typedef KMProto_KMProject_EffectLayer EffectLayer;
  typedef KMProto_KMProject_ImageLayer ImageLayer;
  typedef KMProto_KMProject_VideoLayer VideoLayer;
  typedef KMProto_KMProject_ColorAdjustment ColorAdjustment;
  typedef KMProto_KMProject_WritingPoint WritingPoint;
  typedef KMProto_KMProject_GroupLayer GroupLayer;
  typedef KMProto_KMProject_DrawingAction DrawingAction;
  typedef KMProto_KMProject_ColorEffect ColorEffect;
  typedef KMProto_KMProject_ColorFilter ColorFilter;

  typedef KMProto_KMProject_AspectRatio AspectRatio;
  static constexpr AspectRatio ASPECT_R_16_9 =
    KMProto_KMProject_AspectRatio_ASPECT_R_16_9;
  static constexpr AspectRatio ASPECT_SQUARE =
    KMProto_KMProject_AspectRatio_ASPECT_SQUARE;
  static constexpr AspectRatio ASPECT_R_9_16 =
    KMProto_KMProject_AspectRatio_ASPECT_R_9_16;
  static inline bool AspectRatio_IsValid(int value) {
    return KMProto_KMProject_AspectRatio_IsValid(value);
  }
  static constexpr AspectRatio AspectRatio_MIN =
    KMProto_KMProject_AspectRatio_AspectRatio_MIN;
  static constexpr AspectRatio AspectRatio_MAX =
    KMProto_KMProject_AspectRatio_AspectRatio_MAX;
  static constexpr int AspectRatio_ARRAYSIZE =
    KMProto_KMProject_AspectRatio_AspectRatio_ARRAYSIZE;
  template<typename T>
  static inline const std::string& AspectRatio_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AspectRatio>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AspectRatio_Name.");
    return KMProto_KMProject_AspectRatio_Name(enum_t_value);
  }
  static inline bool AspectRatio_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AspectRatio* value) {
    return KMProto_KMProject_AspectRatio_Parse(name, value);
  }

  typedef KMProto_KMProject_ClipType ClipType;
  static constexpr ClipType VISUAL_CLIP =
    KMProto_KMProject_ClipType_VISUAL_CLIP;
  static constexpr ClipType TRANSITION =
    KMProto_KMProject_ClipType_TRANSITION;
  static constexpr ClipType AUDIO_CLIP =
    KMProto_KMProject_ClipType_AUDIO_CLIP;
  static constexpr ClipType LAYER_TEXT =
    KMProto_KMProject_ClipType_LAYER_TEXT;
  static constexpr ClipType LAYER_STICKER =
    KMProto_KMProject_ClipType_LAYER_STICKER;
  static constexpr ClipType LAYER_HANDWRITING =
    KMProto_KMProject_ClipType_LAYER_HANDWRITING;
  static constexpr ClipType LAYER_IMAGE =
    KMProto_KMProject_ClipType_LAYER_IMAGE;
  static constexpr ClipType LAYER_VIDEO =
    KMProto_KMProject_ClipType_LAYER_VIDEO;
  static constexpr ClipType LAYER_EFFECT =
    KMProto_KMProject_ClipType_LAYER_EFFECT;
  static constexpr ClipType LAYER_ASSET =
    KMProto_KMProject_ClipType_LAYER_ASSET;
  static constexpr ClipType LAYER_GROUP =
    KMProto_KMProject_ClipType_LAYER_GROUP;
  static inline bool ClipType_IsValid(int value) {
    return KMProto_KMProject_ClipType_IsValid(value);
  }
  static constexpr ClipType ClipType_MIN =
    KMProto_KMProject_ClipType_ClipType_MIN;
  static constexpr ClipType ClipType_MAX =
    KMProto_KMProject_ClipType_ClipType_MAX;
  static constexpr int ClipType_ARRAYSIZE =
    KMProto_KMProject_ClipType_ClipType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ClipType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ClipType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ClipType_Name.");
    return KMProto_KMProject_ClipType_Name(enum_t_value);
  }
  static inline bool ClipType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ClipType* value) {
    return KMProto_KMProject_ClipType_Parse(name, value);
  }

  typedef KMProto_KMProject_ClipState ClipState;
  static constexpr ClipState BUSY =
    KMProto_KMProject_ClipState_BUSY;
  static constexpr ClipState TEMPORARY_FAILURE =
    KMProto_KMProject_ClipState_TEMPORARY_FAILURE;
  static constexpr ClipState PERMANENT_FAILURE =
    KMProto_KMProject_ClipState_PERMANENT_FAILURE;
  static constexpr ClipState READY_TO_PLAY =
    KMProto_KMProject_ClipState_READY_TO_PLAY;
  static inline bool ClipState_IsValid(int value) {
    return KMProto_KMProject_ClipState_IsValid(value);
  }
  static constexpr ClipState ClipState_MIN =
    KMProto_KMProject_ClipState_ClipState_MIN;
  static constexpr ClipState ClipState_MAX =
    KMProto_KMProject_ClipState_ClipState_MAX;
  static constexpr int ClipState_ARRAYSIZE =
    KMProto_KMProject_ClipState_ClipState_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ClipState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ClipState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ClipState_Name.");
    return KMProto_KMProject_ClipState_Name(enum_t_value);
  }
  static inline bool ClipState_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ClipState* value) {
    return KMProto_KMProject_ClipState_Parse(name, value);
  }

  typedef KMProto_KMProject_EffectOptionItemType EffectOptionItemType;
  static constexpr EffectOptionItemType EFFECT_OPTION_TEXT =
    KMProto_KMProject_EffectOptionItemType_EFFECT_OPTION_TEXT;
  static constexpr EffectOptionItemType EFFECT_OPTION_RGB =
    KMProto_KMProject_EffectOptionItemType_EFFECT_OPTION_RGB;
  static constexpr EffectOptionItemType EFFECT_OPTION_RGBA =
    KMProto_KMProject_EffectOptionItemType_EFFECT_OPTION_RGBA;
  static constexpr EffectOptionItemType EFFECT_OPTION_XY =
    KMProto_KMProject_EffectOptionItemType_EFFECT_OPTION_XY;
  static constexpr EffectOptionItemType EFFECT_OPTION_XYZ =
    KMProto_KMProject_EffectOptionItemType_EFFECT_OPTION_XYZ;
  static constexpr EffectOptionItemType EFFECT_OPTION_RECT =
    KMProto_KMProject_EffectOptionItemType_EFFECT_OPTION_RECT;
  static constexpr EffectOptionItemType EFFECT_OPTION_RANGE =
    KMProto_KMProject_EffectOptionItemType_EFFECT_OPTION_RANGE;
  static constexpr EffectOptionItemType EFFECT_OPTION_CHOICE =
    KMProto_KMProject_EffectOptionItemType_EFFECT_OPTION_CHOICE;
  static constexpr EffectOptionItemType EFFECT_OPTION_IMAGE =
    KMProto_KMProject_EffectOptionItemType_EFFECT_OPTION_IMAGE;
  static constexpr EffectOptionItemType EFFECT_OPTION_SWITCH =
    KMProto_KMProject_EffectOptionItemType_EFFECT_OPTION_SWITCH;
  static inline bool EffectOptionItemType_IsValid(int value) {
    return KMProto_KMProject_EffectOptionItemType_IsValid(value);
  }
  static constexpr EffectOptionItemType EffectOptionItemType_MIN =
    KMProto_KMProject_EffectOptionItemType_EffectOptionItemType_MIN;
  static constexpr EffectOptionItemType EffectOptionItemType_MAX =
    KMProto_KMProject_EffectOptionItemType_EffectOptionItemType_MAX;
  static constexpr int EffectOptionItemType_ARRAYSIZE =
    KMProto_KMProject_EffectOptionItemType_EffectOptionItemType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& EffectOptionItemType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EffectOptionItemType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EffectOptionItemType_Name.");
    return KMProto_KMProject_EffectOptionItemType_Name(enum_t_value);
  }
  static inline bool EffectOptionItemType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EffectOptionItemType* value) {
    return KMProto_KMProject_EffectOptionItemType_Parse(name, value);
  }

  typedef KMProto_KMProject_SplitScreenType SplitScreenType;
  static constexpr SplitScreenType OFF =
    KMProto_KMProject_SplitScreenType_OFF;
  static constexpr SplitScreenType FULL =
    KMProto_KMProject_SplitScreenType_FULL;
  static constexpr SplitScreenType BOTTOM =
    KMProto_KMProject_SplitScreenType_BOTTOM;
  static constexpr SplitScreenType TOP =
    KMProto_KMProject_SplitScreenType_TOP;
  static constexpr SplitScreenType LEFT =
    KMProto_KMProject_SplitScreenType_LEFT;
  static constexpr SplitScreenType RIGHT =
    KMProto_KMProject_SplitScreenType_RIGHT;
  static inline bool SplitScreenType_IsValid(int value) {
    return KMProto_KMProject_SplitScreenType_IsValid(value);
  }
  static constexpr SplitScreenType SplitScreenType_MIN =
    KMProto_KMProject_SplitScreenType_SplitScreenType_MIN;
  static constexpr SplitScreenType SplitScreenType_MAX =
    KMProto_KMProject_SplitScreenType_SplitScreenType_MAX;
  static constexpr int SplitScreenType_ARRAYSIZE =
    KMProto_KMProject_SplitScreenType_SplitScreenType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& SplitScreenType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SplitScreenType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SplitScreenType_Name.");
    return KMProto_KMProject_SplitScreenType_Name(enum_t_value);
  }
  static inline bool SplitScreenType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SplitScreenType* value) {
    return KMProto_KMProject_SplitScreenType_Parse(name, value);
  }

  typedef KMProto_KMProject_PathStyle PathStyle;
  static constexpr PathStyle SMOOTH =
    KMProto_KMProject_PathStyle_SMOOTH;
  static constexpr PathStyle SHARP =
    KMProto_KMProject_PathStyle_SHARP;
  static constexpr PathStyle RECT =
    KMProto_KMProject_PathStyle_RECT;
  static constexpr PathStyle ROUND_RECT =
    KMProto_KMProject_PathStyle_ROUND_RECT;
  static constexpr PathStyle ELLIPSE =
    KMProto_KMProject_PathStyle_ELLIPSE;
  static constexpr PathStyle XSHAPE =
    KMProto_KMProject_PathStyle_XSHAPE;
  static constexpr PathStyle FILL_RECT =
    KMProto_KMProject_PathStyle_FILL_RECT;
  static constexpr PathStyle FILL_ROUND_RECT =
    KMProto_KMProject_PathStyle_FILL_ROUND_RECT;
  static constexpr PathStyle FILL_ELLIPSE =
    KMProto_KMProject_PathStyle_FILL_ELLIPSE;
  static inline bool PathStyle_IsValid(int value) {
    return KMProto_KMProject_PathStyle_IsValid(value);
  }
  static constexpr PathStyle PathStyle_MIN =
    KMProto_KMProject_PathStyle_PathStyle_MIN;
  static constexpr PathStyle PathStyle_MAX =
    KMProto_KMProject_PathStyle_PathStyle_MAX;
  static constexpr int PathStyle_ARRAYSIZE =
    KMProto_KMProject_PathStyle_PathStyle_ARRAYSIZE;
  template<typename T>
  static inline const std::string& PathStyle_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PathStyle>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PathStyle_Name.");
    return KMProto_KMProject_PathStyle_Name(enum_t_value);
  }
  static inline bool PathStyle_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PathStyle* value) {
    return KMProto_KMProject_PathStyle_Parse(name, value);
  }

  typedef KMProto_KMProject_CapDecorationStyle CapDecorationStyle;
  static constexpr CapDecorationStyle NONE =
    KMProto_KMProject_CapDecorationStyle_NONE;
  static constexpr CapDecorationStyle ROUND =
    KMProto_KMProject_CapDecorationStyle_ROUND;
  static constexpr CapDecorationStyle SOLID_ARROW =
    KMProto_KMProject_CapDecorationStyle_SOLID_ARROW;
  static constexpr CapDecorationStyle HOLLOW_ARROW =
    KMProto_KMProject_CapDecorationStyle_HOLLOW_ARROW;
  static inline bool CapDecorationStyle_IsValid(int value) {
    return KMProto_KMProject_CapDecorationStyle_IsValid(value);
  }
  static constexpr CapDecorationStyle CapDecorationStyle_MIN =
    KMProto_KMProject_CapDecorationStyle_CapDecorationStyle_MIN;
  static constexpr CapDecorationStyle CapDecorationStyle_MAX =
    KMProto_KMProject_CapDecorationStyle_CapDecorationStyle_MAX;
  static constexpr int CapDecorationStyle_ARRAYSIZE =
    KMProto_KMProject_CapDecorationStyle_CapDecorationStyle_ARRAYSIZE;
  template<typename T>
  static inline const std::string& CapDecorationStyle_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CapDecorationStyle>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CapDecorationStyle_Name.");
    return KMProto_KMProject_CapDecorationStyle_Name(enum_t_value);
  }
  static inline bool CapDecorationStyle_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CapDecorationStyle* value) {
    return KMProto_KMProject_CapDecorationStyle_Parse(name, value);
  }

  typedef KMProto_KMProject_DrawingActionType DrawingActionType;
  static constexpr DrawingActionType STROKE =
    KMProto_KMProject_DrawingActionType_STROKE;
  static constexpr DrawingActionType ERASE_ALL =
    KMProto_KMProject_DrawingActionType_ERASE_ALL;
  static inline bool DrawingActionType_IsValid(int value) {
    return KMProto_KMProject_DrawingActionType_IsValid(value);
  }
  static constexpr DrawingActionType DrawingActionType_MIN =
    KMProto_KMProject_DrawingActionType_DrawingActionType_MIN;
  static constexpr DrawingActionType DrawingActionType_MAX =
    KMProto_KMProject_DrawingActionType_DrawingActionType_MAX;
  static constexpr int DrawingActionType_ARRAYSIZE =
    KMProto_KMProject_DrawingActionType_DrawingActionType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& DrawingActionType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DrawingActionType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DrawingActionType_Name.");
    return KMProto_KMProject_DrawingActionType_Name(enum_t_value);
  }
  static inline bool DrawingActionType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DrawingActionType* value) {
    return KMProto_KMProject_DrawingActionType_Parse(name, value);
  }

  typedef KMProto_KMProject_TitleStyle TitleStyle;
  static constexpr TitleStyle TITLE_STYLE_NONE =
    KMProto_KMProject_TitleStyle_TITLE_STYLE_NONE;
  static constexpr TitleStyle TITLE_STYLE_HEADLINE =
    KMProto_KMProject_TitleStyle_TITLE_STYLE_HEADLINE;
  static constexpr TitleStyle TITLE_STYLE_OPENING =
    KMProto_KMProject_TitleStyle_TITLE_STYLE_OPENING;
  static constexpr TitleStyle TITLE_STYLE_PLAYING =
    KMProto_KMProject_TitleStyle_TITLE_STYLE_PLAYING;
  static constexpr TitleStyle TITLE_STYLE_ENDING =
    KMProto_KMProject_TitleStyle_TITLE_STYLE_ENDING;
  static inline bool TitleStyle_IsValid(int value) {
    return KMProto_KMProject_TitleStyle_IsValid(value);
  }
  static constexpr TitleStyle TitleStyle_MIN =
    KMProto_KMProject_TitleStyle_TitleStyle_MIN;
  static constexpr TitleStyle TitleStyle_MAX =
    KMProto_KMProject_TitleStyle_TitleStyle_MAX;
  static constexpr int TitleStyle_ARRAYSIZE =
    KMProto_KMProject_TitleStyle_TitleStyle_ARRAYSIZE;
  template<typename T>
  static inline const std::string& TitleStyle_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TitleStyle>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TitleStyle_Name.");
    return KMProto_KMProject_TitleStyle_Name(enum_t_value);
  }
  static inline bool TitleStyle_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TitleStyle* value) {
    return KMProto_KMProject_TitleStyle_Parse(name, value);
  }

  typedef KMProto_KMProject_ThemeEffectType ThemeEffectType;
  static constexpr ThemeEffectType THEME_EFFECT_TYPE_OPENING =
    KMProto_KMProject_ThemeEffectType_THEME_EFFECT_TYPE_OPENING;
  static constexpr ThemeEffectType THEME_EFFECT_TYPE_MIDDLE =
    KMProto_KMProject_ThemeEffectType_THEME_EFFECT_TYPE_MIDDLE;
  static constexpr ThemeEffectType THEME_EFFECT_TYPE_ENDING =
    KMProto_KMProject_ThemeEffectType_THEME_EFFECT_TYPE_ENDING;
  static constexpr ThemeEffectType THEME_EFFECT_TYPE_ACCENT =
    KMProto_KMProject_ThemeEffectType_THEME_EFFECT_TYPE_ACCENT;
  static constexpr ThemeEffectType THEME_EFFECT_TYPE_TRANSITION =
    KMProto_KMProject_ThemeEffectType_THEME_EFFECT_TYPE_TRANSITION;
  static constexpr ThemeEffectType THEME_EFFECT_TYPE_CLIP =
    KMProto_KMProject_ThemeEffectType_THEME_EFFECT_TYPE_CLIP;
  static inline bool ThemeEffectType_IsValid(int value) {
    return KMProto_KMProject_ThemeEffectType_IsValid(value);
  }
  static constexpr ThemeEffectType ThemeEffectType_MIN =
    KMProto_KMProject_ThemeEffectType_ThemeEffectType_MIN;
  static constexpr ThemeEffectType ThemeEffectType_MAX =
    KMProto_KMProject_ThemeEffectType_ThemeEffectType_MAX;
  static constexpr int ThemeEffectType_ARRAYSIZE =
    KMProto_KMProject_ThemeEffectType_ThemeEffectType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ThemeEffectType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ThemeEffectType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ThemeEffectType_Name.");
    return KMProto_KMProject_ThemeEffectType_Name(enum_t_value);
  }
  static inline bool ThemeEffectType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ThemeEffectType* value) {
    return KMProto_KMProject_ThemeEffectType_Parse(name, value);
  }

  typedef KMProto_KMProject_LayerBlendModeType LayerBlendModeType;
  static constexpr LayerBlendModeType LAYER_BLEND_NONE =
    KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_NONE;
  static constexpr LayerBlendModeType LAYER_BLEND_ADD =
    KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_ADD;
  static constexpr LayerBlendModeType LAYER_BLEND_AVERAGE =
    KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_AVERAGE;
  static constexpr LayerBlendModeType LAYER_BLEND_COLOR_BURN =
    KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_COLOR_BURN;
  static constexpr LayerBlendModeType LAYER_BLEND_COLOR_DODGE =
    KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_COLOR_DODGE;
  static constexpr LayerBlendModeType LAYER_BLEND_DARKEN =
    KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_DARKEN;
  static constexpr LayerBlendModeType LAYER_BLEND_DIFFERENCE =
    KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_DIFFERENCE;
  static constexpr LayerBlendModeType LAYER_BLEND_EXCLUSION =
    KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_EXCLUSION;
  static constexpr LayerBlendModeType LAYER_BLEND_GLOW =
    KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_GLOW;
  static constexpr LayerBlendModeType LAYER_BLEND_HARD_LIGHT =
    KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_HARD_LIGHT;
  static constexpr LayerBlendModeType LAYER_BLEND_HARD_MIX =
    KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_HARD_MIX;
  static constexpr LayerBlendModeType LAYER_BLEND_LIGHTEN =
    KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_LIGHTEN;
  static constexpr LayerBlendModeType LAYER_BLEND_LINEAR_BURN =
    KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_LINEAR_BURN;
  static constexpr LayerBlendModeType LAYER_BLEND_LINEAR_DODGE =
    KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_LINEAR_DODGE;
  static constexpr LayerBlendModeType LAYER_BLEND_LINEAR_LIGHT =
    KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_LINEAR_LIGHT;
  static constexpr LayerBlendModeType LAYER_BLEND_MULTIPLY =
    KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_MULTIPLY;
  static constexpr LayerBlendModeType LAYER_BLEND_NEGATION =
    KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_NEGATION;
  static constexpr LayerBlendModeType LAYER_BLEND_NORMAL =
    KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_NORMAL;
  static constexpr LayerBlendModeType LAYER_BLEND_OVERLAY =
    KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_OVERLAY;
  static constexpr LayerBlendModeType LAYER_BLEND_PHOENIX =
    KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_PHOENIX;
  static constexpr LayerBlendModeType LAYER_BLEND_PIN_LIGHT =
    KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_PIN_LIGHT;
  static constexpr LayerBlendModeType LAYER_BLEND_REFLECT =
    KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_REFLECT;
  static constexpr LayerBlendModeType LAYER_BLEND_SCREEN =
    KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_SCREEN;
  static constexpr LayerBlendModeType LAYER_BLEND_SOFT_LIGHT =
    KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_SOFT_LIGHT;
  static constexpr LayerBlendModeType LAYER_BLEND_SUBTRACT =
    KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_SUBTRACT;
  static constexpr LayerBlendModeType LAYER_BLEND_VIVID_LIGHT =
    KMProto_KMProject_LayerBlendModeType_LAYER_BLEND_VIVID_LIGHT;
  static inline bool LayerBlendModeType_IsValid(int value) {
    return KMProto_KMProject_LayerBlendModeType_IsValid(value);
  }
  static constexpr LayerBlendModeType LayerBlendModeType_MIN =
    KMProto_KMProject_LayerBlendModeType_LayerBlendModeType_MIN;
  static constexpr LayerBlendModeType LayerBlendModeType_MAX =
    KMProto_KMProject_LayerBlendModeType_LayerBlendModeType_MAX;
  static constexpr int LayerBlendModeType_ARRAYSIZE =
    KMProto_KMProject_LayerBlendModeType_LayerBlendModeType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& LayerBlendModeType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LayerBlendModeType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LayerBlendModeType_Name.");
    return KMProto_KMProject_LayerBlendModeType_Name(enum_t_value);
  }
  static inline bool LayerBlendModeType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      LayerBlendModeType* value) {
    return KMProto_KMProject_LayerBlendModeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPrimaryItemsFieldNumber = 1,
    kSecondaryItemsFieldNumber = 2,
    kTracksFieldNumber = 3,
    kBookmarksFieldNumber = 103,
    kProjectDefaultImgCropModeFieldNumber = 126,
    kAudioFadeFieldNumber = 135,
    kVideoFadeFieldNumber = 136,
    kAspectRatioHeightFieldNumber = 134,
    kTimelineFormatVersionFieldNumber = 100,
    kRecentScrollTimeFieldNumber = 109,
    kProjectAudioFadeInTimeFieldNumber = 112,
    kProjectAudioFadeOutTimeFieldNumber = 113,
    kIsProjectAudioFadeInOnFieldNumber = 114,
    kIsProjectAudioFadeOutOnFieldNumber = 115,
    kIsProjectVideoFadeInOnFieldNumber = 122,
    kIsProjectVideoFadeOutOnFieldNumber = 123,
    kProjectVideoFadeInTimeFieldNumber = 120,
    kProjectVideoFadeOutTimeFieldNumber = 121,
    kProjectDefaultImgDurationFieldNumber = 124,
    kProjectDefaultLayerDurationFieldNumber = 125,
    kProjectAutoMasterFieldNumber = 127,
    kProjectMasterVolumeFieldNumber = 128,
    kProjectResolutionSettingFieldNumber = 129,
    kProjectFrameRateFieldNumber = 130,
    kProjectDefaultImgCropModeIosFieldNumber = 131,
    kProjectCapabilityModeFieldNumber = 132,
    kAspectRatioWidthFieldNumber = 133,
    kProjectRatioFieldNumber = 111,
  };
  // repeated .KMProto.KMProject.TimelineItem primary_items = 1;
  int primary_items_size() const;
  private:
  int _internal_primary_items_size() const;
  public:
  void clear_primary_items();
  ::KMProto_KMProject_TimelineItem* mutable_primary_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_TimelineItem >*
      mutable_primary_items();
  private:
  const ::KMProto_KMProject_TimelineItem& _internal_primary_items(int index) const;
  ::KMProto_KMProject_TimelineItem* _internal_add_primary_items();
  public:
  const ::KMProto_KMProject_TimelineItem& primary_items(int index) const;
  ::KMProto_KMProject_TimelineItem* add_primary_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_TimelineItem >&
      primary_items() const;

  // repeated .KMProto.KMProject.TimelineItem secondary_items = 2;
  int secondary_items_size() const;
  private:
  int _internal_secondary_items_size() const;
  public:
  void clear_secondary_items();
  ::KMProto_KMProject_TimelineItem* mutable_secondary_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_TimelineItem >*
      mutable_secondary_items();
  private:
  const ::KMProto_KMProject_TimelineItem& _internal_secondary_items(int index) const;
  ::KMProto_KMProject_TimelineItem* _internal_add_secondary_items();
  public:
  const ::KMProto_KMProject_TimelineItem& secondary_items(int index) const;
  ::KMProto_KMProject_TimelineItem* add_secondary_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_TimelineItem >&
      secondary_items() const;

  // repeated .KMProto.KMProject.Track tracks = 3;
  int tracks_size() const;
  private:
  int _internal_tracks_size() const;
  public:
  void clear_tracks();
  ::KMProto_KMProject_Track* mutable_tracks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_Track >*
      mutable_tracks();
  private:
  const ::KMProto_KMProject_Track& _internal_tracks(int index) const;
  ::KMProto_KMProject_Track* _internal_add_tracks();
  public:
  const ::KMProto_KMProject_Track& tracks(int index) const;
  ::KMProto_KMProject_Track* add_tracks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_Track >&
      tracks() const;

  // repeated uint32 bookmarks = 103 [packed = true];
  int bookmarks_size() const;
  private:
  int _internal_bookmarks_size() const;
  public:
  void clear_bookmarks();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bookmarks(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_bookmarks() const;
  void _internal_add_bookmarks(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_bookmarks();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 bookmarks(int index) const;
  void set_bookmarks(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_bookmarks(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      bookmarks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_bookmarks();

  // optional string project_default_img_crop_mode = 126;
  bool has_project_default_img_crop_mode() const;
  private:
  bool _internal_has_project_default_img_crop_mode() const;
  public:
  void clear_project_default_img_crop_mode();
  const std::string& project_default_img_crop_mode() const;
  void set_project_default_img_crop_mode(const std::string& value);
  void set_project_default_img_crop_mode(std::string&& value);
  void set_project_default_img_crop_mode(const char* value);
  void set_project_default_img_crop_mode(const char* value, size_t size);
  std::string* mutable_project_default_img_crop_mode();
  std::string* release_project_default_img_crop_mode();
  void set_allocated_project_default_img_crop_mode(std::string* project_default_img_crop_mode);
  private:
  const std::string& _internal_project_default_img_crop_mode() const;
  void _internal_set_project_default_img_crop_mode(const std::string& value);
  std::string* _internal_mutable_project_default_img_crop_mode();
  public:

  // optional .KMProto.KMProject.Fade audio_fade = 135;
  bool has_audio_fade() const;
  private:
  bool _internal_has_audio_fade() const;
  public:
  void clear_audio_fade();
  const ::KMProto_KMProject_Fade& audio_fade() const;
  ::KMProto_KMProject_Fade* release_audio_fade();
  ::KMProto_KMProject_Fade* mutable_audio_fade();
  void set_allocated_audio_fade(::KMProto_KMProject_Fade* audio_fade);
  private:
  const ::KMProto_KMProject_Fade& _internal_audio_fade() const;
  ::KMProto_KMProject_Fade* _internal_mutable_audio_fade();
  public:
  void unsafe_arena_set_allocated_audio_fade(
      ::KMProto_KMProject_Fade* audio_fade);
  ::KMProto_KMProject_Fade* unsafe_arena_release_audio_fade();

  // optional .KMProto.KMProject.Fade video_fade = 136;
  bool has_video_fade() const;
  private:
  bool _internal_has_video_fade() const;
  public:
  void clear_video_fade();
  const ::KMProto_KMProject_Fade& video_fade() const;
  ::KMProto_KMProject_Fade* release_video_fade();
  ::KMProto_KMProject_Fade* mutable_video_fade();
  void set_allocated_video_fade(::KMProto_KMProject_Fade* video_fade);
  private:
  const ::KMProto_KMProject_Fade& _internal_video_fade() const;
  ::KMProto_KMProject_Fade* _internal_mutable_video_fade();
  public:
  void unsafe_arena_set_allocated_video_fade(
      ::KMProto_KMProject_Fade* video_fade);
  ::KMProto_KMProject_Fade* unsafe_arena_release_video_fade();

  // optional int32 aspect_ratio_height = 134;
  bool has_aspect_ratio_height() const;
  private:
  bool _internal_has_aspect_ratio_height() const;
  public:
  void clear_aspect_ratio_height();
  ::PROTOBUF_NAMESPACE_ID::int32 aspect_ratio_height() const;
  void set_aspect_ratio_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_aspect_ratio_height() const;
  void _internal_set_aspect_ratio_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 timeline_format_version = 100;
  bool has_timeline_format_version() const;
  private:
  bool _internal_has_timeline_format_version() const;
  public:
  void clear_timeline_format_version();
  ::PROTOBUF_NAMESPACE_ID::int32 timeline_format_version() const;
  void set_timeline_format_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timeline_format_version() const;
  void _internal_set_timeline_format_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 recent_scroll_time = 109;
  bool has_recent_scroll_time() const;
  private:
  bool _internal_has_recent_scroll_time() const;
  public:
  void clear_recent_scroll_time();
  ::PROTOBUF_NAMESPACE_ID::int32 recent_scroll_time() const;
  void set_recent_scroll_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_recent_scroll_time() const;
  void _internal_set_recent_scroll_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float project_audio_fade_in_time = 112;
  bool has_project_audio_fade_in_time() const;
  private:
  bool _internal_has_project_audio_fade_in_time() const;
  public:
  void clear_project_audio_fade_in_time();
  float project_audio_fade_in_time() const;
  void set_project_audio_fade_in_time(float value);
  private:
  float _internal_project_audio_fade_in_time() const;
  void _internal_set_project_audio_fade_in_time(float value);
  public:

  // optional float project_audio_fade_out_time = 113;
  bool has_project_audio_fade_out_time() const;
  private:
  bool _internal_has_project_audio_fade_out_time() const;
  public:
  void clear_project_audio_fade_out_time();
  float project_audio_fade_out_time() const;
  void set_project_audio_fade_out_time(float value);
  private:
  float _internal_project_audio_fade_out_time() const;
  void _internal_set_project_audio_fade_out_time(float value);
  public:

  // optional bool is_project_audio_fade_in_on = 114;
  bool has_is_project_audio_fade_in_on() const;
  private:
  bool _internal_has_is_project_audio_fade_in_on() const;
  public:
  void clear_is_project_audio_fade_in_on();
  bool is_project_audio_fade_in_on() const;
  void set_is_project_audio_fade_in_on(bool value);
  private:
  bool _internal_is_project_audio_fade_in_on() const;
  void _internal_set_is_project_audio_fade_in_on(bool value);
  public:

  // optional bool is_project_audio_fade_out_on = 115;
  bool has_is_project_audio_fade_out_on() const;
  private:
  bool _internal_has_is_project_audio_fade_out_on() const;
  public:
  void clear_is_project_audio_fade_out_on();
  bool is_project_audio_fade_out_on() const;
  void set_is_project_audio_fade_out_on(bool value);
  private:
  bool _internal_is_project_audio_fade_out_on() const;
  void _internal_set_is_project_audio_fade_out_on(bool value);
  public:

  // optional bool is_project_video_fade_in_on = 122;
  bool has_is_project_video_fade_in_on() const;
  private:
  bool _internal_has_is_project_video_fade_in_on() const;
  public:
  void clear_is_project_video_fade_in_on();
  bool is_project_video_fade_in_on() const;
  void set_is_project_video_fade_in_on(bool value);
  private:
  bool _internal_is_project_video_fade_in_on() const;
  void _internal_set_is_project_video_fade_in_on(bool value);
  public:

  // optional bool is_project_video_fade_out_on = 123;
  bool has_is_project_video_fade_out_on() const;
  private:
  bool _internal_has_is_project_video_fade_out_on() const;
  public:
  void clear_is_project_video_fade_out_on();
  bool is_project_video_fade_out_on() const;
  void set_is_project_video_fade_out_on(bool value);
  private:
  bool _internal_is_project_video_fade_out_on() const;
  void _internal_set_is_project_video_fade_out_on(bool value);
  public:

  // optional float project_video_fade_in_time = 120;
  bool has_project_video_fade_in_time() const;
  private:
  bool _internal_has_project_video_fade_in_time() const;
  public:
  void clear_project_video_fade_in_time();
  float project_video_fade_in_time() const;
  void set_project_video_fade_in_time(float value);
  private:
  float _internal_project_video_fade_in_time() const;
  void _internal_set_project_video_fade_in_time(float value);
  public:

  // optional float project_video_fade_out_time = 121;
  bool has_project_video_fade_out_time() const;
  private:
  bool _internal_has_project_video_fade_out_time() const;
  public:
  void clear_project_video_fade_out_time();
  float project_video_fade_out_time() const;
  void set_project_video_fade_out_time(float value);
  private:
  float _internal_project_video_fade_out_time() const;
  void _internal_set_project_video_fade_out_time(float value);
  public:

  // optional int32 project_default_img_duration = 124;
  bool has_project_default_img_duration() const;
  private:
  bool _internal_has_project_default_img_duration() const;
  public:
  void clear_project_default_img_duration();
  ::PROTOBUF_NAMESPACE_ID::int32 project_default_img_duration() const;
  void set_project_default_img_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_project_default_img_duration() const;
  void _internal_set_project_default_img_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 project_default_layer_duration = 125;
  bool has_project_default_layer_duration() const;
  private:
  bool _internal_has_project_default_layer_duration() const;
  public:
  void clear_project_default_layer_duration();
  ::PROTOBUF_NAMESPACE_ID::int32 project_default_layer_duration() const;
  void set_project_default_layer_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_project_default_layer_duration() const;
  void _internal_set_project_default_layer_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool project_auto_master = 127;
  bool has_project_auto_master() const;
  private:
  bool _internal_has_project_auto_master() const;
  public:
  void clear_project_auto_master();
  bool project_auto_master() const;
  void set_project_auto_master(bool value);
  private:
  bool _internal_project_auto_master() const;
  void _internal_set_project_auto_master(bool value);
  public:

  // optional int32 project_master_volume = 128;
  bool has_project_master_volume() const;
  private:
  bool _internal_has_project_master_volume() const;
  public:
  void clear_project_master_volume();
  ::PROTOBUF_NAMESPACE_ID::int32 project_master_volume() const;
  void set_project_master_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_project_master_volume() const;
  void _internal_set_project_master_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 project_resolution_setting = 129;
  bool has_project_resolution_setting() const;
  private:
  bool _internal_has_project_resolution_setting() const;
  public:
  void clear_project_resolution_setting();
  ::PROTOBUF_NAMESPACE_ID::int32 project_resolution_setting() const;
  void set_project_resolution_setting(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_project_resolution_setting() const;
  void _internal_set_project_resolution_setting(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 project_frame_rate = 130;
  bool has_project_frame_rate() const;
  private:
  bool _internal_has_project_frame_rate() const;
  public:
  void clear_project_frame_rate();
  ::PROTOBUF_NAMESPACE_ID::int32 project_frame_rate() const;
  void set_project_frame_rate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_project_frame_rate() const;
  void _internal_set_project_frame_rate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 project_default_img_crop_mode_ios = 131;
  bool has_project_default_img_crop_mode_ios() const;
  private:
  bool _internal_has_project_default_img_crop_mode_ios() const;
  public:
  void clear_project_default_img_crop_mode_ios();
  ::PROTOBUF_NAMESPACE_ID::int32 project_default_img_crop_mode_ios() const;
  void set_project_default_img_crop_mode_ios(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_project_default_img_crop_mode_ios() const;
  void _internal_set_project_default_img_crop_mode_ios(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 project_capability_mode = 132;
  bool has_project_capability_mode() const;
  private:
  bool _internal_has_project_capability_mode() const;
  public:
  void clear_project_capability_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 project_capability_mode() const;
  void set_project_capability_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_project_capability_mode() const;
  void _internal_set_project_capability_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 aspect_ratio_width = 133;
  bool has_aspect_ratio_width() const;
  private:
  bool _internal_has_aspect_ratio_width() const;
  public:
  void clear_aspect_ratio_width();
  ::PROTOBUF_NAMESPACE_ID::int32 aspect_ratio_width() const;
  void set_aspect_ratio_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_aspect_ratio_width() const;
  void _internal_set_aspect_ratio_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .KMProto.KMProject.AspectRatio project_ratio = 111;
  bool has_project_ratio() const;
  private:
  bool _internal_has_project_ratio() const;
  public:
  void clear_project_ratio();
  ::KMProto_KMProject_AspectRatio project_ratio() const;
  void set_project_ratio(::KMProto_KMProject_AspectRatio value);
  private:
  ::KMProto_KMProject_AspectRatio _internal_project_ratio() const;
  void _internal_set_project_ratio(::KMProto_KMProject_AspectRatio value);
  public:

  // @@protoc_insertion_point(class_scope:KMProto.KMProject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_TimelineItem > primary_items_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_TimelineItem > secondary_items_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_Track > tracks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > bookmarks_;
  mutable std::atomic<int> _bookmarks_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_default_img_crop_mode_;
  ::KMProto_KMProject_Fade* audio_fade_;
  ::KMProto_KMProject_Fade* video_fade_;
  ::PROTOBUF_NAMESPACE_ID::int32 aspect_ratio_height_;
  ::PROTOBUF_NAMESPACE_ID::int32 timeline_format_version_;
  ::PROTOBUF_NAMESPACE_ID::int32 recent_scroll_time_;
  float project_audio_fade_in_time_;
  float project_audio_fade_out_time_;
  bool is_project_audio_fade_in_on_;
  bool is_project_audio_fade_out_on_;
  bool is_project_video_fade_in_on_;
  bool is_project_video_fade_out_on_;
  float project_video_fade_in_time_;
  float project_video_fade_out_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 project_default_img_duration_;
  ::PROTOBUF_NAMESPACE_ID::int32 project_default_layer_duration_;
  bool project_auto_master_;
  ::PROTOBUF_NAMESPACE_ID::int32 project_master_volume_;
  ::PROTOBUF_NAMESPACE_ID::int32 project_resolution_setting_;
  ::PROTOBUF_NAMESPACE_ID::int32 project_frame_rate_;
  ::PROTOBUF_NAMESPACE_ID::int32 project_default_img_crop_mode_ios_;
  ::PROTOBUF_NAMESPACE_ID::int32 project_capability_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 aspect_ratio_width_;
  int project_ratio_;
  friend struct ::TableStruct_kinemaster_5fproject_5fwire_2dlite_2eproto;
};
// -------------------------------------------------------------------

class KMProto_KMProjectHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:KMProto.KMProjectHeader) */ {
 public:
  inline KMProto_KMProjectHeader() : KMProto_KMProjectHeader(nullptr) {}
  virtual ~KMProto_KMProjectHeader();

  KMProto_KMProjectHeader(const KMProto_KMProjectHeader& from);
  KMProto_KMProjectHeader(KMProto_KMProjectHeader&& from) noexcept
    : KMProto_KMProjectHeader() {
    *this = ::std::move(from);
  }

  inline KMProto_KMProjectHeader& operator=(const KMProto_KMProjectHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline KMProto_KMProjectHeader& operator=(KMProto_KMProjectHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const KMProto_KMProjectHeader& default_instance();

  static inline const KMProto_KMProjectHeader* internal_default_instance() {
    return reinterpret_cast<const KMProto_KMProjectHeader*>(
               &_KMProto_KMProjectHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(KMProto_KMProjectHeader& a, KMProto_KMProjectHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(KMProto_KMProjectHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KMProto_KMProjectHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KMProto_KMProjectHeader* New() const final {
    return CreateMaybeMessage<KMProto_KMProjectHeader>(nullptr);
  }

  KMProto_KMProjectHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KMProto_KMProjectHeader>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const KMProto_KMProjectHeader& from);
  void MergeFrom(const KMProto_KMProjectHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KMProto_KMProjectHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KMProto.KMProjectHeader";
  }
  protected:
  explicit KMProto_KMProjectHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJpegThumbnailFieldNumber = 5,
    kThemeIdFieldNumber = 101,
    kBgmThemeIdFieldNumber = 102,
    kSavedWithKmVerNameFieldNumber = 103,
    kProjectVersionFieldNumber = 1,
    kSavedWithKmVersionFieldNumber = 2,
    kCreationTimeFieldNumber = 3,
    kLastEditTimeFieldNumber = 4,
    kProjectUuidLsbFieldNumber = 6,
    kProjectUuidMsbFieldNumber = 7,
    kTotalPlayTimeFieldNumber = 8,
    kNeedUpdateLargeThumbnailFieldNumber = 100,
    kUsingIcloudForIosOnlyFieldNumber = 105,
    kSavedOnPlatformFieldNumber = 104,
  };
  // optional bytes jpeg_thumbnail = 5;
  bool has_jpeg_thumbnail() const;
  private:
  bool _internal_has_jpeg_thumbnail() const;
  public:
  void clear_jpeg_thumbnail();
  const std::string& jpeg_thumbnail() const;
  void set_jpeg_thumbnail(const std::string& value);
  void set_jpeg_thumbnail(std::string&& value);
  void set_jpeg_thumbnail(const char* value);
  void set_jpeg_thumbnail(const void* value, size_t size);
  std::string* mutable_jpeg_thumbnail();
  std::string* release_jpeg_thumbnail();
  void set_allocated_jpeg_thumbnail(std::string* jpeg_thumbnail);
  private:
  const std::string& _internal_jpeg_thumbnail() const;
  void _internal_set_jpeg_thumbnail(const std::string& value);
  std::string* _internal_mutable_jpeg_thumbnail();
  public:

  // optional string theme_id = 101;
  bool has_theme_id() const;
  private:
  bool _internal_has_theme_id() const;
  public:
  void clear_theme_id();
  const std::string& theme_id() const;
  void set_theme_id(const std::string& value);
  void set_theme_id(std::string&& value);
  void set_theme_id(const char* value);
  void set_theme_id(const char* value, size_t size);
  std::string* mutable_theme_id();
  std::string* release_theme_id();
  void set_allocated_theme_id(std::string* theme_id);
  private:
  const std::string& _internal_theme_id() const;
  void _internal_set_theme_id(const std::string& value);
  std::string* _internal_mutable_theme_id();
  public:

  // optional string bgm_theme_id = 102;
  bool has_bgm_theme_id() const;
  private:
  bool _internal_has_bgm_theme_id() const;
  public:
  void clear_bgm_theme_id();
  const std::string& bgm_theme_id() const;
  void set_bgm_theme_id(const std::string& value);
  void set_bgm_theme_id(std::string&& value);
  void set_bgm_theme_id(const char* value);
  void set_bgm_theme_id(const char* value, size_t size);
  std::string* mutable_bgm_theme_id();
  std::string* release_bgm_theme_id();
  void set_allocated_bgm_theme_id(std::string* bgm_theme_id);
  private:
  const std::string& _internal_bgm_theme_id() const;
  void _internal_set_bgm_theme_id(const std::string& value);
  std::string* _internal_mutable_bgm_theme_id();
  public:

  // optional string saved_with_km_ver_name = 103;
  bool has_saved_with_km_ver_name() const;
  private:
  bool _internal_has_saved_with_km_ver_name() const;
  public:
  void clear_saved_with_km_ver_name();
  const std::string& saved_with_km_ver_name() const;
  void set_saved_with_km_ver_name(const std::string& value);
  void set_saved_with_km_ver_name(std::string&& value);
  void set_saved_with_km_ver_name(const char* value);
  void set_saved_with_km_ver_name(const char* value, size_t size);
  std::string* mutable_saved_with_km_ver_name();
  std::string* release_saved_with_km_ver_name();
  void set_allocated_saved_with_km_ver_name(std::string* saved_with_km_ver_name);
  private:
  const std::string& _internal_saved_with_km_ver_name() const;
  void _internal_set_saved_with_km_ver_name(const std::string& value);
  std::string* _internal_mutable_saved_with_km_ver_name();
  public:

  // optional uint32 project_version = 1;
  bool has_project_version() const;
  private:
  bool _internal_has_project_version() const;
  public:
  void clear_project_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 project_version() const;
  void set_project_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_project_version() const;
  void _internal_set_project_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 saved_with_km_version = 2;
  bool has_saved_with_km_version() const;
  private:
  bool _internal_has_saved_with_km_version() const;
  public:
  void clear_saved_with_km_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 saved_with_km_version() const;
  void set_saved_with_km_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_saved_with_km_version() const;
  void _internal_set_saved_with_km_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 creation_time = 3;
  bool has_creation_time() const;
  private:
  bool _internal_has_creation_time() const;
  public:
  void clear_creation_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 creation_time() const;
  void set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_creation_time() const;
  void _internal_set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 last_edit_time = 4;
  bool has_last_edit_time() const;
  private:
  bool _internal_has_last_edit_time() const;
  public:
  void clear_last_edit_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_edit_time() const;
  void set_last_edit_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_last_edit_time() const;
  void _internal_set_last_edit_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 project_uuid_lsb = 6;
  bool has_project_uuid_lsb() const;
  private:
  bool _internal_has_project_uuid_lsb() const;
  public:
  void clear_project_uuid_lsb();
  ::PROTOBUF_NAMESPACE_ID::uint64 project_uuid_lsb() const;
  void set_project_uuid_lsb(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_project_uuid_lsb() const;
  void _internal_set_project_uuid_lsb(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 project_uuid_msb = 7;
  bool has_project_uuid_msb() const;
  private:
  bool _internal_has_project_uuid_msb() const;
  public:
  void clear_project_uuid_msb();
  ::PROTOBUF_NAMESPACE_ID::uint64 project_uuid_msb() const;
  void set_project_uuid_msb(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_project_uuid_msb() const;
  void _internal_set_project_uuid_msb(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 total_play_time = 8;
  bool has_total_play_time() const;
  private:
  bool _internal_has_total_play_time() const;
  public:
  void clear_total_play_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_play_time() const;
  void set_total_play_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_play_time() const;
  void _internal_set_total_play_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool need_update_large_thumbnail = 100;
  bool has_need_update_large_thumbnail() const;
  private:
  bool _internal_has_need_update_large_thumbnail() const;
  public:
  void clear_need_update_large_thumbnail();
  bool need_update_large_thumbnail() const;
  void set_need_update_large_thumbnail(bool value);
  private:
  bool _internal_need_update_large_thumbnail() const;
  void _internal_set_need_update_large_thumbnail(bool value);
  public:

  // optional bool using_icloud_for_ios_only = 105;
  bool has_using_icloud_for_ios_only() const;
  private:
  bool _internal_has_using_icloud_for_ios_only() const;
  public:
  void clear_using_icloud_for_ios_only();
  bool using_icloud_for_ios_only() const;
  void set_using_icloud_for_ios_only(bool value);
  private:
  bool _internal_using_icloud_for_ios_only() const;
  void _internal_set_using_icloud_for_ios_only(bool value);
  public:

  // optional .KMProto.Platform saved_on_platform = 104;
  bool has_saved_on_platform() const;
  private:
  bool _internal_has_saved_on_platform() const;
  public:
  void clear_saved_on_platform();
  ::KMProto_Platform saved_on_platform() const;
  void set_saved_on_platform(::KMProto_Platform value);
  private:
  ::KMProto_Platform _internal_saved_on_platform() const;
  void _internal_set_saved_on_platform(::KMProto_Platform value);
  public:

  // @@protoc_insertion_point(class_scope:KMProto.KMProjectHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jpeg_thumbnail_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr theme_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bgm_theme_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr saved_with_km_ver_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 project_version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 saved_with_km_version_;
  ::PROTOBUF_NAMESPACE_ID::uint64 creation_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_edit_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 project_uuid_lsb_;
  ::PROTOBUF_NAMESPACE_ID::uint64 project_uuid_msb_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_play_time_;
  bool need_update_large_thumbnail_;
  bool using_icloud_for_ios_only_;
  int saved_on_platform_;
  friend struct ::TableStruct_kinemaster_5fproject_5fwire_2dlite_2eproto;
};
// -------------------------------------------------------------------

class KMProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:KMProto) */ {
 public:
  inline KMProto() : KMProto(nullptr) {}
  virtual ~KMProto();

  KMProto(const KMProto& from);
  KMProto(KMProto&& from) noexcept
    : KMProto() {
    *this = ::std::move(from);
  }

  inline KMProto& operator=(const KMProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline KMProto& operator=(KMProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const KMProto& default_instance();

  static inline const KMProto* internal_default_instance() {
    return reinterpret_cast<const KMProto*>(
               &_KMProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(KMProto& a, KMProto& b) {
    a.Swap(&b);
  }
  inline void Swap(KMProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KMProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KMProto* New() const final {
    return CreateMaybeMessage<KMProto>(nullptr);
  }

  KMProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KMProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const KMProto& from);
  void MergeFrom(const KMProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KMProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KMProto";
  }
  protected:
  explicit KMProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef KMProto_KMProject KMProject;
  typedef KMProto_KMProjectHeader KMProjectHeader;

  typedef KMProto_Platform Platform;
  static constexpr Platform IOS =
    KMProto_Platform_IOS;
  static constexpr Platform ANDROID =
    KMProto_Platform_ANDROID;
  static inline bool Platform_IsValid(int value) {
    return KMProto_Platform_IsValid(value);
  }
  static constexpr Platform Platform_MIN =
    KMProto_Platform_Platform_MIN;
  static constexpr Platform Platform_MAX =
    KMProto_Platform_Platform_MAX;
  static constexpr int Platform_ARRAYSIZE =
    KMProto_Platform_Platform_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Platform_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Platform>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Platform_Name.");
    return KMProto_Platform_Name(enum_t_value);
  }
  static inline bool Platform_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Platform* value) {
    return KMProto_Platform_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:KMProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kinemaster_5fproject_5fwire_2dlite_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KMProto_KMProject_Fade

// optional bool in_on = 1;
inline bool KMProto_KMProject_Fade::_internal_has_in_on() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KMProto_KMProject_Fade::has_in_on() const {
  return _internal_has_in_on();
}
inline void KMProto_KMProject_Fade::clear_in_on() {
  in_on_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool KMProto_KMProject_Fade::_internal_in_on() const {
  return in_on_;
}
inline bool KMProto_KMProject_Fade::in_on() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.Fade.in_on)
  return _internal_in_on();
}
inline void KMProto_KMProject_Fade::_internal_set_in_on(bool value) {
  _has_bits_[0] |= 0x00000002u;
  in_on_ = value;
}
inline void KMProto_KMProject_Fade::set_in_on(bool value) {
  _internal_set_in_on(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.Fade.in_on)
}

// optional float in_seconds = 2;
inline bool KMProto_KMProject_Fade::_internal_has_in_seconds() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KMProto_KMProject_Fade::has_in_seconds() const {
  return _internal_has_in_seconds();
}
inline void KMProto_KMProject_Fade::clear_in_seconds() {
  in_seconds_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float KMProto_KMProject_Fade::_internal_in_seconds() const {
  return in_seconds_;
}
inline float KMProto_KMProject_Fade::in_seconds() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.Fade.in_seconds)
  return _internal_in_seconds();
}
inline void KMProto_KMProject_Fade::_internal_set_in_seconds(float value) {
  _has_bits_[0] |= 0x00000001u;
  in_seconds_ = value;
}
inline void KMProto_KMProject_Fade::set_in_seconds(float value) {
  _internal_set_in_seconds(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.Fade.in_seconds)
}

// optional bool out_on = 3;
inline bool KMProto_KMProject_Fade::_internal_has_out_on() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool KMProto_KMProject_Fade::has_out_on() const {
  return _internal_has_out_on();
}
inline void KMProto_KMProject_Fade::clear_out_on() {
  out_on_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool KMProto_KMProject_Fade::_internal_out_on() const {
  return out_on_;
}
inline bool KMProto_KMProject_Fade::out_on() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.Fade.out_on)
  return _internal_out_on();
}
inline void KMProto_KMProject_Fade::_internal_set_out_on(bool value) {
  _has_bits_[0] |= 0x00000004u;
  out_on_ = value;
}
inline void KMProto_KMProject_Fade::set_out_on(bool value) {
  _internal_set_out_on(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.Fade.out_on)
}

// optional float out_seconds = 4;
inline bool KMProto_KMProject_Fade::_internal_has_out_seconds() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool KMProto_KMProject_Fade::has_out_seconds() const {
  return _internal_has_out_seconds();
}
inline void KMProto_KMProject_Fade::clear_out_seconds() {
  out_seconds_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float KMProto_KMProject_Fade::_internal_out_seconds() const {
  return out_seconds_;
}
inline float KMProto_KMProject_Fade::out_seconds() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.Fade.out_seconds)
  return _internal_out_seconds();
}
inline void KMProto_KMProject_Fade::_internal_set_out_seconds(float value) {
  _has_bits_[0] |= 0x00000008u;
  out_seconds_ = value;
}
inline void KMProto_KMProject_Fade::set_out_seconds(float value) {
  _internal_set_out_seconds(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.Fade.out_seconds)
}

// -------------------------------------------------------------------

// KMProto_KMProject_Track

// optional int32 track_id = 1;
inline bool KMProto_KMProject_Track::_internal_has_track_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool KMProto_KMProject_Track::has_track_id() const {
  return _internal_has_track_id();
}
inline void KMProto_KMProject_Track::clear_track_id() {
  track_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_Track::_internal_track_id() const {
  return track_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_Track::track_id() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.Track.track_id)
  return _internal_track_id();
}
inline void KMProto_KMProject_Track::_internal_set_track_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  track_id_ = value;
}
inline void KMProto_KMProject_Track::set_track_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_track_id(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.Track.track_id)
}

// optional bool visible = 100;
inline bool KMProto_KMProject_Track::_internal_has_visible() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool KMProto_KMProject_Track::has_visible() const {
  return _internal_has_visible();
}
inline void KMProto_KMProject_Track::clear_visible() {
  visible_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool KMProto_KMProject_Track::_internal_visible() const {
  return visible_;
}
inline bool KMProto_KMProject_Track::visible() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.Track.visible)
  return _internal_visible();
}
inline void KMProto_KMProject_Track::_internal_set_visible(bool value) {
  _has_bits_[0] |= 0x00000100u;
  visible_ = value;
}
inline void KMProto_KMProject_Track::set_visible(bool value) {
  _internal_set_visible(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.Track.visible)
}

// optional bool mute_audio = 101;
inline bool KMProto_KMProject_Track::_internal_has_mute_audio() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool KMProto_KMProject_Track::has_mute_audio() const {
  return _internal_has_mute_audio();
}
inline void KMProto_KMProject_Track::clear_mute_audio() {
  mute_audio_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool KMProto_KMProject_Track::_internal_mute_audio() const {
  return mute_audio_;
}
inline bool KMProto_KMProject_Track::mute_audio() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.Track.mute_audio)
  return _internal_mute_audio();
}
inline void KMProto_KMProject_Track::_internal_set_mute_audio(bool value) {
  _has_bits_[0] |= 0x00000200u;
  mute_audio_ = value;
}
inline void KMProto_KMProject_Track::set_mute_audio(bool value) {
  _internal_set_mute_audio(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.Track.mute_audio)
}

// optional int32 clip_volume = 102;
inline bool KMProto_KMProject_Track::_internal_has_clip_volume() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool KMProto_KMProject_Track::has_clip_volume() const {
  return _internal_has_clip_volume();
}
inline void KMProto_KMProject_Track::clear_clip_volume() {
  clip_volume_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_Track::_internal_clip_volume() const {
  return clip_volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_Track::clip_volume() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.Track.clip_volume)
  return _internal_clip_volume();
}
inline void KMProto_KMProject_Track::_internal_set_clip_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  clip_volume_ = value;
}
inline void KMProto_KMProject_Track::set_clip_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_clip_volume(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.Track.clip_volume)
}

// optional int32 compressor = 103;
inline bool KMProto_KMProject_Track::_internal_has_compressor() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool KMProto_KMProject_Track::has_compressor() const {
  return _internal_has_compressor();
}
inline void KMProto_KMProject_Track::clear_compressor() {
  compressor_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_Track::_internal_compressor() const {
  return compressor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_Track::compressor() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.Track.compressor)
  return _internal_compressor();
}
inline void KMProto_KMProject_Track::_internal_set_compressor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  compressor_ = value;
}
inline void KMProto_KMProject_Track::set_compressor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_compressor(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.Track.compressor)
}

// optional int32 pan_left = 104;
inline bool KMProto_KMProject_Track::_internal_has_pan_left() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool KMProto_KMProject_Track::has_pan_left() const {
  return _internal_has_pan_left();
}
inline void KMProto_KMProject_Track::clear_pan_left() {
  pan_left_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_Track::_internal_pan_left() const {
  return pan_left_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_Track::pan_left() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.Track.pan_left)
  return _internal_pan_left();
}
inline void KMProto_KMProject_Track::_internal_set_pan_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  pan_left_ = value;
}
inline void KMProto_KMProject_Track::set_pan_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pan_left(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.Track.pan_left)
}

// optional int32 pan_right = 105;
inline bool KMProto_KMProject_Track::_internal_has_pan_right() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool KMProto_KMProject_Track::has_pan_right() const {
  return _internal_has_pan_right();
}
inline void KMProto_KMProject_Track::clear_pan_right() {
  pan_right_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_Track::_internal_pan_right() const {
  return pan_right_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_Track::pan_right() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.Track.pan_right)
  return _internal_pan_right();
}
inline void KMProto_KMProject_Track::_internal_set_pan_right(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  pan_right_ = value;
}
inline void KMProto_KMProject_Track::set_pan_right(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pan_right(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.Track.pan_right)
}

// optional int32 pitch_factor = 106;
inline bool KMProto_KMProject_Track::_internal_has_pitch_factor() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool KMProto_KMProject_Track::has_pitch_factor() const {
  return _internal_has_pitch_factor();
}
inline void KMProto_KMProject_Track::clear_pitch_factor() {
  pitch_factor_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_Track::_internal_pitch_factor() const {
  return pitch_factor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_Track::pitch_factor() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.Track.pitch_factor)
  return _internal_pitch_factor();
}
inline void KMProto_KMProject_Track::_internal_set_pitch_factor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  pitch_factor_ = value;
}
inline void KMProto_KMProject_Track::set_pitch_factor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pitch_factor(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.Track.pitch_factor)
}

// optional int32 overall_alpha = 107;
inline bool KMProto_KMProject_Track::_internal_has_overall_alpha() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool KMProto_KMProject_Track::has_overall_alpha() const {
  return _internal_has_overall_alpha();
}
inline void KMProto_KMProject_Track::clear_overall_alpha() {
  overall_alpha_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_Track::_internal_overall_alpha() const {
  return overall_alpha_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_Track::overall_alpha() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.Track.overall_alpha)
  return _internal_overall_alpha();
}
inline void KMProto_KMProject_Track::_internal_set_overall_alpha(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  overall_alpha_ = value;
}
inline void KMProto_KMProject_Track::set_overall_alpha(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_overall_alpha(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.Track.overall_alpha)
}

// optional bool override_text_style = 110;
inline bool KMProto_KMProject_Track::_internal_has_override_text_style() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool KMProto_KMProject_Track::has_override_text_style() const {
  return _internal_has_override_text_style();
}
inline void KMProto_KMProject_Track::clear_override_text_style() {
  override_text_style_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool KMProto_KMProject_Track::_internal_override_text_style() const {
  return override_text_style_;
}
inline bool KMProto_KMProject_Track::override_text_style() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.Track.override_text_style)
  return _internal_override_text_style();
}
inline void KMProto_KMProject_Track::_internal_set_override_text_style(bool value) {
  _has_bits_[0] |= 0x00000400u;
  override_text_style_ = value;
}
inline void KMProto_KMProject_Track::set_override_text_style(bool value) {
  _internal_set_override_text_style(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.Track.override_text_style)
}

// optional string text_font_id = 111;
inline bool KMProto_KMProject_Track::_internal_has_text_font_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KMProto_KMProject_Track::has_text_font_id() const {
  return _internal_has_text_font_id();
}
inline void KMProto_KMProject_Track::clear_text_font_id() {
  text_font_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KMProto_KMProject_Track::text_font_id() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.Track.text_font_id)
  return _internal_text_font_id();
}
inline void KMProto_KMProject_Track::set_text_font_id(const std::string& value) {
  _internal_set_text_font_id(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.Track.text_font_id)
}
inline std::string* KMProto_KMProject_Track::mutable_text_font_id() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.Track.text_font_id)
  return _internal_mutable_text_font_id();
}
inline const std::string& KMProto_KMProject_Track::_internal_text_font_id() const {
  return text_font_id_.Get();
}
inline void KMProto_KMProject_Track::_internal_set_text_font_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  text_font_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProject_Track::set_text_font_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  text_font_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProject.Track.text_font_id)
}
inline void KMProto_KMProject_Track::set_text_font_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  text_font_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProject.Track.text_font_id)
}
inline void KMProto_KMProject_Track::set_text_font_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  text_font_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProject.Track.text_font_id)
}
inline std::string* KMProto_KMProject_Track::_internal_mutable_text_font_id() {
  _has_bits_[0] |= 0x00000001u;
  return text_font_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProject_Track::release_text_font_id() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.Track.text_font_id)
  if (!_internal_has_text_font_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return text_font_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProject_Track::set_allocated_text_font_id(std::string* text_font_id) {
  if (text_font_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_font_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text_font_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.Track.text_font_id)
}

// optional int32 text_color = 112;
inline bool KMProto_KMProject_Track::_internal_has_text_color() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool KMProto_KMProject_Track::has_text_color() const {
  return _internal_has_text_color();
}
inline void KMProto_KMProject_Track::clear_text_color() {
  text_color_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_Track::_internal_text_color() const {
  return text_color_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_Track::text_color() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.Track.text_color)
  return _internal_text_color();
}
inline void KMProto_KMProject_Track::_internal_set_text_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  text_color_ = value;
}
inline void KMProto_KMProject_Track::set_text_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_text_color(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.Track.text_color)
}

// optional bool text_shadow = 113;
inline bool KMProto_KMProject_Track::_internal_has_text_shadow() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool KMProto_KMProject_Track::has_text_shadow() const {
  return _internal_has_text_shadow();
}
inline void KMProto_KMProject_Track::clear_text_shadow() {
  text_shadow_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool KMProto_KMProject_Track::_internal_text_shadow() const {
  return text_shadow_;
}
inline bool KMProto_KMProject_Track::text_shadow() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.Track.text_shadow)
  return _internal_text_shadow();
}
inline void KMProto_KMProject_Track::_internal_set_text_shadow(bool value) {
  _has_bits_[0] |= 0x00000800u;
  text_shadow_ = value;
}
inline void KMProto_KMProject_Track::set_text_shadow(bool value) {
  _internal_set_text_shadow(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.Track.text_shadow)
}

// optional int32 text_shadow_color = 114;
inline bool KMProto_KMProject_Track::_internal_has_text_shadow_color() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool KMProto_KMProject_Track::has_text_shadow_color() const {
  return _internal_has_text_shadow_color();
}
inline void KMProto_KMProject_Track::clear_text_shadow_color() {
  text_shadow_color_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_Track::_internal_text_shadow_color() const {
  return text_shadow_color_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_Track::text_shadow_color() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.Track.text_shadow_color)
  return _internal_text_shadow_color();
}
inline void KMProto_KMProject_Track::_internal_set_text_shadow_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  text_shadow_color_ = value;
}
inline void KMProto_KMProject_Track::set_text_shadow_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_text_shadow_color(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.Track.text_shadow_color)
}

// optional bool text_glow = 115;
inline bool KMProto_KMProject_Track::_internal_has_text_glow() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool KMProto_KMProject_Track::has_text_glow() const {
  return _internal_has_text_glow();
}
inline void KMProto_KMProject_Track::clear_text_glow() {
  text_glow_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool KMProto_KMProject_Track::_internal_text_glow() const {
  return text_glow_;
}
inline bool KMProto_KMProject_Track::text_glow() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.Track.text_glow)
  return _internal_text_glow();
}
inline void KMProto_KMProject_Track::_internal_set_text_glow(bool value) {
  _has_bits_[0] |= 0x00010000u;
  text_glow_ = value;
}
inline void KMProto_KMProject_Track::set_text_glow(bool value) {
  _internal_set_text_glow(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.Track.text_glow)
}

// optional int32 text_glow_color = 116;
inline bool KMProto_KMProject_Track::_internal_has_text_glow_color() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool KMProto_KMProject_Track::has_text_glow_color() const {
  return _internal_has_text_glow_color();
}
inline void KMProto_KMProject_Track::clear_text_glow_color() {
  text_glow_color_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_Track::_internal_text_glow_color() const {
  return text_glow_color_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_Track::text_glow_color() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.Track.text_glow_color)
  return _internal_text_glow_color();
}
inline void KMProto_KMProject_Track::_internal_set_text_glow_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  text_glow_color_ = value;
}
inline void KMProto_KMProject_Track::set_text_glow_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_text_glow_color(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.Track.text_glow_color)
}

// optional bool text_outline = 117;
inline bool KMProto_KMProject_Track::_internal_has_text_outline() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool KMProto_KMProject_Track::has_text_outline() const {
  return _internal_has_text_outline();
}
inline void KMProto_KMProject_Track::clear_text_outline() {
  text_outline_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool KMProto_KMProject_Track::_internal_text_outline() const {
  return text_outline_;
}
inline bool KMProto_KMProject_Track::text_outline() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.Track.text_outline)
  return _internal_text_outline();
}
inline void KMProto_KMProject_Track::_internal_set_text_outline(bool value) {
  _has_bits_[0] |= 0x00020000u;
  text_outline_ = value;
}
inline void KMProto_KMProject_Track::set_text_outline(bool value) {
  _internal_set_text_outline(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.Track.text_outline)
}

// optional int32 text_outline_color = 118;
inline bool KMProto_KMProject_Track::_internal_has_text_outline_color() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KMProto_KMProject_Track::has_text_outline_color() const {
  return _internal_has_text_outline_color();
}
inline void KMProto_KMProject_Track::clear_text_outline_color() {
  text_outline_color_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_Track::_internal_text_outline_color() const {
  return text_outline_color_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_Track::text_outline_color() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.Track.text_outline_color)
  return _internal_text_outline_color();
}
inline void KMProto_KMProject_Track::_internal_set_text_outline_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  text_outline_color_ = value;
}
inline void KMProto_KMProject_Track::set_text_outline_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_text_outline_color(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.Track.text_outline_color)
}

// -------------------------------------------------------------------

// KMProto_KMProject_TimelineItem

// optional uint64 unique_id_lsb = 1;
inline bool KMProto_KMProject_TimelineItem::_internal_has_unique_id_lsb() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool KMProto_KMProject_TimelineItem::has_unique_id_lsb() const {
  return _internal_has_unique_id_lsb();
}
inline void KMProto_KMProject_TimelineItem::clear_unique_id_lsb() {
  unique_id_lsb_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KMProto_KMProject_TimelineItem::_internal_unique_id_lsb() const {
  return unique_id_lsb_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KMProto_KMProject_TimelineItem::unique_id_lsb() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TimelineItem.unique_id_lsb)
  return _internal_unique_id_lsb();
}
inline void KMProto_KMProject_TimelineItem::_internal_set_unique_id_lsb(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000800u;
  unique_id_lsb_ = value;
}
inline void KMProto_KMProject_TimelineItem::set_unique_id_lsb(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_unique_id_lsb(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.TimelineItem.unique_id_lsb)
}

// optional uint64 unique_id_msb = 2;
inline bool KMProto_KMProject_TimelineItem::_internal_has_unique_id_msb() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool KMProto_KMProject_TimelineItem::has_unique_id_msb() const {
  return _internal_has_unique_id_msb();
}
inline void KMProto_KMProject_TimelineItem::clear_unique_id_msb() {
  unique_id_msb_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KMProto_KMProject_TimelineItem::_internal_unique_id_msb() const {
  return unique_id_msb_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KMProto_KMProject_TimelineItem::unique_id_msb() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TimelineItem.unique_id_msb)
  return _internal_unique_id_msb();
}
inline void KMProto_KMProject_TimelineItem::_internal_set_unique_id_msb(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00001000u;
  unique_id_msb_ = value;
}
inline void KMProto_KMProject_TimelineItem::set_unique_id_msb(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_unique_id_msb(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.TimelineItem.unique_id_msb)
}

// optional .KMProto.KMProject.ClipType clip_type = 3;
inline bool KMProto_KMProject_TimelineItem::_internal_has_clip_type() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool KMProto_KMProject_TimelineItem::has_clip_type() const {
  return _internal_has_clip_type();
}
inline void KMProto_KMProject_TimelineItem::clear_clip_type() {
  clip_type_ = 1;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::KMProto_KMProject_ClipType KMProto_KMProject_TimelineItem::_internal_clip_type() const {
  return static_cast< ::KMProto_KMProject_ClipType >(clip_type_);
}
inline ::KMProto_KMProject_ClipType KMProto_KMProject_TimelineItem::clip_type() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TimelineItem.clip_type)
  return _internal_clip_type();
}
inline void KMProto_KMProject_TimelineItem::_internal_set_clip_type(::KMProto_KMProject_ClipType value) {
  assert(::KMProto_KMProject_ClipType_IsValid(value));
  _has_bits_[0] |= 0x00004000u;
  clip_type_ = value;
}
inline void KMProto_KMProject_TimelineItem::set_clip_type(::KMProto_KMProject_ClipType value) {
  _internal_set_clip_type(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.TimelineItem.clip_type)
}

// optional int32 track_id = 14;
inline bool KMProto_KMProject_TimelineItem::_internal_has_track_id() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool KMProto_KMProject_TimelineItem::has_track_id() const {
  return _internal_has_track_id();
}
inline void KMProto_KMProject_TimelineItem::clear_track_id() {
  track_id_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_TimelineItem::_internal_track_id() const {
  return track_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_TimelineItem::track_id() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TimelineItem.track_id)
  return _internal_track_id();
}
inline void KMProto_KMProject_TimelineItem::_internal_set_track_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  track_id_ = value;
}
inline void KMProto_KMProject_TimelineItem::set_track_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_track_id(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.TimelineItem.track_id)
}

// optional .KMProto.KMProject.VisualClip visual_clip = 4;
inline bool KMProto_KMProject_TimelineItem::_internal_has_visual_clip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || visual_clip_ != nullptr);
  return value;
}
inline bool KMProto_KMProject_TimelineItem::has_visual_clip() const {
  return _internal_has_visual_clip();
}
inline void KMProto_KMProject_TimelineItem::clear_visual_clip() {
  if (visual_clip_ != nullptr) visual_clip_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::KMProto_KMProject_VisualClip& KMProto_KMProject_TimelineItem::_internal_visual_clip() const {
  const ::KMProto_KMProject_VisualClip* p = visual_clip_;
  return p != nullptr ? *p : reinterpret_cast<const ::KMProto_KMProject_VisualClip&>(
      ::_KMProto_KMProject_VisualClip_default_instance_);
}
inline const ::KMProto_KMProject_VisualClip& KMProto_KMProject_TimelineItem::visual_clip() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TimelineItem.visual_clip)
  return _internal_visual_clip();
}
inline void KMProto_KMProject_TimelineItem::unsafe_arena_set_allocated_visual_clip(
    ::KMProto_KMProject_VisualClip* visual_clip) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(visual_clip_);
  }
  visual_clip_ = visual_clip;
  if (visual_clip) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KMProto.KMProject.TimelineItem.visual_clip)
}
inline ::KMProto_KMProject_VisualClip* KMProto_KMProject_TimelineItem::release_visual_clip() {
  _has_bits_[0] &= ~0x00000001u;
  ::KMProto_KMProject_VisualClip* temp = visual_clip_;
  visual_clip_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KMProto_KMProject_VisualClip* KMProto_KMProject_TimelineItem::unsafe_arena_release_visual_clip() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.TimelineItem.visual_clip)
  _has_bits_[0] &= ~0x00000001u;
  ::KMProto_KMProject_VisualClip* temp = visual_clip_;
  visual_clip_ = nullptr;
  return temp;
}
inline ::KMProto_KMProject_VisualClip* KMProto_KMProject_TimelineItem::_internal_mutable_visual_clip() {
  _has_bits_[0] |= 0x00000001u;
  if (visual_clip_ == nullptr) {
    auto* p = CreateMaybeMessage<::KMProto_KMProject_VisualClip>(GetArena());
    visual_clip_ = p;
  }
  return visual_clip_;
}
inline ::KMProto_KMProject_VisualClip* KMProto_KMProject_TimelineItem::mutable_visual_clip() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.TimelineItem.visual_clip)
  return _internal_mutable_visual_clip();
}
inline void KMProto_KMProject_TimelineItem::set_allocated_visual_clip(::KMProto_KMProject_VisualClip* visual_clip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete visual_clip_;
  }
  if (visual_clip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(visual_clip);
    if (message_arena != submessage_arena) {
      visual_clip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, visual_clip, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  visual_clip_ = visual_clip;
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.TimelineItem.visual_clip)
}

// optional .KMProto.KMProject.Transition transition = 5;
inline bool KMProto_KMProject_TimelineItem::_internal_has_transition() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || transition_ != nullptr);
  return value;
}
inline bool KMProto_KMProject_TimelineItem::has_transition() const {
  return _internal_has_transition();
}
inline void KMProto_KMProject_TimelineItem::clear_transition() {
  if (transition_ != nullptr) transition_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::KMProto_KMProject_Transition& KMProto_KMProject_TimelineItem::_internal_transition() const {
  const ::KMProto_KMProject_Transition* p = transition_;
  return p != nullptr ? *p : reinterpret_cast<const ::KMProto_KMProject_Transition&>(
      ::_KMProto_KMProject_Transition_default_instance_);
}
inline const ::KMProto_KMProject_Transition& KMProto_KMProject_TimelineItem::transition() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TimelineItem.transition)
  return _internal_transition();
}
inline void KMProto_KMProject_TimelineItem::unsafe_arena_set_allocated_transition(
    ::KMProto_KMProject_Transition* transition) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transition_);
  }
  transition_ = transition;
  if (transition) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KMProto.KMProject.TimelineItem.transition)
}
inline ::KMProto_KMProject_Transition* KMProto_KMProject_TimelineItem::release_transition() {
  _has_bits_[0] &= ~0x00000002u;
  ::KMProto_KMProject_Transition* temp = transition_;
  transition_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KMProto_KMProject_Transition* KMProto_KMProject_TimelineItem::unsafe_arena_release_transition() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.TimelineItem.transition)
  _has_bits_[0] &= ~0x00000002u;
  ::KMProto_KMProject_Transition* temp = transition_;
  transition_ = nullptr;
  return temp;
}
inline ::KMProto_KMProject_Transition* KMProto_KMProject_TimelineItem::_internal_mutable_transition() {
  _has_bits_[0] |= 0x00000002u;
  if (transition_ == nullptr) {
    auto* p = CreateMaybeMessage<::KMProto_KMProject_Transition>(GetArena());
    transition_ = p;
  }
  return transition_;
}
inline ::KMProto_KMProject_Transition* KMProto_KMProject_TimelineItem::mutable_transition() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.TimelineItem.transition)
  return _internal_mutable_transition();
}
inline void KMProto_KMProject_TimelineItem::set_allocated_transition(::KMProto_KMProject_Transition* transition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete transition_;
  }
  if (transition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transition);
    if (message_arena != submessage_arena) {
      transition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transition, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  transition_ = transition;
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.TimelineItem.transition)
}

// optional .KMProto.KMProject.AudioClip audio_clip = 6;
inline bool KMProto_KMProject_TimelineItem::_internal_has_audio_clip() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || audio_clip_ != nullptr);
  return value;
}
inline bool KMProto_KMProject_TimelineItem::has_audio_clip() const {
  return _internal_has_audio_clip();
}
inline void KMProto_KMProject_TimelineItem::clear_audio_clip() {
  if (audio_clip_ != nullptr) audio_clip_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::KMProto_KMProject_AudioClip& KMProto_KMProject_TimelineItem::_internal_audio_clip() const {
  const ::KMProto_KMProject_AudioClip* p = audio_clip_;
  return p != nullptr ? *p : reinterpret_cast<const ::KMProto_KMProject_AudioClip&>(
      ::_KMProto_KMProject_AudioClip_default_instance_);
}
inline const ::KMProto_KMProject_AudioClip& KMProto_KMProject_TimelineItem::audio_clip() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TimelineItem.audio_clip)
  return _internal_audio_clip();
}
inline void KMProto_KMProject_TimelineItem::unsafe_arena_set_allocated_audio_clip(
    ::KMProto_KMProject_AudioClip* audio_clip) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(audio_clip_);
  }
  audio_clip_ = audio_clip;
  if (audio_clip) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KMProto.KMProject.TimelineItem.audio_clip)
}
inline ::KMProto_KMProject_AudioClip* KMProto_KMProject_TimelineItem::release_audio_clip() {
  _has_bits_[0] &= ~0x00000004u;
  ::KMProto_KMProject_AudioClip* temp = audio_clip_;
  audio_clip_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KMProto_KMProject_AudioClip* KMProto_KMProject_TimelineItem::unsafe_arena_release_audio_clip() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.TimelineItem.audio_clip)
  _has_bits_[0] &= ~0x00000004u;
  ::KMProto_KMProject_AudioClip* temp = audio_clip_;
  audio_clip_ = nullptr;
  return temp;
}
inline ::KMProto_KMProject_AudioClip* KMProto_KMProject_TimelineItem::_internal_mutable_audio_clip() {
  _has_bits_[0] |= 0x00000004u;
  if (audio_clip_ == nullptr) {
    auto* p = CreateMaybeMessage<::KMProto_KMProject_AudioClip>(GetArena());
    audio_clip_ = p;
  }
  return audio_clip_;
}
inline ::KMProto_KMProject_AudioClip* KMProto_KMProject_TimelineItem::mutable_audio_clip() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.TimelineItem.audio_clip)
  return _internal_mutable_audio_clip();
}
inline void KMProto_KMProject_TimelineItem::set_allocated_audio_clip(::KMProto_KMProject_AudioClip* audio_clip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete audio_clip_;
  }
  if (audio_clip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(audio_clip);
    if (message_arena != submessage_arena) {
      audio_clip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio_clip, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  audio_clip_ = audio_clip;
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.TimelineItem.audio_clip)
}

// optional .KMProto.KMProject.TextLayer text_layer = 7;
inline bool KMProto_KMProject_TimelineItem::_internal_has_text_layer() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || text_layer_ != nullptr);
  return value;
}
inline bool KMProto_KMProject_TimelineItem::has_text_layer() const {
  return _internal_has_text_layer();
}
inline void KMProto_KMProject_TimelineItem::clear_text_layer() {
  if (text_layer_ != nullptr) text_layer_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::KMProto_KMProject_TextLayer& KMProto_KMProject_TimelineItem::_internal_text_layer() const {
  const ::KMProto_KMProject_TextLayer* p = text_layer_;
  return p != nullptr ? *p : reinterpret_cast<const ::KMProto_KMProject_TextLayer&>(
      ::_KMProto_KMProject_TextLayer_default_instance_);
}
inline const ::KMProto_KMProject_TextLayer& KMProto_KMProject_TimelineItem::text_layer() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TimelineItem.text_layer)
  return _internal_text_layer();
}
inline void KMProto_KMProject_TimelineItem::unsafe_arena_set_allocated_text_layer(
    ::KMProto_KMProject_TextLayer* text_layer) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_layer_);
  }
  text_layer_ = text_layer;
  if (text_layer) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KMProto.KMProject.TimelineItem.text_layer)
}
inline ::KMProto_KMProject_TextLayer* KMProto_KMProject_TimelineItem::release_text_layer() {
  _has_bits_[0] &= ~0x00000008u;
  ::KMProto_KMProject_TextLayer* temp = text_layer_;
  text_layer_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KMProto_KMProject_TextLayer* KMProto_KMProject_TimelineItem::unsafe_arena_release_text_layer() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.TimelineItem.text_layer)
  _has_bits_[0] &= ~0x00000008u;
  ::KMProto_KMProject_TextLayer* temp = text_layer_;
  text_layer_ = nullptr;
  return temp;
}
inline ::KMProto_KMProject_TextLayer* KMProto_KMProject_TimelineItem::_internal_mutable_text_layer() {
  _has_bits_[0] |= 0x00000008u;
  if (text_layer_ == nullptr) {
    auto* p = CreateMaybeMessage<::KMProto_KMProject_TextLayer>(GetArena());
    text_layer_ = p;
  }
  return text_layer_;
}
inline ::KMProto_KMProject_TextLayer* KMProto_KMProject_TimelineItem::mutable_text_layer() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.TimelineItem.text_layer)
  return _internal_mutable_text_layer();
}
inline void KMProto_KMProject_TimelineItem::set_allocated_text_layer(::KMProto_KMProject_TextLayer* text_layer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete text_layer_;
  }
  if (text_layer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(text_layer);
    if (message_arena != submessage_arena) {
      text_layer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text_layer, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  text_layer_ = text_layer;
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.TimelineItem.text_layer)
}

// optional .KMProto.KMProject.StickerLayer sticker_layer = 8;
inline bool KMProto_KMProject_TimelineItem::_internal_has_sticker_layer() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || sticker_layer_ != nullptr);
  return value;
}
inline bool KMProto_KMProject_TimelineItem::has_sticker_layer() const {
  return _internal_has_sticker_layer();
}
inline void KMProto_KMProject_TimelineItem::clear_sticker_layer() {
  if (sticker_layer_ != nullptr) sticker_layer_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::KMProto_KMProject_StickerLayer& KMProto_KMProject_TimelineItem::_internal_sticker_layer() const {
  const ::KMProto_KMProject_StickerLayer* p = sticker_layer_;
  return p != nullptr ? *p : reinterpret_cast<const ::KMProto_KMProject_StickerLayer&>(
      ::_KMProto_KMProject_StickerLayer_default_instance_);
}
inline const ::KMProto_KMProject_StickerLayer& KMProto_KMProject_TimelineItem::sticker_layer() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TimelineItem.sticker_layer)
  return _internal_sticker_layer();
}
inline void KMProto_KMProject_TimelineItem::unsafe_arena_set_allocated_sticker_layer(
    ::KMProto_KMProject_StickerLayer* sticker_layer) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sticker_layer_);
  }
  sticker_layer_ = sticker_layer;
  if (sticker_layer) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KMProto.KMProject.TimelineItem.sticker_layer)
}
inline ::KMProto_KMProject_StickerLayer* KMProto_KMProject_TimelineItem::release_sticker_layer() {
  _has_bits_[0] &= ~0x00000010u;
  ::KMProto_KMProject_StickerLayer* temp = sticker_layer_;
  sticker_layer_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KMProto_KMProject_StickerLayer* KMProto_KMProject_TimelineItem::unsafe_arena_release_sticker_layer() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.TimelineItem.sticker_layer)
  _has_bits_[0] &= ~0x00000010u;
  ::KMProto_KMProject_StickerLayer* temp = sticker_layer_;
  sticker_layer_ = nullptr;
  return temp;
}
inline ::KMProto_KMProject_StickerLayer* KMProto_KMProject_TimelineItem::_internal_mutable_sticker_layer() {
  _has_bits_[0] |= 0x00000010u;
  if (sticker_layer_ == nullptr) {
    auto* p = CreateMaybeMessage<::KMProto_KMProject_StickerLayer>(GetArena());
    sticker_layer_ = p;
  }
  return sticker_layer_;
}
inline ::KMProto_KMProject_StickerLayer* KMProto_KMProject_TimelineItem::mutable_sticker_layer() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.TimelineItem.sticker_layer)
  return _internal_mutable_sticker_layer();
}
inline void KMProto_KMProject_TimelineItem::set_allocated_sticker_layer(::KMProto_KMProject_StickerLayer* sticker_layer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sticker_layer_;
  }
  if (sticker_layer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sticker_layer);
    if (message_arena != submessage_arena) {
      sticker_layer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sticker_layer, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  sticker_layer_ = sticker_layer;
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.TimelineItem.sticker_layer)
}

// optional .KMProto.KMProject.ImageLayer image_layer = 9;
inline bool KMProto_KMProject_TimelineItem::_internal_has_image_layer() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || image_layer_ != nullptr);
  return value;
}
inline bool KMProto_KMProject_TimelineItem::has_image_layer() const {
  return _internal_has_image_layer();
}
inline void KMProto_KMProject_TimelineItem::clear_image_layer() {
  if (image_layer_ != nullptr) image_layer_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::KMProto_KMProject_ImageLayer& KMProto_KMProject_TimelineItem::_internal_image_layer() const {
  const ::KMProto_KMProject_ImageLayer* p = image_layer_;
  return p != nullptr ? *p : reinterpret_cast<const ::KMProto_KMProject_ImageLayer&>(
      ::_KMProto_KMProject_ImageLayer_default_instance_);
}
inline const ::KMProto_KMProject_ImageLayer& KMProto_KMProject_TimelineItem::image_layer() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TimelineItem.image_layer)
  return _internal_image_layer();
}
inline void KMProto_KMProject_TimelineItem::unsafe_arena_set_allocated_image_layer(
    ::KMProto_KMProject_ImageLayer* image_layer) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_layer_);
  }
  image_layer_ = image_layer;
  if (image_layer) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KMProto.KMProject.TimelineItem.image_layer)
}
inline ::KMProto_KMProject_ImageLayer* KMProto_KMProject_TimelineItem::release_image_layer() {
  _has_bits_[0] &= ~0x00000020u;
  ::KMProto_KMProject_ImageLayer* temp = image_layer_;
  image_layer_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KMProto_KMProject_ImageLayer* KMProto_KMProject_TimelineItem::unsafe_arena_release_image_layer() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.TimelineItem.image_layer)
  _has_bits_[0] &= ~0x00000020u;
  ::KMProto_KMProject_ImageLayer* temp = image_layer_;
  image_layer_ = nullptr;
  return temp;
}
inline ::KMProto_KMProject_ImageLayer* KMProto_KMProject_TimelineItem::_internal_mutable_image_layer() {
  _has_bits_[0] |= 0x00000020u;
  if (image_layer_ == nullptr) {
    auto* p = CreateMaybeMessage<::KMProto_KMProject_ImageLayer>(GetArena());
    image_layer_ = p;
  }
  return image_layer_;
}
inline ::KMProto_KMProject_ImageLayer* KMProto_KMProject_TimelineItem::mutable_image_layer() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.TimelineItem.image_layer)
  return _internal_mutable_image_layer();
}
inline void KMProto_KMProject_TimelineItem::set_allocated_image_layer(::KMProto_KMProject_ImageLayer* image_layer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete image_layer_;
  }
  if (image_layer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(image_layer);
    if (message_arena != submessage_arena) {
      image_layer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image_layer, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  image_layer_ = image_layer;
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.TimelineItem.image_layer)
}

// optional .KMProto.KMProject.HandwritingLayer handwriting_layer = 10;
inline bool KMProto_KMProject_TimelineItem::_internal_has_handwriting_layer() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || handwriting_layer_ != nullptr);
  return value;
}
inline bool KMProto_KMProject_TimelineItem::has_handwriting_layer() const {
  return _internal_has_handwriting_layer();
}
inline void KMProto_KMProject_TimelineItem::clear_handwriting_layer() {
  if (handwriting_layer_ != nullptr) handwriting_layer_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::KMProto_KMProject_HandwritingLayer& KMProto_KMProject_TimelineItem::_internal_handwriting_layer() const {
  const ::KMProto_KMProject_HandwritingLayer* p = handwriting_layer_;
  return p != nullptr ? *p : reinterpret_cast<const ::KMProto_KMProject_HandwritingLayer&>(
      ::_KMProto_KMProject_HandwritingLayer_default_instance_);
}
inline const ::KMProto_KMProject_HandwritingLayer& KMProto_KMProject_TimelineItem::handwriting_layer() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TimelineItem.handwriting_layer)
  return _internal_handwriting_layer();
}
inline void KMProto_KMProject_TimelineItem::unsafe_arena_set_allocated_handwriting_layer(
    ::KMProto_KMProject_HandwritingLayer* handwriting_layer) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handwriting_layer_);
  }
  handwriting_layer_ = handwriting_layer;
  if (handwriting_layer) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KMProto.KMProject.TimelineItem.handwriting_layer)
}
inline ::KMProto_KMProject_HandwritingLayer* KMProto_KMProject_TimelineItem::release_handwriting_layer() {
  _has_bits_[0] &= ~0x00000040u;
  ::KMProto_KMProject_HandwritingLayer* temp = handwriting_layer_;
  handwriting_layer_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KMProto_KMProject_HandwritingLayer* KMProto_KMProject_TimelineItem::unsafe_arena_release_handwriting_layer() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.TimelineItem.handwriting_layer)
  _has_bits_[0] &= ~0x00000040u;
  ::KMProto_KMProject_HandwritingLayer* temp = handwriting_layer_;
  handwriting_layer_ = nullptr;
  return temp;
}
inline ::KMProto_KMProject_HandwritingLayer* KMProto_KMProject_TimelineItem::_internal_mutable_handwriting_layer() {
  _has_bits_[0] |= 0x00000040u;
  if (handwriting_layer_ == nullptr) {
    auto* p = CreateMaybeMessage<::KMProto_KMProject_HandwritingLayer>(GetArena());
    handwriting_layer_ = p;
  }
  return handwriting_layer_;
}
inline ::KMProto_KMProject_HandwritingLayer* KMProto_KMProject_TimelineItem::mutable_handwriting_layer() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.TimelineItem.handwriting_layer)
  return _internal_mutable_handwriting_layer();
}
inline void KMProto_KMProject_TimelineItem::set_allocated_handwriting_layer(::KMProto_KMProject_HandwritingLayer* handwriting_layer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete handwriting_layer_;
  }
  if (handwriting_layer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(handwriting_layer);
    if (message_arena != submessage_arena) {
      handwriting_layer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, handwriting_layer, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  handwriting_layer_ = handwriting_layer;
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.TimelineItem.handwriting_layer)
}

// optional .KMProto.KMProject.VideoLayer video_layer = 11;
inline bool KMProto_KMProject_TimelineItem::_internal_has_video_layer() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || video_layer_ != nullptr);
  return value;
}
inline bool KMProto_KMProject_TimelineItem::has_video_layer() const {
  return _internal_has_video_layer();
}
inline void KMProto_KMProject_TimelineItem::clear_video_layer() {
  if (video_layer_ != nullptr) video_layer_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::KMProto_KMProject_VideoLayer& KMProto_KMProject_TimelineItem::_internal_video_layer() const {
  const ::KMProto_KMProject_VideoLayer* p = video_layer_;
  return p != nullptr ? *p : reinterpret_cast<const ::KMProto_KMProject_VideoLayer&>(
      ::_KMProto_KMProject_VideoLayer_default_instance_);
}
inline const ::KMProto_KMProject_VideoLayer& KMProto_KMProject_TimelineItem::video_layer() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TimelineItem.video_layer)
  return _internal_video_layer();
}
inline void KMProto_KMProject_TimelineItem::unsafe_arena_set_allocated_video_layer(
    ::KMProto_KMProject_VideoLayer* video_layer) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(video_layer_);
  }
  video_layer_ = video_layer;
  if (video_layer) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KMProto.KMProject.TimelineItem.video_layer)
}
inline ::KMProto_KMProject_VideoLayer* KMProto_KMProject_TimelineItem::release_video_layer() {
  _has_bits_[0] &= ~0x00000080u;
  ::KMProto_KMProject_VideoLayer* temp = video_layer_;
  video_layer_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KMProto_KMProject_VideoLayer* KMProto_KMProject_TimelineItem::unsafe_arena_release_video_layer() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.TimelineItem.video_layer)
  _has_bits_[0] &= ~0x00000080u;
  ::KMProto_KMProject_VideoLayer* temp = video_layer_;
  video_layer_ = nullptr;
  return temp;
}
inline ::KMProto_KMProject_VideoLayer* KMProto_KMProject_TimelineItem::_internal_mutable_video_layer() {
  _has_bits_[0] |= 0x00000080u;
  if (video_layer_ == nullptr) {
    auto* p = CreateMaybeMessage<::KMProto_KMProject_VideoLayer>(GetArena());
    video_layer_ = p;
  }
  return video_layer_;
}
inline ::KMProto_KMProject_VideoLayer* KMProto_KMProject_TimelineItem::mutable_video_layer() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.TimelineItem.video_layer)
  return _internal_mutable_video_layer();
}
inline void KMProto_KMProject_TimelineItem::set_allocated_video_layer(::KMProto_KMProject_VideoLayer* video_layer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete video_layer_;
  }
  if (video_layer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(video_layer);
    if (message_arena != submessage_arena) {
      video_layer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, video_layer, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  video_layer_ = video_layer;
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.TimelineItem.video_layer)
}

// optional .KMProto.KMProject.EffectLayer effect_layer = 12;
inline bool KMProto_KMProject_TimelineItem::_internal_has_effect_layer() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || effect_layer_ != nullptr);
  return value;
}
inline bool KMProto_KMProject_TimelineItem::has_effect_layer() const {
  return _internal_has_effect_layer();
}
inline void KMProto_KMProject_TimelineItem::clear_effect_layer() {
  if (effect_layer_ != nullptr) effect_layer_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::KMProto_KMProject_EffectLayer& KMProto_KMProject_TimelineItem::_internal_effect_layer() const {
  const ::KMProto_KMProject_EffectLayer* p = effect_layer_;
  return p != nullptr ? *p : reinterpret_cast<const ::KMProto_KMProject_EffectLayer&>(
      ::_KMProto_KMProject_EffectLayer_default_instance_);
}
inline const ::KMProto_KMProject_EffectLayer& KMProto_KMProject_TimelineItem::effect_layer() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TimelineItem.effect_layer)
  return _internal_effect_layer();
}
inline void KMProto_KMProject_TimelineItem::unsafe_arena_set_allocated_effect_layer(
    ::KMProto_KMProject_EffectLayer* effect_layer) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(effect_layer_);
  }
  effect_layer_ = effect_layer;
  if (effect_layer) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KMProto.KMProject.TimelineItem.effect_layer)
}
inline ::KMProto_KMProject_EffectLayer* KMProto_KMProject_TimelineItem::release_effect_layer() {
  _has_bits_[0] &= ~0x00000100u;
  ::KMProto_KMProject_EffectLayer* temp = effect_layer_;
  effect_layer_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KMProto_KMProject_EffectLayer* KMProto_KMProject_TimelineItem::unsafe_arena_release_effect_layer() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.TimelineItem.effect_layer)
  _has_bits_[0] &= ~0x00000100u;
  ::KMProto_KMProject_EffectLayer* temp = effect_layer_;
  effect_layer_ = nullptr;
  return temp;
}
inline ::KMProto_KMProject_EffectLayer* KMProto_KMProject_TimelineItem::_internal_mutable_effect_layer() {
  _has_bits_[0] |= 0x00000100u;
  if (effect_layer_ == nullptr) {
    auto* p = CreateMaybeMessage<::KMProto_KMProject_EffectLayer>(GetArena());
    effect_layer_ = p;
  }
  return effect_layer_;
}
inline ::KMProto_KMProject_EffectLayer* KMProto_KMProject_TimelineItem::mutable_effect_layer() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.TimelineItem.effect_layer)
  return _internal_mutable_effect_layer();
}
inline void KMProto_KMProject_TimelineItem::set_allocated_effect_layer(::KMProto_KMProject_EffectLayer* effect_layer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete effect_layer_;
  }
  if (effect_layer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(effect_layer);
    if (message_arena != submessage_arena) {
      effect_layer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, effect_layer, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  effect_layer_ = effect_layer;
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.TimelineItem.effect_layer)
}

// optional .KMProto.KMProject.AssetLayer asset_layer = 13;
inline bool KMProto_KMProject_TimelineItem::_internal_has_asset_layer() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || asset_layer_ != nullptr);
  return value;
}
inline bool KMProto_KMProject_TimelineItem::has_asset_layer() const {
  return _internal_has_asset_layer();
}
inline void KMProto_KMProject_TimelineItem::clear_asset_layer() {
  if (asset_layer_ != nullptr) asset_layer_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::KMProto_KMProject_AssetLayer& KMProto_KMProject_TimelineItem::_internal_asset_layer() const {
  const ::KMProto_KMProject_AssetLayer* p = asset_layer_;
  return p != nullptr ? *p : reinterpret_cast<const ::KMProto_KMProject_AssetLayer&>(
      ::_KMProto_KMProject_AssetLayer_default_instance_);
}
inline const ::KMProto_KMProject_AssetLayer& KMProto_KMProject_TimelineItem::asset_layer() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TimelineItem.asset_layer)
  return _internal_asset_layer();
}
inline void KMProto_KMProject_TimelineItem::unsafe_arena_set_allocated_asset_layer(
    ::KMProto_KMProject_AssetLayer* asset_layer) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(asset_layer_);
  }
  asset_layer_ = asset_layer;
  if (asset_layer) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KMProto.KMProject.TimelineItem.asset_layer)
}
inline ::KMProto_KMProject_AssetLayer* KMProto_KMProject_TimelineItem::release_asset_layer() {
  _has_bits_[0] &= ~0x00000200u;
  ::KMProto_KMProject_AssetLayer* temp = asset_layer_;
  asset_layer_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KMProto_KMProject_AssetLayer* KMProto_KMProject_TimelineItem::unsafe_arena_release_asset_layer() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.TimelineItem.asset_layer)
  _has_bits_[0] &= ~0x00000200u;
  ::KMProto_KMProject_AssetLayer* temp = asset_layer_;
  asset_layer_ = nullptr;
  return temp;
}
inline ::KMProto_KMProject_AssetLayer* KMProto_KMProject_TimelineItem::_internal_mutable_asset_layer() {
  _has_bits_[0] |= 0x00000200u;
  if (asset_layer_ == nullptr) {
    auto* p = CreateMaybeMessage<::KMProto_KMProject_AssetLayer>(GetArena());
    asset_layer_ = p;
  }
  return asset_layer_;
}
inline ::KMProto_KMProject_AssetLayer* KMProto_KMProject_TimelineItem::mutable_asset_layer() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.TimelineItem.asset_layer)
  return _internal_mutable_asset_layer();
}
inline void KMProto_KMProject_TimelineItem::set_allocated_asset_layer(::KMProto_KMProject_AssetLayer* asset_layer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete asset_layer_;
  }
  if (asset_layer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(asset_layer);
    if (message_arena != submessage_arena) {
      asset_layer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, asset_layer, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  asset_layer_ = asset_layer;
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.TimelineItem.asset_layer)
}

// optional .KMProto.KMProject.GroupLayer group_layer = 15;
inline bool KMProto_KMProject_TimelineItem::_internal_has_group_layer() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || group_layer_ != nullptr);
  return value;
}
inline bool KMProto_KMProject_TimelineItem::has_group_layer() const {
  return _internal_has_group_layer();
}
inline void KMProto_KMProject_TimelineItem::clear_group_layer() {
  if (group_layer_ != nullptr) group_layer_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::KMProto_KMProject_GroupLayer& KMProto_KMProject_TimelineItem::_internal_group_layer() const {
  const ::KMProto_KMProject_GroupLayer* p = group_layer_;
  return p != nullptr ? *p : reinterpret_cast<const ::KMProto_KMProject_GroupLayer&>(
      ::_KMProto_KMProject_GroupLayer_default_instance_);
}
inline const ::KMProto_KMProject_GroupLayer& KMProto_KMProject_TimelineItem::group_layer() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TimelineItem.group_layer)
  return _internal_group_layer();
}
inline void KMProto_KMProject_TimelineItem::unsafe_arena_set_allocated_group_layer(
    ::KMProto_KMProject_GroupLayer* group_layer) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_layer_);
  }
  group_layer_ = group_layer;
  if (group_layer) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KMProto.KMProject.TimelineItem.group_layer)
}
inline ::KMProto_KMProject_GroupLayer* KMProto_KMProject_TimelineItem::release_group_layer() {
  _has_bits_[0] &= ~0x00000400u;
  ::KMProto_KMProject_GroupLayer* temp = group_layer_;
  group_layer_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KMProto_KMProject_GroupLayer* KMProto_KMProject_TimelineItem::unsafe_arena_release_group_layer() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.TimelineItem.group_layer)
  _has_bits_[0] &= ~0x00000400u;
  ::KMProto_KMProject_GroupLayer* temp = group_layer_;
  group_layer_ = nullptr;
  return temp;
}
inline ::KMProto_KMProject_GroupLayer* KMProto_KMProject_TimelineItem::_internal_mutable_group_layer() {
  _has_bits_[0] |= 0x00000400u;
  if (group_layer_ == nullptr) {
    auto* p = CreateMaybeMessage<::KMProto_KMProject_GroupLayer>(GetArena());
    group_layer_ = p;
  }
  return group_layer_;
}
inline ::KMProto_KMProject_GroupLayer* KMProto_KMProject_TimelineItem::mutable_group_layer() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.TimelineItem.group_layer)
  return _internal_mutable_group_layer();
}
inline void KMProto_KMProject_TimelineItem::set_allocated_group_layer(::KMProto_KMProject_GroupLayer* group_layer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete group_layer_;
  }
  if (group_layer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(group_layer);
    if (message_arena != submessage_arena) {
      group_layer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group_layer, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  group_layer_ = group_layer;
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.TimelineItem.group_layer)
}

// -------------------------------------------------------------------

// KMProto_KMProject_VisualClip

// optional string media_path = 153;
inline bool KMProto_KMProject_VisualClip::_internal_has_media_path() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_media_path() const {
  return _internal_has_media_path();
}
inline void KMProto_KMProject_VisualClip::clear_media_path() {
  media_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& KMProto_KMProject_VisualClip::media_path() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.media_path)
  return _internal_media_path();
}
inline void KMProto_KMProject_VisualClip::set_media_path(const std::string& value) {
  _internal_set_media_path(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.media_path)
}
inline std::string* KMProto_KMProject_VisualClip::mutable_media_path() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.VisualClip.media_path)
  return _internal_mutable_media_path();
}
inline const std::string& KMProto_KMProject_VisualClip::_internal_media_path() const {
  return media_path_.Get();
}
inline void KMProto_KMProject_VisualClip::_internal_set_media_path(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  media_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProject_VisualClip::set_media_path(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  media_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProject.VisualClip.media_path)
}
inline void KMProto_KMProject_VisualClip::set_media_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  media_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProject.VisualClip.media_path)
}
inline void KMProto_KMProject_VisualClip::set_media_path(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  media_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProject.VisualClip.media_path)
}
inline std::string* KMProto_KMProject_VisualClip::_internal_mutable_media_path() {
  _has_bits_[0] |= 0x00000008u;
  return media_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProject_VisualClip::release_media_path() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.VisualClip.media_path)
  if (!_internal_has_media_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return media_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProject_VisualClip::set_allocated_media_path(std::string* media_path) {
  if (media_path != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  media_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), media_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.VisualClip.media_path)
}

// optional float face_bounds_left = 100;
inline bool KMProto_KMProject_VisualClip::_internal_has_face_bounds_left() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_face_bounds_left() const {
  return _internal_has_face_bounds_left();
}
inline void KMProto_KMProject_VisualClip::clear_face_bounds_left() {
  face_bounds_left_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline float KMProto_KMProject_VisualClip::_internal_face_bounds_left() const {
  return face_bounds_left_;
}
inline float KMProto_KMProject_VisualClip::face_bounds_left() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.face_bounds_left)
  return _internal_face_bounds_left();
}
inline void KMProto_KMProject_VisualClip::_internal_set_face_bounds_left(float value) {
  _has_bits_[0] |= 0x00040000u;
  face_bounds_left_ = value;
}
inline void KMProto_KMProject_VisualClip::set_face_bounds_left(float value) {
  _internal_set_face_bounds_left(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.face_bounds_left)
}

// optional float face_bounds_top = 101;
inline bool KMProto_KMProject_VisualClip::_internal_has_face_bounds_top() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_face_bounds_top() const {
  return _internal_has_face_bounds_top();
}
inline void KMProto_KMProject_VisualClip::clear_face_bounds_top() {
  face_bounds_top_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline float KMProto_KMProject_VisualClip::_internal_face_bounds_top() const {
  return face_bounds_top_;
}
inline float KMProto_KMProject_VisualClip::face_bounds_top() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.face_bounds_top)
  return _internal_face_bounds_top();
}
inline void KMProto_KMProject_VisualClip::_internal_set_face_bounds_top(float value) {
  _has_bits_[0] |= 0x00080000u;
  face_bounds_top_ = value;
}
inline void KMProto_KMProject_VisualClip::set_face_bounds_top(float value) {
  _internal_set_face_bounds_top(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.face_bounds_top)
}

// optional float face_bounds_right = 102;
inline bool KMProto_KMProject_VisualClip::_internal_has_face_bounds_right() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_face_bounds_right() const {
  return _internal_has_face_bounds_right();
}
inline void KMProto_KMProject_VisualClip::clear_face_bounds_right() {
  face_bounds_right_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline float KMProto_KMProject_VisualClip::_internal_face_bounds_right() const {
  return face_bounds_right_;
}
inline float KMProto_KMProject_VisualClip::face_bounds_right() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.face_bounds_right)
  return _internal_face_bounds_right();
}
inline void KMProto_KMProject_VisualClip::_internal_set_face_bounds_right(float value) {
  _has_bits_[0] |= 0x00100000u;
  face_bounds_right_ = value;
}
inline void KMProto_KMProject_VisualClip::set_face_bounds_right(float value) {
  _internal_set_face_bounds_right(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.face_bounds_right)
}

// optional float face_bounds_bottom = 103;
inline bool KMProto_KMProject_VisualClip::_internal_has_face_bounds_bottom() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_face_bounds_bottom() const {
  return _internal_has_face_bounds_bottom();
}
inline void KMProto_KMProject_VisualClip::clear_face_bounds_bottom() {
  face_bounds_bottom_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline float KMProto_KMProject_VisualClip::_internal_face_bounds_bottom() const {
  return face_bounds_bottom_;
}
inline float KMProto_KMProject_VisualClip::face_bounds_bottom() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.face_bounds_bottom)
  return _internal_face_bounds_bottom();
}
inline void KMProto_KMProject_VisualClip::_internal_set_face_bounds_bottom(float value) {
  _has_bits_[0] |= 0x00200000u;
  face_bounds_bottom_ = value;
}
inline void KMProto_KMProject_VisualClip::set_face_bounds_bottom(float value) {
  _internal_set_face_bounds_bottom(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.face_bounds_bottom)
}

// optional bool face_bounds_set = 104;
inline bool KMProto_KMProject_VisualClip::_internal_has_face_bounds_set() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_face_bounds_set() const {
  return _internal_has_face_bounds_set();
}
inline void KMProto_KMProject_VisualClip::clear_face_bounds_set() {
  face_bounds_set_ = false;
  _has_bits_[0] &= ~0x80000000u;
}
inline bool KMProto_KMProject_VisualClip::_internal_face_bounds_set() const {
  return face_bounds_set_;
}
inline bool KMProto_KMProject_VisualClip::face_bounds_set() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.face_bounds_set)
  return _internal_face_bounds_set();
}
inline void KMProto_KMProject_VisualClip::_internal_set_face_bounds_set(bool value) {
  _has_bits_[0] |= 0x80000000u;
  face_bounds_set_ = value;
}
inline void KMProto_KMProject_VisualClip::set_face_bounds_set(bool value) {
  _internal_set_face_bounds_set(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.face_bounds_set)
}

// optional string capture_filename = 105;
inline bool KMProto_KMProject_VisualClip::_internal_has_capture_filename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_capture_filename() const {
  return _internal_has_capture_filename();
}
inline void KMProto_KMProject_VisualClip::clear_capture_filename() {
  capture_filename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KMProto_KMProject_VisualClip::capture_filename() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.capture_filename)
  return _internal_capture_filename();
}
inline void KMProto_KMProject_VisualClip::set_capture_filename(const std::string& value) {
  _internal_set_capture_filename(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.capture_filename)
}
inline std::string* KMProto_KMProject_VisualClip::mutable_capture_filename() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.VisualClip.capture_filename)
  return _internal_mutable_capture_filename();
}
inline const std::string& KMProto_KMProject_VisualClip::_internal_capture_filename() const {
  return capture_filename_.Get();
}
inline void KMProto_KMProject_VisualClip::_internal_set_capture_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  capture_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProject_VisualClip::set_capture_filename(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  capture_filename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProject.VisualClip.capture_filename)
}
inline void KMProto_KMProject_VisualClip::set_capture_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  capture_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProject.VisualClip.capture_filename)
}
inline void KMProto_KMProject_VisualClip::set_capture_filename(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  capture_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProject.VisualClip.capture_filename)
}
inline std::string* KMProto_KMProject_VisualClip::_internal_mutable_capture_filename() {
  _has_bits_[0] |= 0x00000001u;
  return capture_filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProject_VisualClip::release_capture_filename() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.VisualClip.capture_filename)
  if (!_internal_has_capture_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return capture_filename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProject_VisualClip::set_allocated_capture_filename(std::string* capture_filename) {
  if (capture_filename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  capture_filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), capture_filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.VisualClip.capture_filename)
}

// optional int32 engine_clip_id = 106;
inline bool KMProto_KMProject_VisualClip::_internal_has_engine_clip_id() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_engine_clip_id() const {
  return _internal_has_engine_clip_id();
}
inline void KMProto_KMProject_VisualClip::clear_engine_clip_id() {
  engine_clip_id_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_engine_clip_id() const {
  return engine_clip_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::engine_clip_id() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.engine_clip_id)
  return _internal_engine_clip_id();
}
inline void KMProto_KMProject_VisualClip::_internal_set_engine_clip_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00400000u;
  engine_clip_id_ = value;
}
inline void KMProto_KMProject_VisualClip::set_engine_clip_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_engine_clip_id(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.engine_clip_id)
}

// optional bool abstract_crop = 107;
inline bool KMProto_KMProject_VisualClip::_internal_has_abstract_crop() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_abstract_crop() const {
  return _internal_has_abstract_crop();
}
inline void KMProto_KMProject_VisualClip::clear_abstract_crop() {
  abstract_crop_ = false;
  _has_bits_[1] &= ~0x00000001u;
}
inline bool KMProto_KMProject_VisualClip::_internal_abstract_crop() const {
  return abstract_crop_;
}
inline bool KMProto_KMProject_VisualClip::abstract_crop() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.abstract_crop)
  return _internal_abstract_crop();
}
inline void KMProto_KMProject_VisualClip::_internal_set_abstract_crop(bool value) {
  _has_bits_[1] |= 0x00000001u;
  abstract_crop_ = value;
}
inline void KMProto_KMProject_VisualClip::set_abstract_crop(bool value) {
  _internal_set_abstract_crop(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.abstract_crop)
}

// optional int32 start_position_left = 108;
inline bool KMProto_KMProject_VisualClip::_internal_has_start_position_left() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_start_position_left() const {
  return _internal_has_start_position_left();
}
inline void KMProto_KMProject_VisualClip::clear_start_position_left() {
  start_position_left_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_start_position_left() const {
  return start_position_left_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::start_position_left() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.start_position_left)
  return _internal_start_position_left();
}
inline void KMProto_KMProject_VisualClip::_internal_set_start_position_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00800000u;
  start_position_left_ = value;
}
inline void KMProto_KMProject_VisualClip::set_start_position_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start_position_left(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.start_position_left)
}

// optional int32 start_position_bottom = 109;
inline bool KMProto_KMProject_VisualClip::_internal_has_start_position_bottom() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_start_position_bottom() const {
  return _internal_has_start_position_bottom();
}
inline void KMProto_KMProject_VisualClip::clear_start_position_bottom() {
  start_position_bottom_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_start_position_bottom() const {
  return start_position_bottom_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::start_position_bottom() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.start_position_bottom)
  return _internal_start_position_bottom();
}
inline void KMProto_KMProject_VisualClip::_internal_set_start_position_bottom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x01000000u;
  start_position_bottom_ = value;
}
inline void KMProto_KMProject_VisualClip::set_start_position_bottom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start_position_bottom(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.start_position_bottom)
}

// optional int32 start_position_right = 110;
inline bool KMProto_KMProject_VisualClip::_internal_has_start_position_right() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_start_position_right() const {
  return _internal_has_start_position_right();
}
inline void KMProto_KMProject_VisualClip::clear_start_position_right() {
  start_position_right_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_start_position_right() const {
  return start_position_right_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::start_position_right() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.start_position_right)
  return _internal_start_position_right();
}
inline void KMProto_KMProject_VisualClip::_internal_set_start_position_right(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x02000000u;
  start_position_right_ = value;
}
inline void KMProto_KMProject_VisualClip::set_start_position_right(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start_position_right(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.start_position_right)
}

// optional int32 start_position_top = 111;
inline bool KMProto_KMProject_VisualClip::_internal_has_start_position_top() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_start_position_top() const {
  return _internal_has_start_position_top();
}
inline void KMProto_KMProject_VisualClip::clear_start_position_top() {
  start_position_top_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_start_position_top() const {
  return start_position_top_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::start_position_top() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.start_position_top)
  return _internal_start_position_top();
}
inline void KMProto_KMProject_VisualClip::_internal_set_start_position_top(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x04000000u;
  start_position_top_ = value;
}
inline void KMProto_KMProject_VisualClip::set_start_position_top(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start_position_top(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.start_position_top)
}

// optional int32 end_position_left = 112;
inline bool KMProto_KMProject_VisualClip::_internal_has_end_position_left() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_end_position_left() const {
  return _internal_has_end_position_left();
}
inline void KMProto_KMProject_VisualClip::clear_end_position_left() {
  end_position_left_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_end_position_left() const {
  return end_position_left_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::end_position_left() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.end_position_left)
  return _internal_end_position_left();
}
inline void KMProto_KMProject_VisualClip::_internal_set_end_position_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x08000000u;
  end_position_left_ = value;
}
inline void KMProto_KMProject_VisualClip::set_end_position_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_end_position_left(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.end_position_left)
}

// optional int32 end_position_bottom = 113;
inline bool KMProto_KMProject_VisualClip::_internal_has_end_position_bottom() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_end_position_bottom() const {
  return _internal_has_end_position_bottom();
}
inline void KMProto_KMProject_VisualClip::clear_end_position_bottom() {
  end_position_bottom_ = 0;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_end_position_bottom() const {
  return end_position_bottom_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::end_position_bottom() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.end_position_bottom)
  return _internal_end_position_bottom();
}
inline void KMProto_KMProject_VisualClip::_internal_set_end_position_bottom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x10000000u;
  end_position_bottom_ = value;
}
inline void KMProto_KMProject_VisualClip::set_end_position_bottom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_end_position_bottom(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.end_position_bottom)
}

// optional int32 end_position_right = 114;
inline bool KMProto_KMProject_VisualClip::_internal_has_end_position_right() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_end_position_right() const {
  return _internal_has_end_position_right();
}
inline void KMProto_KMProject_VisualClip::clear_end_position_right() {
  end_position_right_ = 0;
  _has_bits_[0] &= ~0x20000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_end_position_right() const {
  return end_position_right_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::end_position_right() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.end_position_right)
  return _internal_end_position_right();
}
inline void KMProto_KMProject_VisualClip::_internal_set_end_position_right(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x20000000u;
  end_position_right_ = value;
}
inline void KMProto_KMProject_VisualClip::set_end_position_right(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_end_position_right(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.end_position_right)
}

// optional int32 end_position_top = 115;
inline bool KMProto_KMProject_VisualClip::_internal_has_end_position_top() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_end_position_top() const {
  return _internal_has_end_position_top();
}
inline void KMProto_KMProject_VisualClip::clear_end_position_top() {
  end_position_top_ = 0;
  _has_bits_[0] &= ~0x40000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_end_position_top() const {
  return end_position_top_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::end_position_top() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.end_position_top)
  return _internal_end_position_top();
}
inline void KMProto_KMProject_VisualClip::_internal_set_end_position_top(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x40000000u;
  end_position_top_ = value;
}
inline void KMProto_KMProject_VisualClip::set_end_position_top(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_end_position_top(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.end_position_top)
}

// optional int32 rotated_start_position_left = 116;
inline bool KMProto_KMProject_VisualClip::_internal_has_rotated_start_position_left() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_rotated_start_position_left() const {
  return _internal_has_rotated_start_position_left();
}
inline void KMProto_KMProject_VisualClip::clear_rotated_start_position_left() {
  rotated_start_position_left_ = 0;
  _has_bits_[1] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_rotated_start_position_left() const {
  return rotated_start_position_left_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::rotated_start_position_left() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.rotated_start_position_left)
  return _internal_rotated_start_position_left();
}
inline void KMProto_KMProject_VisualClip::_internal_set_rotated_start_position_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000008u;
  rotated_start_position_left_ = value;
}
inline void KMProto_KMProject_VisualClip::set_rotated_start_position_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rotated_start_position_left(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.rotated_start_position_left)
}

// optional int32 rotated_start_position_bottom = 117;
inline bool KMProto_KMProject_VisualClip::_internal_has_rotated_start_position_bottom() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_rotated_start_position_bottom() const {
  return _internal_has_rotated_start_position_bottom();
}
inline void KMProto_KMProject_VisualClip::clear_rotated_start_position_bottom() {
  rotated_start_position_bottom_ = 0;
  _has_bits_[1] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_rotated_start_position_bottom() const {
  return rotated_start_position_bottom_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::rotated_start_position_bottom() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.rotated_start_position_bottom)
  return _internal_rotated_start_position_bottom();
}
inline void KMProto_KMProject_VisualClip::_internal_set_rotated_start_position_bottom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000010u;
  rotated_start_position_bottom_ = value;
}
inline void KMProto_KMProject_VisualClip::set_rotated_start_position_bottom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rotated_start_position_bottom(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.rotated_start_position_bottom)
}

// optional int32 rotated_start_position_right = 118;
inline bool KMProto_KMProject_VisualClip::_internal_has_rotated_start_position_right() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_rotated_start_position_right() const {
  return _internal_has_rotated_start_position_right();
}
inline void KMProto_KMProject_VisualClip::clear_rotated_start_position_right() {
  rotated_start_position_right_ = 0;
  _has_bits_[1] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_rotated_start_position_right() const {
  return rotated_start_position_right_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::rotated_start_position_right() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.rotated_start_position_right)
  return _internal_rotated_start_position_right();
}
inline void KMProto_KMProject_VisualClip::_internal_set_rotated_start_position_right(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000020u;
  rotated_start_position_right_ = value;
}
inline void KMProto_KMProject_VisualClip::set_rotated_start_position_right(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rotated_start_position_right(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.rotated_start_position_right)
}

// optional int32 rotated_start_position_top = 119;
inline bool KMProto_KMProject_VisualClip::_internal_has_rotated_start_position_top() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_rotated_start_position_top() const {
  return _internal_has_rotated_start_position_top();
}
inline void KMProto_KMProject_VisualClip::clear_rotated_start_position_top() {
  rotated_start_position_top_ = 0;
  _has_bits_[1] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_rotated_start_position_top() const {
  return rotated_start_position_top_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::rotated_start_position_top() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.rotated_start_position_top)
  return _internal_rotated_start_position_top();
}
inline void KMProto_KMProject_VisualClip::_internal_set_rotated_start_position_top(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000040u;
  rotated_start_position_top_ = value;
}
inline void KMProto_KMProject_VisualClip::set_rotated_start_position_top(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rotated_start_position_top(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.rotated_start_position_top)
}

// optional int32 rotated_end_position_left = 120;
inline bool KMProto_KMProject_VisualClip::_internal_has_rotated_end_position_left() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_rotated_end_position_left() const {
  return _internal_has_rotated_end_position_left();
}
inline void KMProto_KMProject_VisualClip::clear_rotated_end_position_left() {
  rotated_end_position_left_ = 0;
  _has_bits_[1] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_rotated_end_position_left() const {
  return rotated_end_position_left_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::rotated_end_position_left() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.rotated_end_position_left)
  return _internal_rotated_end_position_left();
}
inline void KMProto_KMProject_VisualClip::_internal_set_rotated_end_position_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000080u;
  rotated_end_position_left_ = value;
}
inline void KMProto_KMProject_VisualClip::set_rotated_end_position_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rotated_end_position_left(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.rotated_end_position_left)
}

// optional int32 rotated_end_position_bottom = 121;
inline bool KMProto_KMProject_VisualClip::_internal_has_rotated_end_position_bottom() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_rotated_end_position_bottom() const {
  return _internal_has_rotated_end_position_bottom();
}
inline void KMProto_KMProject_VisualClip::clear_rotated_end_position_bottom() {
  rotated_end_position_bottom_ = 0;
  _has_bits_[1] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_rotated_end_position_bottom() const {
  return rotated_end_position_bottom_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::rotated_end_position_bottom() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.rotated_end_position_bottom)
  return _internal_rotated_end_position_bottom();
}
inline void KMProto_KMProject_VisualClip::_internal_set_rotated_end_position_bottom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000100u;
  rotated_end_position_bottom_ = value;
}
inline void KMProto_KMProject_VisualClip::set_rotated_end_position_bottom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rotated_end_position_bottom(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.rotated_end_position_bottom)
}

// optional int32 rotated_end_position_right = 122;
inline bool KMProto_KMProject_VisualClip::_internal_has_rotated_end_position_right() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_rotated_end_position_right() const {
  return _internal_has_rotated_end_position_right();
}
inline void KMProto_KMProject_VisualClip::clear_rotated_end_position_right() {
  rotated_end_position_right_ = 0;
  _has_bits_[1] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_rotated_end_position_right() const {
  return rotated_end_position_right_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::rotated_end_position_right() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.rotated_end_position_right)
  return _internal_rotated_end_position_right();
}
inline void KMProto_KMProject_VisualClip::_internal_set_rotated_end_position_right(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000200u;
  rotated_end_position_right_ = value;
}
inline void KMProto_KMProject_VisualClip::set_rotated_end_position_right(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rotated_end_position_right(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.rotated_end_position_right)
}

// optional int32 rotated_end_position_top = 123;
inline bool KMProto_KMProject_VisualClip::_internal_has_rotated_end_position_top() const {
  bool value = (_has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_rotated_end_position_top() const {
  return _internal_has_rotated_end_position_top();
}
inline void KMProto_KMProject_VisualClip::clear_rotated_end_position_top() {
  rotated_end_position_top_ = 0;
  _has_bits_[1] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_rotated_end_position_top() const {
  return rotated_end_position_top_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::rotated_end_position_top() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.rotated_end_position_top)
  return _internal_rotated_end_position_top();
}
inline void KMProto_KMProject_VisualClip::_internal_set_rotated_end_position_top(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000400u;
  rotated_end_position_top_ = value;
}
inline void KMProto_KMProject_VisualClip::set_rotated_end_position_top(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rotated_end_position_top(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.rotated_end_position_top)
}

// optional int32 rotation = 124;
inline bool KMProto_KMProject_VisualClip::_internal_has_rotation() const {
  bool value = (_has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_rotation() const {
  return _internal_has_rotation();
}
inline void KMProto_KMProject_VisualClip::clear_rotation() {
  rotation_ = 0;
  _has_bits_[1] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_rotation() const {
  return rotation_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::rotation() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.rotation)
  return _internal_rotation();
}
inline void KMProto_KMProject_VisualClip::_internal_set_rotation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000800u;
  rotation_ = value;
}
inline void KMProto_KMProject_VisualClip::set_rotation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rotation(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.rotation)
}

// optional bool fliph = 125;
inline bool KMProto_KMProject_VisualClip::_internal_has_fliph() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_fliph() const {
  return _internal_has_fliph();
}
inline void KMProto_KMProject_VisualClip::clear_fliph() {
  fliph_ = false;
  _has_bits_[1] &= ~0x00000002u;
}
inline bool KMProto_KMProject_VisualClip::_internal_fliph() const {
  return fliph_;
}
inline bool KMProto_KMProject_VisualClip::fliph() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.fliph)
  return _internal_fliph();
}
inline void KMProto_KMProject_VisualClip::_internal_set_fliph(bool value) {
  _has_bits_[1] |= 0x00000002u;
  fliph_ = value;
}
inline void KMProto_KMProject_VisualClip::set_fliph(bool value) {
  _internal_set_fliph(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.fliph)
}

// optional bool flipv = 126;
inline bool KMProto_KMProject_VisualClip::_internal_has_flipv() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_flipv() const {
  return _internal_has_flipv();
}
inline void KMProto_KMProject_VisualClip::clear_flipv() {
  flipv_ = false;
  _has_bits_[1] &= ~0x00000004u;
}
inline bool KMProto_KMProject_VisualClip::_internal_flipv() const {
  return flipv_;
}
inline bool KMProto_KMProject_VisualClip::flipv() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.flipv)
  return _internal_flipv();
}
inline void KMProto_KMProject_VisualClip::_internal_set_flipv(bool value) {
  _has_bits_[1] |= 0x00000004u;
  flipv_ = value;
}
inline void KMProto_KMProject_VisualClip::set_flipv(bool value) {
  _internal_set_flipv(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.flipv)
}

// optional int32 diff_av_duration = 127;
inline bool KMProto_KMProject_VisualClip::_internal_has_diff_av_duration() const {
  bool value = (_has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_diff_av_duration() const {
  return _internal_has_diff_av_duration();
}
inline void KMProto_KMProject_VisualClip::clear_diff_av_duration() {
  diff_av_duration_ = 0;
  _has_bits_[1] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_diff_av_duration() const {
  return diff_av_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::diff_av_duration() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.diff_av_duration)
  return _internal_diff_av_duration();
}
inline void KMProto_KMProject_VisualClip::_internal_set_diff_av_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00001000u;
  diff_av_duration_ = value;
}
inline void KMProto_KMProject_VisualClip::set_diff_av_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_diff_av_duration(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.diff_av_duration)
}

// optional int32 trim_time_start = 128;
inline bool KMProto_KMProject_VisualClip::_internal_has_trim_time_start() const {
  bool value = (_has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_trim_time_start() const {
  return _internal_has_trim_time_start();
}
inline void KMProto_KMProject_VisualClip::clear_trim_time_start() {
  trim_time_start_ = 0;
  _has_bits_[1] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_trim_time_start() const {
  return trim_time_start_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::trim_time_start() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.trim_time_start)
  return _internal_trim_time_start();
}
inline void KMProto_KMProject_VisualClip::_internal_set_trim_time_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00002000u;
  trim_time_start_ = value;
}
inline void KMProto_KMProject_VisualClip::set_trim_time_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_trim_time_start(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.trim_time_start)
}

// optional int32 trim_time_end = 129;
inline bool KMProto_KMProject_VisualClip::_internal_has_trim_time_end() const {
  bool value = (_has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_trim_time_end() const {
  return _internal_has_trim_time_end();
}
inline void KMProto_KMProject_VisualClip::clear_trim_time_end() {
  trim_time_end_ = 0;
  _has_bits_[1] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_trim_time_end() const {
  return trim_time_end_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::trim_time_end() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.trim_time_end)
  return _internal_trim_time_end();
}
inline void KMProto_KMProject_VisualClip::_internal_set_trim_time_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00004000u;
  trim_time_end_ = value;
}
inline void KMProto_KMProject_VisualClip::set_trim_time_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_trim_time_end(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.trim_time_end)
}

// optional int32 trimmed_duration = 130;
inline bool KMProto_KMProject_VisualClip::_internal_has_trimmed_duration() const {
  bool value = (_has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_trimmed_duration() const {
  return _internal_has_trimmed_duration();
}
inline void KMProto_KMProject_VisualClip::clear_trimmed_duration() {
  trimmed_duration_ = 0;
  _has_bits_[1] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_trimmed_duration() const {
  return trimmed_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::trimmed_duration() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.trimmed_duration)
  return _internal_trimmed_duration();
}
inline void KMProto_KMProject_VisualClip::_internal_set_trimmed_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00008000u;
  trimmed_duration_ = value;
}
inline void KMProto_KMProject_VisualClip::set_trimmed_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_trimmed_duration(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.trimmed_duration)
}

// optional int32 pre_trimmed_duration = 131;
inline bool KMProto_KMProject_VisualClip::_internal_has_pre_trimmed_duration() const {
  bool value = (_has_bits_[1] & 0x00010000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_pre_trimmed_duration() const {
  return _internal_has_pre_trimmed_duration();
}
inline void KMProto_KMProject_VisualClip::clear_pre_trimmed_duration() {
  pre_trimmed_duration_ = 0;
  _has_bits_[1] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_pre_trimmed_duration() const {
  return pre_trimmed_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::pre_trimmed_duration() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.pre_trimmed_duration)
  return _internal_pre_trimmed_duration();
}
inline void KMProto_KMProject_VisualClip::_internal_set_pre_trimmed_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00010000u;
  pre_trimmed_duration_ = value;
}
inline void KMProto_KMProject_VisualClip::set_pre_trimmed_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pre_trimmed_duration(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.pre_trimmed_duration)
}

// optional string title_effect_id = 132;
inline bool KMProto_KMProject_VisualClip::_internal_has_title_effect_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_title_effect_id() const {
  return _internal_has_title_effect_id();
}
inline void KMProto_KMProject_VisualClip::clear_title_effect_id() {
  title_effect_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& KMProto_KMProject_VisualClip::title_effect_id() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.title_effect_id)
  return _internal_title_effect_id();
}
inline void KMProto_KMProject_VisualClip::set_title_effect_id(const std::string& value) {
  _internal_set_title_effect_id(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.title_effect_id)
}
inline std::string* KMProto_KMProject_VisualClip::mutable_title_effect_id() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.VisualClip.title_effect_id)
  return _internal_mutable_title_effect_id();
}
inline const std::string& KMProto_KMProject_VisualClip::_internal_title_effect_id() const {
  return title_effect_id_.Get();
}
inline void KMProto_KMProject_VisualClip::_internal_set_title_effect_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  title_effect_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProject_VisualClip::set_title_effect_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  title_effect_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProject.VisualClip.title_effect_id)
}
inline void KMProto_KMProject_VisualClip::set_title_effect_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  title_effect_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProject.VisualClip.title_effect_id)
}
inline void KMProto_KMProject_VisualClip::set_title_effect_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  title_effect_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProject.VisualClip.title_effect_id)
}
inline std::string* KMProto_KMProject_VisualClip::_internal_mutable_title_effect_id() {
  _has_bits_[0] |= 0x00000002u;
  return title_effect_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProject_VisualClip::release_title_effect_id() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.VisualClip.title_effect_id)
  if (!_internal_has_title_effect_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return title_effect_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProject_VisualClip::set_allocated_title_effect_id(std::string* title_effect_id) {
  if (title_effect_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  title_effect_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title_effect_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.VisualClip.title_effect_id)
}

// optional int32 title_start_time = 133;
inline bool KMProto_KMProject_VisualClip::_internal_has_title_start_time() const {
  bool value = (_has_bits_[1] & 0x00020000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_title_start_time() const {
  return _internal_has_title_start_time();
}
inline void KMProto_KMProject_VisualClip::clear_title_start_time() {
  title_start_time_ = 0;
  _has_bits_[1] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_title_start_time() const {
  return title_start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::title_start_time() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.title_start_time)
  return _internal_title_start_time();
}
inline void KMProto_KMProject_VisualClip::_internal_set_title_start_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00020000u;
  title_start_time_ = value;
}
inline void KMProto_KMProject_VisualClip::set_title_start_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_title_start_time(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.title_start_time)
}

// optional int32 title_end_time = 134;
inline bool KMProto_KMProject_VisualClip::_internal_has_title_end_time() const {
  bool value = (_has_bits_[1] & 0x00040000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_title_end_time() const {
  return _internal_has_title_end_time();
}
inline void KMProto_KMProject_VisualClip::clear_title_end_time() {
  title_end_time_ = 0;
  _has_bits_[1] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_title_end_time() const {
  return title_end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::title_end_time() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.title_end_time)
  return _internal_title_end_time();
}
inline void KMProto_KMProject_VisualClip::_internal_set_title_end_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00040000u;
  title_end_time_ = value;
}
inline void KMProto_KMProject_VisualClip::set_title_end_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_title_end_time(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.title_end_time)
}

// optional int32 duration = 135;
inline bool KMProto_KMProject_VisualClip::_internal_has_duration() const {
  bool value = (_has_bits_[1] & 0x00080000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_duration() const {
  return _internal_has_duration();
}
inline void KMProto_KMProject_VisualClip::clear_duration() {
  duration_ = 0;
  _has_bits_[1] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::duration() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.duration)
  return _internal_duration();
}
inline void KMProto_KMProject_VisualClip::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00080000u;
  duration_ = value;
}
inline void KMProto_KMProject_VisualClip::set_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.duration)
}

// optional int32 audio_duration = 136;
inline bool KMProto_KMProject_VisualClip::_internal_has_audio_duration() const {
  bool value = (_has_bits_[1] & 0x00100000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_audio_duration() const {
  return _internal_has_audio_duration();
}
inline void KMProto_KMProject_VisualClip::clear_audio_duration() {
  audio_duration_ = 0;
  _has_bits_[1] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_audio_duration() const {
  return audio_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::audio_duration() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.audio_duration)
  return _internal_audio_duration();
}
inline void KMProto_KMProject_VisualClip::_internal_set_audio_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00100000u;
  audio_duration_ = value;
}
inline void KMProto_KMProject_VisualClip::set_audio_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_audio_duration(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.audio_duration)
}

// optional int32 video_duration = 137;
inline bool KMProto_KMProject_VisualClip::_internal_has_video_duration() const {
  bool value = (_has_bits_[1] & 0x00200000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_video_duration() const {
  return _internal_has_video_duration();
}
inline void KMProto_KMProject_VisualClip::clear_video_duration() {
  video_duration_ = 0;
  _has_bits_[1] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_video_duration() const {
  return video_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::video_duration() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.video_duration)
  return _internal_video_duration();
}
inline void KMProto_KMProject_VisualClip::_internal_set_video_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00200000u;
  video_duration_ = value;
}
inline void KMProto_KMProject_VisualClip::set_video_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_video_duration(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.video_duration)
}

// optional int32 start_overlap = 138;
inline bool KMProto_KMProject_VisualClip::_internal_has_start_overlap() const {
  bool value = (_has_bits_[1] & 0x00400000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_start_overlap() const {
  return _internal_has_start_overlap();
}
inline void KMProto_KMProject_VisualClip::clear_start_overlap() {
  start_overlap_ = 0;
  _has_bits_[1] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_start_overlap() const {
  return start_overlap_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::start_overlap() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.start_overlap)
  return _internal_start_overlap();
}
inline void KMProto_KMProject_VisualClip::_internal_set_start_overlap(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00400000u;
  start_overlap_ = value;
}
inline void KMProto_KMProject_VisualClip::set_start_overlap(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start_overlap(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.start_overlap)
}

// optional int32 end_overlap = 139;
inline bool KMProto_KMProject_VisualClip::_internal_has_end_overlap() const {
  bool value = (_has_bits_[1] & 0x00800000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_end_overlap() const {
  return _internal_has_end_overlap();
}
inline void KMProto_KMProject_VisualClip::clear_end_overlap() {
  end_overlap_ = 0;
  _has_bits_[1] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_end_overlap() const {
  return end_overlap_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::end_overlap() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.end_overlap)
  return _internal_end_overlap();
}
inline void KMProto_KMProject_VisualClip::_internal_set_end_overlap(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00800000u;
  end_overlap_ = value;
}
inline void KMProto_KMProject_VisualClip::set_end_overlap(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_end_overlap(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.end_overlap)
}

// optional int32 width = 140;
inline bool KMProto_KMProject_VisualClip::_internal_has_width() const {
  bool value = (_has_bits_[1] & 0x01000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_width() const {
  return _internal_has_width();
}
inline void KMProto_KMProject_VisualClip::clear_width() {
  width_ = 0;
  _has_bits_[1] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::width() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.width)
  return _internal_width();
}
inline void KMProto_KMProject_VisualClip::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x01000000u;
  width_ = value;
}
inline void KMProto_KMProject_VisualClip::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.width)
}

// optional int32 height = 141;
inline bool KMProto_KMProject_VisualClip::_internal_has_height() const {
  bool value = (_has_bits_[1] & 0x02000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_height() const {
  return _internal_has_height();
}
inline void KMProto_KMProject_VisualClip::clear_height() {
  height_ = 0;
  _has_bits_[1] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::height() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.height)
  return _internal_height();
}
inline void KMProto_KMProject_VisualClip::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x02000000u;
  height_ = value;
}
inline void KMProto_KMProject_VisualClip::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.height)
}

// optional int32 original_width = 142;
inline bool KMProto_KMProject_VisualClip::_internal_has_original_width() const {
  bool value = (_has_bits_[1] & 0x04000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_original_width() const {
  return _internal_has_original_width();
}
inline void KMProto_KMProject_VisualClip::clear_original_width() {
  original_width_ = 0;
  _has_bits_[1] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_original_width() const {
  return original_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::original_width() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.original_width)
  return _internal_original_width();
}
inline void KMProto_KMProject_VisualClip::_internal_set_original_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x04000000u;
  original_width_ = value;
}
inline void KMProto_KMProject_VisualClip::set_original_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_original_width(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.original_width)
}

// optional int32 original_height = 143;
inline bool KMProto_KMProject_VisualClip::_internal_has_original_height() const {
  bool value = (_has_bits_[1] & 0x08000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_original_height() const {
  return _internal_has_original_height();
}
inline void KMProto_KMProject_VisualClip::clear_original_height() {
  original_height_ = 0;
  _has_bits_[1] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_original_height() const {
  return original_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::original_height() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.original_height)
  return _internal_original_height();
}
inline void KMProto_KMProject_VisualClip::_internal_set_original_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x08000000u;
  original_height_ = value;
}
inline void KMProto_KMProject_VisualClip::set_original_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_original_height(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.original_height)
}

// optional int32 clip_volume = 144;
inline bool KMProto_KMProject_VisualClip::_internal_has_clip_volume() const {
  bool value = (_has_bits_[1] & 0x10000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_clip_volume() const {
  return _internal_has_clip_volume();
}
inline void KMProto_KMProject_VisualClip::clear_clip_volume() {
  clip_volume_ = 0;
  _has_bits_[1] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_clip_volume() const {
  return clip_volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::clip_volume() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.clip_volume)
  return _internal_clip_volume();
}
inline void KMProto_KMProject_VisualClip::_internal_set_clip_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x10000000u;
  clip_volume_ = value;
}
inline void KMProto_KMProject_VisualClip::set_clip_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_clip_volume(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.clip_volume)
}

// optional int32 music_volume = 145;
inline bool KMProto_KMProject_VisualClip::_internal_has_music_volume() const {
  bool value = (_has_bits_[1] & 0x20000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_music_volume() const {
  return _internal_has_music_volume();
}
inline void KMProto_KMProject_VisualClip::clear_music_volume() {
  music_volume_ = 0;
  _has_bits_[1] &= ~0x20000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_music_volume() const {
  return music_volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::music_volume() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.music_volume)
  return _internal_music_volume();
}
inline void KMProto_KMProject_VisualClip::_internal_set_music_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x20000000u;
  music_volume_ = value;
}
inline void KMProto_KMProject_VisualClip::set_music_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_music_volume(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.music_volume)
}

// optional .KMProto.KMProject.TitleStyle title_style = 146;
inline bool KMProto_KMProject_VisualClip::_internal_has_title_style() const {
  bool value = (_has_bits_[1] & 0x40000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_title_style() const {
  return _internal_has_title_style();
}
inline void KMProto_KMProject_VisualClip::clear_title_style() {
  title_style_ = 0;
  _has_bits_[1] &= ~0x40000000u;
}
inline ::KMProto_KMProject_TitleStyle KMProto_KMProject_VisualClip::_internal_title_style() const {
  return static_cast< ::KMProto_KMProject_TitleStyle >(title_style_);
}
inline ::KMProto_KMProject_TitleStyle KMProto_KMProject_VisualClip::title_style() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.title_style)
  return _internal_title_style();
}
inline void KMProto_KMProject_VisualClip::_internal_set_title_style(::KMProto_KMProject_TitleStyle value) {
  assert(::KMProto_KMProject_TitleStyle_IsValid(value));
  _has_bits_[1] |= 0x40000000u;
  title_style_ = value;
}
inline void KMProto_KMProject_VisualClip::set_title_style(::KMProto_KMProject_TitleStyle value) {
  _internal_set_title_style(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.title_style)
}

// optional bool is_image = 147;
inline bool KMProto_KMProject_VisualClip::_internal_has_is_image() const {
  bool value = (_has_bits_[1] & 0x80000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_is_image() const {
  return _internal_has_is_image();
}
inline void KMProto_KMProject_VisualClip::clear_is_image() {
  is_image_ = false;
  _has_bits_[1] &= ~0x80000000u;
}
inline bool KMProto_KMProject_VisualClip::_internal_is_image() const {
  return is_image_;
}
inline bool KMProto_KMProject_VisualClip::is_image() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.is_image)
  return _internal_is_image();
}
inline void KMProto_KMProject_VisualClip::_internal_set_is_image(bool value) {
  _has_bits_[1] |= 0x80000000u;
  is_image_ = value;
}
inline void KMProto_KMProject_VisualClip::set_is_image(bool value) {
  _internal_set_is_image(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.is_image)
}

// optional bool mute_audio = 148;
inline bool KMProto_KMProject_VisualClip::_internal_has_mute_audio() const {
  bool value = (_has_bits_[2] & 0x00000001u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_mute_audio() const {
  return _internal_has_mute_audio();
}
inline void KMProto_KMProject_VisualClip::clear_mute_audio() {
  mute_audio_ = false;
  _has_bits_[2] &= ~0x00000001u;
}
inline bool KMProto_KMProject_VisualClip::_internal_mute_audio() const {
  return mute_audio_;
}
inline bool KMProto_KMProject_VisualClip::mute_audio() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.mute_audio)
  return _internal_mute_audio();
}
inline void KMProto_KMProject_VisualClip::_internal_set_mute_audio(bool value) {
  _has_bits_[2] |= 0x00000001u;
  mute_audio_ = value;
}
inline void KMProto_KMProject_VisualClip::set_mute_audio(bool value) {
  _internal_set_mute_audio(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.mute_audio)
}

// optional bool mute_music = 149;
inline bool KMProto_KMProject_VisualClip::_internal_has_mute_music() const {
  bool value = (_has_bits_[2] & 0x00000002u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_mute_music() const {
  return _internal_has_mute_music();
}
inline void KMProto_KMProject_VisualClip::clear_mute_music() {
  mute_music_ = false;
  _has_bits_[2] &= ~0x00000002u;
}
inline bool KMProto_KMProject_VisualClip::_internal_mute_music() const {
  return mute_music_;
}
inline bool KMProto_KMProject_VisualClip::mute_music() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.mute_music)
  return _internal_mute_music();
}
inline void KMProto_KMProject_VisualClip::_internal_set_mute_music(bool value) {
  _has_bits_[2] |= 0x00000002u;
  mute_music_ = value;
}
inline void KMProto_KMProject_VisualClip::set_mute_music(bool value) {
  _internal_set_mute_music(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.mute_music)
}

// optional bool has_audio = 150;
inline bool KMProto_KMProject_VisualClip::_internal_has_has_audio() const {
  bool value = (_has_bits_[2] & 0x00000004u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_has_audio() const {
  return _internal_has_has_audio();
}
inline void KMProto_KMProject_VisualClip::clear_has_audio() {
  has_audio_ = false;
  _has_bits_[2] &= ~0x00000004u;
}
inline bool KMProto_KMProject_VisualClip::_internal_has_audio() const {
  return has_audio_;
}
inline bool KMProto_KMProject_VisualClip::has_audio() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.has_audio)
  return _internal_has_audio();
}
inline void KMProto_KMProject_VisualClip::_internal_set_has_audio(bool value) {
  _has_bits_[2] |= 0x00000004u;
  has_audio_ = value;
}
inline void KMProto_KMProject_VisualClip::set_has_audio(bool value) {
  _internal_set_has_audio(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.has_audio)
}

// optional bool has_video = 151;
inline bool KMProto_KMProject_VisualClip::_internal_has_has_video() const {
  bool value = (_has_bits_[2] & 0x00002000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_has_video() const {
  return _internal_has_has_video();
}
inline void KMProto_KMProject_VisualClip::clear_has_video() {
  has_video_ = false;
  _has_bits_[2] &= ~0x00002000u;
}
inline bool KMProto_KMProject_VisualClip::_internal_has_video() const {
  return has_video_;
}
inline bool KMProto_KMProject_VisualClip::has_video() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.has_video)
  return _internal_has_video();
}
inline void KMProto_KMProject_VisualClip::_internal_set_has_video(bool value) {
  _has_bits_[2] |= 0x00002000u;
  has_video_ = value;
}
inline void KMProto_KMProject_VisualClip::set_has_video(bool value) {
  _internal_set_has_video(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.has_video)
}

// optional string thumb_path = 152;
inline bool KMProto_KMProject_VisualClip::_internal_has_thumb_path() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_thumb_path() const {
  return _internal_has_thumb_path();
}
inline void KMProto_KMProject_VisualClip::clear_thumb_path() {
  thumb_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& KMProto_KMProject_VisualClip::thumb_path() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.thumb_path)
  return _internal_thumb_path();
}
inline void KMProto_KMProject_VisualClip::set_thumb_path(const std::string& value) {
  _internal_set_thumb_path(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.thumb_path)
}
inline std::string* KMProto_KMProject_VisualClip::mutable_thumb_path() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.VisualClip.thumb_path)
  return _internal_mutable_thumb_path();
}
inline const std::string& KMProto_KMProject_VisualClip::_internal_thumb_path() const {
  return thumb_path_.Get();
}
inline void KMProto_KMProject_VisualClip::_internal_set_thumb_path(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  thumb_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProject_VisualClip::set_thumb_path(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  thumb_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProject.VisualClip.thumb_path)
}
inline void KMProto_KMProject_VisualClip::set_thumb_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  thumb_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProject.VisualClip.thumb_path)
}
inline void KMProto_KMProject_VisualClip::set_thumb_path(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  thumb_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProject.VisualClip.thumb_path)
}
inline std::string* KMProto_KMProject_VisualClip::_internal_mutable_thumb_path() {
  _has_bits_[0] |= 0x00000004u;
  return thumb_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProject_VisualClip::release_thumb_path() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.VisualClip.thumb_path)
  if (!_internal_has_thumb_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return thumb_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProject_VisualClip::set_allocated_thumb_path(std::string* thumb_path) {
  if (thumb_path != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  thumb_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), thumb_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.VisualClip.thumb_path)
}

// optional uint64 transition_item_uuid_lsb = 154;
inline bool KMProto_KMProject_VisualClip::_internal_has_transition_item_uuid_lsb() const {
  bool value = (_has_bits_[2] & 0x00000010u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_transition_item_uuid_lsb() const {
  return _internal_has_transition_item_uuid_lsb();
}
inline void KMProto_KMProject_VisualClip::clear_transition_item_uuid_lsb() {
  transition_item_uuid_lsb_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[2] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KMProto_KMProject_VisualClip::_internal_transition_item_uuid_lsb() const {
  return transition_item_uuid_lsb_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KMProto_KMProject_VisualClip::transition_item_uuid_lsb() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.transition_item_uuid_lsb)
  return _internal_transition_item_uuid_lsb();
}
inline void KMProto_KMProject_VisualClip::_internal_set_transition_item_uuid_lsb(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[2] |= 0x00000010u;
  transition_item_uuid_lsb_ = value;
}
inline void KMProto_KMProject_VisualClip::set_transition_item_uuid_lsb(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_transition_item_uuid_lsb(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.transition_item_uuid_lsb)
}

// optional uint64 transition_item_uuid_msb = 155;
inline bool KMProto_KMProject_VisualClip::_internal_has_transition_item_uuid_msb() const {
  bool value = (_has_bits_[2] & 0x00000020u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_transition_item_uuid_msb() const {
  return _internal_has_transition_item_uuid_msb();
}
inline void KMProto_KMProject_VisualClip::clear_transition_item_uuid_msb() {
  transition_item_uuid_msb_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[2] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KMProto_KMProject_VisualClip::_internal_transition_item_uuid_msb() const {
  return transition_item_uuid_msb_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KMProto_KMProject_VisualClip::transition_item_uuid_msb() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.transition_item_uuid_msb)
  return _internal_transition_item_uuid_msb();
}
inline void KMProto_KMProject_VisualClip::_internal_set_transition_item_uuid_msb(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[2] |= 0x00000020u;
  transition_item_uuid_msb_ = value;
}
inline void KMProto_KMProject_VisualClip::set_transition_item_uuid_msb(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_transition_item_uuid_msb(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.transition_item_uuid_msb)
}

// optional .KMProto.KMProject.TimelineItem unattached_transition = 171;
inline bool KMProto_KMProject_VisualClip::_internal_has_unattached_transition() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || unattached_transition_ != nullptr);
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_unattached_transition() const {
  return _internal_has_unattached_transition();
}
inline void KMProto_KMProject_VisualClip::clear_unattached_transition() {
  if (unattached_transition_ != nullptr) unattached_transition_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
inline const ::KMProto_KMProject_TimelineItem& KMProto_KMProject_VisualClip::_internal_unattached_transition() const {
  const ::KMProto_KMProject_TimelineItem* p = unattached_transition_;
  return p != nullptr ? *p : reinterpret_cast<const ::KMProto_KMProject_TimelineItem&>(
      ::_KMProto_KMProject_TimelineItem_default_instance_);
}
inline const ::KMProto_KMProject_TimelineItem& KMProto_KMProject_VisualClip::unattached_transition() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.unattached_transition)
  return _internal_unattached_transition();
}
inline void KMProto_KMProject_VisualClip::unsafe_arena_set_allocated_unattached_transition(
    ::KMProto_KMProject_TimelineItem* unattached_transition) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unattached_transition_);
  }
  unattached_transition_ = unattached_transition;
  if (unattached_transition) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KMProto.KMProject.VisualClip.unattached_transition)
}
inline ::KMProto_KMProject_TimelineItem* KMProto_KMProject_VisualClip::release_unattached_transition() {
  _has_bits_[0] &= ~0x00004000u;
  ::KMProto_KMProject_TimelineItem* temp = unattached_transition_;
  unattached_transition_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KMProto_KMProject_TimelineItem* KMProto_KMProject_VisualClip::unsafe_arena_release_unattached_transition() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.VisualClip.unattached_transition)
  _has_bits_[0] &= ~0x00004000u;
  ::KMProto_KMProject_TimelineItem* temp = unattached_transition_;
  unattached_transition_ = nullptr;
  return temp;
}
inline ::KMProto_KMProject_TimelineItem* KMProto_KMProject_VisualClip::_internal_mutable_unattached_transition() {
  _has_bits_[0] |= 0x00004000u;
  if (unattached_transition_ == nullptr) {
    auto* p = CreateMaybeMessage<::KMProto_KMProject_TimelineItem>(GetArena());
    unattached_transition_ = p;
  }
  return unattached_transition_;
}
inline ::KMProto_KMProject_TimelineItem* KMProto_KMProject_VisualClip::mutable_unattached_transition() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.VisualClip.unattached_transition)
  return _internal_mutable_unattached_transition();
}
inline void KMProto_KMProject_VisualClip::set_allocated_unattached_transition(::KMProto_KMProject_TimelineItem* unattached_transition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete unattached_transition_;
  }
  if (unattached_transition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(unattached_transition);
    if (message_arena != submessage_arena) {
      unattached_transition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unattached_transition, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  unattached_transition_ = unattached_transition;
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.VisualClip.unattached_transition)
}

// optional int32 brightness = 156;
inline bool KMProto_KMProject_VisualClip::_internal_has_brightness() const {
  bool value = (_has_bits_[2] & 0x00000008u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_brightness() const {
  return _internal_has_brightness();
}
inline void KMProto_KMProject_VisualClip::clear_brightness() {
  brightness_ = 0;
  _has_bits_[2] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_brightness() const {
  return brightness_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::brightness() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.brightness)
  return _internal_brightness();
}
inline void KMProto_KMProject_VisualClip::_internal_set_brightness(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00000008u;
  brightness_ = value;
}
inline void KMProto_KMProject_VisualClip::set_brightness(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_brightness(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.brightness)
}

// optional int32 contrast = 157;
inline bool KMProto_KMProject_VisualClip::_internal_has_contrast() const {
  bool value = (_has_bits_[2] & 0x00000040u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_contrast() const {
  return _internal_has_contrast();
}
inline void KMProto_KMProject_VisualClip::clear_contrast() {
  contrast_ = 0;
  _has_bits_[2] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_contrast() const {
  return contrast_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::contrast() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.contrast)
  return _internal_contrast();
}
inline void KMProto_KMProject_VisualClip::_internal_set_contrast(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00000040u;
  contrast_ = value;
}
inline void KMProto_KMProject_VisualClip::set_contrast(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_contrast(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.contrast)
}

// optional int32 saturation = 158;
inline bool KMProto_KMProject_VisualClip::_internal_has_saturation() const {
  bool value = (_has_bits_[2] & 0x00000080u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_saturation() const {
  return _internal_has_saturation();
}
inline void KMProto_KMProject_VisualClip::clear_saturation() {
  saturation_ = 0;
  _has_bits_[2] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_saturation() const {
  return saturation_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::saturation() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.saturation)
  return _internal_saturation();
}
inline void KMProto_KMProject_VisualClip::_internal_set_saturation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00000080u;
  saturation_ = value;
}
inline void KMProto_KMProject_VisualClip::set_saturation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_saturation(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.saturation)
}

// optional int32 tintcolor = 159;
inline bool KMProto_KMProject_VisualClip::_internal_has_tintcolor() const {
  bool value = (_has_bits_[2] & 0x00000100u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_tintcolor() const {
  return _internal_has_tintcolor();
}
inline void KMProto_KMProject_VisualClip::clear_tintcolor() {
  tintcolor_ = 0;
  _has_bits_[2] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_tintcolor() const {
  return tintcolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::tintcolor() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.tintcolor)
  return _internal_tintcolor();
}
inline void KMProto_KMProject_VisualClip::_internal_set_tintcolor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00000100u;
  tintcolor_ = value;
}
inline void KMProto_KMProject_VisualClip::set_tintcolor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tintcolor(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.tintcolor)
}

// optional int32 effect_start_time = 160;
inline bool KMProto_KMProject_VisualClip::_internal_has_effect_start_time() const {
  bool value = (_has_bits_[2] & 0x00000200u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_effect_start_time() const {
  return _internal_has_effect_start_time();
}
inline void KMProto_KMProject_VisualClip::clear_effect_start_time() {
  effect_start_time_ = 0;
  _has_bits_[2] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_effect_start_time() const {
  return effect_start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::effect_start_time() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.effect_start_time)
  return _internal_effect_start_time();
}
inline void KMProto_KMProject_VisualClip::_internal_set_effect_start_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00000200u;
  effect_start_time_ = value;
}
inline void KMProto_KMProject_VisualClip::set_effect_start_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_effect_start_time(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.effect_start_time)
}

// optional int32 effect_end_time = 161;
inline bool KMProto_KMProject_VisualClip::_internal_has_effect_end_time() const {
  bool value = (_has_bits_[2] & 0x00000400u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_effect_end_time() const {
  return _internal_has_effect_end_time();
}
inline void KMProto_KMProject_VisualClip::clear_effect_end_time() {
  effect_end_time_ = 0;
  _has_bits_[2] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_effect_end_time() const {
  return effect_end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::effect_end_time() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.effect_end_time)
  return _internal_effect_end_time();
}
inline void KMProto_KMProject_VisualClip::_internal_set_effect_end_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00000400u;
  effect_end_time_ = value;
}
inline void KMProto_KMProject_VisualClip::set_effect_end_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_effect_end_time(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.effect_end_time)
}

// optional .KMProto.KMProject.Matrix start_matrix = 162;
inline bool KMProto_KMProject_VisualClip::_internal_has_start_matrix() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || start_matrix_ != nullptr);
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_start_matrix() const {
  return _internal_has_start_matrix();
}
inline void KMProto_KMProject_VisualClip::clear_start_matrix() {
  if (start_matrix_ != nullptr) start_matrix_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::KMProto_KMProject_Matrix& KMProto_KMProject_VisualClip::_internal_start_matrix() const {
  const ::KMProto_KMProject_Matrix* p = start_matrix_;
  return p != nullptr ? *p : reinterpret_cast<const ::KMProto_KMProject_Matrix&>(
      ::_KMProto_KMProject_Matrix_default_instance_);
}
inline const ::KMProto_KMProject_Matrix& KMProto_KMProject_VisualClip::start_matrix() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.start_matrix)
  return _internal_start_matrix();
}
inline void KMProto_KMProject_VisualClip::unsafe_arena_set_allocated_start_matrix(
    ::KMProto_KMProject_Matrix* start_matrix) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_matrix_);
  }
  start_matrix_ = start_matrix;
  if (start_matrix) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KMProto.KMProject.VisualClip.start_matrix)
}
inline ::KMProto_KMProject_Matrix* KMProto_KMProject_VisualClip::release_start_matrix() {
  _has_bits_[0] &= ~0x00000400u;
  ::KMProto_KMProject_Matrix* temp = start_matrix_;
  start_matrix_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KMProto_KMProject_Matrix* KMProto_KMProject_VisualClip::unsafe_arena_release_start_matrix() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.VisualClip.start_matrix)
  _has_bits_[0] &= ~0x00000400u;
  ::KMProto_KMProject_Matrix* temp = start_matrix_;
  start_matrix_ = nullptr;
  return temp;
}
inline ::KMProto_KMProject_Matrix* KMProto_KMProject_VisualClip::_internal_mutable_start_matrix() {
  _has_bits_[0] |= 0x00000400u;
  if (start_matrix_ == nullptr) {
    auto* p = CreateMaybeMessage<::KMProto_KMProject_Matrix>(GetArena());
    start_matrix_ = p;
  }
  return start_matrix_;
}
inline ::KMProto_KMProject_Matrix* KMProto_KMProject_VisualClip::mutable_start_matrix() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.VisualClip.start_matrix)
  return _internal_mutable_start_matrix();
}
inline void KMProto_KMProject_VisualClip::set_allocated_start_matrix(::KMProto_KMProject_Matrix* start_matrix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete start_matrix_;
  }
  if (start_matrix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(start_matrix);
    if (message_arena != submessage_arena) {
      start_matrix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_matrix, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  start_matrix_ = start_matrix;
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.VisualClip.start_matrix)
}

// optional .KMProto.KMProject.Matrix end_matrix = 163;
inline bool KMProto_KMProject_VisualClip::_internal_has_end_matrix() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || end_matrix_ != nullptr);
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_end_matrix() const {
  return _internal_has_end_matrix();
}
inline void KMProto_KMProject_VisualClip::clear_end_matrix() {
  if (end_matrix_ != nullptr) end_matrix_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::KMProto_KMProject_Matrix& KMProto_KMProject_VisualClip::_internal_end_matrix() const {
  const ::KMProto_KMProject_Matrix* p = end_matrix_;
  return p != nullptr ? *p : reinterpret_cast<const ::KMProto_KMProject_Matrix&>(
      ::_KMProto_KMProject_Matrix_default_instance_);
}
inline const ::KMProto_KMProject_Matrix& KMProto_KMProject_VisualClip::end_matrix() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.end_matrix)
  return _internal_end_matrix();
}
inline void KMProto_KMProject_VisualClip::unsafe_arena_set_allocated_end_matrix(
    ::KMProto_KMProject_Matrix* end_matrix) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_matrix_);
  }
  end_matrix_ = end_matrix;
  if (end_matrix) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KMProto.KMProject.VisualClip.end_matrix)
}
inline ::KMProto_KMProject_Matrix* KMProto_KMProject_VisualClip::release_end_matrix() {
  _has_bits_[0] &= ~0x00000800u;
  ::KMProto_KMProject_Matrix* temp = end_matrix_;
  end_matrix_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KMProto_KMProject_Matrix* KMProto_KMProject_VisualClip::unsafe_arena_release_end_matrix() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.VisualClip.end_matrix)
  _has_bits_[0] &= ~0x00000800u;
  ::KMProto_KMProject_Matrix* temp = end_matrix_;
  end_matrix_ = nullptr;
  return temp;
}
inline ::KMProto_KMProject_Matrix* KMProto_KMProject_VisualClip::_internal_mutable_end_matrix() {
  _has_bits_[0] |= 0x00000800u;
  if (end_matrix_ == nullptr) {
    auto* p = CreateMaybeMessage<::KMProto_KMProject_Matrix>(GetArena());
    end_matrix_ = p;
  }
  return end_matrix_;
}
inline ::KMProto_KMProject_Matrix* KMProto_KMProject_VisualClip::mutable_end_matrix() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.VisualClip.end_matrix)
  return _internal_mutable_end_matrix();
}
inline void KMProto_KMProject_VisualClip::set_allocated_end_matrix(::KMProto_KMProject_Matrix* end_matrix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete end_matrix_;
  }
  if (end_matrix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(end_matrix);
    if (message_arena != submessage_arena) {
      end_matrix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_matrix, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  end_matrix_ = end_matrix;
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.VisualClip.end_matrix)
}

// optional .KMProto.KMProject.ThemeEffectType auto_theme_effect = 164;
inline bool KMProto_KMProject_VisualClip::_internal_has_auto_theme_effect() const {
  bool value = (_has_bits_[2] & 0x02000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_auto_theme_effect() const {
  return _internal_has_auto_theme_effect();
}
inline void KMProto_KMProject_VisualClip::clear_auto_theme_effect() {
  auto_theme_effect_ = 1;
  _has_bits_[2] &= ~0x02000000u;
}
inline ::KMProto_KMProject_ThemeEffectType KMProto_KMProject_VisualClip::_internal_auto_theme_effect() const {
  return static_cast< ::KMProto_KMProject_ThemeEffectType >(auto_theme_effect_);
}
inline ::KMProto_KMProject_ThemeEffectType KMProto_KMProject_VisualClip::auto_theme_effect() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.auto_theme_effect)
  return _internal_auto_theme_effect();
}
inline void KMProto_KMProject_VisualClip::_internal_set_auto_theme_effect(::KMProto_KMProject_ThemeEffectType value) {
  assert(::KMProto_KMProject_ThemeEffectType_IsValid(value));
  _has_bits_[2] |= 0x02000000u;
  auto_theme_effect_ = value;
}
inline void KMProto_KMProject_VisualClip::set_auto_theme_effect(::KMProto_KMProject_ThemeEffectType value) {
  _internal_set_auto_theme_effect(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.auto_theme_effect)
}

// repeated int32 volume_envelope_time = 165 [packed = true];
inline int KMProto_KMProject_VisualClip::_internal_volume_envelope_time_size() const {
  return volume_envelope_time_.size();
}
inline int KMProto_KMProject_VisualClip::volume_envelope_time_size() const {
  return _internal_volume_envelope_time_size();
}
inline void KMProto_KMProject_VisualClip::clear_volume_envelope_time() {
  volume_envelope_time_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_volume_envelope_time(int index) const {
  return volume_envelope_time_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::volume_envelope_time(int index) const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.volume_envelope_time)
  return _internal_volume_envelope_time(index);
}
inline void KMProto_KMProject_VisualClip::set_volume_envelope_time(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  volume_envelope_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.volume_envelope_time)
}
inline void KMProto_KMProject_VisualClip::_internal_add_volume_envelope_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  volume_envelope_time_.Add(value);
}
inline void KMProto_KMProject_VisualClip::add_volume_envelope_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_volume_envelope_time(value);
  // @@protoc_insertion_point(field_add:KMProto.KMProject.VisualClip.volume_envelope_time)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
KMProto_KMProject_VisualClip::_internal_volume_envelope_time() const {
  return volume_envelope_time_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
KMProto_KMProject_VisualClip::volume_envelope_time() const {
  // @@protoc_insertion_point(field_list:KMProto.KMProject.VisualClip.volume_envelope_time)
  return _internal_volume_envelope_time();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
KMProto_KMProject_VisualClip::_internal_mutable_volume_envelope_time() {
  return &volume_envelope_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
KMProto_KMProject_VisualClip::mutable_volume_envelope_time() {
  // @@protoc_insertion_point(field_mutable_list:KMProto.KMProject.VisualClip.volume_envelope_time)
  return _internal_mutable_volume_envelope_time();
}

// repeated int32 volume_envelope_level = 166 [packed = true];
inline int KMProto_KMProject_VisualClip::_internal_volume_envelope_level_size() const {
  return volume_envelope_level_.size();
}
inline int KMProto_KMProject_VisualClip::volume_envelope_level_size() const {
  return _internal_volume_envelope_level_size();
}
inline void KMProto_KMProject_VisualClip::clear_volume_envelope_level() {
  volume_envelope_level_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_volume_envelope_level(int index) const {
  return volume_envelope_level_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::volume_envelope_level(int index) const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.volume_envelope_level)
  return _internal_volume_envelope_level(index);
}
inline void KMProto_KMProject_VisualClip::set_volume_envelope_level(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  volume_envelope_level_.Set(index, value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.volume_envelope_level)
}
inline void KMProto_KMProject_VisualClip::_internal_add_volume_envelope_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  volume_envelope_level_.Add(value);
}
inline void KMProto_KMProject_VisualClip::add_volume_envelope_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_volume_envelope_level(value);
  // @@protoc_insertion_point(field_add:KMProto.KMProject.VisualClip.volume_envelope_level)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
KMProto_KMProject_VisualClip::_internal_volume_envelope_level() const {
  return volume_envelope_level_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
KMProto_KMProject_VisualClip::volume_envelope_level() const {
  // @@protoc_insertion_point(field_list:KMProto.KMProject.VisualClip.volume_envelope_level)
  return _internal_volume_envelope_level();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
KMProto_KMProject_VisualClip::_internal_mutable_volume_envelope_level() {
  return &volume_envelope_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
KMProto_KMProject_VisualClip::mutable_volume_envelope_level() {
  // @@protoc_insertion_point(field_mutable_list:KMProto.KMProject.VisualClip.volume_envelope_level)
  return _internal_mutable_volume_envelope_level();
}

// optional float clip_width = 167;
inline bool KMProto_KMProject_VisualClip::_internal_has_clip_width() const {
  bool value = (_has_bits_[2] & 0x00000800u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_clip_width() const {
  return _internal_has_clip_width();
}
inline void KMProto_KMProject_VisualClip::clear_clip_width() {
  clip_width_ = 0;
  _has_bits_[2] &= ~0x00000800u;
}
inline float KMProto_KMProject_VisualClip::_internal_clip_width() const {
  return clip_width_;
}
inline float KMProto_KMProject_VisualClip::clip_width() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.clip_width)
  return _internal_clip_width();
}
inline void KMProto_KMProject_VisualClip::_internal_set_clip_width(float value) {
  _has_bits_[2] |= 0x00000800u;
  clip_width_ = value;
}
inline void KMProto_KMProject_VisualClip::set_clip_width(float value) {
  _internal_set_clip_width(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.clip_width)
}

// optional int32 playback_speed = 168;
inline bool KMProto_KMProject_VisualClip::_internal_has_playback_speed() const {
  bool value = (_has_bits_[2] & 0x00001000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_playback_speed() const {
  return _internal_has_playback_speed();
}
inline void KMProto_KMProject_VisualClip::clear_playback_speed() {
  playback_speed_ = 0;
  _has_bits_[2] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_playback_speed() const {
  return playback_speed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::playback_speed() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.playback_speed)
  return _internal_playback_speed();
}
inline void KMProto_KMProject_VisualClip::_internal_set_playback_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00001000u;
  playback_speed_ = value;
}
inline void KMProto_KMProject_VisualClip::set_playback_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playback_speed(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.playback_speed)
}

// optional .KMProto.KMProject.ColorEffect color_effect = 169;
inline bool KMProto_KMProject_VisualClip::_internal_has_color_effect() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || color_effect_ != nullptr);
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_color_effect() const {
  return _internal_has_color_effect();
}
inline void KMProto_KMProject_VisualClip::clear_color_effect() {
  if (color_effect_ != nullptr) color_effect_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
inline const ::KMProto_KMProject_ColorEffect& KMProto_KMProject_VisualClip::_internal_color_effect() const {
  const ::KMProto_KMProject_ColorEffect* p = color_effect_;
  return p != nullptr ? *p : reinterpret_cast<const ::KMProto_KMProject_ColorEffect&>(
      ::_KMProto_KMProject_ColorEffect_default_instance_);
}
inline const ::KMProto_KMProject_ColorEffect& KMProto_KMProject_VisualClip::color_effect() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.color_effect)
  return _internal_color_effect();
}
inline void KMProto_KMProject_VisualClip::unsafe_arena_set_allocated_color_effect(
    ::KMProto_KMProject_ColorEffect* color_effect) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_effect_);
  }
  color_effect_ = color_effect;
  if (color_effect) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KMProto.KMProject.VisualClip.color_effect)
}
inline ::KMProto_KMProject_ColorEffect* KMProto_KMProject_VisualClip::release_color_effect() {
  _has_bits_[0] &= ~0x00001000u;
  ::KMProto_KMProject_ColorEffect* temp = color_effect_;
  color_effect_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KMProto_KMProject_ColorEffect* KMProto_KMProject_VisualClip::unsafe_arena_release_color_effect() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.VisualClip.color_effect)
  _has_bits_[0] &= ~0x00001000u;
  ::KMProto_KMProject_ColorEffect* temp = color_effect_;
  color_effect_ = nullptr;
  return temp;
}
inline ::KMProto_KMProject_ColorEffect* KMProto_KMProject_VisualClip::_internal_mutable_color_effect() {
  _has_bits_[0] |= 0x00001000u;
  if (color_effect_ == nullptr) {
    auto* p = CreateMaybeMessage<::KMProto_KMProject_ColorEffect>(GetArena());
    color_effect_ = p;
  }
  return color_effect_;
}
inline ::KMProto_KMProject_ColorEffect* KMProto_KMProject_VisualClip::mutable_color_effect() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.VisualClip.color_effect)
  return _internal_mutable_color_effect();
}
inline void KMProto_KMProject_VisualClip::set_allocated_color_effect(::KMProto_KMProject_ColorEffect* color_effect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete color_effect_;
  }
  if (color_effect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(color_effect);
    if (message_arena != submessage_arena) {
      color_effect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color_effect, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  color_effect_ = color_effect;
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.VisualClip.color_effect)
}

// optional .KMProto.KMProject.StringHashMap effect_options = 170;
inline bool KMProto_KMProject_VisualClip::_internal_has_effect_options() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || effect_options_ != nullptr);
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_effect_options() const {
  return _internal_has_effect_options();
}
inline void KMProto_KMProject_VisualClip::clear_effect_options() {
  if (effect_options_ != nullptr) effect_options_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
inline const ::KMProto_KMProject_StringHashMap& KMProto_KMProject_VisualClip::_internal_effect_options() const {
  const ::KMProto_KMProject_StringHashMap* p = effect_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::KMProto_KMProject_StringHashMap&>(
      ::_KMProto_KMProject_StringHashMap_default_instance_);
}
inline const ::KMProto_KMProject_StringHashMap& KMProto_KMProject_VisualClip::effect_options() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.effect_options)
  return _internal_effect_options();
}
inline void KMProto_KMProject_VisualClip::unsafe_arena_set_allocated_effect_options(
    ::KMProto_KMProject_StringHashMap* effect_options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(effect_options_);
  }
  effect_options_ = effect_options;
  if (effect_options) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KMProto.KMProject.VisualClip.effect_options)
}
inline ::KMProto_KMProject_StringHashMap* KMProto_KMProject_VisualClip::release_effect_options() {
  _has_bits_[0] &= ~0x00002000u;
  ::KMProto_KMProject_StringHashMap* temp = effect_options_;
  effect_options_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KMProto_KMProject_StringHashMap* KMProto_KMProject_VisualClip::unsafe_arena_release_effect_options() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.VisualClip.effect_options)
  _has_bits_[0] &= ~0x00002000u;
  ::KMProto_KMProject_StringHashMap* temp = effect_options_;
  effect_options_ = nullptr;
  return temp;
}
inline ::KMProto_KMProject_StringHashMap* KMProto_KMProject_VisualClip::_internal_mutable_effect_options() {
  _has_bits_[0] |= 0x00002000u;
  if (effect_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::KMProto_KMProject_StringHashMap>(GetArena());
    effect_options_ = p;
  }
  return effect_options_;
}
inline ::KMProto_KMProject_StringHashMap* KMProto_KMProject_VisualClip::mutable_effect_options() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.VisualClip.effect_options)
  return _internal_mutable_effect_options();
}
inline void KMProto_KMProject_VisualClip::set_allocated_effect_options(::KMProto_KMProject_StringHashMap* effect_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete effect_options_;
  }
  if (effect_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(effect_options);
    if (message_arena != submessage_arena) {
      effect_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, effect_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  effect_options_ = effect_options;
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.VisualClip.effect_options)
}

// optional string media_msid = 174;
inline bool KMProto_KMProject_VisualClip::_internal_has_media_msid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_media_msid() const {
  return _internal_has_media_msid();
}
inline void KMProto_KMProject_VisualClip::clear_media_msid() {
  media_msid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& KMProto_KMProject_VisualClip::media_msid() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.media_msid)
  return _internal_media_msid();
}
inline void KMProto_KMProject_VisualClip::set_media_msid(const std::string& value) {
  _internal_set_media_msid(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.media_msid)
}
inline std::string* KMProto_KMProject_VisualClip::mutable_media_msid() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.VisualClip.media_msid)
  return _internal_mutable_media_msid();
}
inline const std::string& KMProto_KMProject_VisualClip::_internal_media_msid() const {
  return media_msid_.Get();
}
inline void KMProto_KMProject_VisualClip::_internal_set_media_msid(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  media_msid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProject_VisualClip::set_media_msid(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  media_msid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProject.VisualClip.media_msid)
}
inline void KMProto_KMProject_VisualClip::set_media_msid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  media_msid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProject.VisualClip.media_msid)
}
inline void KMProto_KMProject_VisualClip::set_media_msid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  media_msid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProject.VisualClip.media_msid)
}
inline std::string* KMProto_KMProject_VisualClip::_internal_mutable_media_msid() {
  _has_bits_[0] |= 0x00000010u;
  return media_msid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProject_VisualClip::release_media_msid() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.VisualClip.media_msid)
  if (!_internal_has_media_msid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return media_msid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProject_VisualClip::set_allocated_media_msid(std::string* media_msid) {
  if (media_msid != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  media_msid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), media_msid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.VisualClip.media_msid)
}

// optional bool transcode_approved = 172;
inline bool KMProto_KMProject_VisualClip::_internal_has_transcode_approved() const {
  bool value = (_has_bits_[2] & 0x00004000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_transcode_approved() const {
  return _internal_has_transcode_approved();
}
inline void KMProto_KMProject_VisualClip::clear_transcode_approved() {
  transcode_approved_ = false;
  _has_bits_[2] &= ~0x00004000u;
}
inline bool KMProto_KMProject_VisualClip::_internal_transcode_approved() const {
  return transcode_approved_;
}
inline bool KMProto_KMProject_VisualClip::transcode_approved() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.transcode_approved)
  return _internal_transcode_approved();
}
inline void KMProto_KMProject_VisualClip::_internal_set_transcode_approved(bool value) {
  _has_bits_[2] |= 0x00004000u;
  transcode_approved_ = value;
}
inline void KMProto_KMProject_VisualClip::set_transcode_approved(bool value) {
  _internal_set_transcode_approved(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.transcode_approved)
}

// optional .KMProto.KMProject.ClipState clip_state = 173;
inline bool KMProto_KMProject_VisualClip::_internal_has_clip_state() const {
  bool value = (_has_bits_[2] & 0x04000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_clip_state() const {
  return _internal_has_clip_state();
}
inline void KMProto_KMProject_VisualClip::clear_clip_state() {
  clip_state_ = 1;
  _has_bits_[2] &= ~0x04000000u;
}
inline ::KMProto_KMProject_ClipState KMProto_KMProject_VisualClip::_internal_clip_state() const {
  return static_cast< ::KMProto_KMProject_ClipState >(clip_state_);
}
inline ::KMProto_KMProject_ClipState KMProto_KMProject_VisualClip::clip_state() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.clip_state)
  return _internal_clip_state();
}
inline void KMProto_KMProject_VisualClip::_internal_set_clip_state(::KMProto_KMProject_ClipState value) {
  assert(::KMProto_KMProject_ClipState_IsValid(value));
  _has_bits_[2] |= 0x04000000u;
  clip_state_ = value;
}
inline void KMProto_KMProject_VisualClip::set_clip_state(::KMProto_KMProject_ClipState value) {
  _internal_set_clip_state(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.clip_state)
}

// optional bool crop_link = 175;
inline bool KMProto_KMProject_VisualClip::_internal_has_crop_link() const {
  bool value = (_has_bits_[2] & 0x00008000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_crop_link() const {
  return _internal_has_crop_link();
}
inline void KMProto_KMProject_VisualClip::clear_crop_link() {
  crop_link_ = false;
  _has_bits_[2] &= ~0x00008000u;
}
inline bool KMProto_KMProject_VisualClip::_internal_crop_link() const {
  return crop_link_;
}
inline bool KMProto_KMProject_VisualClip::crop_link() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.crop_link)
  return _internal_crop_link();
}
inline void KMProto_KMProject_VisualClip::_internal_set_crop_link(bool value) {
  _has_bits_[2] |= 0x00008000u;
  crop_link_ = value;
}
inline void KMProto_KMProject_VisualClip::set_crop_link(bool value) {
  _internal_set_crop_link(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.crop_link)
}

// optional bool is_reverse = 177;
inline bool KMProto_KMProject_VisualClip::_internal_has_is_reverse() const {
  bool value = (_has_bits_[2] & 0x00010000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_is_reverse() const {
  return _internal_has_is_reverse();
}
inline void KMProto_KMProject_VisualClip::clear_is_reverse() {
  is_reverse_ = false;
  _has_bits_[2] &= ~0x00010000u;
}
inline bool KMProto_KMProject_VisualClip::_internal_is_reverse() const {
  return is_reverse_;
}
inline bool KMProto_KMProject_VisualClip::is_reverse() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.is_reverse)
  return _internal_is_reverse();
}
inline void KMProto_KMProject_VisualClip::_internal_set_is_reverse(bool value) {
  _has_bits_[2] |= 0x00010000u;
  is_reverse_ = value;
}
inline void KMProto_KMProject_VisualClip::set_is_reverse(bool value) {
  _internal_set_is_reverse(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.is_reverse)
}

// optional int32 voice_changer = 178;
inline bool KMProto_KMProject_VisualClip::_internal_has_voice_changer() const {
  bool value = (_has_bits_[2] & 0x00020000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_voice_changer() const {
  return _internal_has_voice_changer();
}
inline void KMProto_KMProject_VisualClip::clear_voice_changer() {
  voice_changer_ = 0;
  _has_bits_[2] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_voice_changer() const {
  return voice_changer_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::voice_changer() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.voice_changer)
  return _internal_voice_changer();
}
inline void KMProto_KMProject_VisualClip::_internal_set_voice_changer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00020000u;
  voice_changer_ = value;
}
inline void KMProto_KMProject_VisualClip::set_voice_changer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_voice_changer(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.voice_changer)
}

// optional bool vignette = 179;
inline bool KMProto_KMProject_VisualClip::_internal_has_vignette() const {
  bool value = (_has_bits_[2] & 0x00400000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_vignette() const {
  return _internal_has_vignette();
}
inline void KMProto_KMProject_VisualClip::clear_vignette() {
  vignette_ = false;
  _has_bits_[2] &= ~0x00400000u;
}
inline bool KMProto_KMProject_VisualClip::_internal_vignette() const {
  return vignette_;
}
inline bool KMProto_KMProject_VisualClip::vignette() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.vignette)
  return _internal_vignette();
}
inline void KMProto_KMProject_VisualClip::_internal_set_vignette(bool value) {
  _has_bits_[2] |= 0x00400000u;
  vignette_ = value;
}
inline void KMProto_KMProject_VisualClip::set_vignette(bool value) {
  _internal_set_vignette(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.vignette)
}

// optional int32 pan_left = 180;
inline bool KMProto_KMProject_VisualClip::_internal_has_pan_left() const {
  bool value = (_has_bits_[2] & 0x00040000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_pan_left() const {
  return _internal_has_pan_left();
}
inline void KMProto_KMProject_VisualClip::clear_pan_left() {
  pan_left_ = 0;
  _has_bits_[2] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_pan_left() const {
  return pan_left_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::pan_left() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.pan_left)
  return _internal_pan_left();
}
inline void KMProto_KMProject_VisualClip::_internal_set_pan_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00040000u;
  pan_left_ = value;
}
inline void KMProto_KMProject_VisualClip::set_pan_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pan_left(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.pan_left)
}

// optional int32 pan_right = 181;
inline bool KMProto_KMProject_VisualClip::_internal_has_pan_right() const {
  bool value = (_has_bits_[2] & 0x00080000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_pan_right() const {
  return _internal_has_pan_right();
}
inline void KMProto_KMProject_VisualClip::clear_pan_right() {
  pan_right_ = 0;
  _has_bits_[2] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_pan_right() const {
  return pan_right_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::pan_right() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.pan_right)
  return _internal_pan_right();
}
inline void KMProto_KMProject_VisualClip::_internal_set_pan_right(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00080000u;
  pan_right_ = value;
}
inline void KMProto_KMProject_VisualClip::set_pan_right(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pan_right(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.pan_right)
}

// optional int32 compressor = 182;
inline bool KMProto_KMProject_VisualClip::_internal_has_compressor() const {
  bool value = (_has_bits_[2] & 0x00100000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_compressor() const {
  return _internal_has_compressor();
}
inline void KMProto_KMProject_VisualClip::clear_compressor() {
  compressor_ = 0;
  _has_bits_[2] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_compressor() const {
  return compressor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::compressor() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.compressor)
  return _internal_compressor();
}
inline void KMProto_KMProject_VisualClip::_internal_set_compressor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00100000u;
  compressor_ = value;
}
inline void KMProto_KMProject_VisualClip::set_compressor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_compressor(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.compressor)
}

// optional int32 pitch_factor = 183;
inline bool KMProto_KMProject_VisualClip::_internal_has_pitch_factor() const {
  bool value = (_has_bits_[2] & 0x00200000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_pitch_factor() const {
  return _internal_has_pitch_factor();
}
inline void KMProto_KMProject_VisualClip::clear_pitch_factor() {
  pitch_factor_ = 0;
  _has_bits_[2] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::_internal_pitch_factor() const {
  return pitch_factor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VisualClip::pitch_factor() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.pitch_factor)
  return _internal_pitch_factor();
}
inline void KMProto_KMProject_VisualClip::_internal_set_pitch_factor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00200000u;
  pitch_factor_ = value;
}
inline void KMProto_KMProject_VisualClip::set_pitch_factor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pitch_factor(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.pitch_factor)
}

// optional string clip_name = 184;
inline bool KMProto_KMProject_VisualClip::_internal_has_clip_name() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_clip_name() const {
  return _internal_has_clip_name();
}
inline void KMProto_KMProject_VisualClip::clear_clip_name() {
  clip_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& KMProto_KMProject_VisualClip::clip_name() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.clip_name)
  return _internal_clip_name();
}
inline void KMProto_KMProject_VisualClip::set_clip_name(const std::string& value) {
  _internal_set_clip_name(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.clip_name)
}
inline std::string* KMProto_KMProject_VisualClip::mutable_clip_name() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.VisualClip.clip_name)
  return _internal_mutable_clip_name();
}
inline const std::string& KMProto_KMProject_VisualClip::_internal_clip_name() const {
  return clip_name_.Get();
}
inline void KMProto_KMProject_VisualClip::_internal_set_clip_name(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  clip_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProject_VisualClip::set_clip_name(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  clip_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProject.VisualClip.clip_name)
}
inline void KMProto_KMProject_VisualClip::set_clip_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  clip_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProject.VisualClip.clip_name)
}
inline void KMProto_KMProject_VisualClip::set_clip_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  clip_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProject.VisualClip.clip_name)
}
inline std::string* KMProto_KMProject_VisualClip::_internal_mutable_clip_name() {
  _has_bits_[0] |= 0x00000020u;
  return clip_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProject_VisualClip::release_clip_name() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.VisualClip.clip_name)
  if (!_internal_has_clip_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return clip_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProject_VisualClip::set_allocated_clip_name(std::string* clip_name) {
  if (clip_name != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  clip_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clip_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.VisualClip.clip_name)
}

// optional string ios_media_asset_id = 185;
inline bool KMProto_KMProject_VisualClip::_internal_has_ios_media_asset_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_ios_media_asset_id() const {
  return _internal_has_ios_media_asset_id();
}
inline void KMProto_KMProject_VisualClip::clear_ios_media_asset_id() {
  ios_media_asset_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& KMProto_KMProject_VisualClip::ios_media_asset_id() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.ios_media_asset_id)
  return _internal_ios_media_asset_id();
}
inline void KMProto_KMProject_VisualClip::set_ios_media_asset_id(const std::string& value) {
  _internal_set_ios_media_asset_id(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.ios_media_asset_id)
}
inline std::string* KMProto_KMProject_VisualClip::mutable_ios_media_asset_id() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.VisualClip.ios_media_asset_id)
  return _internal_mutable_ios_media_asset_id();
}
inline const std::string& KMProto_KMProject_VisualClip::_internal_ios_media_asset_id() const {
  return ios_media_asset_id_.Get();
}
inline void KMProto_KMProject_VisualClip::_internal_set_ios_media_asset_id(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  ios_media_asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProject_VisualClip::set_ios_media_asset_id(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  ios_media_asset_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProject.VisualClip.ios_media_asset_id)
}
inline void KMProto_KMProject_VisualClip::set_ios_media_asset_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  ios_media_asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProject.VisualClip.ios_media_asset_id)
}
inline void KMProto_KMProject_VisualClip::set_ios_media_asset_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  ios_media_asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProject.VisualClip.ios_media_asset_id)
}
inline std::string* KMProto_KMProject_VisualClip::_internal_mutable_ios_media_asset_id() {
  _has_bits_[0] |= 0x00000040u;
  return ios_media_asset_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProject_VisualClip::release_ios_media_asset_id() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.VisualClip.ios_media_asset_id)
  if (!_internal_has_ios_media_asset_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return ios_media_asset_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProject_VisualClip::set_allocated_ios_media_asset_id(std::string* ios_media_asset_id) {
  if (ios_media_asset_id != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  ios_media_asset_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ios_media_asset_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.VisualClip.ios_media_asset_id)
}

// optional bool keepPitch = 186;
inline bool KMProto_KMProject_VisualClip::_internal_has_keeppitch() const {
  bool value = (_has_bits_[2] & 0x00800000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_keeppitch() const {
  return _internal_has_keeppitch();
}
inline void KMProto_KMProject_VisualClip::clear_keeppitch() {
  keeppitch_ = false;
  _has_bits_[2] &= ~0x00800000u;
}
inline bool KMProto_KMProject_VisualClip::_internal_keeppitch() const {
  return keeppitch_;
}
inline bool KMProto_KMProject_VisualClip::keeppitch() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.keepPitch)
  return _internal_keeppitch();
}
inline void KMProto_KMProject_VisualClip::_internal_set_keeppitch(bool value) {
  _has_bits_[2] |= 0x00800000u;
  keeppitch_ = value;
}
inline void KMProto_KMProject_VisualClip::set_keeppitch(bool value) {
  _internal_set_keeppitch(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.keepPitch)
}

// optional bool useIFrameOnly = 187;
inline bool KMProto_KMProject_VisualClip::_internal_has_useiframeonly() const {
  bool value = (_has_bits_[2] & 0x01000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_useiframeonly() const {
  return _internal_has_useiframeonly();
}
inline void KMProto_KMProject_VisualClip::clear_useiframeonly() {
  useiframeonly_ = false;
  _has_bits_[2] &= ~0x01000000u;
}
inline bool KMProto_KMProject_VisualClip::_internal_useiframeonly() const {
  return useiframeonly_;
}
inline bool KMProto_KMProject_VisualClip::useiframeonly() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.useIFrameOnly)
  return _internal_useiframeonly();
}
inline void KMProto_KMProject_VisualClip::_internal_set_useiframeonly(bool value) {
  _has_bits_[2] |= 0x01000000u;
  useiframeonly_ = value;
}
inline void KMProto_KMProject_VisualClip::set_useiframeonly(bool value) {
  _internal_set_useiframeonly(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.useIFrameOnly)
}

// optional string enhancedAudioFilter = 188;
inline bool KMProto_KMProject_VisualClip::_internal_has_enhancedaudiofilter() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_enhancedaudiofilter() const {
  return _internal_has_enhancedaudiofilter();
}
inline void KMProto_KMProject_VisualClip::clear_enhancedaudiofilter() {
  enhancedaudiofilter_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& KMProto_KMProject_VisualClip::enhancedaudiofilter() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.enhancedAudioFilter)
  return _internal_enhancedaudiofilter();
}
inline void KMProto_KMProject_VisualClip::set_enhancedaudiofilter(const std::string& value) {
  _internal_set_enhancedaudiofilter(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.enhancedAudioFilter)
}
inline std::string* KMProto_KMProject_VisualClip::mutable_enhancedaudiofilter() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.VisualClip.enhancedAudioFilter)
  return _internal_mutable_enhancedaudiofilter();
}
inline const std::string& KMProto_KMProject_VisualClip::_internal_enhancedaudiofilter() const {
  return enhancedaudiofilter_.Get();
}
inline void KMProto_KMProject_VisualClip::_internal_set_enhancedaudiofilter(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  enhancedaudiofilter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProject_VisualClip::set_enhancedaudiofilter(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  enhancedaudiofilter_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProject.VisualClip.enhancedAudioFilter)
}
inline void KMProto_KMProject_VisualClip::set_enhancedaudiofilter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  enhancedaudiofilter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProject.VisualClip.enhancedAudioFilter)
}
inline void KMProto_KMProject_VisualClip::set_enhancedaudiofilter(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  enhancedaudiofilter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProject.VisualClip.enhancedAudioFilter)
}
inline std::string* KMProto_KMProject_VisualClip::_internal_mutable_enhancedaudiofilter() {
  _has_bits_[0] |= 0x00000080u;
  return enhancedaudiofilter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProject_VisualClip::release_enhancedaudiofilter() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.VisualClip.enhancedAudioFilter)
  if (!_internal_has_enhancedaudiofilter()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return enhancedaudiofilter_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProject_VisualClip::set_allocated_enhancedaudiofilter(std::string* enhancedaudiofilter) {
  if (enhancedaudiofilter != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  enhancedaudiofilter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), enhancedaudiofilter,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.VisualClip.enhancedAudioFilter)
}

// optional string equalizer = 189;
inline bool KMProto_KMProject_VisualClip::_internal_has_equalizer() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_equalizer() const {
  return _internal_has_equalizer();
}
inline void KMProto_KMProject_VisualClip::clear_equalizer() {
  equalizer_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& KMProto_KMProject_VisualClip::equalizer() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.equalizer)
  return _internal_equalizer();
}
inline void KMProto_KMProject_VisualClip::set_equalizer(const std::string& value) {
  _internal_set_equalizer(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.equalizer)
}
inline std::string* KMProto_KMProject_VisualClip::mutable_equalizer() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.VisualClip.equalizer)
  return _internal_mutable_equalizer();
}
inline const std::string& KMProto_KMProject_VisualClip::_internal_equalizer() const {
  return equalizer_.Get();
}
inline void KMProto_KMProject_VisualClip::_internal_set_equalizer(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  equalizer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProject_VisualClip::set_equalizer(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  equalizer_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProject.VisualClip.equalizer)
}
inline void KMProto_KMProject_VisualClip::set_equalizer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  equalizer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProject.VisualClip.equalizer)
}
inline void KMProto_KMProject_VisualClip::set_equalizer(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000100u;
  equalizer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProject.VisualClip.equalizer)
}
inline std::string* KMProto_KMProject_VisualClip::_internal_mutable_equalizer() {
  _has_bits_[0] |= 0x00000100u;
  return equalizer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProject_VisualClip::release_equalizer() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.VisualClip.equalizer)
  if (!_internal_has_equalizer()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return equalizer_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProject_VisualClip::set_allocated_equalizer(std::string* equalizer) {
  if (equalizer != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  equalizer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), equalizer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.VisualClip.equalizer)
}

// optional .KMProto.KMProject.ClipRange clipRange = 190;
inline bool KMProto_KMProject_VisualClip::_internal_has_cliprange() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || cliprange_ != nullptr);
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_cliprange() const {
  return _internal_has_cliprange();
}
inline void KMProto_KMProject_VisualClip::clear_cliprange() {
  if (cliprange_ != nullptr) cliprange_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
inline const ::KMProto_KMProject_ClipRange& KMProto_KMProject_VisualClip::_internal_cliprange() const {
  const ::KMProto_KMProject_ClipRange* p = cliprange_;
  return p != nullptr ? *p : reinterpret_cast<const ::KMProto_KMProject_ClipRange&>(
      ::_KMProto_KMProject_ClipRange_default_instance_);
}
inline const ::KMProto_KMProject_ClipRange& KMProto_KMProject_VisualClip::cliprange() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.clipRange)
  return _internal_cliprange();
}
inline void KMProto_KMProject_VisualClip::unsafe_arena_set_allocated_cliprange(
    ::KMProto_KMProject_ClipRange* cliprange) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cliprange_);
  }
  cliprange_ = cliprange;
  if (cliprange) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KMProto.KMProject.VisualClip.clipRange)
}
inline ::KMProto_KMProject_ClipRange* KMProto_KMProject_VisualClip::release_cliprange() {
  _has_bits_[0] &= ~0x00008000u;
  ::KMProto_KMProject_ClipRange* temp = cliprange_;
  cliprange_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KMProto_KMProject_ClipRange* KMProto_KMProject_VisualClip::unsafe_arena_release_cliprange() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.VisualClip.clipRange)
  _has_bits_[0] &= ~0x00008000u;
  ::KMProto_KMProject_ClipRange* temp = cliprange_;
  cliprange_ = nullptr;
  return temp;
}
inline ::KMProto_KMProject_ClipRange* KMProto_KMProject_VisualClip::_internal_mutable_cliprange() {
  _has_bits_[0] |= 0x00008000u;
  if (cliprange_ == nullptr) {
    auto* p = CreateMaybeMessage<::KMProto_KMProject_ClipRange>(GetArena());
    cliprange_ = p;
  }
  return cliprange_;
}
inline ::KMProto_KMProject_ClipRange* KMProto_KMProject_VisualClip::mutable_cliprange() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.VisualClip.clipRange)
  return _internal_mutable_cliprange();
}
inline void KMProto_KMProject_VisualClip::set_allocated_cliprange(::KMProto_KMProject_ClipRange* cliprange) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cliprange_;
  }
  if (cliprange) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cliprange);
    if (message_arena != submessage_arena) {
      cliprange = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cliprange, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  cliprange_ = cliprange;
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.VisualClip.clipRange)
}

// optional string reverb = 191;
inline bool KMProto_KMProject_VisualClip::_internal_has_reverb() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_reverb() const {
  return _internal_has_reverb();
}
inline void KMProto_KMProject_VisualClip::clear_reverb() {
  reverb_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& KMProto_KMProject_VisualClip::reverb() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.reverb)
  return _internal_reverb();
}
inline void KMProto_KMProject_VisualClip::set_reverb(const std::string& value) {
  _internal_set_reverb(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VisualClip.reverb)
}
inline std::string* KMProto_KMProject_VisualClip::mutable_reverb() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.VisualClip.reverb)
  return _internal_mutable_reverb();
}
inline const std::string& KMProto_KMProject_VisualClip::_internal_reverb() const {
  return reverb_.Get();
}
inline void KMProto_KMProject_VisualClip::_internal_set_reverb(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  reverb_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProject_VisualClip::set_reverb(std::string&& value) {
  _has_bits_[0] |= 0x00000200u;
  reverb_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProject.VisualClip.reverb)
}
inline void KMProto_KMProject_VisualClip::set_reverb(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000200u;
  reverb_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProject.VisualClip.reverb)
}
inline void KMProto_KMProject_VisualClip::set_reverb(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000200u;
  reverb_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProject.VisualClip.reverb)
}
inline std::string* KMProto_KMProject_VisualClip::_internal_mutable_reverb() {
  _has_bits_[0] |= 0x00000200u;
  return reverb_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProject_VisualClip::release_reverb() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.VisualClip.reverb)
  if (!_internal_has_reverb()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  return reverb_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProject_VisualClip::set_allocated_reverb(std::string* reverb) {
  if (reverb != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  reverb_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reverb,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.VisualClip.reverb)
}

// optional .KMProto.KMProject.ColorAdjustment colorAdjustment = 192;
inline bool KMProto_KMProject_VisualClip::_internal_has_coloradjustment() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || coloradjustment_ != nullptr);
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_coloradjustment() const {
  return _internal_has_coloradjustment();
}
inline void KMProto_KMProject_VisualClip::clear_coloradjustment() {
  if (coloradjustment_ != nullptr) coloradjustment_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
inline const ::KMProto_KMProject_ColorAdjustment& KMProto_KMProject_VisualClip::_internal_coloradjustment() const {
  const ::KMProto_KMProject_ColorAdjustment* p = coloradjustment_;
  return p != nullptr ? *p : reinterpret_cast<const ::KMProto_KMProject_ColorAdjustment&>(
      ::_KMProto_KMProject_ColorAdjustment_default_instance_);
}
inline const ::KMProto_KMProject_ColorAdjustment& KMProto_KMProject_VisualClip::coloradjustment() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.colorAdjustment)
  return _internal_coloradjustment();
}
inline void KMProto_KMProject_VisualClip::unsafe_arena_set_allocated_coloradjustment(
    ::KMProto_KMProject_ColorAdjustment* coloradjustment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coloradjustment_);
  }
  coloradjustment_ = coloradjustment;
  if (coloradjustment) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KMProto.KMProject.VisualClip.colorAdjustment)
}
inline ::KMProto_KMProject_ColorAdjustment* KMProto_KMProject_VisualClip::release_coloradjustment() {
  _has_bits_[0] &= ~0x00010000u;
  ::KMProto_KMProject_ColorAdjustment* temp = coloradjustment_;
  coloradjustment_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KMProto_KMProject_ColorAdjustment* KMProto_KMProject_VisualClip::unsafe_arena_release_coloradjustment() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.VisualClip.colorAdjustment)
  _has_bits_[0] &= ~0x00010000u;
  ::KMProto_KMProject_ColorAdjustment* temp = coloradjustment_;
  coloradjustment_ = nullptr;
  return temp;
}
inline ::KMProto_KMProject_ColorAdjustment* KMProto_KMProject_VisualClip::_internal_mutable_coloradjustment() {
  _has_bits_[0] |= 0x00010000u;
  if (coloradjustment_ == nullptr) {
    auto* p = CreateMaybeMessage<::KMProto_KMProject_ColorAdjustment>(GetArena());
    coloradjustment_ = p;
  }
  return coloradjustment_;
}
inline ::KMProto_KMProject_ColorAdjustment* KMProto_KMProject_VisualClip::mutable_coloradjustment() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.VisualClip.colorAdjustment)
  return _internal_mutable_coloradjustment();
}
inline void KMProto_KMProject_VisualClip::set_allocated_coloradjustment(::KMProto_KMProject_ColorAdjustment* coloradjustment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete coloradjustment_;
  }
  if (coloradjustment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(coloradjustment);
    if (message_arena != submessage_arena) {
      coloradjustment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coloradjustment, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  coloradjustment_ = coloradjustment;
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.VisualClip.colorAdjustment)
}

// optional .KMProto.KMProject.ColorFilter colorFilter = 193;
inline bool KMProto_KMProject_VisualClip::_internal_has_colorfilter() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || colorfilter_ != nullptr);
  return value;
}
inline bool KMProto_KMProject_VisualClip::has_colorfilter() const {
  return _internal_has_colorfilter();
}
inline void KMProto_KMProject_VisualClip::clear_colorfilter() {
  if (colorfilter_ != nullptr) colorfilter_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
inline const ::KMProto_KMProject_ColorFilter& KMProto_KMProject_VisualClip::_internal_colorfilter() const {
  const ::KMProto_KMProject_ColorFilter* p = colorfilter_;
  return p != nullptr ? *p : reinterpret_cast<const ::KMProto_KMProject_ColorFilter&>(
      ::_KMProto_KMProject_ColorFilter_default_instance_);
}
inline const ::KMProto_KMProject_ColorFilter& KMProto_KMProject_VisualClip::colorfilter() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.colorFilter)
  return _internal_colorfilter();
}
inline void KMProto_KMProject_VisualClip::unsafe_arena_set_allocated_colorfilter(
    ::KMProto_KMProject_ColorFilter* colorfilter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(colorfilter_);
  }
  colorfilter_ = colorfilter;
  if (colorfilter) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KMProto.KMProject.VisualClip.colorFilter)
}
inline ::KMProto_KMProject_ColorFilter* KMProto_KMProject_VisualClip::release_colorfilter() {
  _has_bits_[0] &= ~0x00020000u;
  ::KMProto_KMProject_ColorFilter* temp = colorfilter_;
  colorfilter_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KMProto_KMProject_ColorFilter* KMProto_KMProject_VisualClip::unsafe_arena_release_colorfilter() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.VisualClip.colorFilter)
  _has_bits_[0] &= ~0x00020000u;
  ::KMProto_KMProject_ColorFilter* temp = colorfilter_;
  colorfilter_ = nullptr;
  return temp;
}
inline ::KMProto_KMProject_ColorFilter* KMProto_KMProject_VisualClip::_internal_mutable_colorfilter() {
  _has_bits_[0] |= 0x00020000u;
  if (colorfilter_ == nullptr) {
    auto* p = CreateMaybeMessage<::KMProto_KMProject_ColorFilter>(GetArena());
    colorfilter_ = p;
  }
  return colorfilter_;
}
inline ::KMProto_KMProject_ColorFilter* KMProto_KMProject_VisualClip::mutable_colorfilter() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.VisualClip.colorFilter)
  return _internal_mutable_colorfilter();
}
inline void KMProto_KMProject_VisualClip::set_allocated_colorfilter(::KMProto_KMProject_ColorFilter* colorfilter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete colorfilter_;
  }
  if (colorfilter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(colorfilter);
    if (message_arena != submessage_arena) {
      colorfilter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, colorfilter, submessage_arena);
    }
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  colorfilter_ = colorfilter;
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.VisualClip.colorFilter)
}

// repeated .KMProto.KMProject.EffectOptionItem effectOption = 194;
inline int KMProto_KMProject_VisualClip::_internal_effectoption_size() const {
  return effectoption_.size();
}
inline int KMProto_KMProject_VisualClip::effectoption_size() const {
  return _internal_effectoption_size();
}
inline void KMProto_KMProject_VisualClip::clear_effectoption() {
  effectoption_.Clear();
}
inline ::KMProto_KMProject_EffectOptionItem* KMProto_KMProject_VisualClip::mutable_effectoption(int index) {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.VisualClip.effectOption)
  return effectoption_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_EffectOptionItem >*
KMProto_KMProject_VisualClip::mutable_effectoption() {
  // @@protoc_insertion_point(field_mutable_list:KMProto.KMProject.VisualClip.effectOption)
  return &effectoption_;
}
inline const ::KMProto_KMProject_EffectOptionItem& KMProto_KMProject_VisualClip::_internal_effectoption(int index) const {
  return effectoption_.Get(index);
}
inline const ::KMProto_KMProject_EffectOptionItem& KMProto_KMProject_VisualClip::effectoption(int index) const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VisualClip.effectOption)
  return _internal_effectoption(index);
}
inline ::KMProto_KMProject_EffectOptionItem* KMProto_KMProject_VisualClip::_internal_add_effectoption() {
  return effectoption_.Add();
}
inline ::KMProto_KMProject_EffectOptionItem* KMProto_KMProject_VisualClip::add_effectoption() {
  // @@protoc_insertion_point(field_add:KMProto.KMProject.VisualClip.effectOption)
  return _internal_add_effectoption();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_EffectOptionItem >&
KMProto_KMProject_VisualClip::effectoption() const {
  // @@protoc_insertion_point(field_list:KMProto.KMProject.VisualClip.effectOption)
  return effectoption_;
}

// -------------------------------------------------------------------

// KMProto_KMProject_ClipRange

// optional string sourcePath = 1;
inline bool KMProto_KMProject_ClipRange::_internal_has_sourcepath() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KMProto_KMProject_ClipRange::has_sourcepath() const {
  return _internal_has_sourcepath();
}
inline void KMProto_KMProject_ClipRange::clear_sourcepath() {
  sourcepath_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KMProto_KMProject_ClipRange::sourcepath() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.ClipRange.sourcePath)
  return _internal_sourcepath();
}
inline void KMProto_KMProject_ClipRange::set_sourcepath(const std::string& value) {
  _internal_set_sourcepath(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.ClipRange.sourcePath)
}
inline std::string* KMProto_KMProject_ClipRange::mutable_sourcepath() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.ClipRange.sourcePath)
  return _internal_mutable_sourcepath();
}
inline const std::string& KMProto_KMProject_ClipRange::_internal_sourcepath() const {
  return sourcepath_.Get();
}
inline void KMProto_KMProject_ClipRange::_internal_set_sourcepath(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sourcepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProject_ClipRange::set_sourcepath(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sourcepath_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProject.ClipRange.sourcePath)
}
inline void KMProto_KMProject_ClipRange::set_sourcepath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sourcepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProject.ClipRange.sourcePath)
}
inline void KMProto_KMProject_ClipRange::set_sourcepath(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sourcepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProject.ClipRange.sourcePath)
}
inline std::string* KMProto_KMProject_ClipRange::_internal_mutable_sourcepath() {
  _has_bits_[0] |= 0x00000001u;
  return sourcepath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProject_ClipRange::release_sourcepath() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.ClipRange.sourcePath)
  if (!_internal_has_sourcepath()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sourcepath_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProject_ClipRange::set_allocated_sourcepath(std::string* sourcepath) {
  if (sourcepath != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sourcepath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sourcepath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.ClipRange.sourcePath)
}

// optional string sourcePhAssetId = 2;
inline bool KMProto_KMProject_ClipRange::_internal_has_sourcephassetid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KMProto_KMProject_ClipRange::has_sourcephassetid() const {
  return _internal_has_sourcephassetid();
}
inline void KMProto_KMProject_ClipRange::clear_sourcephassetid() {
  sourcephassetid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& KMProto_KMProject_ClipRange::sourcephassetid() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.ClipRange.sourcePhAssetId)
  return _internal_sourcephassetid();
}
inline void KMProto_KMProject_ClipRange::set_sourcephassetid(const std::string& value) {
  _internal_set_sourcephassetid(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.ClipRange.sourcePhAssetId)
}
inline std::string* KMProto_KMProject_ClipRange::mutable_sourcephassetid() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.ClipRange.sourcePhAssetId)
  return _internal_mutable_sourcephassetid();
}
inline const std::string& KMProto_KMProject_ClipRange::_internal_sourcephassetid() const {
  return sourcephassetid_.Get();
}
inline void KMProto_KMProject_ClipRange::_internal_set_sourcephassetid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sourcephassetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProject_ClipRange::set_sourcephassetid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  sourcephassetid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProject.ClipRange.sourcePhAssetId)
}
inline void KMProto_KMProject_ClipRange::set_sourcephassetid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  sourcephassetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProject.ClipRange.sourcePhAssetId)
}
inline void KMProto_KMProject_ClipRange::set_sourcephassetid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  sourcephassetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProject.ClipRange.sourcePhAssetId)
}
inline std::string* KMProto_KMProject_ClipRange::_internal_mutable_sourcephassetid() {
  _has_bits_[0] |= 0x00000002u;
  return sourcephassetid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProject_ClipRange::release_sourcephassetid() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.ClipRange.sourcePhAssetId)
  if (!_internal_has_sourcephassetid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return sourcephassetid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProject_ClipRange::set_allocated_sourcephassetid(std::string* sourcephassetid) {
  if (sourcephassetid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sourcephassetid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sourcephassetid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.ClipRange.sourcePhAssetId)
}

// optional int64 sourceRagneStartTime = 3;
inline bool KMProto_KMProject_ClipRange::_internal_has_sourceragnestarttime() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool KMProto_KMProject_ClipRange::has_sourceragnestarttime() const {
  return _internal_has_sourceragnestarttime();
}
inline void KMProto_KMProject_ClipRange::clear_sourceragnestarttime() {
  sourceragnestarttime_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KMProto_KMProject_ClipRange::_internal_sourceragnestarttime() const {
  return sourceragnestarttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KMProto_KMProject_ClipRange::sourceragnestarttime() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.ClipRange.sourceRagneStartTime)
  return _internal_sourceragnestarttime();
}
inline void KMProto_KMProject_ClipRange::_internal_set_sourceragnestarttime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  sourceragnestarttime_ = value;
}
inline void KMProto_KMProject_ClipRange::set_sourceragnestarttime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sourceragnestarttime(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.ClipRange.sourceRagneStartTime)
}

// optional int64 sourceRagneDuration = 4;
inline bool KMProto_KMProject_ClipRange::_internal_has_sourceragneduration() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool KMProto_KMProject_ClipRange::has_sourceragneduration() const {
  return _internal_has_sourceragneduration();
}
inline void KMProto_KMProject_ClipRange::clear_sourceragneduration() {
  sourceragneduration_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KMProto_KMProject_ClipRange::_internal_sourceragneduration() const {
  return sourceragneduration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KMProto_KMProject_ClipRange::sourceragneduration() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.ClipRange.sourceRagneDuration)
  return _internal_sourceragneduration();
}
inline void KMProto_KMProject_ClipRange::_internal_set_sourceragneduration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  sourceragneduration_ = value;
}
inline void KMProto_KMProject_ClipRange::set_sourceragneduration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sourceragneduration(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.ClipRange.sourceRagneDuration)
}

// -------------------------------------------------------------------

// KMProto_KMProject_EffectOptionItem

// optional .KMProto.KMProject.EffectOptionItemType type = 1;
inline bool KMProto_KMProject_EffectOptionItem::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool KMProto_KMProject_EffectOptionItem::has_type() const {
  return _internal_has_type();
}
inline void KMProto_KMProject_EffectOptionItem::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::KMProto_KMProject_EffectOptionItemType KMProto_KMProject_EffectOptionItem::_internal_type() const {
  return static_cast< ::KMProto_KMProject_EffectOptionItemType >(type_);
}
inline ::KMProto_KMProject_EffectOptionItemType KMProto_KMProject_EffectOptionItem::type() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.EffectOptionItem.type)
  return _internal_type();
}
inline void KMProto_KMProject_EffectOptionItem::_internal_set_type(::KMProto_KMProject_EffectOptionItemType value) {
  assert(::KMProto_KMProject_EffectOptionItemType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  type_ = value;
}
inline void KMProto_KMProject_EffectOptionItem::set_type(::KMProto_KMProject_EffectOptionItemType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.EffectOptionItem.type)
}

// optional string field_name = 2;
inline bool KMProto_KMProject_EffectOptionItem::_internal_has_field_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KMProto_KMProject_EffectOptionItem::has_field_name() const {
  return _internal_has_field_name();
}
inline void KMProto_KMProject_EffectOptionItem::clear_field_name() {
  field_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KMProto_KMProject_EffectOptionItem::field_name() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.EffectOptionItem.field_name)
  return _internal_field_name();
}
inline void KMProto_KMProject_EffectOptionItem::set_field_name(const std::string& value) {
  _internal_set_field_name(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.EffectOptionItem.field_name)
}
inline std::string* KMProto_KMProject_EffectOptionItem::mutable_field_name() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.EffectOptionItem.field_name)
  return _internal_mutable_field_name();
}
inline const std::string& KMProto_KMProject_EffectOptionItem::_internal_field_name() const {
  return field_name_.Get();
}
inline void KMProto_KMProject_EffectOptionItem::_internal_set_field_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  field_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProject_EffectOptionItem::set_field_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  field_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProject.EffectOptionItem.field_name)
}
inline void KMProto_KMProject_EffectOptionItem::set_field_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  field_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProject.EffectOptionItem.field_name)
}
inline void KMProto_KMProject_EffectOptionItem::set_field_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  field_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProject.EffectOptionItem.field_name)
}
inline std::string* KMProto_KMProject_EffectOptionItem::_internal_mutable_field_name() {
  _has_bits_[0] |= 0x00000001u;
  return field_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProject_EffectOptionItem::release_field_name() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.EffectOptionItem.field_name)
  if (!_internal_has_field_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return field_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProject_EffectOptionItem::set_allocated_field_name(std::string* field_name) {
  if (field_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  field_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), field_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.EffectOptionItem.field_name)
}

// optional string value = 3;
inline bool KMProto_KMProject_EffectOptionItem::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KMProto_KMProject_EffectOptionItem::has_value() const {
  return _internal_has_value();
}
inline void KMProto_KMProject_EffectOptionItem::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& KMProto_KMProject_EffectOptionItem::value() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.EffectOptionItem.value)
  return _internal_value();
}
inline void KMProto_KMProject_EffectOptionItem::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.EffectOptionItem.value)
}
inline std::string* KMProto_KMProject_EffectOptionItem::mutable_value() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.EffectOptionItem.value)
  return _internal_mutable_value();
}
inline const std::string& KMProto_KMProject_EffectOptionItem::_internal_value() const {
  return value_.Get();
}
inline void KMProto_KMProject_EffectOptionItem::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProject_EffectOptionItem::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProject.EffectOptionItem.value)
}
inline void KMProto_KMProject_EffectOptionItem::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProject.EffectOptionItem.value)
}
inline void KMProto_KMProject_EffectOptionItem::set_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProject.EffectOptionItem.value)
}
inline std::string* KMProto_KMProject_EffectOptionItem::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProject_EffectOptionItem::release_value() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.EffectOptionItem.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProject_EffectOptionItem::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.EffectOptionItem.value)
}

// optional string text_font = 4;
inline bool KMProto_KMProject_EffectOptionItem::_internal_has_text_font() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool KMProto_KMProject_EffectOptionItem::has_text_font() const {
  return _internal_has_text_font();
}
inline void KMProto_KMProject_EffectOptionItem::clear_text_font() {
  text_font_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& KMProto_KMProject_EffectOptionItem::text_font() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.EffectOptionItem.text_font)
  return _internal_text_font();
}
inline void KMProto_KMProject_EffectOptionItem::set_text_font(const std::string& value) {
  _internal_set_text_font(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.EffectOptionItem.text_font)
}
inline std::string* KMProto_KMProject_EffectOptionItem::mutable_text_font() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.EffectOptionItem.text_font)
  return _internal_mutable_text_font();
}
inline const std::string& KMProto_KMProject_EffectOptionItem::_internal_text_font() const {
  return text_font_.Get();
}
inline void KMProto_KMProject_EffectOptionItem::_internal_set_text_font(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  text_font_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProject_EffectOptionItem::set_text_font(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  text_font_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProject.EffectOptionItem.text_font)
}
inline void KMProto_KMProject_EffectOptionItem::set_text_font(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  text_font_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProject.EffectOptionItem.text_font)
}
inline void KMProto_KMProject_EffectOptionItem::set_text_font(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  text_font_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProject.EffectOptionItem.text_font)
}
inline std::string* KMProto_KMProject_EffectOptionItem::_internal_mutable_text_font() {
  _has_bits_[0] |= 0x00000004u;
  return text_font_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProject_EffectOptionItem::release_text_font() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.EffectOptionItem.text_font)
  if (!_internal_has_text_font()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return text_font_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProject_EffectOptionItem::set_allocated_text_font(std::string* text_font) {
  if (text_font != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  text_font_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text_font,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.EffectOptionItem.text_font)
}

// -------------------------------------------------------------------

// KMProto_KMProject_StringHashMap

// repeated .KMProto.KMProject.StringHashMapEntry entries = 1;
inline int KMProto_KMProject_StringHashMap::_internal_entries_size() const {
  return entries_.size();
}
inline int KMProto_KMProject_StringHashMap::entries_size() const {
  return _internal_entries_size();
}
inline void KMProto_KMProject_StringHashMap::clear_entries() {
  entries_.Clear();
}
inline ::KMProto_KMProject_StringHashMapEntry* KMProto_KMProject_StringHashMap::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.StringHashMap.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_StringHashMapEntry >*
KMProto_KMProject_StringHashMap::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:KMProto.KMProject.StringHashMap.entries)
  return &entries_;
}
inline const ::KMProto_KMProject_StringHashMapEntry& KMProto_KMProject_StringHashMap::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::KMProto_KMProject_StringHashMapEntry& KMProto_KMProject_StringHashMap::entries(int index) const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.StringHashMap.entries)
  return _internal_entries(index);
}
inline ::KMProto_KMProject_StringHashMapEntry* KMProto_KMProject_StringHashMap::_internal_add_entries() {
  return entries_.Add();
}
inline ::KMProto_KMProject_StringHashMapEntry* KMProto_KMProject_StringHashMap::add_entries() {
  // @@protoc_insertion_point(field_add:KMProto.KMProject.StringHashMap.entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_StringHashMapEntry >&
KMProto_KMProject_StringHashMap::entries() const {
  // @@protoc_insertion_point(field_list:KMProto.KMProject.StringHashMap.entries)
  return entries_;
}

// -------------------------------------------------------------------

// KMProto_KMProject_StringHashMapEntry

// optional string key = 1;
inline bool KMProto_KMProject_StringHashMapEntry::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KMProto_KMProject_StringHashMapEntry::has_key() const {
  return _internal_has_key();
}
inline void KMProto_KMProject_StringHashMapEntry::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KMProto_KMProject_StringHashMapEntry::key() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.StringHashMapEntry.key)
  return _internal_key();
}
inline void KMProto_KMProject_StringHashMapEntry::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.StringHashMapEntry.key)
}
inline std::string* KMProto_KMProject_StringHashMapEntry::mutable_key() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.StringHashMapEntry.key)
  return _internal_mutable_key();
}
inline const std::string& KMProto_KMProject_StringHashMapEntry::_internal_key() const {
  return key_.Get();
}
inline void KMProto_KMProject_StringHashMapEntry::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProject_StringHashMapEntry::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProject.StringHashMapEntry.key)
}
inline void KMProto_KMProject_StringHashMapEntry::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProject.StringHashMapEntry.key)
}
inline void KMProto_KMProject_StringHashMapEntry::set_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProject.StringHashMapEntry.key)
}
inline std::string* KMProto_KMProject_StringHashMapEntry::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProject_StringHashMapEntry::release_key() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.StringHashMapEntry.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProject_StringHashMapEntry::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.StringHashMapEntry.key)
}

// optional string value = 2;
inline bool KMProto_KMProject_StringHashMapEntry::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KMProto_KMProject_StringHashMapEntry::has_value() const {
  return _internal_has_value();
}
inline void KMProto_KMProject_StringHashMapEntry::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& KMProto_KMProject_StringHashMapEntry::value() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.StringHashMapEntry.value)
  return _internal_value();
}
inline void KMProto_KMProject_StringHashMapEntry::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.StringHashMapEntry.value)
}
inline std::string* KMProto_KMProject_StringHashMapEntry::mutable_value() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.StringHashMapEntry.value)
  return _internal_mutable_value();
}
inline const std::string& KMProto_KMProject_StringHashMapEntry::_internal_value() const {
  return value_.Get();
}
inline void KMProto_KMProject_StringHashMapEntry::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProject_StringHashMapEntry::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProject.StringHashMapEntry.value)
}
inline void KMProto_KMProject_StringHashMapEntry::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProject.StringHashMapEntry.value)
}
inline void KMProto_KMProject_StringHashMapEntry::set_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProject.StringHashMapEntry.value)
}
inline std::string* KMProto_KMProject_StringHashMapEntry::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProject_StringHashMapEntry::release_value() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.StringHashMapEntry.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProject_StringHashMapEntry::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.StringHashMapEntry.value)
}

// -------------------------------------------------------------------

// KMProto_KMProject_Matrix

// repeated float element = 1 [packed = true];
inline int KMProto_KMProject_Matrix::_internal_element_size() const {
  return element_.size();
}
inline int KMProto_KMProject_Matrix::element_size() const {
  return _internal_element_size();
}
inline void KMProto_KMProject_Matrix::clear_element() {
  element_.Clear();
}
inline float KMProto_KMProject_Matrix::_internal_element(int index) const {
  return element_.Get(index);
}
inline float KMProto_KMProject_Matrix::element(int index) const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.Matrix.element)
  return _internal_element(index);
}
inline void KMProto_KMProject_Matrix::set_element(int index, float value) {
  element_.Set(index, value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.Matrix.element)
}
inline void KMProto_KMProject_Matrix::_internal_add_element(float value) {
  element_.Add(value);
}
inline void KMProto_KMProject_Matrix::add_element(float value) {
  _internal_add_element(value);
  // @@protoc_insertion_point(field_add:KMProto.KMProject.Matrix.element)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
KMProto_KMProject_Matrix::_internal_element() const {
  return element_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
KMProto_KMProject_Matrix::element() const {
  // @@protoc_insertion_point(field_list:KMProto.KMProject.Matrix.element)
  return _internal_element();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
KMProto_KMProject_Matrix::_internal_mutable_element() {
  return &element_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
KMProto_KMProject_Matrix::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:KMProto.KMProject.Matrix.element)
  return _internal_mutable_element();
}

// -------------------------------------------------------------------

// KMProto_KMProject_Transition

// optional string captureFilename = 100;
inline bool KMProto_KMProject_Transition::_internal_has_capturefilename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KMProto_KMProject_Transition::has_capturefilename() const {
  return _internal_has_capturefilename();
}
inline void KMProto_KMProject_Transition::clear_capturefilename() {
  capturefilename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KMProto_KMProject_Transition::capturefilename() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.Transition.captureFilename)
  return _internal_capturefilename();
}
inline void KMProto_KMProject_Transition::set_capturefilename(const std::string& value) {
  _internal_set_capturefilename(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.Transition.captureFilename)
}
inline std::string* KMProto_KMProject_Transition::mutable_capturefilename() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.Transition.captureFilename)
  return _internal_mutable_capturefilename();
}
inline const std::string& KMProto_KMProject_Transition::_internal_capturefilename() const {
  return capturefilename_.Get();
}
inline void KMProto_KMProject_Transition::_internal_set_capturefilename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  capturefilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProject_Transition::set_capturefilename(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  capturefilename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProject.Transition.captureFilename)
}
inline void KMProto_KMProject_Transition::set_capturefilename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  capturefilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProject.Transition.captureFilename)
}
inline void KMProto_KMProject_Transition::set_capturefilename(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  capturefilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProject.Transition.captureFilename)
}
inline std::string* KMProto_KMProject_Transition::_internal_mutable_capturefilename() {
  _has_bits_[0] |= 0x00000001u;
  return capturefilename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProject_Transition::release_capturefilename() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.Transition.captureFilename)
  if (!_internal_has_capturefilename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return capturefilename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProject_Transition::set_allocated_capturefilename(std::string* capturefilename) {
  if (capturefilename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  capturefilename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), capturefilename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.Transition.captureFilename)
}

// optional string transition_effect_id = 101;
inline bool KMProto_KMProject_Transition::_internal_has_transition_effect_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KMProto_KMProject_Transition::has_transition_effect_id() const {
  return _internal_has_transition_effect_id();
}
inline void KMProto_KMProject_Transition::clear_transition_effect_id() {
  transition_effect_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& KMProto_KMProject_Transition::transition_effect_id() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.Transition.transition_effect_id)
  return _internal_transition_effect_id();
}
inline void KMProto_KMProject_Transition::set_transition_effect_id(const std::string& value) {
  _internal_set_transition_effect_id(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.Transition.transition_effect_id)
}
inline std::string* KMProto_KMProject_Transition::mutable_transition_effect_id() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.Transition.transition_effect_id)
  return _internal_mutable_transition_effect_id();
}
inline const std::string& KMProto_KMProject_Transition::_internal_transition_effect_id() const {
  return transition_effect_id_.Get();
}
inline void KMProto_KMProject_Transition::_internal_set_transition_effect_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  transition_effect_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProject_Transition::set_transition_effect_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  transition_effect_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProject.Transition.transition_effect_id)
}
inline void KMProto_KMProject_Transition::set_transition_effect_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  transition_effect_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProject.Transition.transition_effect_id)
}
inline void KMProto_KMProject_Transition::set_transition_effect_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  transition_effect_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProject.Transition.transition_effect_id)
}
inline std::string* KMProto_KMProject_Transition::_internal_mutable_transition_effect_id() {
  _has_bits_[0] |= 0x00000002u;
  return transition_effect_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProject_Transition::release_transition_effect_id() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.Transition.transition_effect_id)
  if (!_internal_has_transition_effect_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return transition_effect_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProject_Transition::set_allocated_transition_effect_id(std::string* transition_effect_id) {
  if (transition_effect_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  transition_effect_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transition_effect_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.Transition.transition_effect_id)
}

// optional .KMProto.KMProject.ThemeEffectType auto_theme_effect = 102;
inline bool KMProto_KMProject_Transition::_internal_has_auto_theme_effect() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool KMProto_KMProject_Transition::has_auto_theme_effect() const {
  return _internal_has_auto_theme_effect();
}
inline void KMProto_KMProject_Transition::clear_auto_theme_effect() {
  auto_theme_effect_ = 1;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::KMProto_KMProject_ThemeEffectType KMProto_KMProject_Transition::_internal_auto_theme_effect() const {
  return static_cast< ::KMProto_KMProject_ThemeEffectType >(auto_theme_effect_);
}
inline ::KMProto_KMProject_ThemeEffectType KMProto_KMProject_Transition::auto_theme_effect() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.Transition.auto_theme_effect)
  return _internal_auto_theme_effect();
}
inline void KMProto_KMProject_Transition::_internal_set_auto_theme_effect(::KMProto_KMProject_ThemeEffectType value) {
  assert(::KMProto_KMProject_ThemeEffectType_IsValid(value));
  _has_bits_[0] |= 0x00001000u;
  auto_theme_effect_ = value;
}
inline void KMProto_KMProject_Transition::set_auto_theme_effect(::KMProto_KMProject_ThemeEffectType value) {
  _internal_set_auto_theme_effect(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.Transition.auto_theme_effect)
}

// optional int32 transition_duration = 103;
inline bool KMProto_KMProject_Transition::_internal_has_transition_duration() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool KMProto_KMProject_Transition::has_transition_duration() const {
  return _internal_has_transition_duration();
}
inline void KMProto_KMProject_Transition::clear_transition_duration() {
  transition_duration_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_Transition::_internal_transition_duration() const {
  return transition_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_Transition::transition_duration() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.Transition.transition_duration)
  return _internal_transition_duration();
}
inline void KMProto_KMProject_Transition::_internal_set_transition_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  transition_duration_ = value;
}
inline void KMProto_KMProject_Transition::set_transition_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_transition_duration(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.Transition.transition_duration)
}

// optional int32 transition_engine_duration = 104;
inline bool KMProto_KMProject_Transition::_internal_has_transition_engine_duration() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool KMProto_KMProject_Transition::has_transition_engine_duration() const {
  return _internal_has_transition_engine_duration();
}
inline void KMProto_KMProject_Transition::clear_transition_engine_duration() {
  transition_engine_duration_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_Transition::_internal_transition_engine_duration() const {
  return transition_engine_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_Transition::transition_engine_duration() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.Transition.transition_engine_duration)
  return _internal_transition_engine_duration();
}
inline void KMProto_KMProject_Transition::_internal_set_transition_engine_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  transition_engine_duration_ = value;
}
inline void KMProto_KMProject_Transition::set_transition_engine_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_transition_engine_duration(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.Transition.transition_engine_duration)
}

// optional int32 transition_overlap_percent = 105;
inline bool KMProto_KMProject_Transition::_internal_has_transition_overlap_percent() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool KMProto_KMProject_Transition::has_transition_overlap_percent() const {
  return _internal_has_transition_overlap_percent();
}
inline void KMProto_KMProject_Transition::clear_transition_overlap_percent() {
  transition_overlap_percent_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_Transition::_internal_transition_overlap_percent() const {
  return transition_overlap_percent_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_Transition::transition_overlap_percent() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.Transition.transition_overlap_percent)
  return _internal_transition_overlap_percent();
}
inline void KMProto_KMProject_Transition::_internal_set_transition_overlap_percent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  transition_overlap_percent_ = value;
}
inline void KMProto_KMProject_Transition::set_transition_overlap_percent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_transition_overlap_percent(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.Transition.transition_overlap_percent)
}

// optional int32 transition_offset_percent = 106;
inline bool KMProto_KMProject_Transition::_internal_has_transition_offset_percent() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool KMProto_KMProject_Transition::has_transition_offset_percent() const {
  return _internal_has_transition_offset_percent();
}
inline void KMProto_KMProject_Transition::clear_transition_offset_percent() {
  transition_offset_percent_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_Transition::_internal_transition_offset_percent() const {
  return transition_offset_percent_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_Transition::transition_offset_percent() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.Transition.transition_offset_percent)
  return _internal_transition_offset_percent();
}
inline void KMProto_KMProject_Transition::_internal_set_transition_offset_percent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  transition_offset_percent_ = value;
}
inline void KMProto_KMProject_Transition::set_transition_offset_percent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_transition_offset_percent(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.Transition.transition_offset_percent)
}

// optional bool disabled = 107;
inline bool KMProto_KMProject_Transition::_internal_has_disabled() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool KMProto_KMProject_Transition::has_disabled() const {
  return _internal_has_disabled();
}
inline void KMProto_KMProject_Transition::clear_disabled() {
  disabled_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool KMProto_KMProject_Transition::_internal_disabled() const {
  return disabled_;
}
inline bool KMProto_KMProject_Transition::disabled() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.Transition.disabled)
  return _internal_disabled();
}
inline void KMProto_KMProject_Transition::_internal_set_disabled(bool value) {
  _has_bits_[0] |= 0x00000200u;
  disabled_ = value;
}
inline void KMProto_KMProject_Transition::set_disabled(bool value) {
  _internal_set_disabled(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.Transition.disabled)
}

// optional int32 minimum_duration = 108;
inline bool KMProto_KMProject_Transition::_internal_has_minimum_duration() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool KMProto_KMProject_Transition::has_minimum_duration() const {
  return _internal_has_minimum_duration();
}
inline void KMProto_KMProject_Transition::clear_minimum_duration() {
  minimum_duration_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_Transition::_internal_minimum_duration() const {
  return minimum_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_Transition::minimum_duration() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.Transition.minimum_duration)
  return _internal_minimum_duration();
}
inline void KMProto_KMProject_Transition::_internal_set_minimum_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  minimum_duration_ = value;
}
inline void KMProto_KMProject_Transition::set_minimum_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_minimum_duration(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.Transition.minimum_duration)
}

// optional int32 maximum_duration = 109;
inline bool KMProto_KMProject_Transition::_internal_has_maximum_duration() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool KMProto_KMProject_Transition::has_maximum_duration() const {
  return _internal_has_maximum_duration();
}
inline void KMProto_KMProject_Transition::clear_maximum_duration() {
  maximum_duration_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_Transition::_internal_maximum_duration() const {
  return maximum_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_Transition::maximum_duration() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.Transition.maximum_duration)
  return _internal_maximum_duration();
}
inline void KMProto_KMProject_Transition::_internal_set_maximum_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  maximum_duration_ = value;
}
inline void KMProto_KMProject_Transition::set_maximum_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maximum_duration(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.Transition.maximum_duration)
}

// optional .KMProto.KMProject.StringHashMap effect_options = 110;
inline bool KMProto_KMProject_Transition::_internal_has_effect_options() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || effect_options_ != nullptr);
  return value;
}
inline bool KMProto_KMProject_Transition::has_effect_options() const {
  return _internal_has_effect_options();
}
inline void KMProto_KMProject_Transition::clear_effect_options() {
  if (effect_options_ != nullptr) effect_options_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::KMProto_KMProject_StringHashMap& KMProto_KMProject_Transition::_internal_effect_options() const {
  const ::KMProto_KMProject_StringHashMap* p = effect_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::KMProto_KMProject_StringHashMap&>(
      ::_KMProto_KMProject_StringHashMap_default_instance_);
}
inline const ::KMProto_KMProject_StringHashMap& KMProto_KMProject_Transition::effect_options() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.Transition.effect_options)
  return _internal_effect_options();
}
inline void KMProto_KMProject_Transition::unsafe_arena_set_allocated_effect_options(
    ::KMProto_KMProject_StringHashMap* effect_options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(effect_options_);
  }
  effect_options_ = effect_options;
  if (effect_options) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KMProto.KMProject.Transition.effect_options)
}
inline ::KMProto_KMProject_StringHashMap* KMProto_KMProject_Transition::release_effect_options() {
  _has_bits_[0] &= ~0x00000004u;
  ::KMProto_KMProject_StringHashMap* temp = effect_options_;
  effect_options_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KMProto_KMProject_StringHashMap* KMProto_KMProject_Transition::unsafe_arena_release_effect_options() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.Transition.effect_options)
  _has_bits_[0] &= ~0x00000004u;
  ::KMProto_KMProject_StringHashMap* temp = effect_options_;
  effect_options_ = nullptr;
  return temp;
}
inline ::KMProto_KMProject_StringHashMap* KMProto_KMProject_Transition::_internal_mutable_effect_options() {
  _has_bits_[0] |= 0x00000004u;
  if (effect_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::KMProto_KMProject_StringHashMap>(GetArena());
    effect_options_ = p;
  }
  return effect_options_;
}
inline ::KMProto_KMProject_StringHashMap* KMProto_KMProject_Transition::mutable_effect_options() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.Transition.effect_options)
  return _internal_mutable_effect_options();
}
inline void KMProto_KMProject_Transition::set_allocated_effect_options(::KMProto_KMProject_StringHashMap* effect_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete effect_options_;
  }
  if (effect_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(effect_options);
    if (message_arena != submessage_arena) {
      effect_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, effect_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  effect_options_ = effect_options;
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.Transition.effect_options)
}

// optional int32 duration_limit = 111;
inline bool KMProto_KMProject_Transition::_internal_has_duration_limit() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool KMProto_KMProject_Transition::has_duration_limit() const {
  return _internal_has_duration_limit();
}
inline void KMProto_KMProject_Transition::clear_duration_limit() {
  duration_limit_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_Transition::_internal_duration_limit() const {
  return duration_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_Transition::duration_limit() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.Transition.duration_limit)
  return _internal_duration_limit();
}
inline void KMProto_KMProject_Transition::_internal_set_duration_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  duration_limit_ = value;
}
inline void KMProto_KMProject_Transition::set_duration_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_duration_limit(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.Transition.duration_limit)
}

// optional bool allow_overlap = 112;
inline bool KMProto_KMProject_Transition::_internal_has_allow_overlap() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool KMProto_KMProject_Transition::has_allow_overlap() const {
  return _internal_has_allow_overlap();
}
inline void KMProto_KMProject_Transition::clear_allow_overlap() {
  allow_overlap_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool KMProto_KMProject_Transition::_internal_allow_overlap() const {
  return allow_overlap_;
}
inline bool KMProto_KMProject_Transition::allow_overlap() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.Transition.allow_overlap)
  return _internal_allow_overlap();
}
inline void KMProto_KMProject_Transition::_internal_set_allow_overlap(bool value) {
  _has_bits_[0] |= 0x00000400u;
  allow_overlap_ = value;
}
inline void KMProto_KMProject_Transition::set_allow_overlap(bool value) {
  _internal_set_allow_overlap(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.Transition.allow_overlap)
}

// repeated .KMProto.KMProject.EffectOptionItem effectOption = 113;
inline int KMProto_KMProject_Transition::_internal_effectoption_size() const {
  return effectoption_.size();
}
inline int KMProto_KMProject_Transition::effectoption_size() const {
  return _internal_effectoption_size();
}
inline void KMProto_KMProject_Transition::clear_effectoption() {
  effectoption_.Clear();
}
inline ::KMProto_KMProject_EffectOptionItem* KMProto_KMProject_Transition::mutable_effectoption(int index) {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.Transition.effectOption)
  return effectoption_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_EffectOptionItem >*
KMProto_KMProject_Transition::mutable_effectoption() {
  // @@protoc_insertion_point(field_mutable_list:KMProto.KMProject.Transition.effectOption)
  return &effectoption_;
}
inline const ::KMProto_KMProject_EffectOptionItem& KMProto_KMProject_Transition::_internal_effectoption(int index) const {
  return effectoption_.Get(index);
}
inline const ::KMProto_KMProject_EffectOptionItem& KMProto_KMProject_Transition::effectoption(int index) const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.Transition.effectOption)
  return _internal_effectoption(index);
}
inline ::KMProto_KMProject_EffectOptionItem* KMProto_KMProject_Transition::_internal_add_effectoption() {
  return effectoption_.Add();
}
inline ::KMProto_KMProject_EffectOptionItem* KMProto_KMProject_Transition::add_effectoption() {
  // @@protoc_insertion_point(field_add:KMProto.KMProject.Transition.effectOption)
  return _internal_add_effectoption();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_EffectOptionItem >&
KMProto_KMProject_Transition::effectoption() const {
  // @@protoc_insertion_point(field_list:KMProto.KMProject.Transition.effectOption)
  return effectoption_;
}

// -------------------------------------------------------------------

// KMProto_KMProject_AudioClip

// optional int32 extra_relative_start_time = 100;
inline bool KMProto_KMProject_AudioClip::_internal_has_extra_relative_start_time() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool KMProto_KMProject_AudioClip::has_extra_relative_start_time() const {
  return _internal_has_extra_relative_start_time();
}
inline void KMProto_KMProject_AudioClip::clear_extra_relative_start_time() {
  extra_relative_start_time_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_AudioClip::_internal_extra_relative_start_time() const {
  return extra_relative_start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_AudioClip::extra_relative_start_time() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.AudioClip.extra_relative_start_time)
  return _internal_extra_relative_start_time();
}
inline void KMProto_KMProject_AudioClip::_internal_set_extra_relative_start_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  extra_relative_start_time_ = value;
}
inline void KMProto_KMProject_AudioClip::set_extra_relative_start_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_extra_relative_start_time(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.AudioClip.extra_relative_start_time)
}

// optional int32 relative_start_time = 101;
inline bool KMProto_KMProject_AudioClip::_internal_has_relative_start_time() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool KMProto_KMProject_AudioClip::has_relative_start_time() const {
  return _internal_has_relative_start_time();
}
inline void KMProto_KMProject_AudioClip::clear_relative_start_time() {
  relative_start_time_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_AudioClip::_internal_relative_start_time() const {
  return relative_start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_AudioClip::relative_start_time() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.AudioClip.relative_start_time)
  return _internal_relative_start_time();
}
inline void KMProto_KMProject_AudioClip::_internal_set_relative_start_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  relative_start_time_ = value;
}
inline void KMProto_KMProject_AudioClip::set_relative_start_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_relative_start_time(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.AudioClip.relative_start_time)
}

// optional int32 relative_end_time = 102;
inline bool KMProto_KMProject_AudioClip::_internal_has_relative_end_time() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool KMProto_KMProject_AudioClip::has_relative_end_time() const {
  return _internal_has_relative_end_time();
}
inline void KMProto_KMProject_AudioClip::clear_relative_end_time() {
  relative_end_time_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_AudioClip::_internal_relative_end_time() const {
  return relative_end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_AudioClip::relative_end_time() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.AudioClip.relative_end_time)
  return _internal_relative_end_time();
}
inline void KMProto_KMProject_AudioClip::_internal_set_relative_end_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  relative_end_time_ = value;
}
inline void KMProto_KMProject_AudioClip::set_relative_end_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_relative_end_time(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.AudioClip.relative_end_time)
}

// optional int32 saved_relative_end_time = 103;
inline bool KMProto_KMProject_AudioClip::_internal_has_saved_relative_end_time() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool KMProto_KMProject_AudioClip::has_saved_relative_end_time() const {
  return _internal_has_saved_relative_end_time();
}
inline void KMProto_KMProject_AudioClip::clear_saved_relative_end_time() {
  saved_relative_end_time_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_AudioClip::_internal_saved_relative_end_time() const {
  return saved_relative_end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_AudioClip::saved_relative_end_time() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.AudioClip.saved_relative_end_time)
  return _internal_saved_relative_end_time();
}
inline void KMProto_KMProject_AudioClip::_internal_set_saved_relative_end_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  saved_relative_end_time_ = value;
}
inline void KMProto_KMProject_AudioClip::set_saved_relative_end_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_saved_relative_end_time(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.AudioClip.saved_relative_end_time)
}

// optional int32 saved_relative_start_time = 104;
inline bool KMProto_KMProject_AudioClip::_internal_has_saved_relative_start_time() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool KMProto_KMProject_AudioClip::has_saved_relative_start_time() const {
  return _internal_has_saved_relative_start_time();
}
inline void KMProto_KMProject_AudioClip::clear_saved_relative_start_time() {
  saved_relative_start_time_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_AudioClip::_internal_saved_relative_start_time() const {
  return saved_relative_start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_AudioClip::saved_relative_start_time() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.AudioClip.saved_relative_start_time)
  return _internal_saved_relative_start_time();
}
inline void KMProto_KMProject_AudioClip::_internal_set_saved_relative_start_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  saved_relative_start_time_ = value;
}
inline void KMProto_KMProject_AudioClip::set_saved_relative_start_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_saved_relative_start_time(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.AudioClip.saved_relative_start_time)
}

// optional int32 engine_clip_id = 105;
inline bool KMProto_KMProject_AudioClip::_internal_has_engine_clip_id() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool KMProto_KMProject_AudioClip::has_engine_clip_id() const {
  return _internal_has_engine_clip_id();
}
inline void KMProto_KMProject_AudioClip::clear_engine_clip_id() {
  engine_clip_id_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_AudioClip::_internal_engine_clip_id() const {
  return engine_clip_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_AudioClip::engine_clip_id() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.AudioClip.engine_clip_id)
  return _internal_engine_clip_id();
}
inline void KMProto_KMProject_AudioClip::_internal_set_engine_clip_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  engine_clip_id_ = value;
}
inline void KMProto_KMProject_AudioClip::set_engine_clip_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_engine_clip_id(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.AudioClip.engine_clip_id)
}

// optional int32 duration = 106;
inline bool KMProto_KMProject_AudioClip::_internal_has_duration() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool KMProto_KMProject_AudioClip::has_duration() const {
  return _internal_has_duration();
}
inline void KMProto_KMProject_AudioClip::clear_duration() {
  duration_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_AudioClip::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_AudioClip::duration() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.AudioClip.duration)
  return _internal_duration();
}
inline void KMProto_KMProject_AudioClip::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  duration_ = value;
}
inline void KMProto_KMProject_AudioClip::set_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.AudioClip.duration)
}

// optional int32 trim_time_start = 107;
inline bool KMProto_KMProject_AudioClip::_internal_has_trim_time_start() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool KMProto_KMProject_AudioClip::has_trim_time_start() const {
  return _internal_has_trim_time_start();
}
inline void KMProto_KMProject_AudioClip::clear_trim_time_start() {
  trim_time_start_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_AudioClip::_internal_trim_time_start() const {
  return trim_time_start_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_AudioClip::trim_time_start() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.AudioClip.trim_time_start)
  return _internal_trim_time_start();
}
inline void KMProto_KMProject_AudioClip::_internal_set_trim_time_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  trim_time_start_ = value;
}
inline void KMProto_KMProject_AudioClip::set_trim_time_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_trim_time_start(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.AudioClip.trim_time_start)
}

// optional int32 trim_time_end = 108;
inline bool KMProto_KMProject_AudioClip::_internal_has_trim_time_end() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool KMProto_KMProject_AudioClip::has_trim_time_end() const {
  return _internal_has_trim_time_end();
}
inline void KMProto_KMProject_AudioClip::clear_trim_time_end() {
  trim_time_end_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_AudioClip::_internal_trim_time_end() const {
  return trim_time_end_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_AudioClip::trim_time_end() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.AudioClip.trim_time_end)
  return _internal_trim_time_end();
}
inline void KMProto_KMProject_AudioClip::_internal_set_trim_time_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00020000u;
  trim_time_end_ = value;
}
inline void KMProto_KMProject_AudioClip::set_trim_time_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_trim_time_end(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.AudioClip.trim_time_end)
}

// optional int32 saved_trim_time_start = 109;
inline bool KMProto_KMProject_AudioClip::_internal_has_saved_trim_time_start() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool KMProto_KMProject_AudioClip::has_saved_trim_time_start() const {
  return _internal_has_saved_trim_time_start();
}
inline void KMProto_KMProject_AudioClip::clear_saved_trim_time_start() {
  saved_trim_time_start_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_AudioClip::_internal_saved_trim_time_start() const {
  return saved_trim_time_start_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_AudioClip::saved_trim_time_start() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.AudioClip.saved_trim_time_start)
  return _internal_saved_trim_time_start();
}
inline void KMProto_KMProject_AudioClip::_internal_set_saved_trim_time_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00040000u;
  saved_trim_time_start_ = value;
}
inline void KMProto_KMProject_AudioClip::set_saved_trim_time_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_saved_trim_time_start(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.AudioClip.saved_trim_time_start)
}

// optional int32 saved_trim_time_end = 110;
inline bool KMProto_KMProject_AudioClip::_internal_has_saved_trim_time_end() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool KMProto_KMProject_AudioClip::has_saved_trim_time_end() const {
  return _internal_has_saved_trim_time_end();
}
inline void KMProto_KMProject_AudioClip::clear_saved_trim_time_end() {
  saved_trim_time_end_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_AudioClip::_internal_saved_trim_time_end() const {
  return saved_trim_time_end_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_AudioClip::saved_trim_time_end() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.AudioClip.saved_trim_time_end)
  return _internal_saved_trim_time_end();
}
inline void KMProto_KMProject_AudioClip::_internal_set_saved_trim_time_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00080000u;
  saved_trim_time_end_ = value;
}
inline void KMProto_KMProject_AudioClip::set_saved_trim_time_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_saved_trim_time_end(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.AudioClip.saved_trim_time_end)
}

// optional int32 clip_volume = 111;
inline bool KMProto_KMProject_AudioClip::_internal_has_clip_volume() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool KMProto_KMProject_AudioClip::has_clip_volume() const {
  return _internal_has_clip_volume();
}
inline void KMProto_KMProject_AudioClip::clear_clip_volume() {
  clip_volume_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_AudioClip::_internal_clip_volume() const {
  return clip_volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_AudioClip::clip_volume() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.AudioClip.clip_volume)
  return _internal_clip_volume();
}
inline void KMProto_KMProject_AudioClip::_internal_set_clip_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00100000u;
  clip_volume_ = value;
}
inline void KMProto_KMProject_AudioClip::set_clip_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_clip_volume(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.AudioClip.clip_volume)
}

// optional string media_path = 112;
inline bool KMProto_KMProject_AudioClip::_internal_has_media_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KMProto_KMProject_AudioClip::has_media_path() const {
  return _internal_has_media_path();
}
inline void KMProto_KMProject_AudioClip::clear_media_path() {
  media_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KMProto_KMProject_AudioClip::media_path() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.AudioClip.media_path)
  return _internal_media_path();
}
inline void KMProto_KMProject_AudioClip::set_media_path(const std::string& value) {
  _internal_set_media_path(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.AudioClip.media_path)
}
inline std::string* KMProto_KMProject_AudioClip::mutable_media_path() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.AudioClip.media_path)
  return _internal_mutable_media_path();
}
inline const std::string& KMProto_KMProject_AudioClip::_internal_media_path() const {
  return media_path_.Get();
}
inline void KMProto_KMProject_AudioClip::_internal_set_media_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  media_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProject_AudioClip::set_media_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  media_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProject.AudioClip.media_path)
}
inline void KMProto_KMProject_AudioClip::set_media_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  media_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProject.AudioClip.media_path)
}
inline void KMProto_KMProject_AudioClip::set_media_path(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  media_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProject.AudioClip.media_path)
}
inline std::string* KMProto_KMProject_AudioClip::_internal_mutable_media_path() {
  _has_bits_[0] |= 0x00000001u;
  return media_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProject_AudioClip::release_media_path() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.AudioClip.media_path)
  if (!_internal_has_media_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return media_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProject_AudioClip::set_allocated_media_path(std::string* media_path) {
  if (media_path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  media_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), media_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.AudioClip.media_path)
}

// optional string original_media_path = 113;
inline bool KMProto_KMProject_AudioClip::_internal_has_original_media_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KMProto_KMProject_AudioClip::has_original_media_path() const {
  return _internal_has_original_media_path();
}
inline void KMProto_KMProject_AudioClip::clear_original_media_path() {
  original_media_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& KMProto_KMProject_AudioClip::original_media_path() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.AudioClip.original_media_path)
  return _internal_original_media_path();
}
inline void KMProto_KMProject_AudioClip::set_original_media_path(const std::string& value) {
  _internal_set_original_media_path(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.AudioClip.original_media_path)
}
inline std::string* KMProto_KMProject_AudioClip::mutable_original_media_path() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.AudioClip.original_media_path)
  return _internal_mutable_original_media_path();
}
inline const std::string& KMProto_KMProject_AudioClip::_internal_original_media_path() const {
  return original_media_path_.Get();
}
inline void KMProto_KMProject_AudioClip::_internal_set_original_media_path(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  original_media_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProject_AudioClip::set_original_media_path(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  original_media_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProject.AudioClip.original_media_path)
}
inline void KMProto_KMProject_AudioClip::set_original_media_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  original_media_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProject.AudioClip.original_media_path)
}
inline void KMProto_KMProject_AudioClip::set_original_media_path(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  original_media_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProject.AudioClip.original_media_path)
}
inline std::string* KMProto_KMProject_AudioClip::_internal_mutable_original_media_path() {
  _has_bits_[0] |= 0x00000002u;
  return original_media_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProject_AudioClip::release_original_media_path() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.AudioClip.original_media_path)
  if (!_internal_has_original_media_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return original_media_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProject_AudioClip::set_allocated_original_media_path(std::string* original_media_path) {
  if (original_media_path != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  original_media_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), original_media_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.AudioClip.original_media_path)
}

// optional string media_title = 114;
inline bool KMProto_KMProject_AudioClip::_internal_has_media_title() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool KMProto_KMProject_AudioClip::has_media_title() const {
  return _internal_has_media_title();
}
inline void KMProto_KMProject_AudioClip::clear_media_title() {
  media_title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& KMProto_KMProject_AudioClip::media_title() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.AudioClip.media_title)
  return _internal_media_title();
}
inline void KMProto_KMProject_AudioClip::set_media_title(const std::string& value) {
  _internal_set_media_title(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.AudioClip.media_title)
}
inline std::string* KMProto_KMProject_AudioClip::mutable_media_title() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.AudioClip.media_title)
  return _internal_mutable_media_title();
}
inline const std::string& KMProto_KMProject_AudioClip::_internal_media_title() const {
  return media_title_.Get();
}
inline void KMProto_KMProject_AudioClip::_internal_set_media_title(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  media_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProject_AudioClip::set_media_title(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  media_title_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProject.AudioClip.media_title)
}
inline void KMProto_KMProject_AudioClip::set_media_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  media_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProject.AudioClip.media_title)
}
inline void KMProto_KMProject_AudioClip::set_media_title(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  media_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProject.AudioClip.media_title)
}
inline std::string* KMProto_KMProject_AudioClip::_internal_mutable_media_title() {
  _has_bits_[0] |= 0x00000004u;
  return media_title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProject_AudioClip::release_media_title() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.AudioClip.media_title)
  if (!_internal_has_media_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return media_title_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProject_AudioClip::set_allocated_media_title(std::string* media_title) {
  if (media_title != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  media_title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), media_title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.AudioClip.media_title)
}

// optional bool mute_audio = 115;
inline bool KMProto_KMProject_AudioClip::_internal_has_mute_audio() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool KMProto_KMProject_AudioClip::has_mute_audio() const {
  return _internal_has_mute_audio();
}
inline void KMProto_KMProject_AudioClip::clear_mute_audio() {
  mute_audio_ = false;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool KMProto_KMProject_AudioClip::_internal_mute_audio() const {
  return mute_audio_;
}
inline bool KMProto_KMProject_AudioClip::mute_audio() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.AudioClip.mute_audio)
  return _internal_mute_audio();
}
inline void KMProto_KMProject_AudioClip::_internal_set_mute_audio(bool value) {
  _has_bits_[0] |= 0x00400000u;
  mute_audio_ = value;
}
inline void KMProto_KMProject_AudioClip::set_mute_audio(bool value) {
  _internal_set_mute_audio(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.AudioClip.mute_audio)
}

// optional bool loop = 116;
inline bool KMProto_KMProject_AudioClip::_internal_has_loop() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool KMProto_KMProject_AudioClip::has_loop() const {
  return _internal_has_loop();
}
inline void KMProto_KMProject_AudioClip::clear_loop() {
  loop_ = false;
  _has_bits_[0] &= ~0x00800000u;
}
inline bool KMProto_KMProject_AudioClip::_internal_loop() const {
  return loop_;
}
inline bool KMProto_KMProject_AudioClip::loop() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.AudioClip.loop)
  return _internal_loop();
}
inline void KMProto_KMProject_AudioClip::_internal_set_loop(bool value) {
  _has_bits_[0] |= 0x00800000u;
  loop_ = value;
}
inline void KMProto_KMProject_AudioClip::set_loop(bool value) {
  _internal_set_loop(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.AudioClip.loop)
}

// optional bool is_voice_recording = 117;
inline bool KMProto_KMProject_AudioClip::_internal_has_is_voice_recording() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_AudioClip::has_is_voice_recording() const {
  return _internal_has_is_voice_recording();
}
inline void KMProto_KMProject_AudioClip::clear_is_voice_recording() {
  is_voice_recording_ = false;
  _has_bits_[0] &= ~0x01000000u;
}
inline bool KMProto_KMProject_AudioClip::_internal_is_voice_recording() const {
  return is_voice_recording_;
}
inline bool KMProto_KMProject_AudioClip::is_voice_recording() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.AudioClip.is_voice_recording)
  return _internal_is_voice_recording();
}
inline void KMProto_KMProject_AudioClip::_internal_set_is_voice_recording(bool value) {
  _has_bits_[0] |= 0x01000000u;
  is_voice_recording_ = value;
}
inline void KMProto_KMProject_AudioClip::set_is_voice_recording(bool value) {
  _internal_set_is_voice_recording(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.AudioClip.is_voice_recording)
}

// optional bool is_pending_voice_recording = 118;
inline bool KMProto_KMProject_AudioClip::_internal_has_is_pending_voice_recording() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_AudioClip::has_is_pending_voice_recording() const {
  return _internal_has_is_pending_voice_recording();
}
inline void KMProto_KMProject_AudioClip::clear_is_pending_voice_recording() {
  is_pending_voice_recording_ = false;
  _has_bits_[0] &= ~0x02000000u;
}
inline bool KMProto_KMProject_AudioClip::_internal_is_pending_voice_recording() const {
  return is_pending_voice_recording_;
}
inline bool KMProto_KMProject_AudioClip::is_pending_voice_recording() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.AudioClip.is_pending_voice_recording)
  return _internal_is_pending_voice_recording();
}
inline void KMProto_KMProject_AudioClip::_internal_set_is_pending_voice_recording(bool value) {
  _has_bits_[0] |= 0x02000000u;
  is_pending_voice_recording_ = value;
}
inline void KMProto_KMProject_AudioClip::set_is_pending_voice_recording(bool value) {
  _internal_set_is_pending_voice_recording(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.AudioClip.is_pending_voice_recording)
}

// optional bool is_extract_audio = 119;
inline bool KMProto_KMProject_AudioClip::_internal_has_is_extract_audio() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_AudioClip::has_is_extract_audio() const {
  return _internal_has_is_extract_audio();
}
inline void KMProto_KMProject_AudioClip::clear_is_extract_audio() {
  is_extract_audio_ = false;
  _has_bits_[0] &= ~0x04000000u;
}
inline bool KMProto_KMProject_AudioClip::_internal_is_extract_audio() const {
  return is_extract_audio_;
}
inline bool KMProto_KMProject_AudioClip::is_extract_audio() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.AudioClip.is_extract_audio)
  return _internal_is_extract_audio();
}
inline void KMProto_KMProject_AudioClip::_internal_set_is_extract_audio(bool value) {
  _has_bits_[0] |= 0x04000000u;
  is_extract_audio_ = value;
}
inline void KMProto_KMProject_AudioClip::set_is_extract_audio(bool value) {
  _internal_set_is_extract_audio(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.AudioClip.is_extract_audio)
}

// optional uint64 video_clip_item_uuid_lsb = 120;
inline bool KMProto_KMProject_AudioClip::_internal_has_video_clip_item_uuid_lsb() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool KMProto_KMProject_AudioClip::has_video_clip_item_uuid_lsb() const {
  return _internal_has_video_clip_item_uuid_lsb();
}
inline void KMProto_KMProject_AudioClip::clear_video_clip_item_uuid_lsb() {
  video_clip_item_uuid_lsb_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KMProto_KMProject_AudioClip::_internal_video_clip_item_uuid_lsb() const {
  return video_clip_item_uuid_lsb_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KMProto_KMProject_AudioClip::video_clip_item_uuid_lsb() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.AudioClip.video_clip_item_uuid_lsb)
  return _internal_video_clip_item_uuid_lsb();
}
inline void KMProto_KMProject_AudioClip::_internal_set_video_clip_item_uuid_lsb(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00200000u;
  video_clip_item_uuid_lsb_ = value;
}
inline void KMProto_KMProject_AudioClip::set_video_clip_item_uuid_lsb(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_video_clip_item_uuid_lsb(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.AudioClip.video_clip_item_uuid_lsb)
}

// optional uint64 video_clip_item_uuid_msb = 121;
inline bool KMProto_KMProject_AudioClip::_internal_has_video_clip_item_uuid_msb() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_AudioClip::has_video_clip_item_uuid_msb() const {
  return _internal_has_video_clip_item_uuid_msb();
}
inline void KMProto_KMProject_AudioClip::clear_video_clip_item_uuid_msb() {
  video_clip_item_uuid_msb_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x40000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KMProto_KMProject_AudioClip::_internal_video_clip_item_uuid_msb() const {
  return video_clip_item_uuid_msb_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KMProto_KMProject_AudioClip::video_clip_item_uuid_msb() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.AudioClip.video_clip_item_uuid_msb)
  return _internal_video_clip_item_uuid_msb();
}
inline void KMProto_KMProject_AudioClip::_internal_set_video_clip_item_uuid_msb(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x40000000u;
  video_clip_item_uuid_msb_ = value;
}
inline void KMProto_KMProject_AudioClip::set_video_clip_item_uuid_msb(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_video_clip_item_uuid_msb(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.AudioClip.video_clip_item_uuid_msb)
}

// optional bool is_bg_music = 122;
inline bool KMProto_KMProject_AudioClip::_internal_has_is_bg_music() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_AudioClip::has_is_bg_music() const {
  return _internal_has_is_bg_music();
}
inline void KMProto_KMProject_AudioClip::clear_is_bg_music() {
  is_bg_music_ = false;
  _has_bits_[0] &= ~0x08000000u;
}
inline bool KMProto_KMProject_AudioClip::_internal_is_bg_music() const {
  return is_bg_music_;
}
inline bool KMProto_KMProject_AudioClip::is_bg_music() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.AudioClip.is_bg_music)
  return _internal_is_bg_music();
}
inline void KMProto_KMProject_AudioClip::_internal_set_is_bg_music(bool value) {
  _has_bits_[0] |= 0x08000000u;
  is_bg_music_ = value;
}
inline void KMProto_KMProject_AudioClip::set_is_bg_music(bool value) {
  _internal_set_is_bg_music(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.AudioClip.is_bg_music)
}

// repeated int32 volume_envelope_time = 123 [packed = true];
inline int KMProto_KMProject_AudioClip::_internal_volume_envelope_time_size() const {
  return volume_envelope_time_.size();
}
inline int KMProto_KMProject_AudioClip::volume_envelope_time_size() const {
  return _internal_volume_envelope_time_size();
}
inline void KMProto_KMProject_AudioClip::clear_volume_envelope_time() {
  volume_envelope_time_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_AudioClip::_internal_volume_envelope_time(int index) const {
  return volume_envelope_time_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_AudioClip::volume_envelope_time(int index) const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.AudioClip.volume_envelope_time)
  return _internal_volume_envelope_time(index);
}
inline void KMProto_KMProject_AudioClip::set_volume_envelope_time(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  volume_envelope_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.AudioClip.volume_envelope_time)
}
inline void KMProto_KMProject_AudioClip::_internal_add_volume_envelope_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  volume_envelope_time_.Add(value);
}
inline void KMProto_KMProject_AudioClip::add_volume_envelope_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_volume_envelope_time(value);
  // @@protoc_insertion_point(field_add:KMProto.KMProject.AudioClip.volume_envelope_time)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
KMProto_KMProject_AudioClip::_internal_volume_envelope_time() const {
  return volume_envelope_time_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
KMProto_KMProject_AudioClip::volume_envelope_time() const {
  // @@protoc_insertion_point(field_list:KMProto.KMProject.AudioClip.volume_envelope_time)
  return _internal_volume_envelope_time();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
KMProto_KMProject_AudioClip::_internal_mutable_volume_envelope_time() {
  return &volume_envelope_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
KMProto_KMProject_AudioClip::mutable_volume_envelope_time() {
  // @@protoc_insertion_point(field_mutable_list:KMProto.KMProject.AudioClip.volume_envelope_time)
  return _internal_mutable_volume_envelope_time();
}

// repeated int32 volume_envelope_level = 124 [packed = true];
inline int KMProto_KMProject_AudioClip::_internal_volume_envelope_level_size() const {
  return volume_envelope_level_.size();
}
inline int KMProto_KMProject_AudioClip::volume_envelope_level_size() const {
  return _internal_volume_envelope_level_size();
}
inline void KMProto_KMProject_AudioClip::clear_volume_envelope_level() {
  volume_envelope_level_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_AudioClip::_internal_volume_envelope_level(int index) const {
  return volume_envelope_level_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_AudioClip::volume_envelope_level(int index) const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.AudioClip.volume_envelope_level)
  return _internal_volume_envelope_level(index);
}
inline void KMProto_KMProject_AudioClip::set_volume_envelope_level(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  volume_envelope_level_.Set(index, value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.AudioClip.volume_envelope_level)
}
inline void KMProto_KMProject_AudioClip::_internal_add_volume_envelope_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  volume_envelope_level_.Add(value);
}
inline void KMProto_KMProject_AudioClip::add_volume_envelope_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_volume_envelope_level(value);
  // @@protoc_insertion_point(field_add:KMProto.KMProject.AudioClip.volume_envelope_level)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
KMProto_KMProject_AudioClip::_internal_volume_envelope_level() const {
  return volume_envelope_level_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
KMProto_KMProject_AudioClip::volume_envelope_level() const {
  // @@protoc_insertion_point(field_list:KMProto.KMProject.AudioClip.volume_envelope_level)
  return _internal_volume_envelope_level();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
KMProto_KMProject_AudioClip::_internal_mutable_volume_envelope_level() {
  return &volume_envelope_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
KMProto_KMProject_AudioClip::mutable_volume_envelope_level() {
  // @@protoc_insertion_point(field_mutable_list:KMProto.KMProject.AudioClip.volume_envelope_level)
  return _internal_mutable_volume_envelope_level();
}

// optional float clip_width = 125;
inline bool KMProto_KMProject_AudioClip::_internal_has_clip_width() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_AudioClip::has_clip_width() const {
  return _internal_has_clip_width();
}
inline void KMProto_KMProject_AudioClip::clear_clip_width() {
  clip_width_ = 0;
  _has_bits_[0] &= ~0x80000000u;
}
inline float KMProto_KMProject_AudioClip::_internal_clip_width() const {
  return clip_width_;
}
inline float KMProto_KMProject_AudioClip::clip_width() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.AudioClip.clip_width)
  return _internal_clip_width();
}
inline void KMProto_KMProject_AudioClip::_internal_set_clip_width(float value) {
  _has_bits_[0] |= 0x80000000u;
  clip_width_ = value;
}
inline void KMProto_KMProject_AudioClip::set_clip_width(float value) {
  _internal_set_clip_width(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.AudioClip.clip_width)
}

// optional bool pinned = 126;
inline bool KMProto_KMProject_AudioClip::_internal_has_pinned() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_AudioClip::has_pinned() const {
  return _internal_has_pinned();
}
inline void KMProto_KMProject_AudioClip::clear_pinned() {
  pinned_ = false;
  _has_bits_[0] &= ~0x10000000u;
}
inline bool KMProto_KMProject_AudioClip::_internal_pinned() const {
  return pinned_;
}
inline bool KMProto_KMProject_AudioClip::pinned() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.AudioClip.pinned)
  return _internal_pinned();
}
inline void KMProto_KMProject_AudioClip::_internal_set_pinned(bool value) {
  _has_bits_[0] |= 0x10000000u;
  pinned_ = value;
}
inline void KMProto_KMProject_AudioClip::set_pinned(bool value) {
  _internal_set_pinned(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.AudioClip.pinned)
}

// optional int32 saved_loop_duration = 127;
inline bool KMProto_KMProject_AudioClip::_internal_has_saved_loop_duration() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool KMProto_KMProject_AudioClip::has_saved_loop_duration() const {
  return _internal_has_saved_loop_duration();
}
inline void KMProto_KMProject_AudioClip::clear_saved_loop_duration() {
  saved_loop_duration_ = 0;
  _has_bits_[1] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_AudioClip::_internal_saved_loop_duration() const {
  return saved_loop_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_AudioClip::saved_loop_duration() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.AudioClip.saved_loop_duration)
  return _internal_saved_loop_duration();
}
inline void KMProto_KMProject_AudioClip::_internal_set_saved_loop_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000001u;
  saved_loop_duration_ = value;
}
inline void KMProto_KMProject_AudioClip::set_saved_loop_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_saved_loop_duration(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.AudioClip.saved_loop_duration)
}

// optional bool extend_to_end = 128;
inline bool KMProto_KMProject_AudioClip::_internal_has_extend_to_end() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_AudioClip::has_extend_to_end() const {
  return _internal_has_extend_to_end();
}
inline void KMProto_KMProject_AudioClip::clear_extend_to_end() {
  extend_to_end_ = false;
  _has_bits_[0] &= ~0x20000000u;
}
inline bool KMProto_KMProject_AudioClip::_internal_extend_to_end() const {
  return extend_to_end_;
}
inline bool KMProto_KMProject_AudioClip::extend_to_end() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.AudioClip.extend_to_end)
  return _internal_extend_to_end();
}
inline void KMProto_KMProject_AudioClip::_internal_set_extend_to_end(bool value) {
  _has_bits_[0] |= 0x20000000u;
  extend_to_end_ = value;
}
inline void KMProto_KMProject_AudioClip::set_extend_to_end(bool value) {
  _internal_set_extend_to_end(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.AudioClip.extend_to_end)
}

// optional int32 voice_changer = 129;
inline bool KMProto_KMProject_AudioClip::_internal_has_voice_changer() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool KMProto_KMProject_AudioClip::has_voice_changer() const {
  return _internal_has_voice_changer();
}
inline void KMProto_KMProject_AudioClip::clear_voice_changer() {
  voice_changer_ = 0;
  _has_bits_[1] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_AudioClip::_internal_voice_changer() const {
  return voice_changer_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_AudioClip::voice_changer() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.AudioClip.voice_changer)
  return _internal_voice_changer();
}
inline void KMProto_KMProject_AudioClip::_internal_set_voice_changer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000002u;
  voice_changer_ = value;
}
inline void KMProto_KMProject_AudioClip::set_voice_changer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_voice_changer(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.AudioClip.voice_changer)
}

// optional int32 pan_left = 130;
inline bool KMProto_KMProject_AudioClip::_internal_has_pan_left() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool KMProto_KMProject_AudioClip::has_pan_left() const {
  return _internal_has_pan_left();
}
inline void KMProto_KMProject_AudioClip::clear_pan_left() {
  pan_left_ = 0;
  _has_bits_[1] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_AudioClip::_internal_pan_left() const {
  return pan_left_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_AudioClip::pan_left() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.AudioClip.pan_left)
  return _internal_pan_left();
}
inline void KMProto_KMProject_AudioClip::_internal_set_pan_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000004u;
  pan_left_ = value;
}
inline void KMProto_KMProject_AudioClip::set_pan_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pan_left(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.AudioClip.pan_left)
}

// optional int32 pan_right = 131;
inline bool KMProto_KMProject_AudioClip::_internal_has_pan_right() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool KMProto_KMProject_AudioClip::has_pan_right() const {
  return _internal_has_pan_right();
}
inline void KMProto_KMProject_AudioClip::clear_pan_right() {
  pan_right_ = 0;
  _has_bits_[1] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_AudioClip::_internal_pan_right() const {
  return pan_right_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_AudioClip::pan_right() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.AudioClip.pan_right)
  return _internal_pan_right();
}
inline void KMProto_KMProject_AudioClip::_internal_set_pan_right(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000008u;
  pan_right_ = value;
}
inline void KMProto_KMProject_AudioClip::set_pan_right(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pan_right(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.AudioClip.pan_right)
}

// optional int32 compressor = 132;
inline bool KMProto_KMProject_AudioClip::_internal_has_compressor() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool KMProto_KMProject_AudioClip::has_compressor() const {
  return _internal_has_compressor();
}
inline void KMProto_KMProject_AudioClip::clear_compressor() {
  compressor_ = 0;
  _has_bits_[1] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_AudioClip::_internal_compressor() const {
  return compressor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_AudioClip::compressor() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.AudioClip.compressor)
  return _internal_compressor();
}
inline void KMProto_KMProject_AudioClip::_internal_set_compressor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000010u;
  compressor_ = value;
}
inline void KMProto_KMProject_AudioClip::set_compressor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_compressor(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.AudioClip.compressor)
}

// optional int32 pitch_factor = 133;
inline bool KMProto_KMProject_AudioClip::_internal_has_pitch_factor() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool KMProto_KMProject_AudioClip::has_pitch_factor() const {
  return _internal_has_pitch_factor();
}
inline void KMProto_KMProject_AudioClip::clear_pitch_factor() {
  pitch_factor_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_AudioClip::_internal_pitch_factor() const {
  return pitch_factor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_AudioClip::pitch_factor() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.AudioClip.pitch_factor)
  return _internal_pitch_factor();
}
inline void KMProto_KMProject_AudioClip::_internal_set_pitch_factor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  pitch_factor_ = value;
}
inline void KMProto_KMProject_AudioClip::set_pitch_factor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pitch_factor(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.AudioClip.pitch_factor)
}

// optional string clip_name = 134;
inline bool KMProto_KMProject_AudioClip::_internal_has_clip_name() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool KMProto_KMProject_AudioClip::has_clip_name() const {
  return _internal_has_clip_name();
}
inline void KMProto_KMProject_AudioClip::clear_clip_name() {
  clip_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& KMProto_KMProject_AudioClip::clip_name() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.AudioClip.clip_name)
  return _internal_clip_name();
}
inline void KMProto_KMProject_AudioClip::set_clip_name(const std::string& value) {
  _internal_set_clip_name(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.AudioClip.clip_name)
}
inline std::string* KMProto_KMProject_AudioClip::mutable_clip_name() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.AudioClip.clip_name)
  return _internal_mutable_clip_name();
}
inline const std::string& KMProto_KMProject_AudioClip::_internal_clip_name() const {
  return clip_name_.Get();
}
inline void KMProto_KMProject_AudioClip::_internal_set_clip_name(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  clip_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProject_AudioClip::set_clip_name(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  clip_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProject.AudioClip.clip_name)
}
inline void KMProto_KMProject_AudioClip::set_clip_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  clip_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProject.AudioClip.clip_name)
}
inline void KMProto_KMProject_AudioClip::set_clip_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  clip_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProject.AudioClip.clip_name)
}
inline std::string* KMProto_KMProject_AudioClip::_internal_mutable_clip_name() {
  _has_bits_[0] |= 0x00000008u;
  return clip_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProject_AudioClip::release_clip_name() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.AudioClip.clip_name)
  if (!_internal_has_clip_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return clip_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProject_AudioClip::set_allocated_clip_name(std::string* clip_name) {
  if (clip_name != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  clip_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clip_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.AudioClip.clip_name)
}

// optional string audio_asset_id_ios = 135;
inline bool KMProto_KMProject_AudioClip::_internal_has_audio_asset_id_ios() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool KMProto_KMProject_AudioClip::has_audio_asset_id_ios() const {
  return _internal_has_audio_asset_id_ios();
}
inline void KMProto_KMProject_AudioClip::clear_audio_asset_id_ios() {
  audio_asset_id_ios_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& KMProto_KMProject_AudioClip::audio_asset_id_ios() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.AudioClip.audio_asset_id_ios)
  return _internal_audio_asset_id_ios();
}
inline void KMProto_KMProject_AudioClip::set_audio_asset_id_ios(const std::string& value) {
  _internal_set_audio_asset_id_ios(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.AudioClip.audio_asset_id_ios)
}
inline std::string* KMProto_KMProject_AudioClip::mutable_audio_asset_id_ios() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.AudioClip.audio_asset_id_ios)
  return _internal_mutable_audio_asset_id_ios();
}
inline const std::string& KMProto_KMProject_AudioClip::_internal_audio_asset_id_ios() const {
  return audio_asset_id_ios_.Get();
}
inline void KMProto_KMProject_AudioClip::_internal_set_audio_asset_id_ios(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  audio_asset_id_ios_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProject_AudioClip::set_audio_asset_id_ios(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  audio_asset_id_ios_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProject.AudioClip.audio_asset_id_ios)
}
inline void KMProto_KMProject_AudioClip::set_audio_asset_id_ios(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  audio_asset_id_ios_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProject.AudioClip.audio_asset_id_ios)
}
inline void KMProto_KMProject_AudioClip::set_audio_asset_id_ios(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  audio_asset_id_ios_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProject.AudioClip.audio_asset_id_ios)
}
inline std::string* KMProto_KMProject_AudioClip::_internal_mutable_audio_asset_id_ios() {
  _has_bits_[0] |= 0x00000010u;
  return audio_asset_id_ios_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProject_AudioClip::release_audio_asset_id_ios() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.AudioClip.audio_asset_id_ios)
  if (!_internal_has_audio_asset_id_ios()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return audio_asset_id_ios_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProject_AudioClip::set_allocated_audio_asset_id_ios(std::string* audio_asset_id_ios) {
  if (audio_asset_id_ios != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  audio_asset_id_ios_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), audio_asset_id_ios,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.AudioClip.audio_asset_id_ios)
}

// optional string enhancedAudioFilter = 136;
inline bool KMProto_KMProject_AudioClip::_internal_has_enhancedaudiofilter() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool KMProto_KMProject_AudioClip::has_enhancedaudiofilter() const {
  return _internal_has_enhancedaudiofilter();
}
inline void KMProto_KMProject_AudioClip::clear_enhancedaudiofilter() {
  enhancedaudiofilter_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& KMProto_KMProject_AudioClip::enhancedaudiofilter() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.AudioClip.enhancedAudioFilter)
  return _internal_enhancedaudiofilter();
}
inline void KMProto_KMProject_AudioClip::set_enhancedaudiofilter(const std::string& value) {
  _internal_set_enhancedaudiofilter(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.AudioClip.enhancedAudioFilter)
}
inline std::string* KMProto_KMProject_AudioClip::mutable_enhancedaudiofilter() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.AudioClip.enhancedAudioFilter)
  return _internal_mutable_enhancedaudiofilter();
}
inline const std::string& KMProto_KMProject_AudioClip::_internal_enhancedaudiofilter() const {
  return enhancedaudiofilter_.Get();
}
inline void KMProto_KMProject_AudioClip::_internal_set_enhancedaudiofilter(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  enhancedaudiofilter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProject_AudioClip::set_enhancedaudiofilter(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  enhancedaudiofilter_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProject.AudioClip.enhancedAudioFilter)
}
inline void KMProto_KMProject_AudioClip::set_enhancedaudiofilter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  enhancedaudiofilter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProject.AudioClip.enhancedAudioFilter)
}
inline void KMProto_KMProject_AudioClip::set_enhancedaudiofilter(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  enhancedaudiofilter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProject.AudioClip.enhancedAudioFilter)
}
inline std::string* KMProto_KMProject_AudioClip::_internal_mutable_enhancedaudiofilter() {
  _has_bits_[0] |= 0x00000020u;
  return enhancedaudiofilter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProject_AudioClip::release_enhancedaudiofilter() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.AudioClip.enhancedAudioFilter)
  if (!_internal_has_enhancedaudiofilter()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return enhancedaudiofilter_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProject_AudioClip::set_allocated_enhancedaudiofilter(std::string* enhancedaudiofilter) {
  if (enhancedaudiofilter != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  enhancedaudiofilter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), enhancedaudiofilter,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.AudioClip.enhancedAudioFilter)
}

// optional string equalizer = 137;
inline bool KMProto_KMProject_AudioClip::_internal_has_equalizer() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool KMProto_KMProject_AudioClip::has_equalizer() const {
  return _internal_has_equalizer();
}
inline void KMProto_KMProject_AudioClip::clear_equalizer() {
  equalizer_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& KMProto_KMProject_AudioClip::equalizer() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.AudioClip.equalizer)
  return _internal_equalizer();
}
inline void KMProto_KMProject_AudioClip::set_equalizer(const std::string& value) {
  _internal_set_equalizer(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.AudioClip.equalizer)
}
inline std::string* KMProto_KMProject_AudioClip::mutable_equalizer() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.AudioClip.equalizer)
  return _internal_mutable_equalizer();
}
inline const std::string& KMProto_KMProject_AudioClip::_internal_equalizer() const {
  return equalizer_.Get();
}
inline void KMProto_KMProject_AudioClip::_internal_set_equalizer(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  equalizer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProject_AudioClip::set_equalizer(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  equalizer_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProject.AudioClip.equalizer)
}
inline void KMProto_KMProject_AudioClip::set_equalizer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  equalizer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProject.AudioClip.equalizer)
}
inline void KMProto_KMProject_AudioClip::set_equalizer(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  equalizer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProject.AudioClip.equalizer)
}
inline std::string* KMProto_KMProject_AudioClip::_internal_mutable_equalizer() {
  _has_bits_[0] |= 0x00000040u;
  return equalizer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProject_AudioClip::release_equalizer() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.AudioClip.equalizer)
  if (!_internal_has_equalizer()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return equalizer_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProject_AudioClip::set_allocated_equalizer(std::string* equalizer) {
  if (equalizer != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  equalizer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), equalizer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.AudioClip.equalizer)
}

// optional string reverb = 138;
inline bool KMProto_KMProject_AudioClip::_internal_has_reverb() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool KMProto_KMProject_AudioClip::has_reverb() const {
  return _internal_has_reverb();
}
inline void KMProto_KMProject_AudioClip::clear_reverb() {
  reverb_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& KMProto_KMProject_AudioClip::reverb() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.AudioClip.reverb)
  return _internal_reverb();
}
inline void KMProto_KMProject_AudioClip::set_reverb(const std::string& value) {
  _internal_set_reverb(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.AudioClip.reverb)
}
inline std::string* KMProto_KMProject_AudioClip::mutable_reverb() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.AudioClip.reverb)
  return _internal_mutable_reverb();
}
inline const std::string& KMProto_KMProject_AudioClip::_internal_reverb() const {
  return reverb_.Get();
}
inline void KMProto_KMProject_AudioClip::_internal_set_reverb(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  reverb_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProject_AudioClip::set_reverb(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  reverb_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProject.AudioClip.reverb)
}
inline void KMProto_KMProject_AudioClip::set_reverb(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  reverb_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProject.AudioClip.reverb)
}
inline void KMProto_KMProject_AudioClip::set_reverb(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  reverb_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProject.AudioClip.reverb)
}
inline std::string* KMProto_KMProject_AudioClip::_internal_mutable_reverb() {
  _has_bits_[0] |= 0x00000080u;
  return reverb_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProject_AudioClip::release_reverb() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.AudioClip.reverb)
  if (!_internal_has_reverb()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return reverb_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProject_AudioClip::set_allocated_reverb(std::string* reverb) {
  if (reverb != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  reverb_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reverb,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.AudioClip.reverb)
}

// -------------------------------------------------------------------

// KMProto_KMProject_LayerCommon

// optional int32 start_time = 100;
inline bool KMProto_KMProject_LayerCommon::_internal_has_start_time() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool KMProto_KMProject_LayerCommon::has_start_time() const {
  return _internal_has_start_time();
}
inline void KMProto_KMProject_LayerCommon::clear_start_time() {
  start_time_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_LayerCommon::_internal_start_time() const {
  return start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_LayerCommon::start_time() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.LayerCommon.start_time)
  return _internal_start_time();
}
inline void KMProto_KMProject_LayerCommon::_internal_set_start_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  start_time_ = value;
}
inline void KMProto_KMProject_LayerCommon::set_start_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.LayerCommon.start_time)
}

// optional int32 end_time = 101;
inline bool KMProto_KMProject_LayerCommon::_internal_has_end_time() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool KMProto_KMProject_LayerCommon::has_end_time() const {
  return _internal_has_end_time();
}
inline void KMProto_KMProject_LayerCommon::clear_end_time() {
  end_time_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_LayerCommon::_internal_end_time() const {
  return end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_LayerCommon::end_time() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.LayerCommon.end_time)
  return _internal_end_time();
}
inline void KMProto_KMProject_LayerCommon::_internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  end_time_ = value;
}
inline void KMProto_KMProject_LayerCommon::set_end_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.LayerCommon.end_time)
}

// optional bool pinned = 102;
inline bool KMProto_KMProject_LayerCommon::_internal_has_pinned() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool KMProto_KMProject_LayerCommon::has_pinned() const {
  return _internal_has_pinned();
}
inline void KMProto_KMProject_LayerCommon::clear_pinned() {
  pinned_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool KMProto_KMProject_LayerCommon::_internal_pinned() const {
  return pinned_;
}
inline bool KMProto_KMProject_LayerCommon::pinned() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.LayerCommon.pinned)
  return _internal_pinned();
}
inline void KMProto_KMProject_LayerCommon::_internal_set_pinned(bool value) {
  _has_bits_[0] |= 0x00040000u;
  pinned_ = value;
}
inline void KMProto_KMProject_LayerCommon::set_pinned(bool value) {
  _internal_set_pinned(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.LayerCommon.pinned)
}

// optional int32 start_trim = 103;
inline bool KMProto_KMProject_LayerCommon::_internal_has_start_trim() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool KMProto_KMProject_LayerCommon::has_start_trim() const {
  return _internal_has_start_trim();
}
inline void KMProto_KMProject_LayerCommon::clear_start_trim() {
  start_trim_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_LayerCommon::_internal_start_trim() const {
  return start_trim_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_LayerCommon::start_trim() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.LayerCommon.start_trim)
  return _internal_start_trim();
}
inline void KMProto_KMProject_LayerCommon::_internal_set_start_trim(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  start_trim_ = value;
}
inline void KMProto_KMProject_LayerCommon::set_start_trim(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start_trim(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.LayerCommon.start_trim)
}

// optional int32 end_trim = 104;
inline bool KMProto_KMProject_LayerCommon::_internal_has_end_trim() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool KMProto_KMProject_LayerCommon::has_end_trim() const {
  return _internal_has_end_trim();
}
inline void KMProto_KMProject_LayerCommon::clear_end_trim() {
  end_trim_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_LayerCommon::_internal_end_trim() const {
  return end_trim_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_LayerCommon::end_trim() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.LayerCommon.end_trim)
  return _internal_end_trim();
}
inline void KMProto_KMProject_LayerCommon::_internal_set_end_trim(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  end_trim_ = value;
}
inline void KMProto_KMProject_LayerCommon::set_end_trim(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_end_trim(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.LayerCommon.end_trim)
}

// optional int64 z_order = 105;
inline bool KMProto_KMProject_LayerCommon::_internal_has_z_order() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool KMProto_KMProject_LayerCommon::has_z_order() const {
  return _internal_has_z_order();
}
inline void KMProto_KMProject_LayerCommon::clear_z_order() {
  z_order_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KMProto_KMProject_LayerCommon::_internal_z_order() const {
  return z_order_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KMProto_KMProject_LayerCommon::z_order() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.LayerCommon.z_order)
  return _internal_z_order();
}
inline void KMProto_KMProject_LayerCommon::_internal_set_z_order(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  z_order_ = value;
}
inline void KMProto_KMProject_LayerCommon::set_z_order(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_z_order(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.LayerCommon.z_order)
}

// optional int32 layer_expression = 106;
inline bool KMProto_KMProject_LayerCommon::_internal_has_layer_expression() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool KMProto_KMProject_LayerCommon::has_layer_expression() const {
  return _internal_has_layer_expression();
}
inline void KMProto_KMProject_LayerCommon::clear_layer_expression() {
  layer_expression_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_LayerCommon::_internal_layer_expression() const {
  return layer_expression_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_LayerCommon::layer_expression() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.LayerCommon.layer_expression)
  return _internal_layer_expression();
}
inline void KMProto_KMProject_LayerCommon::_internal_set_layer_expression(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  layer_expression_ = value;
}
inline void KMProto_KMProject_LayerCommon::set_layer_expression(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_layer_expression(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.LayerCommon.layer_expression)
}

// optional int32 layer_expression_duration = 107;
inline bool KMProto_KMProject_LayerCommon::_internal_has_layer_expression_duration() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool KMProto_KMProject_LayerCommon::has_layer_expression_duration() const {
  return _internal_has_layer_expression_duration();
}
inline void KMProto_KMProject_LayerCommon::clear_layer_expression_duration() {
  layer_expression_duration_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_LayerCommon::_internal_layer_expression_duration() const {
  return layer_expression_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_LayerCommon::layer_expression_duration() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.LayerCommon.layer_expression_duration)
  return _internal_layer_expression_duration();
}
inline void KMProto_KMProject_LayerCommon::_internal_set_layer_expression_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  layer_expression_duration_ = value;
}
inline void KMProto_KMProject_LayerCommon::set_layer_expression_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_layer_expression_duration(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.LayerCommon.layer_expression_duration)
}

// optional int32 layer_in_expression = 109;
inline bool KMProto_KMProject_LayerCommon::_internal_has_layer_in_expression() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool KMProto_KMProject_LayerCommon::has_layer_in_expression() const {
  return _internal_has_layer_in_expression();
}
inline void KMProto_KMProject_LayerCommon::clear_layer_in_expression() {
  layer_in_expression_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_LayerCommon::_internal_layer_in_expression() const {
  return layer_in_expression_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_LayerCommon::layer_in_expression() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.LayerCommon.layer_in_expression)
  return _internal_layer_in_expression();
}
inline void KMProto_KMProject_LayerCommon::_internal_set_layer_in_expression(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  layer_in_expression_ = value;
}
inline void KMProto_KMProject_LayerCommon::set_layer_in_expression(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_layer_in_expression(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.LayerCommon.layer_in_expression)
}

// optional int32 layer_in_expression_duration = 110;
inline bool KMProto_KMProject_LayerCommon::_internal_has_layer_in_expression_duration() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool KMProto_KMProject_LayerCommon::has_layer_in_expression_duration() const {
  return _internal_has_layer_in_expression_duration();
}
inline void KMProto_KMProject_LayerCommon::clear_layer_in_expression_duration() {
  layer_in_expression_duration_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_LayerCommon::_internal_layer_in_expression_duration() const {
  return layer_in_expression_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_LayerCommon::layer_in_expression_duration() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.LayerCommon.layer_in_expression_duration)
  return _internal_layer_in_expression_duration();
}
inline void KMProto_KMProject_LayerCommon::_internal_set_layer_in_expression_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  layer_in_expression_duration_ = value;
}
inline void KMProto_KMProject_LayerCommon::set_layer_in_expression_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_layer_in_expression_duration(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.LayerCommon.layer_in_expression_duration)
}

// optional int32 layer_out_expression = 111;
inline bool KMProto_KMProject_LayerCommon::_internal_has_layer_out_expression() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool KMProto_KMProject_LayerCommon::has_layer_out_expression() const {
  return _internal_has_layer_out_expression();
}
inline void KMProto_KMProject_LayerCommon::clear_layer_out_expression() {
  layer_out_expression_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_LayerCommon::_internal_layer_out_expression() const {
  return layer_out_expression_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_LayerCommon::layer_out_expression() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.LayerCommon.layer_out_expression)
  return _internal_layer_out_expression();
}
inline void KMProto_KMProject_LayerCommon::_internal_set_layer_out_expression(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  layer_out_expression_ = value;
}
inline void KMProto_KMProject_LayerCommon::set_layer_out_expression(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_layer_out_expression(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.LayerCommon.layer_out_expression)
}

// optional int32 layer_out_expression_duration = 112;
inline bool KMProto_KMProject_LayerCommon::_internal_has_layer_out_expression_duration() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool KMProto_KMProject_LayerCommon::has_layer_out_expression_duration() const {
  return _internal_has_layer_out_expression_duration();
}
inline void KMProto_KMProject_LayerCommon::clear_layer_out_expression_duration() {
  layer_out_expression_duration_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_LayerCommon::_internal_layer_out_expression_duration() const {
  return layer_out_expression_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_LayerCommon::layer_out_expression_duration() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.LayerCommon.layer_out_expression_duration)
  return _internal_layer_out_expression_duration();
}
inline void KMProto_KMProject_LayerCommon::_internal_set_layer_out_expression_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  layer_out_expression_duration_ = value;
}
inline void KMProto_KMProject_LayerCommon::set_layer_out_expression_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_layer_out_expression_duration(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.LayerCommon.layer_out_expression_duration)
}

// optional int32 layer_overall_expression = 113;
inline bool KMProto_KMProject_LayerCommon::_internal_has_layer_overall_expression() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool KMProto_KMProject_LayerCommon::has_layer_overall_expression() const {
  return _internal_has_layer_overall_expression();
}
inline void KMProto_KMProject_LayerCommon::clear_layer_overall_expression() {
  layer_overall_expression_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_LayerCommon::_internal_layer_overall_expression() const {
  return layer_overall_expression_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_LayerCommon::layer_overall_expression() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.LayerCommon.layer_overall_expression)
  return _internal_layer_overall_expression();
}
inline void KMProto_KMProject_LayerCommon::_internal_set_layer_overall_expression(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  layer_overall_expression_ = value;
}
inline void KMProto_KMProject_LayerCommon::set_layer_overall_expression(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_layer_overall_expression(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.LayerCommon.layer_overall_expression)
}

// optional float layer_overall_expression_speed = 114;
inline bool KMProto_KMProject_LayerCommon::_internal_has_layer_overall_expression_speed() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool KMProto_KMProject_LayerCommon::has_layer_overall_expression_speed() const {
  return _internal_has_layer_overall_expression_speed();
}
inline void KMProto_KMProject_LayerCommon::clear_layer_overall_expression_speed() {
  layer_overall_expression_speed_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float KMProto_KMProject_LayerCommon::_internal_layer_overall_expression_speed() const {
  return layer_overall_expression_speed_;
}
inline float KMProto_KMProject_LayerCommon::layer_overall_expression_speed() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.LayerCommon.layer_overall_expression_speed)
  return _internal_layer_overall_expression_speed();
}
inline void KMProto_KMProject_LayerCommon::_internal_set_layer_overall_expression_speed(float value) {
  _has_bits_[0] |= 0x00008000u;
  layer_overall_expression_speed_ = value;
}
inline void KMProto_KMProject_LayerCommon::set_layer_overall_expression_speed(float value) {
  _internal_set_layer_overall_expression_speed(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.LayerCommon.layer_overall_expression_speed)
}

// optional .KMProto.KMProject.SplitScreenType split_screen_type = 116;
inline bool KMProto_KMProject_LayerCommon::_internal_has_split_screen_type() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool KMProto_KMProject_LayerCommon::has_split_screen_type() const {
  return _internal_has_split_screen_type();
}
inline void KMProto_KMProject_LayerCommon::clear_split_screen_type() {
  split_screen_type_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::KMProto_KMProject_SplitScreenType KMProto_KMProject_LayerCommon::_internal_split_screen_type() const {
  return static_cast< ::KMProto_KMProject_SplitScreenType >(split_screen_type_);
}
inline ::KMProto_KMProject_SplitScreenType KMProto_KMProject_LayerCommon::split_screen_type() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.LayerCommon.split_screen_type)
  return _internal_split_screen_type();
}
inline void KMProto_KMProject_LayerCommon::_internal_set_split_screen_type(::KMProto_KMProject_SplitScreenType value) {
  assert(::KMProto_KMProject_SplitScreenType_IsValid(value));
  _has_bits_[0] |= 0x00010000u;
  split_screen_type_ = value;
}
inline void KMProto_KMProject_LayerCommon::set_split_screen_type(::KMProto_KMProject_SplitScreenType value) {
  _internal_set_split_screen_type(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.LayerCommon.split_screen_type)
}

// optional int32 split_size_left = 117;
inline bool KMProto_KMProject_LayerCommon::_internal_has_split_size_left() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool KMProto_KMProject_LayerCommon::has_split_size_left() const {
  return _internal_has_split_size_left();
}
inline void KMProto_KMProject_LayerCommon::clear_split_size_left() {
  split_size_left_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_LayerCommon::_internal_split_size_left() const {
  return split_size_left_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_LayerCommon::split_size_left() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.LayerCommon.split_size_left)
  return _internal_split_size_left();
}
inline void KMProto_KMProject_LayerCommon::_internal_set_split_size_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00020000u;
  split_size_left_ = value;
}
inline void KMProto_KMProject_LayerCommon::set_split_size_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_split_size_left(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.LayerCommon.split_size_left)
}

// optional int32 split_size_right = 118;
inline bool KMProto_KMProject_LayerCommon::_internal_has_split_size_right() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool KMProto_KMProject_LayerCommon::has_split_size_right() const {
  return _internal_has_split_size_right();
}
inline void KMProto_KMProject_LayerCommon::clear_split_size_right() {
  split_size_right_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_LayerCommon::_internal_split_size_right() const {
  return split_size_right_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_LayerCommon::split_size_right() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.LayerCommon.split_size_right)
  return _internal_split_size_right();
}
inline void KMProto_KMProject_LayerCommon::_internal_set_split_size_right(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00400000u;
  split_size_right_ = value;
}
inline void KMProto_KMProject_LayerCommon::set_split_size_right(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_split_size_right(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.LayerCommon.split_size_right)
}

// optional int32 split_size_top = 119;
inline bool KMProto_KMProject_LayerCommon::_internal_has_split_size_top() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool KMProto_KMProject_LayerCommon::has_split_size_top() const {
  return _internal_has_split_size_top();
}
inline void KMProto_KMProject_LayerCommon::clear_split_size_top() {
  split_size_top_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_LayerCommon::_internal_split_size_top() const {
  return split_size_top_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_LayerCommon::split_size_top() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.LayerCommon.split_size_top)
  return _internal_split_size_top();
}
inline void KMProto_KMProject_LayerCommon::_internal_set_split_size_top(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00800000u;
  split_size_top_ = value;
}
inline void KMProto_KMProject_LayerCommon::set_split_size_top(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_split_size_top(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.LayerCommon.split_size_top)
}

// optional int32 split_size_bottom = 120;
inline bool KMProto_KMProject_LayerCommon::_internal_has_split_size_bottom() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_LayerCommon::has_split_size_bottom() const {
  return _internal_has_split_size_bottom();
}
inline void KMProto_KMProject_LayerCommon::clear_split_size_bottom() {
  split_size_bottom_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_LayerCommon::_internal_split_size_bottom() const {
  return split_size_bottom_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_LayerCommon::split_size_bottom() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.LayerCommon.split_size_bottom)
  return _internal_split_size_bottom();
}
inline void KMProto_KMProject_LayerCommon::_internal_set_split_size_bottom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x01000000u;
  split_size_bottom_ = value;
}
inline void KMProto_KMProject_LayerCommon::set_split_size_bottom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_split_size_bottom(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.LayerCommon.split_size_bottom)
}

// optional bool flip_h = 122;
inline bool KMProto_KMProject_LayerCommon::_internal_has_flip_h() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool KMProto_KMProject_LayerCommon::has_flip_h() const {
  return _internal_has_flip_h();
}
inline void KMProto_KMProject_LayerCommon::clear_flip_h() {
  flip_h_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool KMProto_KMProject_LayerCommon::_internal_flip_h() const {
  return flip_h_;
}
inline bool KMProto_KMProject_LayerCommon::flip_h() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.LayerCommon.flip_h)
  return _internal_flip_h();
}
inline void KMProto_KMProject_LayerCommon::_internal_set_flip_h(bool value) {
  _has_bits_[0] |= 0x00080000u;
  flip_h_ = value;
}
inline void KMProto_KMProject_LayerCommon::set_flip_h(bool value) {
  _internal_set_flip_h(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.LayerCommon.flip_h)
}

// optional bool flip_v = 123;
inline bool KMProto_KMProject_LayerCommon::_internal_has_flip_v() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool KMProto_KMProject_LayerCommon::has_flip_v() const {
  return _internal_has_flip_v();
}
inline void KMProto_KMProject_LayerCommon::clear_flip_v() {
  flip_v_ = false;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool KMProto_KMProject_LayerCommon::_internal_flip_v() const {
  return flip_v_;
}
inline bool KMProto_KMProject_LayerCommon::flip_v() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.LayerCommon.flip_v)
  return _internal_flip_v();
}
inline void KMProto_KMProject_LayerCommon::_internal_set_flip_v(bool value) {
  _has_bits_[0] |= 0x00100000u;
  flip_v_ = value;
}
inline void KMProto_KMProject_LayerCommon::set_flip_v(bool value) {
  _internal_set_flip_v(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.LayerCommon.flip_v)
}

// optional .KMProto.KMProject.KeyFrame split_keyframe = 115;
inline bool KMProto_KMProject_LayerCommon::_internal_has_split_keyframe() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || split_keyframe_ != nullptr);
  return value;
}
inline bool KMProto_KMProject_LayerCommon::has_split_keyframe() const {
  return _internal_has_split_keyframe();
}
inline void KMProto_KMProject_LayerCommon::clear_split_keyframe() {
  if (split_keyframe_ != nullptr) split_keyframe_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::KMProto_KMProject_KeyFrame& KMProto_KMProject_LayerCommon::_internal_split_keyframe() const {
  const ::KMProto_KMProject_KeyFrame* p = split_keyframe_;
  return p != nullptr ? *p : reinterpret_cast<const ::KMProto_KMProject_KeyFrame&>(
      ::_KMProto_KMProject_KeyFrame_default_instance_);
}
inline const ::KMProto_KMProject_KeyFrame& KMProto_KMProject_LayerCommon::split_keyframe() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.LayerCommon.split_keyframe)
  return _internal_split_keyframe();
}
inline void KMProto_KMProject_LayerCommon::unsafe_arena_set_allocated_split_keyframe(
    ::KMProto_KMProject_KeyFrame* split_keyframe) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(split_keyframe_);
  }
  split_keyframe_ = split_keyframe;
  if (split_keyframe) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KMProto.KMProject.LayerCommon.split_keyframe)
}
inline ::KMProto_KMProject_KeyFrame* KMProto_KMProject_LayerCommon::release_split_keyframe() {
  _has_bits_[0] &= ~0x00000002u;
  ::KMProto_KMProject_KeyFrame* temp = split_keyframe_;
  split_keyframe_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KMProto_KMProject_KeyFrame* KMProto_KMProject_LayerCommon::unsafe_arena_release_split_keyframe() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.LayerCommon.split_keyframe)
  _has_bits_[0] &= ~0x00000002u;
  ::KMProto_KMProject_KeyFrame* temp = split_keyframe_;
  split_keyframe_ = nullptr;
  return temp;
}
inline ::KMProto_KMProject_KeyFrame* KMProto_KMProject_LayerCommon::_internal_mutable_split_keyframe() {
  _has_bits_[0] |= 0x00000002u;
  if (split_keyframe_ == nullptr) {
    auto* p = CreateMaybeMessage<::KMProto_KMProject_KeyFrame>(GetArena());
    split_keyframe_ = p;
  }
  return split_keyframe_;
}
inline ::KMProto_KMProject_KeyFrame* KMProto_KMProject_LayerCommon::mutable_split_keyframe() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.LayerCommon.split_keyframe)
  return _internal_mutable_split_keyframe();
}
inline void KMProto_KMProject_LayerCommon::set_allocated_split_keyframe(::KMProto_KMProject_KeyFrame* split_keyframe) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete split_keyframe_;
  }
  if (split_keyframe) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(split_keyframe);
    if (message_arena != submessage_arena) {
      split_keyframe = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, split_keyframe, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  split_keyframe_ = split_keyframe;
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.LayerCommon.split_keyframe)
}

// repeated .KMProto.KMProject.KeyFrame keyframes = 108;
inline int KMProto_KMProject_LayerCommon::_internal_keyframes_size() const {
  return keyframes_.size();
}
inline int KMProto_KMProject_LayerCommon::keyframes_size() const {
  return _internal_keyframes_size();
}
inline void KMProto_KMProject_LayerCommon::clear_keyframes() {
  keyframes_.Clear();
}
inline ::KMProto_KMProject_KeyFrame* KMProto_KMProject_LayerCommon::mutable_keyframes(int index) {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.LayerCommon.keyframes)
  return keyframes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_KeyFrame >*
KMProto_KMProject_LayerCommon::mutable_keyframes() {
  // @@protoc_insertion_point(field_mutable_list:KMProto.KMProject.LayerCommon.keyframes)
  return &keyframes_;
}
inline const ::KMProto_KMProject_KeyFrame& KMProto_KMProject_LayerCommon::_internal_keyframes(int index) const {
  return keyframes_.Get(index);
}
inline const ::KMProto_KMProject_KeyFrame& KMProto_KMProject_LayerCommon::keyframes(int index) const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.LayerCommon.keyframes)
  return _internal_keyframes(index);
}
inline ::KMProto_KMProject_KeyFrame* KMProto_KMProject_LayerCommon::_internal_add_keyframes() {
  return keyframes_.Add();
}
inline ::KMProto_KMProject_KeyFrame* KMProto_KMProject_LayerCommon::add_keyframes() {
  // @@protoc_insertion_point(field_add:KMProto.KMProject.LayerCommon.keyframes)
  return _internal_add_keyframes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_KeyFrame >&
KMProto_KMProject_LayerCommon::keyframes() const {
  // @@protoc_insertion_point(field_list:KMProto.KMProject.LayerCommon.keyframes)
  return keyframes_;
}

// optional int32 overall_alpha = 121;
inline bool KMProto_KMProject_LayerCommon::_internal_has_overall_alpha() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_LayerCommon::has_overall_alpha() const {
  return _internal_has_overall_alpha();
}
inline void KMProto_KMProject_LayerCommon::clear_overall_alpha() {
  overall_alpha_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_LayerCommon::_internal_overall_alpha() const {
  return overall_alpha_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_LayerCommon::overall_alpha() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.LayerCommon.overall_alpha)
  return _internal_overall_alpha();
}
inline void KMProto_KMProject_LayerCommon::_internal_set_overall_alpha(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x02000000u;
  overall_alpha_ = value;
}
inline void KMProto_KMProject_LayerCommon::set_overall_alpha(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_overall_alpha(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.LayerCommon.overall_alpha)
}

// optional bool layermask_enabled = 124;
inline bool KMProto_KMProject_LayerCommon::_internal_has_layermask_enabled() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool KMProto_KMProject_LayerCommon::has_layermask_enabled() const {
  return _internal_has_layermask_enabled();
}
inline void KMProto_KMProject_LayerCommon::clear_layermask_enabled() {
  layermask_enabled_ = false;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool KMProto_KMProject_LayerCommon::_internal_layermask_enabled() const {
  return layermask_enabled_;
}
inline bool KMProto_KMProject_LayerCommon::layermask_enabled() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.LayerCommon.layermask_enabled)
  return _internal_layermask_enabled();
}
inline void KMProto_KMProject_LayerCommon::_internal_set_layermask_enabled(bool value) {
  _has_bits_[0] |= 0x00200000u;
  layermask_enabled_ = value;
}
inline void KMProto_KMProject_LayerCommon::set_layermask_enabled(bool value) {
  _internal_set_layermask_enabled(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.LayerCommon.layermask_enabled)
}

// optional int32 layermask_type = 125;
inline bool KMProto_KMProject_LayerCommon::_internal_has_layermask_type() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_LayerCommon::has_layermask_type() const {
  return _internal_has_layermask_type();
}
inline void KMProto_KMProject_LayerCommon::clear_layermask_type() {
  layermask_type_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_LayerCommon::_internal_layermask_type() const {
  return layermask_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_LayerCommon::layermask_type() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.LayerCommon.layermask_type)
  return _internal_layermask_type();
}
inline void KMProto_KMProject_LayerCommon::_internal_set_layermask_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x04000000u;
  layermask_type_ = value;
}
inline void KMProto_KMProject_LayerCommon::set_layermask_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_layermask_type(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.LayerCommon.layermask_type)
}

// optional int32 layermask_index = 126;
inline bool KMProto_KMProject_LayerCommon::_internal_has_layermask_index() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_LayerCommon::has_layermask_index() const {
  return _internal_has_layermask_index();
}
inline void KMProto_KMProject_LayerCommon::clear_layermask_index() {
  layermask_index_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_LayerCommon::_internal_layermask_index() const {
  return layermask_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_LayerCommon::layermask_index() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.LayerCommon.layermask_index)
  return _internal_layermask_index();
}
inline void KMProto_KMProject_LayerCommon::_internal_set_layermask_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x08000000u;
  layermask_index_ = value;
}
inline void KMProto_KMProject_LayerCommon::set_layermask_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_layermask_index(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.LayerCommon.layermask_index)
}

// optional string layer_name = 127;
inline bool KMProto_KMProject_LayerCommon::_internal_has_layer_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KMProto_KMProject_LayerCommon::has_layer_name() const {
  return _internal_has_layer_name();
}
inline void KMProto_KMProject_LayerCommon::clear_layer_name() {
  layer_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KMProto_KMProject_LayerCommon::layer_name() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.LayerCommon.layer_name)
  return _internal_layer_name();
}
inline void KMProto_KMProject_LayerCommon::set_layer_name(const std::string& value) {
  _internal_set_layer_name(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.LayerCommon.layer_name)
}
inline std::string* KMProto_KMProject_LayerCommon::mutable_layer_name() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.LayerCommon.layer_name)
  return _internal_mutable_layer_name();
}
inline const std::string& KMProto_KMProject_LayerCommon::_internal_layer_name() const {
  return layer_name_.Get();
}
inline void KMProto_KMProject_LayerCommon::_internal_set_layer_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  layer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProject_LayerCommon::set_layer_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  layer_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProject.LayerCommon.layer_name)
}
inline void KMProto_KMProject_LayerCommon::set_layer_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  layer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProject.LayerCommon.layer_name)
}
inline void KMProto_KMProject_LayerCommon::set_layer_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  layer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProject.LayerCommon.layer_name)
}
inline std::string* KMProto_KMProject_LayerCommon::_internal_mutable_layer_name() {
  _has_bits_[0] |= 0x00000001u;
  return layer_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProject_LayerCommon::release_layer_name() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.LayerCommon.layer_name)
  if (!_internal_has_layer_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return layer_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProject_LayerCommon::set_allocated_layer_name(std::string* layer_name) {
  if (layer_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  layer_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), layer_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.LayerCommon.layer_name)
}

// optional float crop_bounds_left = 128;
inline bool KMProto_KMProject_LayerCommon::_internal_has_crop_bounds_left() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_LayerCommon::has_crop_bounds_left() const {
  return _internal_has_crop_bounds_left();
}
inline void KMProto_KMProject_LayerCommon::clear_crop_bounds_left() {
  crop_bounds_left_ = 0;
  _has_bits_[0] &= ~0x10000000u;
}
inline float KMProto_KMProject_LayerCommon::_internal_crop_bounds_left() const {
  return crop_bounds_left_;
}
inline float KMProto_KMProject_LayerCommon::crop_bounds_left() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.LayerCommon.crop_bounds_left)
  return _internal_crop_bounds_left();
}
inline void KMProto_KMProject_LayerCommon::_internal_set_crop_bounds_left(float value) {
  _has_bits_[0] |= 0x10000000u;
  crop_bounds_left_ = value;
}
inline void KMProto_KMProject_LayerCommon::set_crop_bounds_left(float value) {
  _internal_set_crop_bounds_left(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.LayerCommon.crop_bounds_left)
}

// optional float crop_bounds_top = 129;
inline bool KMProto_KMProject_LayerCommon::_internal_has_crop_bounds_top() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_LayerCommon::has_crop_bounds_top() const {
  return _internal_has_crop_bounds_top();
}
inline void KMProto_KMProject_LayerCommon::clear_crop_bounds_top() {
  crop_bounds_top_ = 0;
  _has_bits_[0] &= ~0x20000000u;
}
inline float KMProto_KMProject_LayerCommon::_internal_crop_bounds_top() const {
  return crop_bounds_top_;
}
inline float KMProto_KMProject_LayerCommon::crop_bounds_top() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.LayerCommon.crop_bounds_top)
  return _internal_crop_bounds_top();
}
inline void KMProto_KMProject_LayerCommon::_internal_set_crop_bounds_top(float value) {
  _has_bits_[0] |= 0x20000000u;
  crop_bounds_top_ = value;
}
inline void KMProto_KMProject_LayerCommon::set_crop_bounds_top(float value) {
  _internal_set_crop_bounds_top(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.LayerCommon.crop_bounds_top)
}

// optional float crop_bounds_right = 130;
inline bool KMProto_KMProject_LayerCommon::_internal_has_crop_bounds_right() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_LayerCommon::has_crop_bounds_right() const {
  return _internal_has_crop_bounds_right();
}
inline void KMProto_KMProject_LayerCommon::clear_crop_bounds_right() {
  crop_bounds_right_ = 0;
  _has_bits_[0] &= ~0x40000000u;
}
inline float KMProto_KMProject_LayerCommon::_internal_crop_bounds_right() const {
  return crop_bounds_right_;
}
inline float KMProto_KMProject_LayerCommon::crop_bounds_right() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.LayerCommon.crop_bounds_right)
  return _internal_crop_bounds_right();
}
inline void KMProto_KMProject_LayerCommon::_internal_set_crop_bounds_right(float value) {
  _has_bits_[0] |= 0x40000000u;
  crop_bounds_right_ = value;
}
inline void KMProto_KMProject_LayerCommon::set_crop_bounds_right(float value) {
  _internal_set_crop_bounds_right(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.LayerCommon.crop_bounds_right)
}

// optional float crop_bounds_bottom = 131;
inline bool KMProto_KMProject_LayerCommon::_internal_has_crop_bounds_bottom() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_LayerCommon::has_crop_bounds_bottom() const {
  return _internal_has_crop_bounds_bottom();
}
inline void KMProto_KMProject_LayerCommon::clear_crop_bounds_bottom() {
  crop_bounds_bottom_ = 0;
  _has_bits_[0] &= ~0x80000000u;
}
inline float KMProto_KMProject_LayerCommon::_internal_crop_bounds_bottom() const {
  return crop_bounds_bottom_;
}
inline float KMProto_KMProject_LayerCommon::crop_bounds_bottom() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.LayerCommon.crop_bounds_bottom)
  return _internal_crop_bounds_bottom();
}
inline void KMProto_KMProject_LayerCommon::_internal_set_crop_bounds_bottom(float value) {
  _has_bits_[0] |= 0x80000000u;
  crop_bounds_bottom_ = value;
}
inline void KMProto_KMProject_LayerCommon::set_crop_bounds_bottom(float value) {
  _internal_set_crop_bounds_bottom(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.LayerCommon.crop_bounds_bottom)
}

// optional int32 crop_bounds_shape = 132;
inline bool KMProto_KMProject_LayerCommon::_internal_has_crop_bounds_shape() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool KMProto_KMProject_LayerCommon::has_crop_bounds_shape() const {
  return _internal_has_crop_bounds_shape();
}
inline void KMProto_KMProject_LayerCommon::clear_crop_bounds_shape() {
  crop_bounds_shape_ = 0;
  _has_bits_[1] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_LayerCommon::_internal_crop_bounds_shape() const {
  return crop_bounds_shape_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_LayerCommon::crop_bounds_shape() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.LayerCommon.crop_bounds_shape)
  return _internal_crop_bounds_shape();
}
inline void KMProto_KMProject_LayerCommon::_internal_set_crop_bounds_shape(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000001u;
  crop_bounds_shape_ = value;
}
inline void KMProto_KMProject_LayerCommon::set_crop_bounds_shape(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_crop_bounds_shape(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.LayerCommon.crop_bounds_shape)
}

// optional float crop_mask_feather = 133;
inline bool KMProto_KMProject_LayerCommon::_internal_has_crop_mask_feather() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool KMProto_KMProject_LayerCommon::has_crop_mask_feather() const {
  return _internal_has_crop_mask_feather();
}
inline void KMProto_KMProject_LayerCommon::clear_crop_mask_feather() {
  crop_mask_feather_ = 0;
  _has_bits_[1] &= ~0x00000002u;
}
inline float KMProto_KMProject_LayerCommon::_internal_crop_mask_feather() const {
  return crop_mask_feather_;
}
inline float KMProto_KMProject_LayerCommon::crop_mask_feather() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.LayerCommon.crop_mask_feather)
  return _internal_crop_mask_feather();
}
inline void KMProto_KMProject_LayerCommon::_internal_set_crop_mask_feather(float value) {
  _has_bits_[1] |= 0x00000002u;
  crop_mask_feather_ = value;
}
inline void KMProto_KMProject_LayerCommon::set_crop_mask_feather(float value) {
  _internal_set_crop_mask_feather(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.LayerCommon.crop_mask_feather)
}

// optional int32 natural_orientation = 134;
inline bool KMProto_KMProject_LayerCommon::_internal_has_natural_orientation() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool KMProto_KMProject_LayerCommon::has_natural_orientation() const {
  return _internal_has_natural_orientation();
}
inline void KMProto_KMProject_LayerCommon::clear_natural_orientation() {
  natural_orientation_ = 0;
  _has_bits_[1] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_LayerCommon::_internal_natural_orientation() const {
  return natural_orientation_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_LayerCommon::natural_orientation() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.LayerCommon.natural_orientation)
  return _internal_natural_orientation();
}
inline void KMProto_KMProject_LayerCommon::_internal_set_natural_orientation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000004u;
  natural_orientation_ = value;
}
inline void KMProto_KMProject_LayerCommon::set_natural_orientation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_natural_orientation(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.LayerCommon.natural_orientation)
}

// optional bool use_crop_mask = 135;
inline bool KMProto_KMProject_LayerCommon::_internal_has_use_crop_mask() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool KMProto_KMProject_LayerCommon::has_use_crop_mask() const {
  return _internal_has_use_crop_mask();
}
inline void KMProto_KMProject_LayerCommon::clear_use_crop_mask() {
  use_crop_mask_ = false;
  _has_bits_[1] &= ~0x00000008u;
}
inline bool KMProto_KMProject_LayerCommon::_internal_use_crop_mask() const {
  return use_crop_mask_;
}
inline bool KMProto_KMProject_LayerCommon::use_crop_mask() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.LayerCommon.use_crop_mask)
  return _internal_use_crop_mask();
}
inline void KMProto_KMProject_LayerCommon::_internal_set_use_crop_mask(bool value) {
  _has_bits_[1] |= 0x00000008u;
  use_crop_mask_ = value;
}
inline void KMProto_KMProject_LayerCommon::set_use_crop_mask(bool value) {
  _internal_set_use_crop_mask(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.LayerCommon.use_crop_mask)
}

// optional .KMProto.KMProject.LayerBlendModeType blend_mode = 136 [default = LAYER_BLEND_NORMAL];
inline bool KMProto_KMProject_LayerCommon::_internal_has_blend_mode() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool KMProto_KMProject_LayerCommon::has_blend_mode() const {
  return _internal_has_blend_mode();
}
inline void KMProto_KMProject_LayerCommon::clear_blend_mode() {
  blend_mode_ = 17;
  _has_bits_[1] &= ~0x00000020u;
}
inline ::KMProto_KMProject_LayerBlendModeType KMProto_KMProject_LayerCommon::_internal_blend_mode() const {
  return static_cast< ::KMProto_KMProject_LayerBlendModeType >(blend_mode_);
}
inline ::KMProto_KMProject_LayerBlendModeType KMProto_KMProject_LayerCommon::blend_mode() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.LayerCommon.blend_mode)
  return _internal_blend_mode();
}
inline void KMProto_KMProject_LayerCommon::_internal_set_blend_mode(::KMProto_KMProject_LayerBlendModeType value) {
  assert(::KMProto_KMProject_LayerBlendModeType_IsValid(value));
  _has_bits_[1] |= 0x00000020u;
  blend_mode_ = value;
}
inline void KMProto_KMProject_LayerCommon::set_blend_mode(::KMProto_KMProject_LayerBlendModeType value) {
  _internal_set_blend_mode(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.LayerCommon.blend_mode)
}

// optional float render_size_scale_x = 137;
inline bool KMProto_KMProject_LayerCommon::_internal_has_render_size_scale_x() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool KMProto_KMProject_LayerCommon::has_render_size_scale_x() const {
  return _internal_has_render_size_scale_x();
}
inline void KMProto_KMProject_LayerCommon::clear_render_size_scale_x() {
  render_size_scale_x_ = 0;
  _has_bits_[1] &= ~0x00000010u;
}
inline float KMProto_KMProject_LayerCommon::_internal_render_size_scale_x() const {
  return render_size_scale_x_;
}
inline float KMProto_KMProject_LayerCommon::render_size_scale_x() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.LayerCommon.render_size_scale_x)
  return _internal_render_size_scale_x();
}
inline void KMProto_KMProject_LayerCommon::_internal_set_render_size_scale_x(float value) {
  _has_bits_[1] |= 0x00000010u;
  render_size_scale_x_ = value;
}
inline void KMProto_KMProject_LayerCommon::set_render_size_scale_x(float value) {
  _internal_set_render_size_scale_x(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.LayerCommon.render_size_scale_x)
}

// optional float render_size_scale_y = 138;
inline bool KMProto_KMProject_LayerCommon::_internal_has_render_size_scale_y() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool KMProto_KMProject_LayerCommon::has_render_size_scale_y() const {
  return _internal_has_render_size_scale_y();
}
inline void KMProto_KMProject_LayerCommon::clear_render_size_scale_y() {
  render_size_scale_y_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float KMProto_KMProject_LayerCommon::_internal_render_size_scale_y() const {
  return render_size_scale_y_;
}
inline float KMProto_KMProject_LayerCommon::render_size_scale_y() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.LayerCommon.render_size_scale_y)
  return _internal_render_size_scale_y();
}
inline void KMProto_KMProject_LayerCommon::_internal_set_render_size_scale_y(float value) {
  _has_bits_[0] |= 0x00000004u;
  render_size_scale_y_ = value;
}
inline void KMProto_KMProject_LayerCommon::set_render_size_scale_y(float value) {
  _internal_set_render_size_scale_y(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.LayerCommon.render_size_scale_y)
}

// -------------------------------------------------------------------

// KMProto_KMProject_KeyFrame

// optional float time = 101;
inline bool KMProto_KMProject_KeyFrame::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KMProto_KMProject_KeyFrame::has_time() const {
  return _internal_has_time();
}
inline void KMProto_KMProject_KeyFrame::clear_time() {
  time_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float KMProto_KMProject_KeyFrame::_internal_time() const {
  return time_;
}
inline float KMProto_KMProject_KeyFrame::time() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.KeyFrame.time)
  return _internal_time();
}
inline void KMProto_KMProject_KeyFrame::_internal_set_time(float value) {
  _has_bits_[0] |= 0x00000001u;
  time_ = value;
}
inline void KMProto_KMProject_KeyFrame::set_time(float value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.KeyFrame.time)
}

// optional float scale = 102;
inline bool KMProto_KMProject_KeyFrame::_internal_has_scale() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KMProto_KMProject_KeyFrame::has_scale() const {
  return _internal_has_scale();
}
inline void KMProto_KMProject_KeyFrame::clear_scale() {
  scale_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float KMProto_KMProject_KeyFrame::_internal_scale() const {
  return scale_;
}
inline float KMProto_KMProject_KeyFrame::scale() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.KeyFrame.scale)
  return _internal_scale();
}
inline void KMProto_KMProject_KeyFrame::_internal_set_scale(float value) {
  _has_bits_[0] |= 0x00000002u;
  scale_ = value;
}
inline void KMProto_KMProject_KeyFrame::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.KeyFrame.scale)
}

// optional float x = 103;
inline bool KMProto_KMProject_KeyFrame::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool KMProto_KMProject_KeyFrame::has_x() const {
  return _internal_has_x();
}
inline void KMProto_KMProject_KeyFrame::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float KMProto_KMProject_KeyFrame::_internal_x() const {
  return x_;
}
inline float KMProto_KMProject_KeyFrame::x() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.KeyFrame.x)
  return _internal_x();
}
inline void KMProto_KMProject_KeyFrame::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000004u;
  x_ = value;
}
inline void KMProto_KMProject_KeyFrame::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.KeyFrame.x)
}

// optional float y = 104;
inline bool KMProto_KMProject_KeyFrame::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool KMProto_KMProject_KeyFrame::has_y() const {
  return _internal_has_y();
}
inline void KMProto_KMProject_KeyFrame::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float KMProto_KMProject_KeyFrame::_internal_y() const {
  return y_;
}
inline float KMProto_KMProject_KeyFrame::y() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.KeyFrame.y)
  return _internal_y();
}
inline void KMProto_KMProject_KeyFrame::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000008u;
  y_ = value;
}
inline void KMProto_KMProject_KeyFrame::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.KeyFrame.y)
}

// optional float angle = 105;
inline bool KMProto_KMProject_KeyFrame::_internal_has_angle() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool KMProto_KMProject_KeyFrame::has_angle() const {
  return _internal_has_angle();
}
inline void KMProto_KMProject_KeyFrame::clear_angle() {
  angle_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float KMProto_KMProject_KeyFrame::_internal_angle() const {
  return angle_;
}
inline float KMProto_KMProject_KeyFrame::angle() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.KeyFrame.angle)
  return _internal_angle();
}
inline void KMProto_KMProject_KeyFrame::_internal_set_angle(float value) {
  _has_bits_[0] |= 0x00000010u;
  angle_ = value;
}
inline void KMProto_KMProject_KeyFrame::set_angle(float value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.KeyFrame.angle)
}

// optional float alpha = 106;
inline bool KMProto_KMProject_KeyFrame::_internal_has_alpha() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool KMProto_KMProject_KeyFrame::has_alpha() const {
  return _internal_has_alpha();
}
inline void KMProto_KMProject_KeyFrame::clear_alpha() {
  alpha_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float KMProto_KMProject_KeyFrame::_internal_alpha() const {
  return alpha_;
}
inline float KMProto_KMProject_KeyFrame::alpha() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.KeyFrame.alpha)
  return _internal_alpha();
}
inline void KMProto_KMProject_KeyFrame::_internal_set_alpha(float value) {
  _has_bits_[0] |= 0x00000020u;
  alpha_ = value;
}
inline void KMProto_KMProject_KeyFrame::set_alpha(float value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.KeyFrame.alpha)
}

// optional float scalex = 107;
inline bool KMProto_KMProject_KeyFrame::_internal_has_scalex() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool KMProto_KMProject_KeyFrame::has_scalex() const {
  return _internal_has_scalex();
}
inline void KMProto_KMProject_KeyFrame::clear_scalex() {
  scalex_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float KMProto_KMProject_KeyFrame::_internal_scalex() const {
  return scalex_;
}
inline float KMProto_KMProject_KeyFrame::scalex() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.KeyFrame.scalex)
  return _internal_scalex();
}
inline void KMProto_KMProject_KeyFrame::_internal_set_scalex(float value) {
  _has_bits_[0] |= 0x00000040u;
  scalex_ = value;
}
inline void KMProto_KMProject_KeyFrame::set_scalex(float value) {
  _internal_set_scalex(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.KeyFrame.scalex)
}

// optional float scaley = 108;
inline bool KMProto_KMProject_KeyFrame::_internal_has_scaley() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool KMProto_KMProject_KeyFrame::has_scaley() const {
  return _internal_has_scaley();
}
inline void KMProto_KMProject_KeyFrame::clear_scaley() {
  scaley_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float KMProto_KMProject_KeyFrame::_internal_scaley() const {
  return scaley_;
}
inline float KMProto_KMProject_KeyFrame::scaley() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.KeyFrame.scaley)
  return _internal_scaley();
}
inline void KMProto_KMProject_KeyFrame::_internal_set_scaley(float value) {
  _has_bits_[0] |= 0x00000080u;
  scaley_ = value;
}
inline void KMProto_KMProject_KeyFrame::set_scaley(float value) {
  _internal_set_scaley(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.KeyFrame.scaley)
}

// -------------------------------------------------------------------

// KMProto_KMProject_TextLayer

// optional .KMProto.KMProject.LayerCommon layer_common = 100;
inline bool KMProto_KMProject_TextLayer::_internal_has_layer_common() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || layer_common_ != nullptr);
  return value;
}
inline bool KMProto_KMProject_TextLayer::has_layer_common() const {
  return _internal_has_layer_common();
}
inline void KMProto_KMProject_TextLayer::clear_layer_common() {
  if (layer_common_ != nullptr) layer_common_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::KMProto_KMProject_LayerCommon& KMProto_KMProject_TextLayer::_internal_layer_common() const {
  const ::KMProto_KMProject_LayerCommon* p = layer_common_;
  return p != nullptr ? *p : reinterpret_cast<const ::KMProto_KMProject_LayerCommon&>(
      ::_KMProto_KMProject_LayerCommon_default_instance_);
}
inline const ::KMProto_KMProject_LayerCommon& KMProto_KMProject_TextLayer::layer_common() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TextLayer.layer_common)
  return _internal_layer_common();
}
inline void KMProto_KMProject_TextLayer::unsafe_arena_set_allocated_layer_common(
    ::KMProto_KMProject_LayerCommon* layer_common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(layer_common_);
  }
  layer_common_ = layer_common;
  if (layer_common) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KMProto.KMProject.TextLayer.layer_common)
}
inline ::KMProto_KMProject_LayerCommon* KMProto_KMProject_TextLayer::release_layer_common() {
  _has_bits_[0] &= ~0x00000004u;
  ::KMProto_KMProject_LayerCommon* temp = layer_common_;
  layer_common_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KMProto_KMProject_LayerCommon* KMProto_KMProject_TextLayer::unsafe_arena_release_layer_common() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.TextLayer.layer_common)
  _has_bits_[0] &= ~0x00000004u;
  ::KMProto_KMProject_LayerCommon* temp = layer_common_;
  layer_common_ = nullptr;
  return temp;
}
inline ::KMProto_KMProject_LayerCommon* KMProto_KMProject_TextLayer::_internal_mutable_layer_common() {
  _has_bits_[0] |= 0x00000004u;
  if (layer_common_ == nullptr) {
    auto* p = CreateMaybeMessage<::KMProto_KMProject_LayerCommon>(GetArena());
    layer_common_ = p;
  }
  return layer_common_;
}
inline ::KMProto_KMProject_LayerCommon* KMProto_KMProject_TextLayer::mutable_layer_common() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.TextLayer.layer_common)
  return _internal_mutable_layer_common();
}
inline void KMProto_KMProject_TextLayer::set_allocated_layer_common(::KMProto_KMProject_LayerCommon* layer_common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete layer_common_;
  }
  if (layer_common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(layer_common);
    if (message_arena != submessage_arena) {
      layer_common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, layer_common, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  layer_common_ = layer_common;
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.TextLayer.layer_common)
}

// optional string layer_text = 101;
inline bool KMProto_KMProject_TextLayer::_internal_has_layer_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KMProto_KMProject_TextLayer::has_layer_text() const {
  return _internal_has_layer_text();
}
inline void KMProto_KMProject_TextLayer::clear_layer_text() {
  layer_text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KMProto_KMProject_TextLayer::layer_text() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TextLayer.layer_text)
  return _internal_layer_text();
}
inline void KMProto_KMProject_TextLayer::set_layer_text(const std::string& value) {
  _internal_set_layer_text(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.TextLayer.layer_text)
}
inline std::string* KMProto_KMProject_TextLayer::mutable_layer_text() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.TextLayer.layer_text)
  return _internal_mutable_layer_text();
}
inline const std::string& KMProto_KMProject_TextLayer::_internal_layer_text() const {
  return layer_text_.Get();
}
inline void KMProto_KMProject_TextLayer::_internal_set_layer_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  layer_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProject_TextLayer::set_layer_text(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  layer_text_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProject.TextLayer.layer_text)
}
inline void KMProto_KMProject_TextLayer::set_layer_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  layer_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProject.TextLayer.layer_text)
}
inline void KMProto_KMProject_TextLayer::set_layer_text(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  layer_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProject.TextLayer.layer_text)
}
inline std::string* KMProto_KMProject_TextLayer::_internal_mutable_layer_text() {
  _has_bits_[0] |= 0x00000001u;
  return layer_text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProject_TextLayer::release_layer_text() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.TextLayer.layer_text)
  if (!_internal_has_layer_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return layer_text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProject_TextLayer::set_allocated_layer_text(std::string* layer_text) {
  if (layer_text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  layer_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), layer_text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.TextLayer.layer_text)
}

// optional float text_size = 102;
inline bool KMProto_KMProject_TextLayer::_internal_has_text_size() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool KMProto_KMProject_TextLayer::has_text_size() const {
  return _internal_has_text_size();
}
inline void KMProto_KMProject_TextLayer::clear_text_size() {
  text_size_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float KMProto_KMProject_TextLayer::_internal_text_size() const {
  return text_size_;
}
inline float KMProto_KMProject_TextLayer::text_size() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TextLayer.text_size)
  return _internal_text_size();
}
inline void KMProto_KMProject_TextLayer::_internal_set_text_size(float value) {
  _has_bits_[0] |= 0x00000010u;
  text_size_ = value;
}
inline void KMProto_KMProject_TextLayer::set_text_size(float value) {
  _internal_set_text_size(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.TextLayer.text_size)
}

// optional string font_id = 103;
inline bool KMProto_KMProject_TextLayer::_internal_has_font_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KMProto_KMProject_TextLayer::has_font_id() const {
  return _internal_has_font_id();
}
inline void KMProto_KMProject_TextLayer::clear_font_id() {
  font_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& KMProto_KMProject_TextLayer::font_id() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TextLayer.font_id)
  return _internal_font_id();
}
inline void KMProto_KMProject_TextLayer::set_font_id(const std::string& value) {
  _internal_set_font_id(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.TextLayer.font_id)
}
inline std::string* KMProto_KMProject_TextLayer::mutable_font_id() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.TextLayer.font_id)
  return _internal_mutable_font_id();
}
inline const std::string& KMProto_KMProject_TextLayer::_internal_font_id() const {
  return font_id_.Get();
}
inline void KMProto_KMProject_TextLayer::_internal_set_font_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  font_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProject_TextLayer::set_font_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  font_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProject.TextLayer.font_id)
}
inline void KMProto_KMProject_TextLayer::set_font_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  font_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProject.TextLayer.font_id)
}
inline void KMProto_KMProject_TextLayer::set_font_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  font_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProject.TextLayer.font_id)
}
inline std::string* KMProto_KMProject_TextLayer::_internal_mutable_font_id() {
  _has_bits_[0] |= 0x00000002u;
  return font_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProject_TextLayer::release_font_id() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.TextLayer.font_id)
  if (!_internal_has_font_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return font_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProject_TextLayer::set_allocated_font_id(std::string* font_id) {
  if (font_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  font_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), font_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.TextLayer.font_id)
}

// optional uint32 text_color = 104;
inline bool KMProto_KMProject_TextLayer::_internal_has_text_color() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool KMProto_KMProject_TextLayer::has_text_color() const {
  return _internal_has_text_color();
}
inline void KMProto_KMProject_TextLayer::clear_text_color() {
  text_color_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KMProto_KMProject_TextLayer::_internal_text_color() const {
  return text_color_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KMProto_KMProject_TextLayer::text_color() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TextLayer.text_color)
  return _internal_text_color();
}
inline void KMProto_KMProject_TextLayer::_internal_set_text_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  text_color_ = value;
}
inline void KMProto_KMProject_TextLayer::set_text_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_text_color(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.TextLayer.text_color)
}

// optional bool enable_shadow = 105;
inline bool KMProto_KMProject_TextLayer::_internal_has_enable_shadow() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool KMProto_KMProject_TextLayer::has_enable_shadow() const {
  return _internal_has_enable_shadow();
}
inline void KMProto_KMProject_TextLayer::clear_enable_shadow() {
  enable_shadow_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool KMProto_KMProject_TextLayer::_internal_enable_shadow() const {
  return enable_shadow_;
}
inline bool KMProto_KMProject_TextLayer::enable_shadow() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TextLayer.enable_shadow)
  return _internal_enable_shadow();
}
inline void KMProto_KMProject_TextLayer::_internal_set_enable_shadow(bool value) {
  _has_bits_[0] |= 0x00000800u;
  enable_shadow_ = value;
}
inline void KMProto_KMProject_TextLayer::set_enable_shadow(bool value) {
  _internal_set_enable_shadow(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.TextLayer.enable_shadow)
}

// optional uint32 shadow_color = 106;
inline bool KMProto_KMProject_TextLayer::_internal_has_shadow_color() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool KMProto_KMProject_TextLayer::has_shadow_color() const {
  return _internal_has_shadow_color();
}
inline void KMProto_KMProject_TextLayer::clear_shadow_color() {
  shadow_color_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KMProto_KMProject_TextLayer::_internal_shadow_color() const {
  return shadow_color_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KMProto_KMProject_TextLayer::shadow_color() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TextLayer.shadow_color)
  return _internal_shadow_color();
}
inline void KMProto_KMProject_TextLayer::_internal_set_shadow_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  shadow_color_ = value;
}
inline void KMProto_KMProject_TextLayer::set_shadow_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_shadow_color(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.TextLayer.shadow_color)
}

// optional float shadow_radius = 107;
inline bool KMProto_KMProject_TextLayer::_internal_has_shadow_radius() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool KMProto_KMProject_TextLayer::has_shadow_radius() const {
  return _internal_has_shadow_radius();
}
inline void KMProto_KMProject_TextLayer::clear_shadow_radius() {
  shadow_radius_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float KMProto_KMProject_TextLayer::_internal_shadow_radius() const {
  return shadow_radius_;
}
inline float KMProto_KMProject_TextLayer::shadow_radius() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TextLayer.shadow_radius)
  return _internal_shadow_radius();
}
inline void KMProto_KMProject_TextLayer::_internal_set_shadow_radius(float value) {
  _has_bits_[0] |= 0x00000080u;
  shadow_radius_ = value;
}
inline void KMProto_KMProject_TextLayer::set_shadow_radius(float value) {
  _internal_set_shadow_radius(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.TextLayer.shadow_radius)
}

// optional float shadow_dx = 108;
inline bool KMProto_KMProject_TextLayer::_internal_has_shadow_dx() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool KMProto_KMProject_TextLayer::has_shadow_dx() const {
  return _internal_has_shadow_dx();
}
inline void KMProto_KMProject_TextLayer::clear_shadow_dx() {
  shadow_dx_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float KMProto_KMProject_TextLayer::_internal_shadow_dx() const {
  return shadow_dx_;
}
inline float KMProto_KMProject_TextLayer::shadow_dx() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TextLayer.shadow_dx)
  return _internal_shadow_dx();
}
inline void KMProto_KMProject_TextLayer::_internal_set_shadow_dx(float value) {
  _has_bits_[0] |= 0x00000100u;
  shadow_dx_ = value;
}
inline void KMProto_KMProject_TextLayer::set_shadow_dx(float value) {
  _internal_set_shadow_dx(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.TextLayer.shadow_dx)
}

// optional float shadow_dy = 109;
inline bool KMProto_KMProject_TextLayer::_internal_has_shadow_dy() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool KMProto_KMProject_TextLayer::has_shadow_dy() const {
  return _internal_has_shadow_dy();
}
inline void KMProto_KMProject_TextLayer::clear_shadow_dy() {
  shadow_dy_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float KMProto_KMProject_TextLayer::_internal_shadow_dy() const {
  return shadow_dy_;
}
inline float KMProto_KMProject_TextLayer::shadow_dy() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TextLayer.shadow_dy)
  return _internal_shadow_dy();
}
inline void KMProto_KMProject_TextLayer::_internal_set_shadow_dy(float value) {
  _has_bits_[0] |= 0x00000200u;
  shadow_dy_ = value;
}
inline void KMProto_KMProject_TextLayer::set_shadow_dy(float value) {
  _internal_set_shadow_dy(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.TextLayer.shadow_dy)
}

// optional bool enable_glow = 110;
inline bool KMProto_KMProject_TextLayer::_internal_has_enable_glow() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool KMProto_KMProject_TextLayer::has_enable_glow() const {
  return _internal_has_enable_glow();
}
inline void KMProto_KMProject_TextLayer::clear_enable_glow() {
  enable_glow_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool KMProto_KMProject_TextLayer::_internal_enable_glow() const {
  return enable_glow_;
}
inline bool KMProto_KMProject_TextLayer::enable_glow() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TextLayer.enable_glow)
  return _internal_enable_glow();
}
inline void KMProto_KMProject_TextLayer::_internal_set_enable_glow(bool value) {
  _has_bits_[0] |= 0x00001000u;
  enable_glow_ = value;
}
inline void KMProto_KMProject_TextLayer::set_enable_glow(bool value) {
  _internal_set_enable_glow(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.TextLayer.enable_glow)
}

// optional uint32 glow_color = 111;
inline bool KMProto_KMProject_TextLayer::_internal_has_glow_color() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool KMProto_KMProject_TextLayer::has_glow_color() const {
  return _internal_has_glow_color();
}
inline void KMProto_KMProject_TextLayer::clear_glow_color() {
  glow_color_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KMProto_KMProject_TextLayer::_internal_glow_color() const {
  return glow_color_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KMProto_KMProject_TextLayer::glow_color() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TextLayer.glow_color)
  return _internal_glow_color();
}
inline void KMProto_KMProject_TextLayer::_internal_set_glow_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  glow_color_ = value;
}
inline void KMProto_KMProject_TextLayer::set_glow_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_glow_color(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.TextLayer.glow_color)
}

// optional float glow_radius = 112;
inline bool KMProto_KMProject_TextLayer::_internal_has_glow_radius() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool KMProto_KMProject_TextLayer::has_glow_radius() const {
  return _internal_has_glow_radius();
}
inline void KMProto_KMProject_TextLayer::clear_glow_radius() {
  glow_radius_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float KMProto_KMProject_TextLayer::_internal_glow_radius() const {
  return glow_radius_;
}
inline float KMProto_KMProject_TextLayer::glow_radius() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TextLayer.glow_radius)
  return _internal_glow_radius();
}
inline void KMProto_KMProject_TextLayer::_internal_set_glow_radius(float value) {
  _has_bits_[0] |= 0x00008000u;
  glow_radius_ = value;
}
inline void KMProto_KMProject_TextLayer::set_glow_radius(float value) {
  _internal_set_glow_radius(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.TextLayer.glow_radius)
}

// optional int32 glow_type = 113;
inline bool KMProto_KMProject_TextLayer::_internal_has_glow_type() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool KMProto_KMProject_TextLayer::has_glow_type() const {
  return _internal_has_glow_type();
}
inline void KMProto_KMProject_TextLayer::clear_glow_type() {
  glow_type_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_TextLayer::_internal_glow_type() const {
  return glow_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_TextLayer::glow_type() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TextLayer.glow_type)
  return _internal_glow_type();
}
inline void KMProto_KMProject_TextLayer::_internal_set_glow_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  glow_type_ = value;
}
inline void KMProto_KMProject_TextLayer::set_glow_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_glow_type(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.TextLayer.glow_type)
}

// optional bool enable_outline = 114;
inline bool KMProto_KMProject_TextLayer::_internal_has_enable_outline() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool KMProto_KMProject_TextLayer::has_enable_outline() const {
  return _internal_has_enable_outline();
}
inline void KMProto_KMProject_TextLayer::clear_enable_outline() {
  enable_outline_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool KMProto_KMProject_TextLayer::_internal_enable_outline() const {
  return enable_outline_;
}
inline bool KMProto_KMProject_TextLayer::enable_outline() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TextLayer.enable_outline)
  return _internal_enable_outline();
}
inline void KMProto_KMProject_TextLayer::_internal_set_enable_outline(bool value) {
  _has_bits_[0] |= 0x00002000u;
  enable_outline_ = value;
}
inline void KMProto_KMProject_TextLayer::set_enable_outline(bool value) {
  _internal_set_enable_outline(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.TextLayer.enable_outline)
}

// optional uint32 outline_color = 115;
inline bool KMProto_KMProject_TextLayer::_internal_has_outline_color() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool KMProto_KMProject_TextLayer::has_outline_color() const {
  return _internal_has_outline_color();
}
inline void KMProto_KMProject_TextLayer::clear_outline_color() {
  outline_color_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KMProto_KMProject_TextLayer::_internal_outline_color() const {
  return outline_color_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KMProto_KMProject_TextLayer::outline_color() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TextLayer.outline_color)
  return _internal_outline_color();
}
inline void KMProto_KMProject_TextLayer::_internal_set_outline_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  outline_color_ = value;
}
inline void KMProto_KMProject_TextLayer::set_outline_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_outline_color(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.TextLayer.outline_color)
}

// optional float outline_width = 116;
inline bool KMProto_KMProject_TextLayer::_internal_has_outline_width() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool KMProto_KMProject_TextLayer::has_outline_width() const {
  return _internal_has_outline_width();
}
inline void KMProto_KMProject_TextLayer::clear_outline_width() {
  outline_width_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline float KMProto_KMProject_TextLayer::_internal_outline_width() const {
  return outline_width_;
}
inline float KMProto_KMProject_TextLayer::outline_width() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TextLayer.outline_width)
  return _internal_outline_width();
}
inline void KMProto_KMProject_TextLayer::_internal_set_outline_width(float value) {
  _has_bits_[0] |= 0x00040000u;
  outline_width_ = value;
}
inline void KMProto_KMProject_TextLayer::set_outline_width(float value) {
  _internal_set_outline_width(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.TextLayer.outline_width)
}

// optional bool enable_gradient = 117;
inline bool KMProto_KMProject_TextLayer::_internal_has_enable_gradient() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool KMProto_KMProject_TextLayer::has_enable_gradient() const {
  return _internal_has_enable_gradient();
}
inline void KMProto_KMProject_TextLayer::clear_enable_gradient() {
  enable_gradient_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool KMProto_KMProject_TextLayer::_internal_enable_gradient() const {
  return enable_gradient_;
}
inline bool KMProto_KMProject_TextLayer::enable_gradient() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TextLayer.enable_gradient)
  return _internal_enable_gradient();
}
inline void KMProto_KMProject_TextLayer::_internal_set_enable_gradient(bool value) {
  _has_bits_[0] |= 0x00004000u;
  enable_gradient_ = value;
}
inline void KMProto_KMProject_TextLayer::set_enable_gradient(bool value) {
  _internal_set_enable_gradient(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.TextLayer.enable_gradient)
}

// repeated int32 gradient_colors = 118;
inline int KMProto_KMProject_TextLayer::_internal_gradient_colors_size() const {
  return gradient_colors_.size();
}
inline int KMProto_KMProject_TextLayer::gradient_colors_size() const {
  return _internal_gradient_colors_size();
}
inline void KMProto_KMProject_TextLayer::clear_gradient_colors() {
  gradient_colors_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_TextLayer::_internal_gradient_colors(int index) const {
  return gradient_colors_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_TextLayer::gradient_colors(int index) const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TextLayer.gradient_colors)
  return _internal_gradient_colors(index);
}
inline void KMProto_KMProject_TextLayer::set_gradient_colors(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  gradient_colors_.Set(index, value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.TextLayer.gradient_colors)
}
inline void KMProto_KMProject_TextLayer::_internal_add_gradient_colors(::PROTOBUF_NAMESPACE_ID::int32 value) {
  gradient_colors_.Add(value);
}
inline void KMProto_KMProject_TextLayer::add_gradient_colors(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_gradient_colors(value);
  // @@protoc_insertion_point(field_add:KMProto.KMProject.TextLayer.gradient_colors)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
KMProto_KMProject_TextLayer::_internal_gradient_colors() const {
  return gradient_colors_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
KMProto_KMProject_TextLayer::gradient_colors() const {
  // @@protoc_insertion_point(field_list:KMProto.KMProject.TextLayer.gradient_colors)
  return _internal_gradient_colors();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
KMProto_KMProject_TextLayer::_internal_mutable_gradient_colors() {
  return &gradient_colors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
KMProto_KMProject_TextLayer::mutable_gradient_colors() {
  // @@protoc_insertion_point(field_mutable_list:KMProto.KMProject.TextLayer.gradient_colors)
  return _internal_mutable_gradient_colors();
}

// optional bool enable_background = 119;
inline bool KMProto_KMProject_TextLayer::_internal_has_enable_background() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_TextLayer::has_enable_background() const {
  return _internal_has_enable_background();
}
inline void KMProto_KMProject_TextLayer::clear_enable_background() {
  enable_background_ = false;
  _has_bits_[0] &= ~0x01000000u;
}
inline bool KMProto_KMProject_TextLayer::_internal_enable_background() const {
  return enable_background_;
}
inline bool KMProto_KMProject_TextLayer::enable_background() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TextLayer.enable_background)
  return _internal_enable_background();
}
inline void KMProto_KMProject_TextLayer::_internal_set_enable_background(bool value) {
  _has_bits_[0] |= 0x01000000u;
  enable_background_ = value;
}
inline void KMProto_KMProject_TextLayer::set_enable_background(bool value) {
  _internal_set_enable_background(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.TextLayer.enable_background)
}

// optional uint32 background_color = 120;
inline bool KMProto_KMProject_TextLayer::_internal_has_background_color() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool KMProto_KMProject_TextLayer::has_background_color() const {
  return _internal_has_background_color();
}
inline void KMProto_KMProject_TextLayer::clear_background_color() {
  background_color_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KMProto_KMProject_TextLayer::_internal_background_color() const {
  return background_color_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KMProto_KMProject_TextLayer::background_color() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TextLayer.background_color)
  return _internal_background_color();
}
inline void KMProto_KMProject_TextLayer::_internal_set_background_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  background_color_ = value;
}
inline void KMProto_KMProject_TextLayer::set_background_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_background_color(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.TextLayer.background_color)
}

// optional bool extend_background = 121;
inline bool KMProto_KMProject_TextLayer::_internal_has_extend_background() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_TextLayer::has_extend_background() const {
  return _internal_has_extend_background();
}
inline void KMProto_KMProject_TextLayer::clear_extend_background() {
  extend_background_ = false;
  _has_bits_[0] &= ~0x02000000u;
}
inline bool KMProto_KMProject_TextLayer::_internal_extend_background() const {
  return extend_background_;
}
inline bool KMProto_KMProject_TextLayer::extend_background() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TextLayer.extend_background)
  return _internal_extend_background();
}
inline void KMProto_KMProject_TextLayer::_internal_set_extend_background(bool value) {
  _has_bits_[0] |= 0x02000000u;
  extend_background_ = value;
}
inline void KMProto_KMProject_TextLayer::set_extend_background(bool value) {
  _internal_set_extend_background(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.TextLayer.extend_background)
}

// optional int32 text_align = 122;
inline bool KMProto_KMProject_TextLayer::_internal_has_text_align() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool KMProto_KMProject_TextLayer::has_text_align() const {
  return _internal_has_text_align();
}
inline void KMProto_KMProject_TextLayer::clear_text_align() {
  text_align_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_TextLayer::_internal_text_align() const {
  return text_align_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_TextLayer::text_align() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TextLayer.text_align)
  return _internal_text_align();
}
inline void KMProto_KMProject_TextLayer::_internal_set_text_align(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00100000u;
  text_align_ = value;
}
inline void KMProto_KMProject_TextLayer::set_text_align(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_text_align(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.TextLayer.text_align)
}

// optional float shadow_angle = 123;
inline bool KMProto_KMProject_TextLayer::_internal_has_shadow_angle() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool KMProto_KMProject_TextLayer::has_shadow_angle() const {
  return _internal_has_shadow_angle();
}
inline void KMProto_KMProject_TextLayer::clear_shadow_angle() {
  shadow_angle_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline float KMProto_KMProject_TextLayer::_internal_shadow_angle() const {
  return shadow_angle_;
}
inline float KMProto_KMProject_TextLayer::shadow_angle() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TextLayer.shadow_angle)
  return _internal_shadow_angle();
}
inline void KMProto_KMProject_TextLayer::_internal_set_shadow_angle(float value) {
  _has_bits_[0] |= 0x00200000u;
  shadow_angle_ = value;
}
inline void KMProto_KMProject_TextLayer::set_shadow_angle(float value) {
  _internal_set_shadow_angle(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.TextLayer.shadow_angle)
}

// optional float shadow_distance = 124;
inline bool KMProto_KMProject_TextLayer::_internal_has_shadow_distance() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool KMProto_KMProject_TextLayer::has_shadow_distance() const {
  return _internal_has_shadow_distance();
}
inline void KMProto_KMProject_TextLayer::clear_shadow_distance() {
  shadow_distance_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline float KMProto_KMProject_TextLayer::_internal_shadow_distance() const {
  return shadow_distance_;
}
inline float KMProto_KMProject_TextLayer::shadow_distance() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TextLayer.shadow_distance)
  return _internal_shadow_distance();
}
inline void KMProto_KMProject_TextLayer::_internal_set_shadow_distance(float value) {
  _has_bits_[0] |= 0x00400000u;
  shadow_distance_ = value;
}
inline void KMProto_KMProject_TextLayer::set_shadow_distance(float value) {
  _internal_set_shadow_distance(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.TextLayer.shadow_distance)
}

// optional float shadow_spread = 125;
inline bool KMProto_KMProject_TextLayer::_internal_has_shadow_spread() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool KMProto_KMProject_TextLayer::has_shadow_spread() const {
  return _internal_has_shadow_spread();
}
inline void KMProto_KMProject_TextLayer::clear_shadow_spread() {
  shadow_spread_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline float KMProto_KMProject_TextLayer::_internal_shadow_spread() const {
  return shadow_spread_;
}
inline float KMProto_KMProject_TextLayer::shadow_spread() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TextLayer.shadow_spread)
  return _internal_shadow_spread();
}
inline void KMProto_KMProject_TextLayer::_internal_set_shadow_spread(float value) {
  _has_bits_[0] |= 0x00800000u;
  shadow_spread_ = value;
}
inline void KMProto_KMProject_TextLayer::set_shadow_spread(float value) {
  _internal_set_shadow_spread(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.TextLayer.shadow_spread)
}

// optional float shadow_size = 126;
inline bool KMProto_KMProject_TextLayer::_internal_has_shadow_size() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_TextLayer::has_shadow_size() const {
  return _internal_has_shadow_size();
}
inline void KMProto_KMProject_TextLayer::clear_shadow_size() {
  shadow_size_ = 0;
  _has_bits_[0] &= ~0x10000000u;
}
inline float KMProto_KMProject_TextLayer::_internal_shadow_size() const {
  return shadow_size_;
}
inline float KMProto_KMProject_TextLayer::shadow_size() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TextLayer.shadow_size)
  return _internal_shadow_size();
}
inline void KMProto_KMProject_TextLayer::_internal_set_shadow_size(float value) {
  _has_bits_[0] |= 0x10000000u;
  shadow_size_ = value;
}
inline void KMProto_KMProject_TextLayer::set_shadow_size(float value) {
  _internal_set_shadow_size(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.TextLayer.shadow_size)
}

// optional float glow_spread = 127;
inline bool KMProto_KMProject_TextLayer::_internal_has_glow_spread() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_TextLayer::has_glow_spread() const {
  return _internal_has_glow_spread();
}
inline void KMProto_KMProject_TextLayer::clear_glow_spread() {
  glow_spread_ = 0;
  _has_bits_[0] &= ~0x20000000u;
}
inline float KMProto_KMProject_TextLayer::_internal_glow_spread() const {
  return glow_spread_;
}
inline float KMProto_KMProject_TextLayer::glow_spread() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TextLayer.glow_spread)
  return _internal_glow_spread();
}
inline void KMProto_KMProject_TextLayer::_internal_set_glow_spread(float value) {
  _has_bits_[0] |= 0x20000000u;
  glow_spread_ = value;
}
inline void KMProto_KMProject_TextLayer::set_glow_spread(float value) {
  _internal_set_glow_spread(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.TextLayer.glow_spread)
}

// optional float glow_size = 128;
inline bool KMProto_KMProject_TextLayer::_internal_has_glow_size() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_TextLayer::has_glow_size() const {
  return _internal_has_glow_size();
}
inline void KMProto_KMProject_TextLayer::clear_glow_size() {
  glow_size_ = 0;
  _has_bits_[0] &= ~0x40000000u;
}
inline float KMProto_KMProject_TextLayer::_internal_glow_size() const {
  return glow_size_;
}
inline float KMProto_KMProject_TextLayer::glow_size() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TextLayer.glow_size)
  return _internal_glow_size();
}
inline void KMProto_KMProject_TextLayer::_internal_set_glow_size(float value) {
  _has_bits_[0] |= 0x40000000u;
  glow_size_ = value;
}
inline void KMProto_KMProject_TextLayer::set_glow_size(float value) {
  _internal_set_glow_size(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.TextLayer.glow_size)
}

// optional int32 vertical_align = 129;
inline bool KMProto_KMProject_TextLayer::_internal_has_vertical_align() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_TextLayer::has_vertical_align() const {
  return _internal_has_vertical_align();
}
inline void KMProto_KMProject_TextLayer::clear_vertical_align() {
  vertical_align_ = 0;
  _has_bits_[0] &= ~0x80000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_TextLayer::_internal_vertical_align() const {
  return vertical_align_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_TextLayer::vertical_align() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TextLayer.vertical_align)
  return _internal_vertical_align();
}
inline void KMProto_KMProject_TextLayer::_internal_set_vertical_align(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x80000000u;
  vertical_align_ = value;
}
inline void KMProto_KMProject_TextLayer::set_vertical_align(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vertical_align(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.TextLayer.vertical_align)
}

// optional bool underline = 130;
inline bool KMProto_KMProject_TextLayer::_internal_has_underline() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_TextLayer::has_underline() const {
  return _internal_has_underline();
}
inline void KMProto_KMProject_TextLayer::clear_underline() {
  underline_ = false;
  _has_bits_[0] &= ~0x04000000u;
}
inline bool KMProto_KMProject_TextLayer::_internal_underline() const {
  return underline_;
}
inline bool KMProto_KMProject_TextLayer::underline() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TextLayer.underline)
  return _internal_underline();
}
inline void KMProto_KMProject_TextLayer::_internal_set_underline(bool value) {
  _has_bits_[0] |= 0x04000000u;
  underline_ = value;
}
inline void KMProto_KMProject_TextLayer::set_underline(bool value) {
  _internal_set_underline(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.TextLayer.underline)
}

// optional float space_between_characters = 131;
inline bool KMProto_KMProject_TextLayer::_internal_has_space_between_characters() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool KMProto_KMProject_TextLayer::has_space_between_characters() const {
  return _internal_has_space_between_characters();
}
inline void KMProto_KMProject_TextLayer::clear_space_between_characters() {
  space_between_characters_ = 0;
  _has_bits_[1] &= ~0x00000001u;
}
inline float KMProto_KMProject_TextLayer::_internal_space_between_characters() const {
  return space_between_characters_;
}
inline float KMProto_KMProject_TextLayer::space_between_characters() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TextLayer.space_between_characters)
  return _internal_space_between_characters();
}
inline void KMProto_KMProject_TextLayer::_internal_set_space_between_characters(float value) {
  _has_bits_[1] |= 0x00000001u;
  space_between_characters_ = value;
}
inline void KMProto_KMProject_TextLayer::set_space_between_characters(float value) {
  _internal_set_space_between_characters(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.TextLayer.space_between_characters)
}

// optional float space_between_lines = 132;
inline bool KMProto_KMProject_TextLayer::_internal_has_space_between_lines() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool KMProto_KMProject_TextLayer::has_space_between_lines() const {
  return _internal_has_space_between_lines();
}
inline void KMProto_KMProject_TextLayer::clear_space_between_lines() {
  space_between_lines_ = 0;
  _has_bits_[1] &= ~0x00000002u;
}
inline float KMProto_KMProject_TextLayer::_internal_space_between_lines() const {
  return space_between_lines_;
}
inline float KMProto_KMProject_TextLayer::space_between_lines() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TextLayer.space_between_lines)
  return _internal_space_between_lines();
}
inline void KMProto_KMProject_TextLayer::_internal_set_space_between_lines(float value) {
  _has_bits_[1] |= 0x00000002u;
  space_between_lines_ = value;
}
inline void KMProto_KMProject_TextLayer::set_space_between_lines(float value) {
  _internal_set_space_between_lines(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.TextLayer.space_between_lines)
}

// optional bool strike_through = 133;
inline bool KMProto_KMProject_TextLayer::_internal_has_strike_through() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_TextLayer::has_strike_through() const {
  return _internal_has_strike_through();
}
inline void KMProto_KMProject_TextLayer::clear_strike_through() {
  strike_through_ = false;
  _has_bits_[0] &= ~0x08000000u;
}
inline bool KMProto_KMProject_TextLayer::_internal_strike_through() const {
  return strike_through_;
}
inline bool KMProto_KMProject_TextLayer::strike_through() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TextLayer.strike_through)
  return _internal_strike_through();
}
inline void KMProto_KMProject_TextLayer::_internal_set_strike_through(bool value) {
  _has_bits_[0] |= 0x08000000u;
  strike_through_ = value;
}
inline void KMProto_KMProject_TextLayer::set_strike_through(bool value) {
  _internal_set_strike_through(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.TextLayer.strike_through)
}

// optional float outline_weight = 134;
inline bool KMProto_KMProject_TextLayer::_internal_has_outline_weight() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool KMProto_KMProject_TextLayer::has_outline_weight() const {
  return _internal_has_outline_weight();
}
inline void KMProto_KMProject_TextLayer::clear_outline_weight() {
  outline_weight_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float KMProto_KMProject_TextLayer::_internal_outline_weight() const {
  return outline_weight_;
}
inline float KMProto_KMProject_TextLayer::outline_weight() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.TextLayer.outline_weight)
  return _internal_outline_weight();
}
inline void KMProto_KMProject_TextLayer::_internal_set_outline_weight(float value) {
  _has_bits_[0] |= 0x00000008u;
  outline_weight_ = value;
}
inline void KMProto_KMProject_TextLayer::set_outline_weight(float value) {
  _internal_set_outline_weight(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.TextLayer.outline_weight)
}

// -------------------------------------------------------------------

// KMProto_KMProject_HandwritingLayer

// optional .KMProto.KMProject.LayerCommon layer_common = 100;
inline bool KMProto_KMProject_HandwritingLayer::_internal_has_layer_common() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || layer_common_ != nullptr);
  return value;
}
inline bool KMProto_KMProject_HandwritingLayer::has_layer_common() const {
  return _internal_has_layer_common();
}
inline void KMProto_KMProject_HandwritingLayer::clear_layer_common() {
  if (layer_common_ != nullptr) layer_common_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::KMProto_KMProject_LayerCommon& KMProto_KMProject_HandwritingLayer::_internal_layer_common() const {
  const ::KMProto_KMProject_LayerCommon* p = layer_common_;
  return p != nullptr ? *p : reinterpret_cast<const ::KMProto_KMProject_LayerCommon&>(
      ::_KMProto_KMProject_LayerCommon_default_instance_);
}
inline const ::KMProto_KMProject_LayerCommon& KMProto_KMProject_HandwritingLayer::layer_common() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.HandwritingLayer.layer_common)
  return _internal_layer_common();
}
inline void KMProto_KMProject_HandwritingLayer::unsafe_arena_set_allocated_layer_common(
    ::KMProto_KMProject_LayerCommon* layer_common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(layer_common_);
  }
  layer_common_ = layer_common;
  if (layer_common) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KMProto.KMProject.HandwritingLayer.layer_common)
}
inline ::KMProto_KMProject_LayerCommon* KMProto_KMProject_HandwritingLayer::release_layer_common() {
  _has_bits_[0] &= ~0x00000001u;
  ::KMProto_KMProject_LayerCommon* temp = layer_common_;
  layer_common_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KMProto_KMProject_LayerCommon* KMProto_KMProject_HandwritingLayer::unsafe_arena_release_layer_common() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.HandwritingLayer.layer_common)
  _has_bits_[0] &= ~0x00000001u;
  ::KMProto_KMProject_LayerCommon* temp = layer_common_;
  layer_common_ = nullptr;
  return temp;
}
inline ::KMProto_KMProject_LayerCommon* KMProto_KMProject_HandwritingLayer::_internal_mutable_layer_common() {
  _has_bits_[0] |= 0x00000001u;
  if (layer_common_ == nullptr) {
    auto* p = CreateMaybeMessage<::KMProto_KMProject_LayerCommon>(GetArena());
    layer_common_ = p;
  }
  return layer_common_;
}
inline ::KMProto_KMProject_LayerCommon* KMProto_KMProject_HandwritingLayer::mutable_layer_common() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.HandwritingLayer.layer_common)
  return _internal_mutable_layer_common();
}
inline void KMProto_KMProject_HandwritingLayer::set_allocated_layer_common(::KMProto_KMProject_LayerCommon* layer_common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete layer_common_;
  }
  if (layer_common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(layer_common);
    if (message_arena != submessage_arena) {
      layer_common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, layer_common, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  layer_common_ = layer_common;
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.HandwritingLayer.layer_common)
}

// optional int32 pivot_x = 101;
inline bool KMProto_KMProject_HandwritingLayer::_internal_has_pivot_x() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KMProto_KMProject_HandwritingLayer::has_pivot_x() const {
  return _internal_has_pivot_x();
}
inline void KMProto_KMProject_HandwritingLayer::clear_pivot_x() {
  pivot_x_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_HandwritingLayer::_internal_pivot_x() const {
  return pivot_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_HandwritingLayer::pivot_x() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.HandwritingLayer.pivot_x)
  return _internal_pivot_x();
}
inline void KMProto_KMProject_HandwritingLayer::_internal_set_pivot_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  pivot_x_ = value;
}
inline void KMProto_KMProject_HandwritingLayer::set_pivot_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pivot_x(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.HandwritingLayer.pivot_x)
}

// optional int32 pivot_y = 102;
inline bool KMProto_KMProject_HandwritingLayer::_internal_has_pivot_y() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool KMProto_KMProject_HandwritingLayer::has_pivot_y() const {
  return _internal_has_pivot_y();
}
inline void KMProto_KMProject_HandwritingLayer::clear_pivot_y() {
  pivot_y_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_HandwritingLayer::_internal_pivot_y() const {
  return pivot_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_HandwritingLayer::pivot_y() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.HandwritingLayer.pivot_y)
  return _internal_pivot_y();
}
inline void KMProto_KMProject_HandwritingLayer::_internal_set_pivot_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  pivot_y_ = value;
}
inline void KMProto_KMProject_HandwritingLayer::set_pivot_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pivot_y(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.HandwritingLayer.pivot_y)
}

// repeated .KMProto.KMProject.WritingPoint handwriting_frame_ios = 103;
inline int KMProto_KMProject_HandwritingLayer::_internal_handwriting_frame_ios_size() const {
  return handwriting_frame_ios_.size();
}
inline int KMProto_KMProject_HandwritingLayer::handwriting_frame_ios_size() const {
  return _internal_handwriting_frame_ios_size();
}
inline void KMProto_KMProject_HandwritingLayer::clear_handwriting_frame_ios() {
  handwriting_frame_ios_.Clear();
}
inline ::KMProto_KMProject_WritingPoint* KMProto_KMProject_HandwritingLayer::mutable_handwriting_frame_ios(int index) {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.HandwritingLayer.handwriting_frame_ios)
  return handwriting_frame_ios_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_WritingPoint >*
KMProto_KMProject_HandwritingLayer::mutable_handwriting_frame_ios() {
  // @@protoc_insertion_point(field_mutable_list:KMProto.KMProject.HandwritingLayer.handwriting_frame_ios)
  return &handwriting_frame_ios_;
}
inline const ::KMProto_KMProject_WritingPoint& KMProto_KMProject_HandwritingLayer::_internal_handwriting_frame_ios(int index) const {
  return handwriting_frame_ios_.Get(index);
}
inline const ::KMProto_KMProject_WritingPoint& KMProto_KMProject_HandwritingLayer::handwriting_frame_ios(int index) const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.HandwritingLayer.handwriting_frame_ios)
  return _internal_handwriting_frame_ios(index);
}
inline ::KMProto_KMProject_WritingPoint* KMProto_KMProject_HandwritingLayer::_internal_add_handwriting_frame_ios() {
  return handwriting_frame_ios_.Add();
}
inline ::KMProto_KMProject_WritingPoint* KMProto_KMProject_HandwritingLayer::add_handwriting_frame_ios() {
  // @@protoc_insertion_point(field_add:KMProto.KMProject.HandwritingLayer.handwriting_frame_ios)
  return _internal_add_handwriting_frame_ios();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_WritingPoint >&
KMProto_KMProject_HandwritingLayer::handwriting_frame_ios() const {
  // @@protoc_insertion_point(field_list:KMProto.KMProject.HandwritingLayer.handwriting_frame_ios)
  return handwriting_frame_ios_;
}

// repeated .KMProto.KMProject.DrawingAction drawing_actions = 1;
inline int KMProto_KMProject_HandwritingLayer::_internal_drawing_actions_size() const {
  return drawing_actions_.size();
}
inline int KMProto_KMProject_HandwritingLayer::drawing_actions_size() const {
  return _internal_drawing_actions_size();
}
inline void KMProto_KMProject_HandwritingLayer::clear_drawing_actions() {
  drawing_actions_.Clear();
}
inline ::KMProto_KMProject_DrawingAction* KMProto_KMProject_HandwritingLayer::mutable_drawing_actions(int index) {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.HandwritingLayer.drawing_actions)
  return drawing_actions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_DrawingAction >*
KMProto_KMProject_HandwritingLayer::mutable_drawing_actions() {
  // @@protoc_insertion_point(field_mutable_list:KMProto.KMProject.HandwritingLayer.drawing_actions)
  return &drawing_actions_;
}
inline const ::KMProto_KMProject_DrawingAction& KMProto_KMProject_HandwritingLayer::_internal_drawing_actions(int index) const {
  return drawing_actions_.Get(index);
}
inline const ::KMProto_KMProject_DrawingAction& KMProto_KMProject_HandwritingLayer::drawing_actions(int index) const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.HandwritingLayer.drawing_actions)
  return _internal_drawing_actions(index);
}
inline ::KMProto_KMProject_DrawingAction* KMProto_KMProject_HandwritingLayer::_internal_add_drawing_actions() {
  return drawing_actions_.Add();
}
inline ::KMProto_KMProject_DrawingAction* KMProto_KMProject_HandwritingLayer::add_drawing_actions() {
  // @@protoc_insertion_point(field_add:KMProto.KMProject.HandwritingLayer.drawing_actions)
  return _internal_add_drawing_actions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_DrawingAction >&
KMProto_KMProject_HandwritingLayer::drawing_actions() const {
  // @@protoc_insertion_point(field_list:KMProto.KMProject.HandwritingLayer.drawing_actions)
  return drawing_actions_;
}

// -------------------------------------------------------------------

// KMProto_KMProject_StickerLayer

// optional .KMProto.KMProject.LayerCommon layer_common = 100;
inline bool KMProto_KMProject_StickerLayer::_internal_has_layer_common() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || layer_common_ != nullptr);
  return value;
}
inline bool KMProto_KMProject_StickerLayer::has_layer_common() const {
  return _internal_has_layer_common();
}
inline void KMProto_KMProject_StickerLayer::clear_layer_common() {
  if (layer_common_ != nullptr) layer_common_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::KMProto_KMProject_LayerCommon& KMProto_KMProject_StickerLayer::_internal_layer_common() const {
  const ::KMProto_KMProject_LayerCommon* p = layer_common_;
  return p != nullptr ? *p : reinterpret_cast<const ::KMProto_KMProject_LayerCommon&>(
      ::_KMProto_KMProject_LayerCommon_default_instance_);
}
inline const ::KMProto_KMProject_LayerCommon& KMProto_KMProject_StickerLayer::layer_common() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.StickerLayer.layer_common)
  return _internal_layer_common();
}
inline void KMProto_KMProject_StickerLayer::unsafe_arena_set_allocated_layer_common(
    ::KMProto_KMProject_LayerCommon* layer_common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(layer_common_);
  }
  layer_common_ = layer_common;
  if (layer_common) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KMProto.KMProject.StickerLayer.layer_common)
}
inline ::KMProto_KMProject_LayerCommon* KMProto_KMProject_StickerLayer::release_layer_common() {
  _has_bits_[0] &= ~0x00000001u;
  ::KMProto_KMProject_LayerCommon* temp = layer_common_;
  layer_common_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KMProto_KMProject_LayerCommon* KMProto_KMProject_StickerLayer::unsafe_arena_release_layer_common() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.StickerLayer.layer_common)
  _has_bits_[0] &= ~0x00000001u;
  ::KMProto_KMProject_LayerCommon* temp = layer_common_;
  layer_common_ = nullptr;
  return temp;
}
inline ::KMProto_KMProject_LayerCommon* KMProto_KMProject_StickerLayer::_internal_mutable_layer_common() {
  _has_bits_[0] |= 0x00000001u;
  if (layer_common_ == nullptr) {
    auto* p = CreateMaybeMessage<::KMProto_KMProject_LayerCommon>(GetArena());
    layer_common_ = p;
  }
  return layer_common_;
}
inline ::KMProto_KMProject_LayerCommon* KMProto_KMProject_StickerLayer::mutable_layer_common() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.StickerLayer.layer_common)
  return _internal_mutable_layer_common();
}
inline void KMProto_KMProject_StickerLayer::set_allocated_layer_common(::KMProto_KMProject_LayerCommon* layer_common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete layer_common_;
  }
  if (layer_common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(layer_common);
    if (message_arena != submessage_arena) {
      layer_common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, layer_common, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  layer_common_ = layer_common;
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.StickerLayer.layer_common)
}

// optional bool colorize_enabled = 101;
inline bool KMProto_KMProject_StickerLayer::_internal_has_colorize_enabled() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool KMProto_KMProject_StickerLayer::has_colorize_enabled() const {
  return _internal_has_colorize_enabled();
}
inline void KMProto_KMProject_StickerLayer::clear_colorize_enabled() {
  colorize_enabled_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool KMProto_KMProject_StickerLayer::_internal_colorize_enabled() const {
  return colorize_enabled_;
}
inline bool KMProto_KMProject_StickerLayer::colorize_enabled() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.StickerLayer.colorize_enabled)
  return _internal_colorize_enabled();
}
inline void KMProto_KMProject_StickerLayer::_internal_set_colorize_enabled(bool value) {
  _has_bits_[0] |= 0x00000004u;
  colorize_enabled_ = value;
}
inline void KMProto_KMProject_StickerLayer::set_colorize_enabled(bool value) {
  _internal_set_colorize_enabled(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.StickerLayer.colorize_enabled)
}

// optional int32 colorize_color = 102;
inline bool KMProto_KMProject_StickerLayer::_internal_has_colorize_color() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool KMProto_KMProject_StickerLayer::has_colorize_color() const {
  return _internal_has_colorize_color();
}
inline void KMProto_KMProject_StickerLayer::clear_colorize_color() {
  colorize_color_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_StickerLayer::_internal_colorize_color() const {
  return colorize_color_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_StickerLayer::colorize_color() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.StickerLayer.colorize_color)
  return _internal_colorize_color();
}
inline void KMProto_KMProject_StickerLayer::_internal_set_colorize_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  colorize_color_ = value;
}
inline void KMProto_KMProject_StickerLayer::set_colorize_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_colorize_color(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.StickerLayer.colorize_color)
}

// optional int32 sticker_id = 103;
inline bool KMProto_KMProject_StickerLayer::_internal_has_sticker_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KMProto_KMProject_StickerLayer::has_sticker_id() const {
  return _internal_has_sticker_id();
}
inline void KMProto_KMProject_StickerLayer::clear_sticker_id() {
  sticker_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_StickerLayer::_internal_sticker_id() const {
  return sticker_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_StickerLayer::sticker_id() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.StickerLayer.sticker_id)
  return _internal_sticker_id();
}
inline void KMProto_KMProject_StickerLayer::_internal_set_sticker_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  sticker_id_ = value;
}
inline void KMProto_KMProject_StickerLayer::set_sticker_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sticker_id(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.StickerLayer.sticker_id)
}

// -------------------------------------------------------------------

// KMProto_KMProject_AssetLayer

// optional .KMProto.KMProject.LayerCommon layer_common = 100;
inline bool KMProto_KMProject_AssetLayer::_internal_has_layer_common() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || layer_common_ != nullptr);
  return value;
}
inline bool KMProto_KMProject_AssetLayer::has_layer_common() const {
  return _internal_has_layer_common();
}
inline void KMProto_KMProject_AssetLayer::clear_layer_common() {
  if (layer_common_ != nullptr) layer_common_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::KMProto_KMProject_LayerCommon& KMProto_KMProject_AssetLayer::_internal_layer_common() const {
  const ::KMProto_KMProject_LayerCommon* p = layer_common_;
  return p != nullptr ? *p : reinterpret_cast<const ::KMProto_KMProject_LayerCommon&>(
      ::_KMProto_KMProject_LayerCommon_default_instance_);
}
inline const ::KMProto_KMProject_LayerCommon& KMProto_KMProject_AssetLayer::layer_common() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.AssetLayer.layer_common)
  return _internal_layer_common();
}
inline void KMProto_KMProject_AssetLayer::unsafe_arena_set_allocated_layer_common(
    ::KMProto_KMProject_LayerCommon* layer_common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(layer_common_);
  }
  layer_common_ = layer_common;
  if (layer_common) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KMProto.KMProject.AssetLayer.layer_common)
}
inline ::KMProto_KMProject_LayerCommon* KMProto_KMProject_AssetLayer::release_layer_common() {
  _has_bits_[0] &= ~0x00000008u;
  ::KMProto_KMProject_LayerCommon* temp = layer_common_;
  layer_common_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KMProto_KMProject_LayerCommon* KMProto_KMProject_AssetLayer::unsafe_arena_release_layer_common() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.AssetLayer.layer_common)
  _has_bits_[0] &= ~0x00000008u;
  ::KMProto_KMProject_LayerCommon* temp = layer_common_;
  layer_common_ = nullptr;
  return temp;
}
inline ::KMProto_KMProject_LayerCommon* KMProto_KMProject_AssetLayer::_internal_mutable_layer_common() {
  _has_bits_[0] |= 0x00000008u;
  if (layer_common_ == nullptr) {
    auto* p = CreateMaybeMessage<::KMProto_KMProject_LayerCommon>(GetArena());
    layer_common_ = p;
  }
  return layer_common_;
}
inline ::KMProto_KMProject_LayerCommon* KMProto_KMProject_AssetLayer::mutable_layer_common() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.AssetLayer.layer_common)
  return _internal_mutable_layer_common();
}
inline void KMProto_KMProject_AssetLayer::set_allocated_layer_common(::KMProto_KMProject_LayerCommon* layer_common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete layer_common_;
  }
  if (layer_common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(layer_common);
    if (message_arena != submessage_arena) {
      layer_common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, layer_common, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  layer_common_ = layer_common;
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.AssetLayer.layer_common)
}

// optional string asset_item_id = 101;
inline bool KMProto_KMProject_AssetLayer::_internal_has_asset_item_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KMProto_KMProject_AssetLayer::has_asset_item_id() const {
  return _internal_has_asset_item_id();
}
inline void KMProto_KMProject_AssetLayer::clear_asset_item_id() {
  asset_item_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KMProto_KMProject_AssetLayer::asset_item_id() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.AssetLayer.asset_item_id)
  return _internal_asset_item_id();
}
inline void KMProto_KMProject_AssetLayer::set_asset_item_id(const std::string& value) {
  _internal_set_asset_item_id(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.AssetLayer.asset_item_id)
}
inline std::string* KMProto_KMProject_AssetLayer::mutable_asset_item_id() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.AssetLayer.asset_item_id)
  return _internal_mutable_asset_item_id();
}
inline const std::string& KMProto_KMProject_AssetLayer::_internal_asset_item_id() const {
  return asset_item_id_.Get();
}
inline void KMProto_KMProject_AssetLayer::_internal_set_asset_item_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  asset_item_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProject_AssetLayer::set_asset_item_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  asset_item_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProject.AssetLayer.asset_item_id)
}
inline void KMProto_KMProject_AssetLayer::set_asset_item_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  asset_item_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProject.AssetLayer.asset_item_id)
}
inline void KMProto_KMProject_AssetLayer::set_asset_item_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  asset_item_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProject.AssetLayer.asset_item_id)
}
inline std::string* KMProto_KMProject_AssetLayer::_internal_mutable_asset_item_id() {
  _has_bits_[0] |= 0x00000001u;
  return asset_item_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProject_AssetLayer::release_asset_item_id() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.AssetLayer.asset_item_id)
  if (!_internal_has_asset_item_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return asset_item_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProject_AssetLayer::set_allocated_asset_item_id(std::string* asset_item_id) {
  if (asset_item_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  asset_item_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset_item_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.AssetLayer.asset_item_id)
}

// optional .KMProto.KMProject.StringHashMap effect_options = 102;
inline bool KMProto_KMProject_AssetLayer::_internal_has_effect_options() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || effect_options_ != nullptr);
  return value;
}
inline bool KMProto_KMProject_AssetLayer::has_effect_options() const {
  return _internal_has_effect_options();
}
inline void KMProto_KMProject_AssetLayer::clear_effect_options() {
  if (effect_options_ != nullptr) effect_options_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::KMProto_KMProject_StringHashMap& KMProto_KMProject_AssetLayer::_internal_effect_options() const {
  const ::KMProto_KMProject_StringHashMap* p = effect_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::KMProto_KMProject_StringHashMap&>(
      ::_KMProto_KMProject_StringHashMap_default_instance_);
}
inline const ::KMProto_KMProject_StringHashMap& KMProto_KMProject_AssetLayer::effect_options() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.AssetLayer.effect_options)
  return _internal_effect_options();
}
inline void KMProto_KMProject_AssetLayer::unsafe_arena_set_allocated_effect_options(
    ::KMProto_KMProject_StringHashMap* effect_options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(effect_options_);
  }
  effect_options_ = effect_options;
  if (effect_options) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KMProto.KMProject.AssetLayer.effect_options)
}
inline ::KMProto_KMProject_StringHashMap* KMProto_KMProject_AssetLayer::release_effect_options() {
  _has_bits_[0] &= ~0x00000010u;
  ::KMProto_KMProject_StringHashMap* temp = effect_options_;
  effect_options_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KMProto_KMProject_StringHashMap* KMProto_KMProject_AssetLayer::unsafe_arena_release_effect_options() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.AssetLayer.effect_options)
  _has_bits_[0] &= ~0x00000010u;
  ::KMProto_KMProject_StringHashMap* temp = effect_options_;
  effect_options_ = nullptr;
  return temp;
}
inline ::KMProto_KMProject_StringHashMap* KMProto_KMProject_AssetLayer::_internal_mutable_effect_options() {
  _has_bits_[0] |= 0x00000010u;
  if (effect_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::KMProto_KMProject_StringHashMap>(GetArena());
    effect_options_ = p;
  }
  return effect_options_;
}
inline ::KMProto_KMProject_StringHashMap* KMProto_KMProject_AssetLayer::mutable_effect_options() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.AssetLayer.effect_options)
  return _internal_mutable_effect_options();
}
inline void KMProto_KMProject_AssetLayer::set_allocated_effect_options(::KMProto_KMProject_StringHashMap* effect_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete effect_options_;
  }
  if (effect_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(effect_options);
    if (message_arena != submessage_arena) {
      effect_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, effect_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  effect_options_ = effect_options;
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.AssetLayer.effect_options)
}

// optional .KMProto.KMProject.AssetLayer.AssetLayerType asset_layer_type = 103;
inline bool KMProto_KMProject_AssetLayer::_internal_has_asset_layer_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool KMProto_KMProject_AssetLayer::has_asset_layer_type() const {
  return _internal_has_asset_layer_type();
}
inline void KMProto_KMProject_AssetLayer::clear_asset_layer_type() {
  asset_layer_type_ = 1;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::KMProto_KMProject_AssetLayer_AssetLayerType KMProto_KMProject_AssetLayer::_internal_asset_layer_type() const {
  return static_cast< ::KMProto_KMProject_AssetLayer_AssetLayerType >(asset_layer_type_);
}
inline ::KMProto_KMProject_AssetLayer_AssetLayerType KMProto_KMProject_AssetLayer::asset_layer_type() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.AssetLayer.asset_layer_type)
  return _internal_asset_layer_type();
}
inline void KMProto_KMProject_AssetLayer::_internal_set_asset_layer_type(::KMProto_KMProject_AssetLayer_AssetLayerType value) {
  assert(::KMProto_KMProject_AssetLayer_AssetLayerType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  asset_layer_type_ = value;
}
inline void KMProto_KMProject_AssetLayer::set_asset_layer_type(::KMProto_KMProject_AssetLayer_AssetLayerType value) {
  _internal_set_asset_layer_type(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.AssetLayer.asset_layer_type)
}

// optional string asset_item_name_for_ios = 104;
inline bool KMProto_KMProject_AssetLayer::_internal_has_asset_item_name_for_ios() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KMProto_KMProject_AssetLayer::has_asset_item_name_for_ios() const {
  return _internal_has_asset_item_name_for_ios();
}
inline void KMProto_KMProject_AssetLayer::clear_asset_item_name_for_ios() {
  asset_item_name_for_ios_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& KMProto_KMProject_AssetLayer::asset_item_name_for_ios() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.AssetLayer.asset_item_name_for_ios)
  return _internal_asset_item_name_for_ios();
}
inline void KMProto_KMProject_AssetLayer::set_asset_item_name_for_ios(const std::string& value) {
  _internal_set_asset_item_name_for_ios(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.AssetLayer.asset_item_name_for_ios)
}
inline std::string* KMProto_KMProject_AssetLayer::mutable_asset_item_name_for_ios() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.AssetLayer.asset_item_name_for_ios)
  return _internal_mutable_asset_item_name_for_ios();
}
inline const std::string& KMProto_KMProject_AssetLayer::_internal_asset_item_name_for_ios() const {
  return asset_item_name_for_ios_.Get();
}
inline void KMProto_KMProject_AssetLayer::_internal_set_asset_item_name_for_ios(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  asset_item_name_for_ios_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProject_AssetLayer::set_asset_item_name_for_ios(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  asset_item_name_for_ios_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProject.AssetLayer.asset_item_name_for_ios)
}
inline void KMProto_KMProject_AssetLayer::set_asset_item_name_for_ios(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  asset_item_name_for_ios_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProject.AssetLayer.asset_item_name_for_ios)
}
inline void KMProto_KMProject_AssetLayer::set_asset_item_name_for_ios(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  asset_item_name_for_ios_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProject.AssetLayer.asset_item_name_for_ios)
}
inline std::string* KMProto_KMProject_AssetLayer::_internal_mutable_asset_item_name_for_ios() {
  _has_bits_[0] |= 0x00000002u;
  return asset_item_name_for_ios_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProject_AssetLayer::release_asset_item_name_for_ios() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.AssetLayer.asset_item_name_for_ios)
  if (!_internal_has_asset_item_name_for_ios()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return asset_item_name_for_ios_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProject_AssetLayer::set_allocated_asset_item_name_for_ios(std::string* asset_item_name_for_ios) {
  if (asset_item_name_for_ios != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  asset_item_name_for_ios_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset_item_name_for_ios,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.AssetLayer.asset_item_name_for_ios)
}

// optional string asset_name_for_ios = 105;
inline bool KMProto_KMProject_AssetLayer::_internal_has_asset_name_for_ios() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool KMProto_KMProject_AssetLayer::has_asset_name_for_ios() const {
  return _internal_has_asset_name_for_ios();
}
inline void KMProto_KMProject_AssetLayer::clear_asset_name_for_ios() {
  asset_name_for_ios_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& KMProto_KMProject_AssetLayer::asset_name_for_ios() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.AssetLayer.asset_name_for_ios)
  return _internal_asset_name_for_ios();
}
inline void KMProto_KMProject_AssetLayer::set_asset_name_for_ios(const std::string& value) {
  _internal_set_asset_name_for_ios(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.AssetLayer.asset_name_for_ios)
}
inline std::string* KMProto_KMProject_AssetLayer::mutable_asset_name_for_ios() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.AssetLayer.asset_name_for_ios)
  return _internal_mutable_asset_name_for_ios();
}
inline const std::string& KMProto_KMProject_AssetLayer::_internal_asset_name_for_ios() const {
  return asset_name_for_ios_.Get();
}
inline void KMProto_KMProject_AssetLayer::_internal_set_asset_name_for_ios(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  asset_name_for_ios_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProject_AssetLayer::set_asset_name_for_ios(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  asset_name_for_ios_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProject.AssetLayer.asset_name_for_ios)
}
inline void KMProto_KMProject_AssetLayer::set_asset_name_for_ios(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  asset_name_for_ios_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProject.AssetLayer.asset_name_for_ios)
}
inline void KMProto_KMProject_AssetLayer::set_asset_name_for_ios(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  asset_name_for_ios_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProject.AssetLayer.asset_name_for_ios)
}
inline std::string* KMProto_KMProject_AssetLayer::_internal_mutable_asset_name_for_ios() {
  _has_bits_[0] |= 0x00000004u;
  return asset_name_for_ios_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProject_AssetLayer::release_asset_name_for_ios() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.AssetLayer.asset_name_for_ios)
  if (!_internal_has_asset_name_for_ios()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return asset_name_for_ios_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProject_AssetLayer::set_allocated_asset_name_for_ios(std::string* asset_name_for_ios) {
  if (asset_name_for_ios != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  asset_name_for_ios_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset_name_for_ios,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.AssetLayer.asset_name_for_ios)
}

// optional bool sync_xy_scale = 106;
inline bool KMProto_KMProject_AssetLayer::_internal_has_sync_xy_scale() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool KMProto_KMProject_AssetLayer::has_sync_xy_scale() const {
  return _internal_has_sync_xy_scale();
}
inline void KMProto_KMProject_AssetLayer::clear_sync_xy_scale() {
  sync_xy_scale_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool KMProto_KMProject_AssetLayer::_internal_sync_xy_scale() const {
  return sync_xy_scale_;
}
inline bool KMProto_KMProject_AssetLayer::sync_xy_scale() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.AssetLayer.sync_xy_scale)
  return _internal_sync_xy_scale();
}
inline void KMProto_KMProject_AssetLayer::_internal_set_sync_xy_scale(bool value) {
  _has_bits_[0] |= 0x00000020u;
  sync_xy_scale_ = value;
}
inline void KMProto_KMProject_AssetLayer::set_sync_xy_scale(bool value) {
  _internal_set_sync_xy_scale(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.AssetLayer.sync_xy_scale)
}

// repeated .KMProto.KMProject.EffectOptionItem effectOption = 107;
inline int KMProto_KMProject_AssetLayer::_internal_effectoption_size() const {
  return effectoption_.size();
}
inline int KMProto_KMProject_AssetLayer::effectoption_size() const {
  return _internal_effectoption_size();
}
inline void KMProto_KMProject_AssetLayer::clear_effectoption() {
  effectoption_.Clear();
}
inline ::KMProto_KMProject_EffectOptionItem* KMProto_KMProject_AssetLayer::mutable_effectoption(int index) {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.AssetLayer.effectOption)
  return effectoption_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_EffectOptionItem >*
KMProto_KMProject_AssetLayer::mutable_effectoption() {
  // @@protoc_insertion_point(field_mutable_list:KMProto.KMProject.AssetLayer.effectOption)
  return &effectoption_;
}
inline const ::KMProto_KMProject_EffectOptionItem& KMProto_KMProject_AssetLayer::_internal_effectoption(int index) const {
  return effectoption_.Get(index);
}
inline const ::KMProto_KMProject_EffectOptionItem& KMProto_KMProject_AssetLayer::effectoption(int index) const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.AssetLayer.effectOption)
  return _internal_effectoption(index);
}
inline ::KMProto_KMProject_EffectOptionItem* KMProto_KMProject_AssetLayer::_internal_add_effectoption() {
  return effectoption_.Add();
}
inline ::KMProto_KMProject_EffectOptionItem* KMProto_KMProject_AssetLayer::add_effectoption() {
  // @@protoc_insertion_point(field_add:KMProto.KMProject.AssetLayer.effectOption)
  return _internal_add_effectoption();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_EffectOptionItem >&
KMProto_KMProject_AssetLayer::effectoption() const {
  // @@protoc_insertion_point(field_list:KMProto.KMProject.AssetLayer.effectOption)
  return effectoption_;
}

// -------------------------------------------------------------------

// KMProto_KMProject_EffectLayer

// optional .KMProto.KMProject.LayerCommon layer_common = 100;
inline bool KMProto_KMProject_EffectLayer::_internal_has_layer_common() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || layer_common_ != nullptr);
  return value;
}
inline bool KMProto_KMProject_EffectLayer::has_layer_common() const {
  return _internal_has_layer_common();
}
inline void KMProto_KMProject_EffectLayer::clear_layer_common() {
  if (layer_common_ != nullptr) layer_common_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::KMProto_KMProject_LayerCommon& KMProto_KMProject_EffectLayer::_internal_layer_common() const {
  const ::KMProto_KMProject_LayerCommon* p = layer_common_;
  return p != nullptr ? *p : reinterpret_cast<const ::KMProto_KMProject_LayerCommon&>(
      ::_KMProto_KMProject_LayerCommon_default_instance_);
}
inline const ::KMProto_KMProject_LayerCommon& KMProto_KMProject_EffectLayer::layer_common() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.EffectLayer.layer_common)
  return _internal_layer_common();
}
inline void KMProto_KMProject_EffectLayer::unsafe_arena_set_allocated_layer_common(
    ::KMProto_KMProject_LayerCommon* layer_common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(layer_common_);
  }
  layer_common_ = layer_common;
  if (layer_common) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KMProto.KMProject.EffectLayer.layer_common)
}
inline ::KMProto_KMProject_LayerCommon* KMProto_KMProject_EffectLayer::release_layer_common() {
  _has_bits_[0] &= ~0x00000002u;
  ::KMProto_KMProject_LayerCommon* temp = layer_common_;
  layer_common_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KMProto_KMProject_LayerCommon* KMProto_KMProject_EffectLayer::unsafe_arena_release_layer_common() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.EffectLayer.layer_common)
  _has_bits_[0] &= ~0x00000002u;
  ::KMProto_KMProject_LayerCommon* temp = layer_common_;
  layer_common_ = nullptr;
  return temp;
}
inline ::KMProto_KMProject_LayerCommon* KMProto_KMProject_EffectLayer::_internal_mutable_layer_common() {
  _has_bits_[0] |= 0x00000002u;
  if (layer_common_ == nullptr) {
    auto* p = CreateMaybeMessage<::KMProto_KMProject_LayerCommon>(GetArena());
    layer_common_ = p;
  }
  return layer_common_;
}
inline ::KMProto_KMProject_LayerCommon* KMProto_KMProject_EffectLayer::mutable_layer_common() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.EffectLayer.layer_common)
  return _internal_mutable_layer_common();
}
inline void KMProto_KMProject_EffectLayer::set_allocated_layer_common(::KMProto_KMProject_LayerCommon* layer_common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete layer_common_;
  }
  if (layer_common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(layer_common);
    if (message_arena != submessage_arena) {
      layer_common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, layer_common, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  layer_common_ = layer_common;
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.EffectLayer.layer_common)
}

// optional string effect_id = 101;
inline bool KMProto_KMProject_EffectLayer::_internal_has_effect_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KMProto_KMProject_EffectLayer::has_effect_id() const {
  return _internal_has_effect_id();
}
inline void KMProto_KMProject_EffectLayer::clear_effect_id() {
  effect_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KMProto_KMProject_EffectLayer::effect_id() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.EffectLayer.effect_id)
  return _internal_effect_id();
}
inline void KMProto_KMProject_EffectLayer::set_effect_id(const std::string& value) {
  _internal_set_effect_id(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.EffectLayer.effect_id)
}
inline std::string* KMProto_KMProject_EffectLayer::mutable_effect_id() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.EffectLayer.effect_id)
  return _internal_mutable_effect_id();
}
inline const std::string& KMProto_KMProject_EffectLayer::_internal_effect_id() const {
  return effect_id_.Get();
}
inline void KMProto_KMProject_EffectLayer::_internal_set_effect_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  effect_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProject_EffectLayer::set_effect_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  effect_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProject.EffectLayer.effect_id)
}
inline void KMProto_KMProject_EffectLayer::set_effect_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  effect_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProject.EffectLayer.effect_id)
}
inline void KMProto_KMProject_EffectLayer::set_effect_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  effect_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProject.EffectLayer.effect_id)
}
inline std::string* KMProto_KMProject_EffectLayer::_internal_mutable_effect_id() {
  _has_bits_[0] |= 0x00000001u;
  return effect_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProject_EffectLayer::release_effect_id() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.EffectLayer.effect_id)
  if (!_internal_has_effect_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return effect_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProject_EffectLayer::set_allocated_effect_id(std::string* effect_id) {
  if (effect_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  effect_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), effect_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.EffectLayer.effect_id)
}

// optional float effect_strength = 102;
inline bool KMProto_KMProject_EffectLayer::_internal_has_effect_strength() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool KMProto_KMProject_EffectLayer::has_effect_strength() const {
  return _internal_has_effect_strength();
}
inline void KMProto_KMProject_EffectLayer::clear_effect_strength() {
  effect_strength_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float KMProto_KMProject_EffectLayer::_internal_effect_strength() const {
  return effect_strength_;
}
inline float KMProto_KMProject_EffectLayer::effect_strength() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.EffectLayer.effect_strength)
  return _internal_effect_strength();
}
inline void KMProto_KMProject_EffectLayer::_internal_set_effect_strength(float value) {
  _has_bits_[0] |= 0x00000004u;
  effect_strength_ = value;
}
inline void KMProto_KMProject_EffectLayer::set_effect_strength(float value) {
  _internal_set_effect_strength(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.EffectLayer.effect_strength)
}

// optional float effect_variation = 103;
inline bool KMProto_KMProject_EffectLayer::_internal_has_effect_variation() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool KMProto_KMProject_EffectLayer::has_effect_variation() const {
  return _internal_has_effect_variation();
}
inline void KMProto_KMProject_EffectLayer::clear_effect_variation() {
  effect_variation_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float KMProto_KMProject_EffectLayer::_internal_effect_variation() const {
  return effect_variation_;
}
inline float KMProto_KMProject_EffectLayer::effect_variation() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.EffectLayer.effect_variation)
  return _internal_effect_variation();
}
inline void KMProto_KMProject_EffectLayer::_internal_set_effect_variation(float value) {
  _has_bits_[0] |= 0x00000008u;
  effect_variation_ = value;
}
inline void KMProto_KMProject_EffectLayer::set_effect_variation(float value) {
  _internal_set_effect_variation(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.EffectLayer.effect_variation)
}

// -------------------------------------------------------------------

// KMProto_KMProject_ImageLayer

// optional .KMProto.KMProject.LayerCommon layer_common = 100;
inline bool KMProto_KMProject_ImageLayer::_internal_has_layer_common() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || layer_common_ != nullptr);
  return value;
}
inline bool KMProto_KMProject_ImageLayer::has_layer_common() const {
  return _internal_has_layer_common();
}
inline void KMProto_KMProject_ImageLayer::clear_layer_common() {
  if (layer_common_ != nullptr) layer_common_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::KMProto_KMProject_LayerCommon& KMProto_KMProject_ImageLayer::_internal_layer_common() const {
  const ::KMProto_KMProject_LayerCommon* p = layer_common_;
  return p != nullptr ? *p : reinterpret_cast<const ::KMProto_KMProject_LayerCommon&>(
      ::_KMProto_KMProject_LayerCommon_default_instance_);
}
inline const ::KMProto_KMProject_LayerCommon& KMProto_KMProject_ImageLayer::layer_common() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.ImageLayer.layer_common)
  return _internal_layer_common();
}
inline void KMProto_KMProject_ImageLayer::unsafe_arena_set_allocated_layer_common(
    ::KMProto_KMProject_LayerCommon* layer_common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(layer_common_);
  }
  layer_common_ = layer_common;
  if (layer_common) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KMProto.KMProject.ImageLayer.layer_common)
}
inline ::KMProto_KMProject_LayerCommon* KMProto_KMProject_ImageLayer::release_layer_common() {
  _has_bits_[0] &= ~0x00000004u;
  ::KMProto_KMProject_LayerCommon* temp = layer_common_;
  layer_common_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KMProto_KMProject_LayerCommon* KMProto_KMProject_ImageLayer::unsafe_arena_release_layer_common() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.ImageLayer.layer_common)
  _has_bits_[0] &= ~0x00000004u;
  ::KMProto_KMProject_LayerCommon* temp = layer_common_;
  layer_common_ = nullptr;
  return temp;
}
inline ::KMProto_KMProject_LayerCommon* KMProto_KMProject_ImageLayer::_internal_mutable_layer_common() {
  _has_bits_[0] |= 0x00000004u;
  if (layer_common_ == nullptr) {
    auto* p = CreateMaybeMessage<::KMProto_KMProject_LayerCommon>(GetArena());
    layer_common_ = p;
  }
  return layer_common_;
}
inline ::KMProto_KMProject_LayerCommon* KMProto_KMProject_ImageLayer::mutable_layer_common() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.ImageLayer.layer_common)
  return _internal_mutable_layer_common();
}
inline void KMProto_KMProject_ImageLayer::set_allocated_layer_common(::KMProto_KMProject_LayerCommon* layer_common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete layer_common_;
  }
  if (layer_common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(layer_common);
    if (message_arena != submessage_arena) {
      layer_common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, layer_common, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  layer_common_ = layer_common;
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.ImageLayer.layer_common)
}

// optional string image_path = 101;
inline bool KMProto_KMProject_ImageLayer::_internal_has_image_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KMProto_KMProject_ImageLayer::has_image_path() const {
  return _internal_has_image_path();
}
inline void KMProto_KMProject_ImageLayer::clear_image_path() {
  image_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KMProto_KMProject_ImageLayer::image_path() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.ImageLayer.image_path)
  return _internal_image_path();
}
inline void KMProto_KMProject_ImageLayer::set_image_path(const std::string& value) {
  _internal_set_image_path(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.ImageLayer.image_path)
}
inline std::string* KMProto_KMProject_ImageLayer::mutable_image_path() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.ImageLayer.image_path)
  return _internal_mutable_image_path();
}
inline const std::string& KMProto_KMProject_ImageLayer::_internal_image_path() const {
  return image_path_.Get();
}
inline void KMProto_KMProject_ImageLayer::_internal_set_image_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  image_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProject_ImageLayer::set_image_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  image_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProject.ImageLayer.image_path)
}
inline void KMProto_KMProject_ImageLayer::set_image_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  image_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProject.ImageLayer.image_path)
}
inline void KMProto_KMProject_ImageLayer::set_image_path(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  image_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProject.ImageLayer.image_path)
}
inline std::string* KMProto_KMProject_ImageLayer::_internal_mutable_image_path() {
  _has_bits_[0] |= 0x00000001u;
  return image_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProject_ImageLayer::release_image_path() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.ImageLayer.image_path)
  if (!_internal_has_image_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return image_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProject_ImageLayer::set_allocated_image_path(std::string* image_path) {
  if (image_path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  image_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.ImageLayer.image_path)
}

// optional string image_msid = 102;
inline bool KMProto_KMProject_ImageLayer::_internal_has_image_msid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KMProto_KMProject_ImageLayer::has_image_msid() const {
  return _internal_has_image_msid();
}
inline void KMProto_KMProject_ImageLayer::clear_image_msid() {
  image_msid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& KMProto_KMProject_ImageLayer::image_msid() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.ImageLayer.image_msid)
  return _internal_image_msid();
}
inline void KMProto_KMProject_ImageLayer::set_image_msid(const std::string& value) {
  _internal_set_image_msid(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.ImageLayer.image_msid)
}
inline std::string* KMProto_KMProject_ImageLayer::mutable_image_msid() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.ImageLayer.image_msid)
  return _internal_mutable_image_msid();
}
inline const std::string& KMProto_KMProject_ImageLayer::_internal_image_msid() const {
  return image_msid_.Get();
}
inline void KMProto_KMProject_ImageLayer::_internal_set_image_msid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  image_msid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProject_ImageLayer::set_image_msid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  image_msid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProject.ImageLayer.image_msid)
}
inline void KMProto_KMProject_ImageLayer::set_image_msid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  image_msid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProject.ImageLayer.image_msid)
}
inline void KMProto_KMProject_ImageLayer::set_image_msid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  image_msid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProject.ImageLayer.image_msid)
}
inline std::string* KMProto_KMProject_ImageLayer::_internal_mutable_image_msid() {
  _has_bits_[0] |= 0x00000002u;
  return image_msid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProject_ImageLayer::release_image_msid() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.ImageLayer.image_msid)
  if (!_internal_has_image_msid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return image_msid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProject_ImageLayer::set_allocated_image_msid(std::string* image_msid) {
  if (image_msid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  image_msid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_msid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.ImageLayer.image_msid)
}

// optional int32 brightness = 103;
inline bool KMProto_KMProject_ImageLayer::_internal_has_brightness() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool KMProto_KMProject_ImageLayer::has_brightness() const {
  return _internal_has_brightness();
}
inline void KMProto_KMProject_ImageLayer::clear_brightness() {
  brightness_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_ImageLayer::_internal_brightness() const {
  return brightness_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_ImageLayer::brightness() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.ImageLayer.brightness)
  return _internal_brightness();
}
inline void KMProto_KMProject_ImageLayer::_internal_set_brightness(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  brightness_ = value;
}
inline void KMProto_KMProject_ImageLayer::set_brightness(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_brightness(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.ImageLayer.brightness)
}

// optional int32 contrast = 104;
inline bool KMProto_KMProject_ImageLayer::_internal_has_contrast() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool KMProto_KMProject_ImageLayer::has_contrast() const {
  return _internal_has_contrast();
}
inline void KMProto_KMProject_ImageLayer::clear_contrast() {
  contrast_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_ImageLayer::_internal_contrast() const {
  return contrast_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_ImageLayer::contrast() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.ImageLayer.contrast)
  return _internal_contrast();
}
inline void KMProto_KMProject_ImageLayer::_internal_set_contrast(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  contrast_ = value;
}
inline void KMProto_KMProject_ImageLayer::set_contrast(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_contrast(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.ImageLayer.contrast)
}

// optional int32 saturation = 105;
inline bool KMProto_KMProject_ImageLayer::_internal_has_saturation() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool KMProto_KMProject_ImageLayer::has_saturation() const {
  return _internal_has_saturation();
}
inline void KMProto_KMProject_ImageLayer::clear_saturation() {
  saturation_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_ImageLayer::_internal_saturation() const {
  return saturation_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_ImageLayer::saturation() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.ImageLayer.saturation)
  return _internal_saturation();
}
inline void KMProto_KMProject_ImageLayer::_internal_set_saturation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  saturation_ = value;
}
inline void KMProto_KMProject_ImageLayer::set_saturation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_saturation(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.ImageLayer.saturation)
}

// optional .KMProto.KMProject.ColorEffect color_effect = 106;
inline bool KMProto_KMProject_ImageLayer::_internal_has_color_effect() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || color_effect_ != nullptr);
  return value;
}
inline bool KMProto_KMProject_ImageLayer::has_color_effect() const {
  return _internal_has_color_effect();
}
inline void KMProto_KMProject_ImageLayer::clear_color_effect() {
  if (color_effect_ != nullptr) color_effect_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::KMProto_KMProject_ColorEffect& KMProto_KMProject_ImageLayer::_internal_color_effect() const {
  const ::KMProto_KMProject_ColorEffect* p = color_effect_;
  return p != nullptr ? *p : reinterpret_cast<const ::KMProto_KMProject_ColorEffect&>(
      ::_KMProto_KMProject_ColorEffect_default_instance_);
}
inline const ::KMProto_KMProject_ColorEffect& KMProto_KMProject_ImageLayer::color_effect() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.ImageLayer.color_effect)
  return _internal_color_effect();
}
inline void KMProto_KMProject_ImageLayer::unsafe_arena_set_allocated_color_effect(
    ::KMProto_KMProject_ColorEffect* color_effect) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_effect_);
  }
  color_effect_ = color_effect;
  if (color_effect) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KMProto.KMProject.ImageLayer.color_effect)
}
inline ::KMProto_KMProject_ColorEffect* KMProto_KMProject_ImageLayer::release_color_effect() {
  _has_bits_[0] &= ~0x00000008u;
  ::KMProto_KMProject_ColorEffect* temp = color_effect_;
  color_effect_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KMProto_KMProject_ColorEffect* KMProto_KMProject_ImageLayer::unsafe_arena_release_color_effect() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.ImageLayer.color_effect)
  _has_bits_[0] &= ~0x00000008u;
  ::KMProto_KMProject_ColorEffect* temp = color_effect_;
  color_effect_ = nullptr;
  return temp;
}
inline ::KMProto_KMProject_ColorEffect* KMProto_KMProject_ImageLayer::_internal_mutable_color_effect() {
  _has_bits_[0] |= 0x00000008u;
  if (color_effect_ == nullptr) {
    auto* p = CreateMaybeMessage<::KMProto_KMProject_ColorEffect>(GetArena());
    color_effect_ = p;
  }
  return color_effect_;
}
inline ::KMProto_KMProject_ColorEffect* KMProto_KMProject_ImageLayer::mutable_color_effect() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.ImageLayer.color_effect)
  return _internal_mutable_color_effect();
}
inline void KMProto_KMProject_ImageLayer::set_allocated_color_effect(::KMProto_KMProject_ColorEffect* color_effect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete color_effect_;
  }
  if (color_effect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(color_effect);
    if (message_arena != submessage_arena) {
      color_effect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color_effect, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  color_effect_ = color_effect;
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.ImageLayer.color_effect)
}

// repeated .KMProto.KMProject.DrawingAction drawing_actions = 107;
inline int KMProto_KMProject_ImageLayer::_internal_drawing_actions_size() const {
  return drawing_actions_.size();
}
inline int KMProto_KMProject_ImageLayer::drawing_actions_size() const {
  return _internal_drawing_actions_size();
}
inline void KMProto_KMProject_ImageLayer::clear_drawing_actions() {
  drawing_actions_.Clear();
}
inline ::KMProto_KMProject_DrawingAction* KMProto_KMProject_ImageLayer::mutable_drawing_actions(int index) {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.ImageLayer.drawing_actions)
  return drawing_actions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_DrawingAction >*
KMProto_KMProject_ImageLayer::mutable_drawing_actions() {
  // @@protoc_insertion_point(field_mutable_list:KMProto.KMProject.ImageLayer.drawing_actions)
  return &drawing_actions_;
}
inline const ::KMProto_KMProject_DrawingAction& KMProto_KMProject_ImageLayer::_internal_drawing_actions(int index) const {
  return drawing_actions_.Get(index);
}
inline const ::KMProto_KMProject_DrawingAction& KMProto_KMProject_ImageLayer::drawing_actions(int index) const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.ImageLayer.drawing_actions)
  return _internal_drawing_actions(index);
}
inline ::KMProto_KMProject_DrawingAction* KMProto_KMProject_ImageLayer::_internal_add_drawing_actions() {
  return drawing_actions_.Add();
}
inline ::KMProto_KMProject_DrawingAction* KMProto_KMProject_ImageLayer::add_drawing_actions() {
  // @@protoc_insertion_point(field_add:KMProto.KMProject.ImageLayer.drawing_actions)
  return _internal_add_drawing_actions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_DrawingAction >&
KMProto_KMProject_ImageLayer::drawing_actions() const {
  // @@protoc_insertion_point(field_list:KMProto.KMProject.ImageLayer.drawing_actions)
  return drawing_actions_;
}

// optional int32 chroma_key_color = 108;
inline bool KMProto_KMProject_ImageLayer::_internal_has_chroma_key_color() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool KMProto_KMProject_ImageLayer::has_chroma_key_color() const {
  return _internal_has_chroma_key_color();
}
inline void KMProto_KMProject_ImageLayer::clear_chroma_key_color() {
  chroma_key_color_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_ImageLayer::_internal_chroma_key_color() const {
  return chroma_key_color_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_ImageLayer::chroma_key_color() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.ImageLayer.chroma_key_color)
  return _internal_chroma_key_color();
}
inline void KMProto_KMProject_ImageLayer::_internal_set_chroma_key_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  chroma_key_color_ = value;
}
inline void KMProto_KMProject_ImageLayer::set_chroma_key_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chroma_key_color(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.ImageLayer.chroma_key_color)
}

// optional bool chroma_key_enabled = 109;
inline bool KMProto_KMProject_ImageLayer::_internal_has_chroma_key_enabled() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool KMProto_KMProject_ImageLayer::has_chroma_key_enabled() const {
  return _internal_has_chroma_key_enabled();
}
inline void KMProto_KMProject_ImageLayer::clear_chroma_key_enabled() {
  chroma_key_enabled_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool KMProto_KMProject_ImageLayer::_internal_chroma_key_enabled() const {
  return chroma_key_enabled_;
}
inline bool KMProto_KMProject_ImageLayer::chroma_key_enabled() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.ImageLayer.chroma_key_enabled)
  return _internal_chroma_key_enabled();
}
inline void KMProto_KMProject_ImageLayer::_internal_set_chroma_key_enabled(bool value) {
  _has_bits_[0] |= 0x00000400u;
  chroma_key_enabled_ = value;
}
inline void KMProto_KMProject_ImageLayer::set_chroma_key_enabled(bool value) {
  _internal_set_chroma_key_enabled(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.ImageLayer.chroma_key_enabled)
}

// optional float chroma_key_clip_fg = 110;
inline bool KMProto_KMProject_ImageLayer::_internal_has_chroma_key_clip_fg() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool KMProto_KMProject_ImageLayer::has_chroma_key_clip_fg() const {
  return _internal_has_chroma_key_clip_fg();
}
inline void KMProto_KMProject_ImageLayer::clear_chroma_key_clip_fg() {
  chroma_key_clip_fg_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float KMProto_KMProject_ImageLayer::_internal_chroma_key_clip_fg() const {
  return chroma_key_clip_fg_;
}
inline float KMProto_KMProject_ImageLayer::chroma_key_clip_fg() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.ImageLayer.chroma_key_clip_fg)
  return _internal_chroma_key_clip_fg();
}
inline void KMProto_KMProject_ImageLayer::_internal_set_chroma_key_clip_fg(float value) {
  _has_bits_[0] |= 0x00000800u;
  chroma_key_clip_fg_ = value;
}
inline void KMProto_KMProject_ImageLayer::set_chroma_key_clip_fg(float value) {
  _internal_set_chroma_key_clip_fg(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.ImageLayer.chroma_key_clip_fg)
}

// optional float chroma_key_clip_bg = 111;
inline bool KMProto_KMProject_ImageLayer::_internal_has_chroma_key_clip_bg() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool KMProto_KMProject_ImageLayer::has_chroma_key_clip_bg() const {
  return _internal_has_chroma_key_clip_bg();
}
inline void KMProto_KMProject_ImageLayer::clear_chroma_key_clip_bg() {
  chroma_key_clip_bg_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float KMProto_KMProject_ImageLayer::_internal_chroma_key_clip_bg() const {
  return chroma_key_clip_bg_;
}
inline float KMProto_KMProject_ImageLayer::chroma_key_clip_bg() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.ImageLayer.chroma_key_clip_bg)
  return _internal_chroma_key_clip_bg();
}
inline void KMProto_KMProject_ImageLayer::_internal_set_chroma_key_clip_bg(float value) {
  _has_bits_[0] |= 0x00001000u;
  chroma_key_clip_bg_ = value;
}
inline void KMProto_KMProject_ImageLayer::set_chroma_key_clip_bg(float value) {
  _internal_set_chroma_key_clip_bg(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.ImageLayer.chroma_key_clip_bg)
}

// optional float chroma_key_blend_x0 = 112;
inline bool KMProto_KMProject_ImageLayer::_internal_has_chroma_key_blend_x0() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool KMProto_KMProject_ImageLayer::has_chroma_key_blend_x0() const {
  return _internal_has_chroma_key_blend_x0();
}
inline void KMProto_KMProject_ImageLayer::clear_chroma_key_blend_x0() {
  chroma_key_blend_x0_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float KMProto_KMProject_ImageLayer::_internal_chroma_key_blend_x0() const {
  return chroma_key_blend_x0_;
}
inline float KMProto_KMProject_ImageLayer::chroma_key_blend_x0() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.ImageLayer.chroma_key_blend_x0)
  return _internal_chroma_key_blend_x0();
}
inline void KMProto_KMProject_ImageLayer::_internal_set_chroma_key_blend_x0(float value) {
  _has_bits_[0] |= 0x00002000u;
  chroma_key_blend_x0_ = value;
}
inline void KMProto_KMProject_ImageLayer::set_chroma_key_blend_x0(float value) {
  _internal_set_chroma_key_blend_x0(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.ImageLayer.chroma_key_blend_x0)
}

// optional float chroma_key_blend_y0 = 113;
inline bool KMProto_KMProject_ImageLayer::_internal_has_chroma_key_blend_y0() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool KMProto_KMProject_ImageLayer::has_chroma_key_blend_y0() const {
  return _internal_has_chroma_key_blend_y0();
}
inline void KMProto_KMProject_ImageLayer::clear_chroma_key_blend_y0() {
  chroma_key_blend_y0_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float KMProto_KMProject_ImageLayer::_internal_chroma_key_blend_y0() const {
  return chroma_key_blend_y0_;
}
inline float KMProto_KMProject_ImageLayer::chroma_key_blend_y0() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.ImageLayer.chroma_key_blend_y0)
  return _internal_chroma_key_blend_y0();
}
inline void KMProto_KMProject_ImageLayer::_internal_set_chroma_key_blend_y0(float value) {
  _has_bits_[0] |= 0x00004000u;
  chroma_key_blend_y0_ = value;
}
inline void KMProto_KMProject_ImageLayer::set_chroma_key_blend_y0(float value) {
  _internal_set_chroma_key_blend_y0(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.ImageLayer.chroma_key_blend_y0)
}

// optional float chroma_key_blend_x1 = 114;
inline bool KMProto_KMProject_ImageLayer::_internal_has_chroma_key_blend_x1() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool KMProto_KMProject_ImageLayer::has_chroma_key_blend_x1() const {
  return _internal_has_chroma_key_blend_x1();
}
inline void KMProto_KMProject_ImageLayer::clear_chroma_key_blend_x1() {
  chroma_key_blend_x1_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float KMProto_KMProject_ImageLayer::_internal_chroma_key_blend_x1() const {
  return chroma_key_blend_x1_;
}
inline float KMProto_KMProject_ImageLayer::chroma_key_blend_x1() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.ImageLayer.chroma_key_blend_x1)
  return _internal_chroma_key_blend_x1();
}
inline void KMProto_KMProject_ImageLayer::_internal_set_chroma_key_blend_x1(float value) {
  _has_bits_[0] |= 0x00008000u;
  chroma_key_blend_x1_ = value;
}
inline void KMProto_KMProject_ImageLayer::set_chroma_key_blend_x1(float value) {
  _internal_set_chroma_key_blend_x1(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.ImageLayer.chroma_key_blend_x1)
}

// optional float chroma_key_blend_y1 = 115;
inline bool KMProto_KMProject_ImageLayer::_internal_has_chroma_key_blend_y1() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool KMProto_KMProject_ImageLayer::has_chroma_key_blend_y1() const {
  return _internal_has_chroma_key_blend_y1();
}
inline void KMProto_KMProject_ImageLayer::clear_chroma_key_blend_y1() {
  chroma_key_blend_y1_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float KMProto_KMProject_ImageLayer::_internal_chroma_key_blend_y1() const {
  return chroma_key_blend_y1_;
}
inline float KMProto_KMProject_ImageLayer::chroma_key_blend_y1() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.ImageLayer.chroma_key_blend_y1)
  return _internal_chroma_key_blend_y1();
}
inline void KMProto_KMProject_ImageLayer::_internal_set_chroma_key_blend_y1(float value) {
  _has_bits_[0] |= 0x00010000u;
  chroma_key_blend_y1_ = value;
}
inline void KMProto_KMProject_ImageLayer::set_chroma_key_blend_y1(float value) {
  _internal_set_chroma_key_blend_y1(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.ImageLayer.chroma_key_blend_y1)
}

// optional .KMProto.KMProject.ColorAdjustment colorAdjustment = 116;
inline bool KMProto_KMProject_ImageLayer::_internal_has_coloradjustment() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || coloradjustment_ != nullptr);
  return value;
}
inline bool KMProto_KMProject_ImageLayer::has_coloradjustment() const {
  return _internal_has_coloradjustment();
}
inline void KMProto_KMProject_ImageLayer::clear_coloradjustment() {
  if (coloradjustment_ != nullptr) coloradjustment_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::KMProto_KMProject_ColorAdjustment& KMProto_KMProject_ImageLayer::_internal_coloradjustment() const {
  const ::KMProto_KMProject_ColorAdjustment* p = coloradjustment_;
  return p != nullptr ? *p : reinterpret_cast<const ::KMProto_KMProject_ColorAdjustment&>(
      ::_KMProto_KMProject_ColorAdjustment_default_instance_);
}
inline const ::KMProto_KMProject_ColorAdjustment& KMProto_KMProject_ImageLayer::coloradjustment() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.ImageLayer.colorAdjustment)
  return _internal_coloradjustment();
}
inline void KMProto_KMProject_ImageLayer::unsafe_arena_set_allocated_coloradjustment(
    ::KMProto_KMProject_ColorAdjustment* coloradjustment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coloradjustment_);
  }
  coloradjustment_ = coloradjustment;
  if (coloradjustment) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KMProto.KMProject.ImageLayer.colorAdjustment)
}
inline ::KMProto_KMProject_ColorAdjustment* KMProto_KMProject_ImageLayer::release_coloradjustment() {
  _has_bits_[0] &= ~0x00000010u;
  ::KMProto_KMProject_ColorAdjustment* temp = coloradjustment_;
  coloradjustment_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KMProto_KMProject_ColorAdjustment* KMProto_KMProject_ImageLayer::unsafe_arena_release_coloradjustment() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.ImageLayer.colorAdjustment)
  _has_bits_[0] &= ~0x00000010u;
  ::KMProto_KMProject_ColorAdjustment* temp = coloradjustment_;
  coloradjustment_ = nullptr;
  return temp;
}
inline ::KMProto_KMProject_ColorAdjustment* KMProto_KMProject_ImageLayer::_internal_mutable_coloradjustment() {
  _has_bits_[0] |= 0x00000010u;
  if (coloradjustment_ == nullptr) {
    auto* p = CreateMaybeMessage<::KMProto_KMProject_ColorAdjustment>(GetArena());
    coloradjustment_ = p;
  }
  return coloradjustment_;
}
inline ::KMProto_KMProject_ColorAdjustment* KMProto_KMProject_ImageLayer::mutable_coloradjustment() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.ImageLayer.colorAdjustment)
  return _internal_mutable_coloradjustment();
}
inline void KMProto_KMProject_ImageLayer::set_allocated_coloradjustment(::KMProto_KMProject_ColorAdjustment* coloradjustment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete coloradjustment_;
  }
  if (coloradjustment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(coloradjustment);
    if (message_arena != submessage_arena) {
      coloradjustment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coloradjustment, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  coloradjustment_ = coloradjustment;
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.ImageLayer.colorAdjustment)
}

// optional .KMProto.KMProject.ColorFilter colorFilter = 117;
inline bool KMProto_KMProject_ImageLayer::_internal_has_colorfilter() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || colorfilter_ != nullptr);
  return value;
}
inline bool KMProto_KMProject_ImageLayer::has_colorfilter() const {
  return _internal_has_colorfilter();
}
inline void KMProto_KMProject_ImageLayer::clear_colorfilter() {
  if (colorfilter_ != nullptr) colorfilter_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::KMProto_KMProject_ColorFilter& KMProto_KMProject_ImageLayer::_internal_colorfilter() const {
  const ::KMProto_KMProject_ColorFilter* p = colorfilter_;
  return p != nullptr ? *p : reinterpret_cast<const ::KMProto_KMProject_ColorFilter&>(
      ::_KMProto_KMProject_ColorFilter_default_instance_);
}
inline const ::KMProto_KMProject_ColorFilter& KMProto_KMProject_ImageLayer::colorfilter() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.ImageLayer.colorFilter)
  return _internal_colorfilter();
}
inline void KMProto_KMProject_ImageLayer::unsafe_arena_set_allocated_colorfilter(
    ::KMProto_KMProject_ColorFilter* colorfilter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(colorfilter_);
  }
  colorfilter_ = colorfilter;
  if (colorfilter) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KMProto.KMProject.ImageLayer.colorFilter)
}
inline ::KMProto_KMProject_ColorFilter* KMProto_KMProject_ImageLayer::release_colorfilter() {
  _has_bits_[0] &= ~0x00000020u;
  ::KMProto_KMProject_ColorFilter* temp = colorfilter_;
  colorfilter_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KMProto_KMProject_ColorFilter* KMProto_KMProject_ImageLayer::unsafe_arena_release_colorfilter() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.ImageLayer.colorFilter)
  _has_bits_[0] &= ~0x00000020u;
  ::KMProto_KMProject_ColorFilter* temp = colorfilter_;
  colorfilter_ = nullptr;
  return temp;
}
inline ::KMProto_KMProject_ColorFilter* KMProto_KMProject_ImageLayer::_internal_mutable_colorfilter() {
  _has_bits_[0] |= 0x00000020u;
  if (colorfilter_ == nullptr) {
    auto* p = CreateMaybeMessage<::KMProto_KMProject_ColorFilter>(GetArena());
    colorfilter_ = p;
  }
  return colorfilter_;
}
inline ::KMProto_KMProject_ColorFilter* KMProto_KMProject_ImageLayer::mutable_colorfilter() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.ImageLayer.colorFilter)
  return _internal_mutable_colorfilter();
}
inline void KMProto_KMProject_ImageLayer::set_allocated_colorfilter(::KMProto_KMProject_ColorFilter* colorfilter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete colorfilter_;
  }
  if (colorfilter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(colorfilter);
    if (message_arena != submessage_arena) {
      colorfilter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, colorfilter, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  colorfilter_ = colorfilter;
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.ImageLayer.colorFilter)
}

// optional int32 engine_clip_id = 118;
inline bool KMProto_KMProject_ImageLayer::_internal_has_engine_clip_id() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool KMProto_KMProject_ImageLayer::has_engine_clip_id() const {
  return _internal_has_engine_clip_id();
}
inline void KMProto_KMProject_ImageLayer::clear_engine_clip_id() {
  engine_clip_id_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_ImageLayer::_internal_engine_clip_id() const {
  return engine_clip_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_ImageLayer::engine_clip_id() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.ImageLayer.engine_clip_id)
  return _internal_engine_clip_id();
}
inline void KMProto_KMProject_ImageLayer::_internal_set_engine_clip_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00020000u;
  engine_clip_id_ = value;
}
inline void KMProto_KMProject_ImageLayer::set_engine_clip_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_engine_clip_id(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.ImageLayer.engine_clip_id)
}

// -------------------------------------------------------------------

// KMProto_KMProject_VideoLayer

// optional .KMProto.KMProject.LayerCommon layer_common = 100;
inline bool KMProto_KMProject_VideoLayer::_internal_has_layer_common() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || layer_common_ != nullptr);
  return value;
}
inline bool KMProto_KMProject_VideoLayer::has_layer_common() const {
  return _internal_has_layer_common();
}
inline void KMProto_KMProject_VideoLayer::clear_layer_common() {
  if (layer_common_ != nullptr) layer_common_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::KMProto_KMProject_LayerCommon& KMProto_KMProject_VideoLayer::_internal_layer_common() const {
  const ::KMProto_KMProject_LayerCommon* p = layer_common_;
  return p != nullptr ? *p : reinterpret_cast<const ::KMProto_KMProject_LayerCommon&>(
      ::_KMProto_KMProject_LayerCommon_default_instance_);
}
inline const ::KMProto_KMProject_LayerCommon& KMProto_KMProject_VideoLayer::layer_common() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VideoLayer.layer_common)
  return _internal_layer_common();
}
inline void KMProto_KMProject_VideoLayer::unsafe_arena_set_allocated_layer_common(
    ::KMProto_KMProject_LayerCommon* layer_common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(layer_common_);
  }
  layer_common_ = layer_common;
  if (layer_common) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KMProto.KMProject.VideoLayer.layer_common)
}
inline ::KMProto_KMProject_LayerCommon* KMProto_KMProject_VideoLayer::release_layer_common() {
  _has_bits_[0] &= ~0x00000040u;
  ::KMProto_KMProject_LayerCommon* temp = layer_common_;
  layer_common_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KMProto_KMProject_LayerCommon* KMProto_KMProject_VideoLayer::unsafe_arena_release_layer_common() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.VideoLayer.layer_common)
  _has_bits_[0] &= ~0x00000040u;
  ::KMProto_KMProject_LayerCommon* temp = layer_common_;
  layer_common_ = nullptr;
  return temp;
}
inline ::KMProto_KMProject_LayerCommon* KMProto_KMProject_VideoLayer::_internal_mutable_layer_common() {
  _has_bits_[0] |= 0x00000040u;
  if (layer_common_ == nullptr) {
    auto* p = CreateMaybeMessage<::KMProto_KMProject_LayerCommon>(GetArena());
    layer_common_ = p;
  }
  return layer_common_;
}
inline ::KMProto_KMProject_LayerCommon* KMProto_KMProject_VideoLayer::mutable_layer_common() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.VideoLayer.layer_common)
  return _internal_mutable_layer_common();
}
inline void KMProto_KMProject_VideoLayer::set_allocated_layer_common(::KMProto_KMProject_LayerCommon* layer_common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete layer_common_;
  }
  if (layer_common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(layer_common);
    if (message_arena != submessage_arena) {
      layer_common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, layer_common, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  layer_common_ = layer_common;
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.VideoLayer.layer_common)
}

// optional string video_path = 101;
inline bool KMProto_KMProject_VideoLayer::_internal_has_video_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KMProto_KMProject_VideoLayer::has_video_path() const {
  return _internal_has_video_path();
}
inline void KMProto_KMProject_VideoLayer::clear_video_path() {
  video_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KMProto_KMProject_VideoLayer::video_path() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VideoLayer.video_path)
  return _internal_video_path();
}
inline void KMProto_KMProject_VideoLayer::set_video_path(const std::string& value) {
  _internal_set_video_path(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VideoLayer.video_path)
}
inline std::string* KMProto_KMProject_VideoLayer::mutable_video_path() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.VideoLayer.video_path)
  return _internal_mutable_video_path();
}
inline const std::string& KMProto_KMProject_VideoLayer::_internal_video_path() const {
  return video_path_.Get();
}
inline void KMProto_KMProject_VideoLayer::_internal_set_video_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  video_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProject_VideoLayer::set_video_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  video_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProject.VideoLayer.video_path)
}
inline void KMProto_KMProject_VideoLayer::set_video_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  video_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProject.VideoLayer.video_path)
}
inline void KMProto_KMProject_VideoLayer::set_video_path(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  video_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProject.VideoLayer.video_path)
}
inline std::string* KMProto_KMProject_VideoLayer::_internal_mutable_video_path() {
  _has_bits_[0] |= 0x00000001u;
  return video_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProject_VideoLayer::release_video_path() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.VideoLayer.video_path)
  if (!_internal_has_video_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return video_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProject_VideoLayer::set_allocated_video_path(std::string* video_path) {
  if (video_path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  video_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), video_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.VideoLayer.video_path)
}

// optional string video_msid = 102;
inline bool KMProto_KMProject_VideoLayer::_internal_has_video_msid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KMProto_KMProject_VideoLayer::has_video_msid() const {
  return _internal_has_video_msid();
}
inline void KMProto_KMProject_VideoLayer::clear_video_msid() {
  video_msid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& KMProto_KMProject_VideoLayer::video_msid() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VideoLayer.video_msid)
  return _internal_video_msid();
}
inline void KMProto_KMProject_VideoLayer::set_video_msid(const std::string& value) {
  _internal_set_video_msid(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VideoLayer.video_msid)
}
inline std::string* KMProto_KMProject_VideoLayer::mutable_video_msid() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.VideoLayer.video_msid)
  return _internal_mutable_video_msid();
}
inline const std::string& KMProto_KMProject_VideoLayer::_internal_video_msid() const {
  return video_msid_.Get();
}
inline void KMProto_KMProject_VideoLayer::_internal_set_video_msid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  video_msid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProject_VideoLayer::set_video_msid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  video_msid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProject.VideoLayer.video_msid)
}
inline void KMProto_KMProject_VideoLayer::set_video_msid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  video_msid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProject.VideoLayer.video_msid)
}
inline void KMProto_KMProject_VideoLayer::set_video_msid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  video_msid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProject.VideoLayer.video_msid)
}
inline std::string* KMProto_KMProject_VideoLayer::_internal_mutable_video_msid() {
  _has_bits_[0] |= 0x00000002u;
  return video_msid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProject_VideoLayer::release_video_msid() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.VideoLayer.video_msid)
  if (!_internal_has_video_msid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return video_msid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProject_VideoLayer::set_allocated_video_msid(std::string* video_msid) {
  if (video_msid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  video_msid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), video_msid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.VideoLayer.video_msid)
}

// optional int32 brightness = 103;
inline bool KMProto_KMProject_VideoLayer::_internal_has_brightness() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VideoLayer::has_brightness() const {
  return _internal_has_brightness();
}
inline void KMProto_KMProject_VideoLayer::clear_brightness() {
  brightness_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VideoLayer::_internal_brightness() const {
  return brightness_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VideoLayer::brightness() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VideoLayer.brightness)
  return _internal_brightness();
}
inline void KMProto_KMProject_VideoLayer::_internal_set_brightness(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  brightness_ = value;
}
inline void KMProto_KMProject_VideoLayer::set_brightness(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_brightness(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VideoLayer.brightness)
}

// optional int32 contrast = 104;
inline bool KMProto_KMProject_VideoLayer::_internal_has_contrast() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VideoLayer::has_contrast() const {
  return _internal_has_contrast();
}
inline void KMProto_KMProject_VideoLayer::clear_contrast() {
  contrast_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VideoLayer::_internal_contrast() const {
  return contrast_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VideoLayer::contrast() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VideoLayer.contrast)
  return _internal_contrast();
}
inline void KMProto_KMProject_VideoLayer::_internal_set_contrast(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  contrast_ = value;
}
inline void KMProto_KMProject_VideoLayer::set_contrast(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_contrast(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VideoLayer.contrast)
}

// optional int32 saturation = 105;
inline bool KMProto_KMProject_VideoLayer::_internal_has_saturation() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VideoLayer::has_saturation() const {
  return _internal_has_saturation();
}
inline void KMProto_KMProject_VideoLayer::clear_saturation() {
  saturation_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VideoLayer::_internal_saturation() const {
  return saturation_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VideoLayer::saturation() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VideoLayer.saturation)
  return _internal_saturation();
}
inline void KMProto_KMProject_VideoLayer::_internal_set_saturation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  saturation_ = value;
}
inline void KMProto_KMProject_VideoLayer::set_saturation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_saturation(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VideoLayer.saturation)
}

// optional .KMProto.KMProject.ColorEffect color_effect = 106;
inline bool KMProto_KMProject_VideoLayer::_internal_has_color_effect() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || color_effect_ != nullptr);
  return value;
}
inline bool KMProto_KMProject_VideoLayer::has_color_effect() const {
  return _internal_has_color_effect();
}
inline void KMProto_KMProject_VideoLayer::clear_color_effect() {
  if (color_effect_ != nullptr) color_effect_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::KMProto_KMProject_ColorEffect& KMProto_KMProject_VideoLayer::_internal_color_effect() const {
  const ::KMProto_KMProject_ColorEffect* p = color_effect_;
  return p != nullptr ? *p : reinterpret_cast<const ::KMProto_KMProject_ColorEffect&>(
      ::_KMProto_KMProject_ColorEffect_default_instance_);
}
inline const ::KMProto_KMProject_ColorEffect& KMProto_KMProject_VideoLayer::color_effect() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VideoLayer.color_effect)
  return _internal_color_effect();
}
inline void KMProto_KMProject_VideoLayer::unsafe_arena_set_allocated_color_effect(
    ::KMProto_KMProject_ColorEffect* color_effect) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_effect_);
  }
  color_effect_ = color_effect;
  if (color_effect) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KMProto.KMProject.VideoLayer.color_effect)
}
inline ::KMProto_KMProject_ColorEffect* KMProto_KMProject_VideoLayer::release_color_effect() {
  _has_bits_[0] &= ~0x00000080u;
  ::KMProto_KMProject_ColorEffect* temp = color_effect_;
  color_effect_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KMProto_KMProject_ColorEffect* KMProto_KMProject_VideoLayer::unsafe_arena_release_color_effect() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.VideoLayer.color_effect)
  _has_bits_[0] &= ~0x00000080u;
  ::KMProto_KMProject_ColorEffect* temp = color_effect_;
  color_effect_ = nullptr;
  return temp;
}
inline ::KMProto_KMProject_ColorEffect* KMProto_KMProject_VideoLayer::_internal_mutable_color_effect() {
  _has_bits_[0] |= 0x00000080u;
  if (color_effect_ == nullptr) {
    auto* p = CreateMaybeMessage<::KMProto_KMProject_ColorEffect>(GetArena());
    color_effect_ = p;
  }
  return color_effect_;
}
inline ::KMProto_KMProject_ColorEffect* KMProto_KMProject_VideoLayer::mutable_color_effect() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.VideoLayer.color_effect)
  return _internal_mutable_color_effect();
}
inline void KMProto_KMProject_VideoLayer::set_allocated_color_effect(::KMProto_KMProject_ColorEffect* color_effect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete color_effect_;
  }
  if (color_effect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(color_effect);
    if (message_arena != submessage_arena) {
      color_effect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color_effect, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  color_effect_ = color_effect;
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.VideoLayer.color_effect)
}

// optional int32 engine_clip_id = 107;
inline bool KMProto_KMProject_VideoLayer::_internal_has_engine_clip_id() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VideoLayer::has_engine_clip_id() const {
  return _internal_has_engine_clip_id();
}
inline void KMProto_KMProject_VideoLayer::clear_engine_clip_id() {
  engine_clip_id_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VideoLayer::_internal_engine_clip_id() const {
  return engine_clip_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VideoLayer::engine_clip_id() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VideoLayer.engine_clip_id)
  return _internal_engine_clip_id();
}
inline void KMProto_KMProject_VideoLayer::_internal_set_engine_clip_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  engine_clip_id_ = value;
}
inline void KMProto_KMProject_VideoLayer::set_engine_clip_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_engine_clip_id(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VideoLayer.engine_clip_id)
}

// optional int32 original_clip_duration = 108;
inline bool KMProto_KMProject_VideoLayer::_internal_has_original_clip_duration() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VideoLayer::has_original_clip_duration() const {
  return _internal_has_original_clip_duration();
}
inline void KMProto_KMProject_VideoLayer::clear_original_clip_duration() {
  original_clip_duration_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VideoLayer::_internal_original_clip_duration() const {
  return original_clip_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VideoLayer::original_clip_duration() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VideoLayer.original_clip_duration)
  return _internal_original_clip_duration();
}
inline void KMProto_KMProject_VideoLayer::_internal_set_original_clip_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  original_clip_duration_ = value;
}
inline void KMProto_KMProject_VideoLayer::set_original_clip_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_original_clip_duration(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VideoLayer.original_clip_duration)
}

// optional int32 original_video_width = 109;
inline bool KMProto_KMProject_VideoLayer::_internal_has_original_video_width() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VideoLayer::has_original_video_width() const {
  return _internal_has_original_video_width();
}
inline void KMProto_KMProject_VideoLayer::clear_original_video_width() {
  original_video_width_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VideoLayer::_internal_original_video_width() const {
  return original_video_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VideoLayer::original_video_width() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VideoLayer.original_video_width)
  return _internal_original_video_width();
}
inline void KMProto_KMProject_VideoLayer::_internal_set_original_video_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00020000u;
  original_video_width_ = value;
}
inline void KMProto_KMProject_VideoLayer::set_original_video_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_original_video_width(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VideoLayer.original_video_width)
}

// optional int32 original_video_height = 110;
inline bool KMProto_KMProject_VideoLayer::_internal_has_original_video_height() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VideoLayer::has_original_video_height() const {
  return _internal_has_original_video_height();
}
inline void KMProto_KMProject_VideoLayer::clear_original_video_height() {
  original_video_height_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VideoLayer::_internal_original_video_height() const {
  return original_video_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VideoLayer::original_video_height() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VideoLayer.original_video_height)
  return _internal_original_video_height();
}
inline void KMProto_KMProject_VideoLayer::_internal_set_original_video_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00040000u;
  original_video_height_ = value;
}
inline void KMProto_KMProject_VideoLayer::set_original_video_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_original_video_height(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VideoLayer.original_video_height)
}

// optional bool has_audio = 111;
inline bool KMProto_KMProject_VideoLayer::_internal_has_has_audio() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VideoLayer::has_has_audio() const {
  return _internal_has_has_audio();
}
inline void KMProto_KMProject_VideoLayer::clear_has_audio() {
  has_audio_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool KMProto_KMProject_VideoLayer::_internal_has_audio() const {
  return has_audio_;
}
inline bool KMProto_KMProject_VideoLayer::has_audio() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VideoLayer.has_audio)
  return _internal_has_audio();
}
inline void KMProto_KMProject_VideoLayer::_internal_set_has_audio(bool value) {
  _has_bits_[0] |= 0x00080000u;
  has_audio_ = value;
}
inline void KMProto_KMProject_VideoLayer::set_has_audio(bool value) {
  _internal_set_has_audio(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VideoLayer.has_audio)
}

// optional bool has_video = 112;
inline bool KMProto_KMProject_VideoLayer::_internal_has_has_video() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VideoLayer::has_has_video() const {
  return _internal_has_has_video();
}
inline void KMProto_KMProject_VideoLayer::clear_has_video() {
  has_video_ = false;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool KMProto_KMProject_VideoLayer::_internal_has_video() const {
  return has_video_;
}
inline bool KMProto_KMProject_VideoLayer::has_video() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VideoLayer.has_video)
  return _internal_has_video();
}
inline void KMProto_KMProject_VideoLayer::_internal_set_has_video(bool value) {
  _has_bits_[0] |= 0x00100000u;
  has_video_ = value;
}
inline void KMProto_KMProject_VideoLayer::set_has_video(bool value) {
  _internal_set_has_video(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VideoLayer.has_video)
}

// optional bool mute_audio = 113;
inline bool KMProto_KMProject_VideoLayer::_internal_has_mute_audio() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VideoLayer::has_mute_audio() const {
  return _internal_has_mute_audio();
}
inline void KMProto_KMProject_VideoLayer::clear_mute_audio() {
  mute_audio_ = false;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool KMProto_KMProject_VideoLayer::_internal_mute_audio() const {
  return mute_audio_;
}
inline bool KMProto_KMProject_VideoLayer::mute_audio() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VideoLayer.mute_audio)
  return _internal_mute_audio();
}
inline void KMProto_KMProject_VideoLayer::_internal_set_mute_audio(bool value) {
  _has_bits_[0] |= 0x00200000u;
  mute_audio_ = value;
}
inline void KMProto_KMProject_VideoLayer::set_mute_audio(bool value) {
  _internal_set_mute_audio(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VideoLayer.mute_audio)
}

// optional int32 clip_volume = 114;
inline bool KMProto_KMProject_VideoLayer::_internal_has_clip_volume() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VideoLayer::has_clip_volume() const {
  return _internal_has_clip_volume();
}
inline void KMProto_KMProject_VideoLayer::clear_clip_volume() {
  clip_volume_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VideoLayer::_internal_clip_volume() const {
  return clip_volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VideoLayer::clip_volume() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VideoLayer.clip_volume)
  return _internal_clip_volume();
}
inline void KMProto_KMProject_VideoLayer::_internal_set_clip_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00800000u;
  clip_volume_ = value;
}
inline void KMProto_KMProject_VideoLayer::set_clip_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_clip_volume(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VideoLayer.clip_volume)
}

// optional int32 playback_speed = 115;
inline bool KMProto_KMProject_VideoLayer::_internal_has_playback_speed() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VideoLayer::has_playback_speed() const {
  return _internal_has_playback_speed();
}
inline void KMProto_KMProject_VideoLayer::clear_playback_speed() {
  playback_speed_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VideoLayer::_internal_playback_speed() const {
  return playback_speed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VideoLayer::playback_speed() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VideoLayer.playback_speed)
  return _internal_playback_speed();
}
inline void KMProto_KMProject_VideoLayer::_internal_set_playback_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x01000000u;
  playback_speed_ = value;
}
inline void KMProto_KMProject_VideoLayer::set_playback_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playback_speed(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VideoLayer.playback_speed)
}

// repeated int32 volume_envelope_time = 116 [packed = true];
inline int KMProto_KMProject_VideoLayer::_internal_volume_envelope_time_size() const {
  return volume_envelope_time_.size();
}
inline int KMProto_KMProject_VideoLayer::volume_envelope_time_size() const {
  return _internal_volume_envelope_time_size();
}
inline void KMProto_KMProject_VideoLayer::clear_volume_envelope_time() {
  volume_envelope_time_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VideoLayer::_internal_volume_envelope_time(int index) const {
  return volume_envelope_time_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VideoLayer::volume_envelope_time(int index) const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VideoLayer.volume_envelope_time)
  return _internal_volume_envelope_time(index);
}
inline void KMProto_KMProject_VideoLayer::set_volume_envelope_time(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  volume_envelope_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VideoLayer.volume_envelope_time)
}
inline void KMProto_KMProject_VideoLayer::_internal_add_volume_envelope_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  volume_envelope_time_.Add(value);
}
inline void KMProto_KMProject_VideoLayer::add_volume_envelope_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_volume_envelope_time(value);
  // @@protoc_insertion_point(field_add:KMProto.KMProject.VideoLayer.volume_envelope_time)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
KMProto_KMProject_VideoLayer::_internal_volume_envelope_time() const {
  return volume_envelope_time_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
KMProto_KMProject_VideoLayer::volume_envelope_time() const {
  // @@protoc_insertion_point(field_list:KMProto.KMProject.VideoLayer.volume_envelope_time)
  return _internal_volume_envelope_time();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
KMProto_KMProject_VideoLayer::_internal_mutable_volume_envelope_time() {
  return &volume_envelope_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
KMProto_KMProject_VideoLayer::mutable_volume_envelope_time() {
  // @@protoc_insertion_point(field_mutable_list:KMProto.KMProject.VideoLayer.volume_envelope_time)
  return _internal_mutable_volume_envelope_time();
}

// repeated int32 volume_envelope_level = 117 [packed = true];
inline int KMProto_KMProject_VideoLayer::_internal_volume_envelope_level_size() const {
  return volume_envelope_level_.size();
}
inline int KMProto_KMProject_VideoLayer::volume_envelope_level_size() const {
  return _internal_volume_envelope_level_size();
}
inline void KMProto_KMProject_VideoLayer::clear_volume_envelope_level() {
  volume_envelope_level_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VideoLayer::_internal_volume_envelope_level(int index) const {
  return volume_envelope_level_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VideoLayer::volume_envelope_level(int index) const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VideoLayer.volume_envelope_level)
  return _internal_volume_envelope_level(index);
}
inline void KMProto_KMProject_VideoLayer::set_volume_envelope_level(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  volume_envelope_level_.Set(index, value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VideoLayer.volume_envelope_level)
}
inline void KMProto_KMProject_VideoLayer::_internal_add_volume_envelope_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  volume_envelope_level_.Add(value);
}
inline void KMProto_KMProject_VideoLayer::add_volume_envelope_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_volume_envelope_level(value);
  // @@protoc_insertion_point(field_add:KMProto.KMProject.VideoLayer.volume_envelope_level)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
KMProto_KMProject_VideoLayer::_internal_volume_envelope_level() const {
  return volume_envelope_level_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
KMProto_KMProject_VideoLayer::volume_envelope_level() const {
  // @@protoc_insertion_point(field_list:KMProto.KMProject.VideoLayer.volume_envelope_level)
  return _internal_volume_envelope_level();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
KMProto_KMProject_VideoLayer::_internal_mutable_volume_envelope_level() {
  return &volume_envelope_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
KMProto_KMProject_VideoLayer::mutable_volume_envelope_level() {
  // @@protoc_insertion_point(field_mutable_list:KMProto.KMProject.VideoLayer.volume_envelope_level)
  return _internal_mutable_volume_envelope_level();
}

// repeated float chroma_key_divisions = 1 [packed = true];
inline int KMProto_KMProject_VideoLayer::_internal_chroma_key_divisions_size() const {
  return chroma_key_divisions_.size();
}
inline int KMProto_KMProject_VideoLayer::chroma_key_divisions_size() const {
  return _internal_chroma_key_divisions_size();
}
inline void KMProto_KMProject_VideoLayer::clear_chroma_key_divisions() {
  chroma_key_divisions_.Clear();
}
inline float KMProto_KMProject_VideoLayer::_internal_chroma_key_divisions(int index) const {
  return chroma_key_divisions_.Get(index);
}
inline float KMProto_KMProject_VideoLayer::chroma_key_divisions(int index) const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VideoLayer.chroma_key_divisions)
  return _internal_chroma_key_divisions(index);
}
inline void KMProto_KMProject_VideoLayer::set_chroma_key_divisions(int index, float value) {
  chroma_key_divisions_.Set(index, value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VideoLayer.chroma_key_divisions)
}
inline void KMProto_KMProject_VideoLayer::_internal_add_chroma_key_divisions(float value) {
  chroma_key_divisions_.Add(value);
}
inline void KMProto_KMProject_VideoLayer::add_chroma_key_divisions(float value) {
  _internal_add_chroma_key_divisions(value);
  // @@protoc_insertion_point(field_add:KMProto.KMProject.VideoLayer.chroma_key_divisions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
KMProto_KMProject_VideoLayer::_internal_chroma_key_divisions() const {
  return chroma_key_divisions_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
KMProto_KMProject_VideoLayer::chroma_key_divisions() const {
  // @@protoc_insertion_point(field_list:KMProto.KMProject.VideoLayer.chroma_key_divisions)
  return _internal_chroma_key_divisions();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
KMProto_KMProject_VideoLayer::_internal_mutable_chroma_key_divisions() {
  return &chroma_key_divisions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
KMProto_KMProject_VideoLayer::mutable_chroma_key_divisions() {
  // @@protoc_insertion_point(field_mutable_list:KMProto.KMProject.VideoLayer.chroma_key_divisions)
  return _internal_mutable_chroma_key_divisions();
}

// repeated float chroma_key_strengths = 2 [packed = true];
inline int KMProto_KMProject_VideoLayer::_internal_chroma_key_strengths_size() const {
  return chroma_key_strengths_.size();
}
inline int KMProto_KMProject_VideoLayer::chroma_key_strengths_size() const {
  return _internal_chroma_key_strengths_size();
}
inline void KMProto_KMProject_VideoLayer::clear_chroma_key_strengths() {
  chroma_key_strengths_.Clear();
}
inline float KMProto_KMProject_VideoLayer::_internal_chroma_key_strengths(int index) const {
  return chroma_key_strengths_.Get(index);
}
inline float KMProto_KMProject_VideoLayer::chroma_key_strengths(int index) const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VideoLayer.chroma_key_strengths)
  return _internal_chroma_key_strengths(index);
}
inline void KMProto_KMProject_VideoLayer::set_chroma_key_strengths(int index, float value) {
  chroma_key_strengths_.Set(index, value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VideoLayer.chroma_key_strengths)
}
inline void KMProto_KMProject_VideoLayer::_internal_add_chroma_key_strengths(float value) {
  chroma_key_strengths_.Add(value);
}
inline void KMProto_KMProject_VideoLayer::add_chroma_key_strengths(float value) {
  _internal_add_chroma_key_strengths(value);
  // @@protoc_insertion_point(field_add:KMProto.KMProject.VideoLayer.chroma_key_strengths)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
KMProto_KMProject_VideoLayer::_internal_chroma_key_strengths() const {
  return chroma_key_strengths_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
KMProto_KMProject_VideoLayer::chroma_key_strengths() const {
  // @@protoc_insertion_point(field_list:KMProto.KMProject.VideoLayer.chroma_key_strengths)
  return _internal_chroma_key_strengths();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
KMProto_KMProject_VideoLayer::_internal_mutable_chroma_key_strengths() {
  return &chroma_key_strengths_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
KMProto_KMProject_VideoLayer::mutable_chroma_key_strengths() {
  // @@protoc_insertion_point(field_mutable_list:KMProto.KMProject.VideoLayer.chroma_key_strengths)
  return _internal_mutable_chroma_key_strengths();
}

// optional int32 chroma_key_color = 118;
inline bool KMProto_KMProject_VideoLayer::_internal_has_chroma_key_color() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VideoLayer::has_chroma_key_color() const {
  return _internal_has_chroma_key_color();
}
inline void KMProto_KMProject_VideoLayer::clear_chroma_key_color() {
  chroma_key_color_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VideoLayer::_internal_chroma_key_color() const {
  return chroma_key_color_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VideoLayer::chroma_key_color() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VideoLayer.chroma_key_color)
  return _internal_chroma_key_color();
}
inline void KMProto_KMProject_VideoLayer::_internal_set_chroma_key_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x02000000u;
  chroma_key_color_ = value;
}
inline void KMProto_KMProject_VideoLayer::set_chroma_key_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chroma_key_color(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VideoLayer.chroma_key_color)
}

// optional bool chroma_key_enabled = 119;
inline bool KMProto_KMProject_VideoLayer::_internal_has_chroma_key_enabled() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VideoLayer::has_chroma_key_enabled() const {
  return _internal_has_chroma_key_enabled();
}
inline void KMProto_KMProject_VideoLayer::clear_chroma_key_enabled() {
  chroma_key_enabled_ = false;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool KMProto_KMProject_VideoLayer::_internal_chroma_key_enabled() const {
  return chroma_key_enabled_;
}
inline bool KMProto_KMProject_VideoLayer::chroma_key_enabled() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VideoLayer.chroma_key_enabled)
  return _internal_chroma_key_enabled();
}
inline void KMProto_KMProject_VideoLayer::_internal_set_chroma_key_enabled(bool value) {
  _has_bits_[0] |= 0x00400000u;
  chroma_key_enabled_ = value;
}
inline void KMProto_KMProject_VideoLayer::set_chroma_key_enabled(bool value) {
  _internal_set_chroma_key_enabled(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VideoLayer.chroma_key_enabled)
}

// optional float chroma_key_clip_fg = 120;
inline bool KMProto_KMProject_VideoLayer::_internal_has_chroma_key_clip_fg() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VideoLayer::has_chroma_key_clip_fg() const {
  return _internal_has_chroma_key_clip_fg();
}
inline void KMProto_KMProject_VideoLayer::clear_chroma_key_clip_fg() {
  chroma_key_clip_fg_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline float KMProto_KMProject_VideoLayer::_internal_chroma_key_clip_fg() const {
  return chroma_key_clip_fg_;
}
inline float KMProto_KMProject_VideoLayer::chroma_key_clip_fg() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VideoLayer.chroma_key_clip_fg)
  return _internal_chroma_key_clip_fg();
}
inline void KMProto_KMProject_VideoLayer::_internal_set_chroma_key_clip_fg(float value) {
  _has_bits_[0] |= 0x04000000u;
  chroma_key_clip_fg_ = value;
}
inline void KMProto_KMProject_VideoLayer::set_chroma_key_clip_fg(float value) {
  _internal_set_chroma_key_clip_fg(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VideoLayer.chroma_key_clip_fg)
}

// optional float chroma_key_clip_bg = 121;
inline bool KMProto_KMProject_VideoLayer::_internal_has_chroma_key_clip_bg() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VideoLayer::has_chroma_key_clip_bg() const {
  return _internal_has_chroma_key_clip_bg();
}
inline void KMProto_KMProject_VideoLayer::clear_chroma_key_clip_bg() {
  chroma_key_clip_bg_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline float KMProto_KMProject_VideoLayer::_internal_chroma_key_clip_bg() const {
  return chroma_key_clip_bg_;
}
inline float KMProto_KMProject_VideoLayer::chroma_key_clip_bg() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VideoLayer.chroma_key_clip_bg)
  return _internal_chroma_key_clip_bg();
}
inline void KMProto_KMProject_VideoLayer::_internal_set_chroma_key_clip_bg(float value) {
  _has_bits_[0] |= 0x08000000u;
  chroma_key_clip_bg_ = value;
}
inline void KMProto_KMProject_VideoLayer::set_chroma_key_clip_bg(float value) {
  _internal_set_chroma_key_clip_bg(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VideoLayer.chroma_key_clip_bg)
}

// optional float chroma_key_blend_x0 = 122;
inline bool KMProto_KMProject_VideoLayer::_internal_has_chroma_key_blend_x0() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VideoLayer::has_chroma_key_blend_x0() const {
  return _internal_has_chroma_key_blend_x0();
}
inline void KMProto_KMProject_VideoLayer::clear_chroma_key_blend_x0() {
  chroma_key_blend_x0_ = 0;
  _has_bits_[0] &= ~0x10000000u;
}
inline float KMProto_KMProject_VideoLayer::_internal_chroma_key_blend_x0() const {
  return chroma_key_blend_x0_;
}
inline float KMProto_KMProject_VideoLayer::chroma_key_blend_x0() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VideoLayer.chroma_key_blend_x0)
  return _internal_chroma_key_blend_x0();
}
inline void KMProto_KMProject_VideoLayer::_internal_set_chroma_key_blend_x0(float value) {
  _has_bits_[0] |= 0x10000000u;
  chroma_key_blend_x0_ = value;
}
inline void KMProto_KMProject_VideoLayer::set_chroma_key_blend_x0(float value) {
  _internal_set_chroma_key_blend_x0(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VideoLayer.chroma_key_blend_x0)
}

// optional float chroma_key_blend_y0 = 123;
inline bool KMProto_KMProject_VideoLayer::_internal_has_chroma_key_blend_y0() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VideoLayer::has_chroma_key_blend_y0() const {
  return _internal_has_chroma_key_blend_y0();
}
inline void KMProto_KMProject_VideoLayer::clear_chroma_key_blend_y0() {
  chroma_key_blend_y0_ = 0;
  _has_bits_[0] &= ~0x20000000u;
}
inline float KMProto_KMProject_VideoLayer::_internal_chroma_key_blend_y0() const {
  return chroma_key_blend_y0_;
}
inline float KMProto_KMProject_VideoLayer::chroma_key_blend_y0() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VideoLayer.chroma_key_blend_y0)
  return _internal_chroma_key_blend_y0();
}
inline void KMProto_KMProject_VideoLayer::_internal_set_chroma_key_blend_y0(float value) {
  _has_bits_[0] |= 0x20000000u;
  chroma_key_blend_y0_ = value;
}
inline void KMProto_KMProject_VideoLayer::set_chroma_key_blend_y0(float value) {
  _internal_set_chroma_key_blend_y0(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VideoLayer.chroma_key_blend_y0)
}

// optional float chroma_key_blend_x1 = 124;
inline bool KMProto_KMProject_VideoLayer::_internal_has_chroma_key_blend_x1() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VideoLayer::has_chroma_key_blend_x1() const {
  return _internal_has_chroma_key_blend_x1();
}
inline void KMProto_KMProject_VideoLayer::clear_chroma_key_blend_x1() {
  chroma_key_blend_x1_ = 0;
  _has_bits_[0] &= ~0x40000000u;
}
inline float KMProto_KMProject_VideoLayer::_internal_chroma_key_blend_x1() const {
  return chroma_key_blend_x1_;
}
inline float KMProto_KMProject_VideoLayer::chroma_key_blend_x1() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VideoLayer.chroma_key_blend_x1)
  return _internal_chroma_key_blend_x1();
}
inline void KMProto_KMProject_VideoLayer::_internal_set_chroma_key_blend_x1(float value) {
  _has_bits_[0] |= 0x40000000u;
  chroma_key_blend_x1_ = value;
}
inline void KMProto_KMProject_VideoLayer::set_chroma_key_blend_x1(float value) {
  _internal_set_chroma_key_blend_x1(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VideoLayer.chroma_key_blend_x1)
}

// optional float chroma_key_blend_y1 = 125;
inline bool KMProto_KMProject_VideoLayer::_internal_has_chroma_key_blend_y1() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool KMProto_KMProject_VideoLayer::has_chroma_key_blend_y1() const {
  return _internal_has_chroma_key_blend_y1();
}
inline void KMProto_KMProject_VideoLayer::clear_chroma_key_blend_y1() {
  chroma_key_blend_y1_ = 0;
  _has_bits_[0] &= ~0x80000000u;
}
inline float KMProto_KMProject_VideoLayer::_internal_chroma_key_blend_y1() const {
  return chroma_key_blend_y1_;
}
inline float KMProto_KMProject_VideoLayer::chroma_key_blend_y1() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VideoLayer.chroma_key_blend_y1)
  return _internal_chroma_key_blend_y1();
}
inline void KMProto_KMProject_VideoLayer::_internal_set_chroma_key_blend_y1(float value) {
  _has_bits_[0] |= 0x80000000u;
  chroma_key_blend_y1_ = value;
}
inline void KMProto_KMProject_VideoLayer::set_chroma_key_blend_y1(float value) {
  _internal_set_chroma_key_blend_y1(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VideoLayer.chroma_key_blend_y1)
}

// optional int32 voice_changer = 126;
inline bool KMProto_KMProject_VideoLayer::_internal_has_voice_changer() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool KMProto_KMProject_VideoLayer::has_voice_changer() const {
  return _internal_has_voice_changer();
}
inline void KMProto_KMProject_VideoLayer::clear_voice_changer() {
  voice_changer_ = 0;
  _has_bits_[1] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VideoLayer::_internal_voice_changer() const {
  return voice_changer_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VideoLayer::voice_changer() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VideoLayer.voice_changer)
  return _internal_voice_changer();
}
inline void KMProto_KMProject_VideoLayer::_internal_set_voice_changer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000001u;
  voice_changer_ = value;
}
inline void KMProto_KMProject_VideoLayer::set_voice_changer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_voice_changer(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VideoLayer.voice_changer)
}

// optional int32 pan_left = 127;
inline bool KMProto_KMProject_VideoLayer::_internal_has_pan_left() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool KMProto_KMProject_VideoLayer::has_pan_left() const {
  return _internal_has_pan_left();
}
inline void KMProto_KMProject_VideoLayer::clear_pan_left() {
  pan_left_ = 0;
  _has_bits_[1] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VideoLayer::_internal_pan_left() const {
  return pan_left_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VideoLayer::pan_left() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VideoLayer.pan_left)
  return _internal_pan_left();
}
inline void KMProto_KMProject_VideoLayer::_internal_set_pan_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000002u;
  pan_left_ = value;
}
inline void KMProto_KMProject_VideoLayer::set_pan_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pan_left(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VideoLayer.pan_left)
}

// optional int32 pan_right = 128;
inline bool KMProto_KMProject_VideoLayer::_internal_has_pan_right() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool KMProto_KMProject_VideoLayer::has_pan_right() const {
  return _internal_has_pan_right();
}
inline void KMProto_KMProject_VideoLayer::clear_pan_right() {
  pan_right_ = 0;
  _has_bits_[1] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VideoLayer::_internal_pan_right() const {
  return pan_right_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VideoLayer::pan_right() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VideoLayer.pan_right)
  return _internal_pan_right();
}
inline void KMProto_KMProject_VideoLayer::_internal_set_pan_right(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000004u;
  pan_right_ = value;
}
inline void KMProto_KMProject_VideoLayer::set_pan_right(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pan_right(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VideoLayer.pan_right)
}

// optional int32 compressor = 129;
inline bool KMProto_KMProject_VideoLayer::_internal_has_compressor() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool KMProto_KMProject_VideoLayer::has_compressor() const {
  return _internal_has_compressor();
}
inline void KMProto_KMProject_VideoLayer::clear_compressor() {
  compressor_ = 0;
  _has_bits_[1] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VideoLayer::_internal_compressor() const {
  return compressor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VideoLayer::compressor() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VideoLayer.compressor)
  return _internal_compressor();
}
inline void KMProto_KMProject_VideoLayer::_internal_set_compressor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000008u;
  compressor_ = value;
}
inline void KMProto_KMProject_VideoLayer::set_compressor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_compressor(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VideoLayer.compressor)
}

// optional int32 pitch_factor = 130;
inline bool KMProto_KMProject_VideoLayer::_internal_has_pitch_factor() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool KMProto_KMProject_VideoLayer::has_pitch_factor() const {
  return _internal_has_pitch_factor();
}
inline void KMProto_KMProject_VideoLayer::clear_pitch_factor() {
  pitch_factor_ = 0;
  _has_bits_[1] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VideoLayer::_internal_pitch_factor() const {
  return pitch_factor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_VideoLayer::pitch_factor() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VideoLayer.pitch_factor)
  return _internal_pitch_factor();
}
inline void KMProto_KMProject_VideoLayer::_internal_set_pitch_factor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000010u;
  pitch_factor_ = value;
}
inline void KMProto_KMProject_VideoLayer::set_pitch_factor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pitch_factor(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VideoLayer.pitch_factor)
}

// optional string ios_media_asset_id = 131;
inline bool KMProto_KMProject_VideoLayer::_internal_has_ios_media_asset_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool KMProto_KMProject_VideoLayer::has_ios_media_asset_id() const {
  return _internal_has_ios_media_asset_id();
}
inline void KMProto_KMProject_VideoLayer::clear_ios_media_asset_id() {
  ios_media_asset_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& KMProto_KMProject_VideoLayer::ios_media_asset_id() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VideoLayer.ios_media_asset_id)
  return _internal_ios_media_asset_id();
}
inline void KMProto_KMProject_VideoLayer::set_ios_media_asset_id(const std::string& value) {
  _internal_set_ios_media_asset_id(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VideoLayer.ios_media_asset_id)
}
inline std::string* KMProto_KMProject_VideoLayer::mutable_ios_media_asset_id() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.VideoLayer.ios_media_asset_id)
  return _internal_mutable_ios_media_asset_id();
}
inline const std::string& KMProto_KMProject_VideoLayer::_internal_ios_media_asset_id() const {
  return ios_media_asset_id_.Get();
}
inline void KMProto_KMProject_VideoLayer::_internal_set_ios_media_asset_id(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  ios_media_asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProject_VideoLayer::set_ios_media_asset_id(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  ios_media_asset_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProject.VideoLayer.ios_media_asset_id)
}
inline void KMProto_KMProject_VideoLayer::set_ios_media_asset_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  ios_media_asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProject.VideoLayer.ios_media_asset_id)
}
inline void KMProto_KMProject_VideoLayer::set_ios_media_asset_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  ios_media_asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProject.VideoLayer.ios_media_asset_id)
}
inline std::string* KMProto_KMProject_VideoLayer::_internal_mutable_ios_media_asset_id() {
  _has_bits_[0] |= 0x00000004u;
  return ios_media_asset_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProject_VideoLayer::release_ios_media_asset_id() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.VideoLayer.ios_media_asset_id)
  if (!_internal_has_ios_media_asset_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return ios_media_asset_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProject_VideoLayer::set_allocated_ios_media_asset_id(std::string* ios_media_asset_id) {
  if (ios_media_asset_id != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ios_media_asset_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ios_media_asset_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.VideoLayer.ios_media_asset_id)
}

// optional string enhancedAudioFilter = 132;
inline bool KMProto_KMProject_VideoLayer::_internal_has_enhancedaudiofilter() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool KMProto_KMProject_VideoLayer::has_enhancedaudiofilter() const {
  return _internal_has_enhancedaudiofilter();
}
inline void KMProto_KMProject_VideoLayer::clear_enhancedaudiofilter() {
  enhancedaudiofilter_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& KMProto_KMProject_VideoLayer::enhancedaudiofilter() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VideoLayer.enhancedAudioFilter)
  return _internal_enhancedaudiofilter();
}
inline void KMProto_KMProject_VideoLayer::set_enhancedaudiofilter(const std::string& value) {
  _internal_set_enhancedaudiofilter(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VideoLayer.enhancedAudioFilter)
}
inline std::string* KMProto_KMProject_VideoLayer::mutable_enhancedaudiofilter() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.VideoLayer.enhancedAudioFilter)
  return _internal_mutable_enhancedaudiofilter();
}
inline const std::string& KMProto_KMProject_VideoLayer::_internal_enhancedaudiofilter() const {
  return enhancedaudiofilter_.Get();
}
inline void KMProto_KMProject_VideoLayer::_internal_set_enhancedaudiofilter(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  enhancedaudiofilter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProject_VideoLayer::set_enhancedaudiofilter(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  enhancedaudiofilter_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProject.VideoLayer.enhancedAudioFilter)
}
inline void KMProto_KMProject_VideoLayer::set_enhancedaudiofilter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  enhancedaudiofilter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProject.VideoLayer.enhancedAudioFilter)
}
inline void KMProto_KMProject_VideoLayer::set_enhancedaudiofilter(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  enhancedaudiofilter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProject.VideoLayer.enhancedAudioFilter)
}
inline std::string* KMProto_KMProject_VideoLayer::_internal_mutable_enhancedaudiofilter() {
  _has_bits_[0] |= 0x00000008u;
  return enhancedaudiofilter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProject_VideoLayer::release_enhancedaudiofilter() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.VideoLayer.enhancedAudioFilter)
  if (!_internal_has_enhancedaudiofilter()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return enhancedaudiofilter_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProject_VideoLayer::set_allocated_enhancedaudiofilter(std::string* enhancedaudiofilter) {
  if (enhancedaudiofilter != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  enhancedaudiofilter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), enhancedaudiofilter,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.VideoLayer.enhancedAudioFilter)
}

// optional string equalizer = 133;
inline bool KMProto_KMProject_VideoLayer::_internal_has_equalizer() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool KMProto_KMProject_VideoLayer::has_equalizer() const {
  return _internal_has_equalizer();
}
inline void KMProto_KMProject_VideoLayer::clear_equalizer() {
  equalizer_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& KMProto_KMProject_VideoLayer::equalizer() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VideoLayer.equalizer)
  return _internal_equalizer();
}
inline void KMProto_KMProject_VideoLayer::set_equalizer(const std::string& value) {
  _internal_set_equalizer(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VideoLayer.equalizer)
}
inline std::string* KMProto_KMProject_VideoLayer::mutable_equalizer() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.VideoLayer.equalizer)
  return _internal_mutable_equalizer();
}
inline const std::string& KMProto_KMProject_VideoLayer::_internal_equalizer() const {
  return equalizer_.Get();
}
inline void KMProto_KMProject_VideoLayer::_internal_set_equalizer(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  equalizer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProject_VideoLayer::set_equalizer(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  equalizer_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProject.VideoLayer.equalizer)
}
inline void KMProto_KMProject_VideoLayer::set_equalizer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  equalizer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProject.VideoLayer.equalizer)
}
inline void KMProto_KMProject_VideoLayer::set_equalizer(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  equalizer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProject.VideoLayer.equalizer)
}
inline std::string* KMProto_KMProject_VideoLayer::_internal_mutable_equalizer() {
  _has_bits_[0] |= 0x00000010u;
  return equalizer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProject_VideoLayer::release_equalizer() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.VideoLayer.equalizer)
  if (!_internal_has_equalizer()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return equalizer_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProject_VideoLayer::set_allocated_equalizer(std::string* equalizer) {
  if (equalizer != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  equalizer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), equalizer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.VideoLayer.equalizer)
}

// optional .KMProto.KMProject.ClipRange clipRange = 134;
inline bool KMProto_KMProject_VideoLayer::_internal_has_cliprange() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || cliprange_ != nullptr);
  return value;
}
inline bool KMProto_KMProject_VideoLayer::has_cliprange() const {
  return _internal_has_cliprange();
}
inline void KMProto_KMProject_VideoLayer::clear_cliprange() {
  if (cliprange_ != nullptr) cliprange_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::KMProto_KMProject_ClipRange& KMProto_KMProject_VideoLayer::_internal_cliprange() const {
  const ::KMProto_KMProject_ClipRange* p = cliprange_;
  return p != nullptr ? *p : reinterpret_cast<const ::KMProto_KMProject_ClipRange&>(
      ::_KMProto_KMProject_ClipRange_default_instance_);
}
inline const ::KMProto_KMProject_ClipRange& KMProto_KMProject_VideoLayer::cliprange() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VideoLayer.clipRange)
  return _internal_cliprange();
}
inline void KMProto_KMProject_VideoLayer::unsafe_arena_set_allocated_cliprange(
    ::KMProto_KMProject_ClipRange* cliprange) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cliprange_);
  }
  cliprange_ = cliprange;
  if (cliprange) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KMProto.KMProject.VideoLayer.clipRange)
}
inline ::KMProto_KMProject_ClipRange* KMProto_KMProject_VideoLayer::release_cliprange() {
  _has_bits_[0] &= ~0x00000100u;
  ::KMProto_KMProject_ClipRange* temp = cliprange_;
  cliprange_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KMProto_KMProject_ClipRange* KMProto_KMProject_VideoLayer::unsafe_arena_release_cliprange() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.VideoLayer.clipRange)
  _has_bits_[0] &= ~0x00000100u;
  ::KMProto_KMProject_ClipRange* temp = cliprange_;
  cliprange_ = nullptr;
  return temp;
}
inline ::KMProto_KMProject_ClipRange* KMProto_KMProject_VideoLayer::_internal_mutable_cliprange() {
  _has_bits_[0] |= 0x00000100u;
  if (cliprange_ == nullptr) {
    auto* p = CreateMaybeMessage<::KMProto_KMProject_ClipRange>(GetArena());
    cliprange_ = p;
  }
  return cliprange_;
}
inline ::KMProto_KMProject_ClipRange* KMProto_KMProject_VideoLayer::mutable_cliprange() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.VideoLayer.clipRange)
  return _internal_mutable_cliprange();
}
inline void KMProto_KMProject_VideoLayer::set_allocated_cliprange(::KMProto_KMProject_ClipRange* cliprange) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cliprange_;
  }
  if (cliprange) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cliprange);
    if (message_arena != submessage_arena) {
      cliprange = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cliprange, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  cliprange_ = cliprange;
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.VideoLayer.clipRange)
}

// optional string reverb = 135;
inline bool KMProto_KMProject_VideoLayer::_internal_has_reverb() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool KMProto_KMProject_VideoLayer::has_reverb() const {
  return _internal_has_reverb();
}
inline void KMProto_KMProject_VideoLayer::clear_reverb() {
  reverb_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& KMProto_KMProject_VideoLayer::reverb() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VideoLayer.reverb)
  return _internal_reverb();
}
inline void KMProto_KMProject_VideoLayer::set_reverb(const std::string& value) {
  _internal_set_reverb(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VideoLayer.reverb)
}
inline std::string* KMProto_KMProject_VideoLayer::mutable_reverb() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.VideoLayer.reverb)
  return _internal_mutable_reverb();
}
inline const std::string& KMProto_KMProject_VideoLayer::_internal_reverb() const {
  return reverb_.Get();
}
inline void KMProto_KMProject_VideoLayer::_internal_set_reverb(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  reverb_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProject_VideoLayer::set_reverb(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  reverb_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProject.VideoLayer.reverb)
}
inline void KMProto_KMProject_VideoLayer::set_reverb(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  reverb_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProject.VideoLayer.reverb)
}
inline void KMProto_KMProject_VideoLayer::set_reverb(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  reverb_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProject.VideoLayer.reverb)
}
inline std::string* KMProto_KMProject_VideoLayer::_internal_mutable_reverb() {
  _has_bits_[0] |= 0x00000020u;
  return reverb_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProject_VideoLayer::release_reverb() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.VideoLayer.reverb)
  if (!_internal_has_reverb()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return reverb_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProject_VideoLayer::set_allocated_reverb(std::string* reverb) {
  if (reverb != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  reverb_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reverb,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.VideoLayer.reverb)
}

// optional .KMProto.KMProject.ColorAdjustment colorAdjustment = 136;
inline bool KMProto_KMProject_VideoLayer::_internal_has_coloradjustment() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || coloradjustment_ != nullptr);
  return value;
}
inline bool KMProto_KMProject_VideoLayer::has_coloradjustment() const {
  return _internal_has_coloradjustment();
}
inline void KMProto_KMProject_VideoLayer::clear_coloradjustment() {
  if (coloradjustment_ != nullptr) coloradjustment_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::KMProto_KMProject_ColorAdjustment& KMProto_KMProject_VideoLayer::_internal_coloradjustment() const {
  const ::KMProto_KMProject_ColorAdjustment* p = coloradjustment_;
  return p != nullptr ? *p : reinterpret_cast<const ::KMProto_KMProject_ColorAdjustment&>(
      ::_KMProto_KMProject_ColorAdjustment_default_instance_);
}
inline const ::KMProto_KMProject_ColorAdjustment& KMProto_KMProject_VideoLayer::coloradjustment() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VideoLayer.colorAdjustment)
  return _internal_coloradjustment();
}
inline void KMProto_KMProject_VideoLayer::unsafe_arena_set_allocated_coloradjustment(
    ::KMProto_KMProject_ColorAdjustment* coloradjustment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coloradjustment_);
  }
  coloradjustment_ = coloradjustment;
  if (coloradjustment) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KMProto.KMProject.VideoLayer.colorAdjustment)
}
inline ::KMProto_KMProject_ColorAdjustment* KMProto_KMProject_VideoLayer::release_coloradjustment() {
  _has_bits_[0] &= ~0x00000200u;
  ::KMProto_KMProject_ColorAdjustment* temp = coloradjustment_;
  coloradjustment_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KMProto_KMProject_ColorAdjustment* KMProto_KMProject_VideoLayer::unsafe_arena_release_coloradjustment() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.VideoLayer.colorAdjustment)
  _has_bits_[0] &= ~0x00000200u;
  ::KMProto_KMProject_ColorAdjustment* temp = coloradjustment_;
  coloradjustment_ = nullptr;
  return temp;
}
inline ::KMProto_KMProject_ColorAdjustment* KMProto_KMProject_VideoLayer::_internal_mutable_coloradjustment() {
  _has_bits_[0] |= 0x00000200u;
  if (coloradjustment_ == nullptr) {
    auto* p = CreateMaybeMessage<::KMProto_KMProject_ColorAdjustment>(GetArena());
    coloradjustment_ = p;
  }
  return coloradjustment_;
}
inline ::KMProto_KMProject_ColorAdjustment* KMProto_KMProject_VideoLayer::mutable_coloradjustment() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.VideoLayer.colorAdjustment)
  return _internal_mutable_coloradjustment();
}
inline void KMProto_KMProject_VideoLayer::set_allocated_coloradjustment(::KMProto_KMProject_ColorAdjustment* coloradjustment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete coloradjustment_;
  }
  if (coloradjustment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(coloradjustment);
    if (message_arena != submessage_arena) {
      coloradjustment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coloradjustment, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  coloradjustment_ = coloradjustment;
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.VideoLayer.colorAdjustment)
}

// optional .KMProto.KMProject.ColorFilter colorFilter = 137;
inline bool KMProto_KMProject_VideoLayer::_internal_has_colorfilter() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || colorfilter_ != nullptr);
  return value;
}
inline bool KMProto_KMProject_VideoLayer::has_colorfilter() const {
  return _internal_has_colorfilter();
}
inline void KMProto_KMProject_VideoLayer::clear_colorfilter() {
  if (colorfilter_ != nullptr) colorfilter_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::KMProto_KMProject_ColorFilter& KMProto_KMProject_VideoLayer::_internal_colorfilter() const {
  const ::KMProto_KMProject_ColorFilter* p = colorfilter_;
  return p != nullptr ? *p : reinterpret_cast<const ::KMProto_KMProject_ColorFilter&>(
      ::_KMProto_KMProject_ColorFilter_default_instance_);
}
inline const ::KMProto_KMProject_ColorFilter& KMProto_KMProject_VideoLayer::colorfilter() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VideoLayer.colorFilter)
  return _internal_colorfilter();
}
inline void KMProto_KMProject_VideoLayer::unsafe_arena_set_allocated_colorfilter(
    ::KMProto_KMProject_ColorFilter* colorfilter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(colorfilter_);
  }
  colorfilter_ = colorfilter;
  if (colorfilter) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KMProto.KMProject.VideoLayer.colorFilter)
}
inline ::KMProto_KMProject_ColorFilter* KMProto_KMProject_VideoLayer::release_colorfilter() {
  _has_bits_[0] &= ~0x00000400u;
  ::KMProto_KMProject_ColorFilter* temp = colorfilter_;
  colorfilter_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KMProto_KMProject_ColorFilter* KMProto_KMProject_VideoLayer::unsafe_arena_release_colorfilter() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.VideoLayer.colorFilter)
  _has_bits_[0] &= ~0x00000400u;
  ::KMProto_KMProject_ColorFilter* temp = colorfilter_;
  colorfilter_ = nullptr;
  return temp;
}
inline ::KMProto_KMProject_ColorFilter* KMProto_KMProject_VideoLayer::_internal_mutable_colorfilter() {
  _has_bits_[0] |= 0x00000400u;
  if (colorfilter_ == nullptr) {
    auto* p = CreateMaybeMessage<::KMProto_KMProject_ColorFilter>(GetArena());
    colorfilter_ = p;
  }
  return colorfilter_;
}
inline ::KMProto_KMProject_ColorFilter* KMProto_KMProject_VideoLayer::mutable_colorfilter() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.VideoLayer.colorFilter)
  return _internal_mutable_colorfilter();
}
inline void KMProto_KMProject_VideoLayer::set_allocated_colorfilter(::KMProto_KMProject_ColorFilter* colorfilter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete colorfilter_;
  }
  if (colorfilter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(colorfilter);
    if (message_arena != submessage_arena) {
      colorfilter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, colorfilter, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  colorfilter_ = colorfilter;
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.VideoLayer.colorFilter)
}

// optional bool keepPitch = 138;
inline bool KMProto_KMProject_VideoLayer::_internal_has_keeppitch() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool KMProto_KMProject_VideoLayer::has_keeppitch() const {
  return _internal_has_keeppitch();
}
inline void KMProto_KMProject_VideoLayer::clear_keeppitch() {
  keeppitch_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool KMProto_KMProject_VideoLayer::_internal_keeppitch() const {
  return keeppitch_;
}
inline bool KMProto_KMProject_VideoLayer::keeppitch() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.VideoLayer.keepPitch)
  return _internal_keeppitch();
}
inline void KMProto_KMProject_VideoLayer::_internal_set_keeppitch(bool value) {
  _has_bits_[0] |= 0x00000800u;
  keeppitch_ = value;
}
inline void KMProto_KMProject_VideoLayer::set_keeppitch(bool value) {
  _internal_set_keeppitch(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.VideoLayer.keepPitch)
}

// -------------------------------------------------------------------

// KMProto_KMProject_ColorAdjustment

// optional float brightness = 1;
inline bool KMProto_KMProject_ColorAdjustment::_internal_has_brightness() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KMProto_KMProject_ColorAdjustment::has_brightness() const {
  return _internal_has_brightness();
}
inline void KMProto_KMProject_ColorAdjustment::clear_brightness() {
  brightness_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float KMProto_KMProject_ColorAdjustment::_internal_brightness() const {
  return brightness_;
}
inline float KMProto_KMProject_ColorAdjustment::brightness() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.ColorAdjustment.brightness)
  return _internal_brightness();
}
inline void KMProto_KMProject_ColorAdjustment::_internal_set_brightness(float value) {
  _has_bits_[0] |= 0x00000001u;
  brightness_ = value;
}
inline void KMProto_KMProject_ColorAdjustment::set_brightness(float value) {
  _internal_set_brightness(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.ColorAdjustment.brightness)
}

// optional float contrast = 2;
inline bool KMProto_KMProject_ColorAdjustment::_internal_has_contrast() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KMProto_KMProject_ColorAdjustment::has_contrast() const {
  return _internal_has_contrast();
}
inline void KMProto_KMProject_ColorAdjustment::clear_contrast() {
  contrast_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float KMProto_KMProject_ColorAdjustment::_internal_contrast() const {
  return contrast_;
}
inline float KMProto_KMProject_ColorAdjustment::contrast() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.ColorAdjustment.contrast)
  return _internal_contrast();
}
inline void KMProto_KMProject_ColorAdjustment::_internal_set_contrast(float value) {
  _has_bits_[0] |= 0x00000002u;
  contrast_ = value;
}
inline void KMProto_KMProject_ColorAdjustment::set_contrast(float value) {
  _internal_set_contrast(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.ColorAdjustment.contrast)
}

// optional float saturation = 3;
inline bool KMProto_KMProject_ColorAdjustment::_internal_has_saturation() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool KMProto_KMProject_ColorAdjustment::has_saturation() const {
  return _internal_has_saturation();
}
inline void KMProto_KMProject_ColorAdjustment::clear_saturation() {
  saturation_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float KMProto_KMProject_ColorAdjustment::_internal_saturation() const {
  return saturation_;
}
inline float KMProto_KMProject_ColorAdjustment::saturation() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.ColorAdjustment.saturation)
  return _internal_saturation();
}
inline void KMProto_KMProject_ColorAdjustment::_internal_set_saturation(float value) {
  _has_bits_[0] |= 0x00000004u;
  saturation_ = value;
}
inline void KMProto_KMProject_ColorAdjustment::set_saturation(float value) {
  _internal_set_saturation(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.ColorAdjustment.saturation)
}

// optional float vibrance = 4;
inline bool KMProto_KMProject_ColorAdjustment::_internal_has_vibrance() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool KMProto_KMProject_ColorAdjustment::has_vibrance() const {
  return _internal_has_vibrance();
}
inline void KMProto_KMProject_ColorAdjustment::clear_vibrance() {
  vibrance_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float KMProto_KMProject_ColorAdjustment::_internal_vibrance() const {
  return vibrance_;
}
inline float KMProto_KMProject_ColorAdjustment::vibrance() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.ColorAdjustment.vibrance)
  return _internal_vibrance();
}
inline void KMProto_KMProject_ColorAdjustment::_internal_set_vibrance(float value) {
  _has_bits_[0] |= 0x00000008u;
  vibrance_ = value;
}
inline void KMProto_KMProject_ColorAdjustment::set_vibrance(float value) {
  _internal_set_vibrance(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.ColorAdjustment.vibrance)
}

// optional float temperature = 5;
inline bool KMProto_KMProject_ColorAdjustment::_internal_has_temperature() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool KMProto_KMProject_ColorAdjustment::has_temperature() const {
  return _internal_has_temperature();
}
inline void KMProto_KMProject_ColorAdjustment::clear_temperature() {
  temperature_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float KMProto_KMProject_ColorAdjustment::_internal_temperature() const {
  return temperature_;
}
inline float KMProto_KMProject_ColorAdjustment::temperature() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.ColorAdjustment.temperature)
  return _internal_temperature();
}
inline void KMProto_KMProject_ColorAdjustment::_internal_set_temperature(float value) {
  _has_bits_[0] |= 0x00000010u;
  temperature_ = value;
}
inline void KMProto_KMProject_ColorAdjustment::set_temperature(float value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.ColorAdjustment.temperature)
}

// optional float highlight = 6;
inline bool KMProto_KMProject_ColorAdjustment::_internal_has_highlight() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool KMProto_KMProject_ColorAdjustment::has_highlight() const {
  return _internal_has_highlight();
}
inline void KMProto_KMProject_ColorAdjustment::clear_highlight() {
  highlight_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float KMProto_KMProject_ColorAdjustment::_internal_highlight() const {
  return highlight_;
}
inline float KMProto_KMProject_ColorAdjustment::highlight() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.ColorAdjustment.highlight)
  return _internal_highlight();
}
inline void KMProto_KMProject_ColorAdjustment::_internal_set_highlight(float value) {
  _has_bits_[0] |= 0x00000020u;
  highlight_ = value;
}
inline void KMProto_KMProject_ColorAdjustment::set_highlight(float value) {
  _internal_set_highlight(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.ColorAdjustment.highlight)
}

// optional float shadow = 7;
inline bool KMProto_KMProject_ColorAdjustment::_internal_has_shadow() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool KMProto_KMProject_ColorAdjustment::has_shadow() const {
  return _internal_has_shadow();
}
inline void KMProto_KMProject_ColorAdjustment::clear_shadow() {
  shadow_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float KMProto_KMProject_ColorAdjustment::_internal_shadow() const {
  return shadow_;
}
inline float KMProto_KMProject_ColorAdjustment::shadow() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.ColorAdjustment.shadow)
  return _internal_shadow();
}
inline void KMProto_KMProject_ColorAdjustment::_internal_set_shadow(float value) {
  _has_bits_[0] |= 0x00000040u;
  shadow_ = value;
}
inline void KMProto_KMProject_ColorAdjustment::set_shadow(float value) {
  _internal_set_shadow(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.ColorAdjustment.shadow)
}

// optional float gain = 8;
inline bool KMProto_KMProject_ColorAdjustment::_internal_has_gain() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool KMProto_KMProject_ColorAdjustment::has_gain() const {
  return _internal_has_gain();
}
inline void KMProto_KMProject_ColorAdjustment::clear_gain() {
  gain_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float KMProto_KMProject_ColorAdjustment::_internal_gain() const {
  return gain_;
}
inline float KMProto_KMProject_ColorAdjustment::gain() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.ColorAdjustment.gain)
  return _internal_gain();
}
inline void KMProto_KMProject_ColorAdjustment::_internal_set_gain(float value) {
  _has_bits_[0] |= 0x00000080u;
  gain_ = value;
}
inline void KMProto_KMProject_ColorAdjustment::set_gain(float value) {
  _internal_set_gain(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.ColorAdjustment.gain)
}

// optional float gamma = 9;
inline bool KMProto_KMProject_ColorAdjustment::_internal_has_gamma() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool KMProto_KMProject_ColorAdjustment::has_gamma() const {
  return _internal_has_gamma();
}
inline void KMProto_KMProject_ColorAdjustment::clear_gamma() {
  gamma_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float KMProto_KMProject_ColorAdjustment::_internal_gamma() const {
  return gamma_;
}
inline float KMProto_KMProject_ColorAdjustment::gamma() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.ColorAdjustment.gamma)
  return _internal_gamma();
}
inline void KMProto_KMProject_ColorAdjustment::_internal_set_gamma(float value) {
  _has_bits_[0] |= 0x00000100u;
  gamma_ = value;
}
inline void KMProto_KMProject_ColorAdjustment::set_gamma(float value) {
  _internal_set_gamma(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.ColorAdjustment.gamma)
}

// optional float lift = 10;
inline bool KMProto_KMProject_ColorAdjustment::_internal_has_lift() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool KMProto_KMProject_ColorAdjustment::has_lift() const {
  return _internal_has_lift();
}
inline void KMProto_KMProject_ColorAdjustment::clear_lift() {
  lift_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float KMProto_KMProject_ColorAdjustment::_internal_lift() const {
  return lift_;
}
inline float KMProto_KMProject_ColorAdjustment::lift() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.ColorAdjustment.lift)
  return _internal_lift();
}
inline void KMProto_KMProject_ColorAdjustment::_internal_set_lift(float value) {
  _has_bits_[0] |= 0x00000200u;
  lift_ = value;
}
inline void KMProto_KMProject_ColorAdjustment::set_lift(float value) {
  _internal_set_lift(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.ColorAdjustment.lift)
}

// optional float hue = 11;
inline bool KMProto_KMProject_ColorAdjustment::_internal_has_hue() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool KMProto_KMProject_ColorAdjustment::has_hue() const {
  return _internal_has_hue();
}
inline void KMProto_KMProject_ColorAdjustment::clear_hue() {
  hue_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float KMProto_KMProject_ColorAdjustment::_internal_hue() const {
  return hue_;
}
inline float KMProto_KMProject_ColorAdjustment::hue() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.ColorAdjustment.hue)
  return _internal_hue();
}
inline void KMProto_KMProject_ColorAdjustment::_internal_set_hue(float value) {
  _has_bits_[0] |= 0x00000400u;
  hue_ = value;
}
inline void KMProto_KMProject_ColorAdjustment::set_hue(float value) {
  _internal_set_hue(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.ColorAdjustment.hue)
}

// -------------------------------------------------------------------

// KMProto_KMProject_WritingPoint

// optional float pointx = 1;
inline bool KMProto_KMProject_WritingPoint::_internal_has_pointx() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KMProto_KMProject_WritingPoint::has_pointx() const {
  return _internal_has_pointx();
}
inline void KMProto_KMProject_WritingPoint::clear_pointx() {
  pointx_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float KMProto_KMProject_WritingPoint::_internal_pointx() const {
  return pointx_;
}
inline float KMProto_KMProject_WritingPoint::pointx() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.WritingPoint.pointx)
  return _internal_pointx();
}
inline void KMProto_KMProject_WritingPoint::_internal_set_pointx(float value) {
  _has_bits_[0] |= 0x00000001u;
  pointx_ = value;
}
inline void KMProto_KMProject_WritingPoint::set_pointx(float value) {
  _internal_set_pointx(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.WritingPoint.pointx)
}

// optional float pointy = 2;
inline bool KMProto_KMProject_WritingPoint::_internal_has_pointy() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KMProto_KMProject_WritingPoint::has_pointy() const {
  return _internal_has_pointy();
}
inline void KMProto_KMProject_WritingPoint::clear_pointy() {
  pointy_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float KMProto_KMProject_WritingPoint::_internal_pointy() const {
  return pointy_;
}
inline float KMProto_KMProject_WritingPoint::pointy() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.WritingPoint.pointy)
  return _internal_pointy();
}
inline void KMProto_KMProject_WritingPoint::_internal_set_pointy(float value) {
  _has_bits_[0] |= 0x00000002u;
  pointy_ = value;
}
inline void KMProto_KMProject_WritingPoint::set_pointy(float value) {
  _internal_set_pointy(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.WritingPoint.pointy)
}

// -------------------------------------------------------------------

// KMProto_KMProject_GroupLayer

// optional .KMProto.KMProject.LayerCommon layer_common = 100;
inline bool KMProto_KMProject_GroupLayer::_internal_has_layer_common() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || layer_common_ != nullptr);
  return value;
}
inline bool KMProto_KMProject_GroupLayer::has_layer_common() const {
  return _internal_has_layer_common();
}
inline void KMProto_KMProject_GroupLayer::clear_layer_common() {
  if (layer_common_ != nullptr) layer_common_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::KMProto_KMProject_LayerCommon& KMProto_KMProject_GroupLayer::_internal_layer_common() const {
  const ::KMProto_KMProject_LayerCommon* p = layer_common_;
  return p != nullptr ? *p : reinterpret_cast<const ::KMProto_KMProject_LayerCommon&>(
      ::_KMProto_KMProject_LayerCommon_default_instance_);
}
inline const ::KMProto_KMProject_LayerCommon& KMProto_KMProject_GroupLayer::layer_common() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.GroupLayer.layer_common)
  return _internal_layer_common();
}
inline void KMProto_KMProject_GroupLayer::unsafe_arena_set_allocated_layer_common(
    ::KMProto_KMProject_LayerCommon* layer_common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(layer_common_);
  }
  layer_common_ = layer_common;
  if (layer_common) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KMProto.KMProject.GroupLayer.layer_common)
}
inline ::KMProto_KMProject_LayerCommon* KMProto_KMProject_GroupLayer::release_layer_common() {
  _has_bits_[0] &= ~0x00000001u;
  ::KMProto_KMProject_LayerCommon* temp = layer_common_;
  layer_common_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KMProto_KMProject_LayerCommon* KMProto_KMProject_GroupLayer::unsafe_arena_release_layer_common() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.GroupLayer.layer_common)
  _has_bits_[0] &= ~0x00000001u;
  ::KMProto_KMProject_LayerCommon* temp = layer_common_;
  layer_common_ = nullptr;
  return temp;
}
inline ::KMProto_KMProject_LayerCommon* KMProto_KMProject_GroupLayer::_internal_mutable_layer_common() {
  _has_bits_[0] |= 0x00000001u;
  if (layer_common_ == nullptr) {
    auto* p = CreateMaybeMessage<::KMProto_KMProject_LayerCommon>(GetArena());
    layer_common_ = p;
  }
  return layer_common_;
}
inline ::KMProto_KMProject_LayerCommon* KMProto_KMProject_GroupLayer::mutable_layer_common() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.GroupLayer.layer_common)
  return _internal_mutable_layer_common();
}
inline void KMProto_KMProject_GroupLayer::set_allocated_layer_common(::KMProto_KMProject_LayerCommon* layer_common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete layer_common_;
  }
  if (layer_common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(layer_common);
    if (message_arena != submessage_arena) {
      layer_common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, layer_common, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  layer_common_ = layer_common;
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.GroupLayer.layer_common)
}

// repeated .KMProto.KMProject.TimelineItem child_items = 101;
inline int KMProto_KMProject_GroupLayer::_internal_child_items_size() const {
  return child_items_.size();
}
inline int KMProto_KMProject_GroupLayer::child_items_size() const {
  return _internal_child_items_size();
}
inline void KMProto_KMProject_GroupLayer::clear_child_items() {
  child_items_.Clear();
}
inline ::KMProto_KMProject_TimelineItem* KMProto_KMProject_GroupLayer::mutable_child_items(int index) {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.GroupLayer.child_items)
  return child_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_TimelineItem >*
KMProto_KMProject_GroupLayer::mutable_child_items() {
  // @@protoc_insertion_point(field_mutable_list:KMProto.KMProject.GroupLayer.child_items)
  return &child_items_;
}
inline const ::KMProto_KMProject_TimelineItem& KMProto_KMProject_GroupLayer::_internal_child_items(int index) const {
  return child_items_.Get(index);
}
inline const ::KMProto_KMProject_TimelineItem& KMProto_KMProject_GroupLayer::child_items(int index) const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.GroupLayer.child_items)
  return _internal_child_items(index);
}
inline ::KMProto_KMProject_TimelineItem* KMProto_KMProject_GroupLayer::_internal_add_child_items() {
  return child_items_.Add();
}
inline ::KMProto_KMProject_TimelineItem* KMProto_KMProject_GroupLayer::add_child_items() {
  // @@protoc_insertion_point(field_add:KMProto.KMProject.GroupLayer.child_items)
  return _internal_add_child_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_TimelineItem >&
KMProto_KMProject_GroupLayer::child_items() const {
  // @@protoc_insertion_point(field_list:KMProto.KMProject.GroupLayer.child_items)
  return child_items_;
}

// -------------------------------------------------------------------

// KMProto_KMProject_DrawingAction

// optional .KMProto.KMProject.DrawingActionType drawing_action_type = 1;
inline bool KMProto_KMProject_DrawingAction::_internal_has_drawing_action_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool KMProto_KMProject_DrawingAction::has_drawing_action_type() const {
  return _internal_has_drawing_action_type();
}
inline void KMProto_KMProject_DrawingAction::clear_drawing_action_type() {
  drawing_action_type_ = 1;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::KMProto_KMProject_DrawingActionType KMProto_KMProject_DrawingAction::_internal_drawing_action_type() const {
  return static_cast< ::KMProto_KMProject_DrawingActionType >(drawing_action_type_);
}
inline ::KMProto_KMProject_DrawingActionType KMProto_KMProject_DrawingAction::drawing_action_type() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.DrawingAction.drawing_action_type)
  return _internal_drawing_action_type();
}
inline void KMProto_KMProject_DrawingAction::_internal_set_drawing_action_type(::KMProto_KMProject_DrawingActionType value) {
  assert(::KMProto_KMProject_DrawingActionType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  drawing_action_type_ = value;
}
inline void KMProto_KMProject_DrawingAction::set_drawing_action_type(::KMProto_KMProject_DrawingActionType value) {
  _internal_set_drawing_action_type(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.DrawingAction.drawing_action_type)
}

// repeated float points = 2;
inline int KMProto_KMProject_DrawingAction::_internal_points_size() const {
  return points_.size();
}
inline int KMProto_KMProject_DrawingAction::points_size() const {
  return _internal_points_size();
}
inline void KMProto_KMProject_DrawingAction::clear_points() {
  points_.Clear();
}
inline float KMProto_KMProject_DrawingAction::_internal_points(int index) const {
  return points_.Get(index);
}
inline float KMProto_KMProject_DrawingAction::points(int index) const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.DrawingAction.points)
  return _internal_points(index);
}
inline void KMProto_KMProject_DrawingAction::set_points(int index, float value) {
  points_.Set(index, value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.DrawingAction.points)
}
inline void KMProto_KMProject_DrawingAction::_internal_add_points(float value) {
  points_.Add(value);
}
inline void KMProto_KMProject_DrawingAction::add_points(float value) {
  _internal_add_points(value);
  // @@protoc_insertion_point(field_add:KMProto.KMProject.DrawingAction.points)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
KMProto_KMProject_DrawingAction::_internal_points() const {
  return points_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
KMProto_KMProject_DrawingAction::points() const {
  // @@protoc_insertion_point(field_list:KMProto.KMProject.DrawingAction.points)
  return _internal_points();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
KMProto_KMProject_DrawingAction::_internal_mutable_points() {
  return &points_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
KMProto_KMProject_DrawingAction::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:KMProto.KMProject.DrawingAction.points)
  return _internal_mutable_points();
}

// optional int32 color = 3;
inline bool KMProto_KMProject_DrawingAction::_internal_has_color() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KMProto_KMProject_DrawingAction::has_color() const {
  return _internal_has_color();
}
inline void KMProto_KMProject_DrawingAction::clear_color() {
  color_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_DrawingAction::_internal_color() const {
  return color_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject_DrawingAction::color() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.DrawingAction.color)
  return _internal_color();
}
inline void KMProto_KMProject_DrawingAction::_internal_set_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  color_ = value;
}
inline void KMProto_KMProject_DrawingAction::set_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.DrawingAction.color)
}

// optional float stroke_width = 4;
inline bool KMProto_KMProject_DrawingAction::_internal_has_stroke_width() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KMProto_KMProject_DrawingAction::has_stroke_width() const {
  return _internal_has_stroke_width();
}
inline void KMProto_KMProject_DrawingAction::clear_stroke_width() {
  stroke_width_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float KMProto_KMProject_DrawingAction::_internal_stroke_width() const {
  return stroke_width_;
}
inline float KMProto_KMProject_DrawingAction::stroke_width() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.DrawingAction.stroke_width)
  return _internal_stroke_width();
}
inline void KMProto_KMProject_DrawingAction::_internal_set_stroke_width(float value) {
  _has_bits_[0] |= 0x00000002u;
  stroke_width_ = value;
}
inline void KMProto_KMProject_DrawingAction::set_stroke_width(float value) {
  _internal_set_stroke_width(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.DrawingAction.stroke_width)
}

// optional float hardness = 5;
inline bool KMProto_KMProject_DrawingAction::_internal_has_hardness() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool KMProto_KMProject_DrawingAction::has_hardness() const {
  return _internal_has_hardness();
}
inline void KMProto_KMProject_DrawingAction::clear_hardness() {
  hardness_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float KMProto_KMProject_DrawingAction::_internal_hardness() const {
  return hardness_;
}
inline float KMProto_KMProject_DrawingAction::hardness() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.DrawingAction.hardness)
  return _internal_hardness();
}
inline void KMProto_KMProject_DrawingAction::_internal_set_hardness(float value) {
  _has_bits_[0] |= 0x00000004u;
  hardness_ = value;
}
inline void KMProto_KMProject_DrawingAction::set_hardness(float value) {
  _internal_set_hardness(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.DrawingAction.hardness)
}

// optional bool is_eraser = 6;
inline bool KMProto_KMProject_DrawingAction::_internal_has_is_eraser() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool KMProto_KMProject_DrawingAction::has_is_eraser() const {
  return _internal_has_is_eraser();
}
inline void KMProto_KMProject_DrawingAction::clear_is_eraser() {
  is_eraser_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool KMProto_KMProject_DrawingAction::_internal_is_eraser() const {
  return is_eraser_;
}
inline bool KMProto_KMProject_DrawingAction::is_eraser() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.DrawingAction.is_eraser)
  return _internal_is_eraser();
}
inline void KMProto_KMProject_DrawingAction::_internal_set_is_eraser(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_eraser_ = value;
}
inline void KMProto_KMProject_DrawingAction::set_is_eraser(bool value) {
  _internal_set_is_eraser(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.DrawingAction.is_eraser)
}

// optional bool straight_line = 7;
inline bool KMProto_KMProject_DrawingAction::_internal_has_straight_line() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool KMProto_KMProject_DrawingAction::has_straight_line() const {
  return _internal_has_straight_line();
}
inline void KMProto_KMProject_DrawingAction::clear_straight_line() {
  straight_line_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool KMProto_KMProject_DrawingAction::_internal_straight_line() const {
  return straight_line_;
}
inline bool KMProto_KMProject_DrawingAction::straight_line() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.DrawingAction.straight_line)
  return _internal_straight_line();
}
inline void KMProto_KMProject_DrawingAction::_internal_set_straight_line(bool value) {
  _has_bits_[0] |= 0x00000010u;
  straight_line_ = value;
}
inline void KMProto_KMProject_DrawingAction::set_straight_line(bool value) {
  _internal_set_straight_line(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.DrawingAction.straight_line)
}

// optional .KMProto.KMProject.PathStyle path_style = 8;
inline bool KMProto_KMProject_DrawingAction::_internal_has_path_style() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool KMProto_KMProject_DrawingAction::has_path_style() const {
  return _internal_has_path_style();
}
inline void KMProto_KMProject_DrawingAction::clear_path_style() {
  path_style_ = 1;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::KMProto_KMProject_PathStyle KMProto_KMProject_DrawingAction::_internal_path_style() const {
  return static_cast< ::KMProto_KMProject_PathStyle >(path_style_);
}
inline ::KMProto_KMProject_PathStyle KMProto_KMProject_DrawingAction::path_style() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.DrawingAction.path_style)
  return _internal_path_style();
}
inline void KMProto_KMProject_DrawingAction::_internal_set_path_style(::KMProto_KMProject_PathStyle value) {
  assert(::KMProto_KMProject_PathStyle_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  path_style_ = value;
}
inline void KMProto_KMProject_DrawingAction::set_path_style(::KMProto_KMProject_PathStyle value) {
  _internal_set_path_style(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.DrawingAction.path_style)
}

// optional .KMProto.KMProject.CapDecorationStyle start_cap = 9;
inline bool KMProto_KMProject_DrawingAction::_internal_has_start_cap() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool KMProto_KMProject_DrawingAction::has_start_cap() const {
  return _internal_has_start_cap();
}
inline void KMProto_KMProject_DrawingAction::clear_start_cap() {
  start_cap_ = 1;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::KMProto_KMProject_CapDecorationStyle KMProto_KMProject_DrawingAction::_internal_start_cap() const {
  return static_cast< ::KMProto_KMProject_CapDecorationStyle >(start_cap_);
}
inline ::KMProto_KMProject_CapDecorationStyle KMProto_KMProject_DrawingAction::start_cap() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.DrawingAction.start_cap)
  return _internal_start_cap();
}
inline void KMProto_KMProject_DrawingAction::_internal_set_start_cap(::KMProto_KMProject_CapDecorationStyle value) {
  assert(::KMProto_KMProject_CapDecorationStyle_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  start_cap_ = value;
}
inline void KMProto_KMProject_DrawingAction::set_start_cap(::KMProto_KMProject_CapDecorationStyle value) {
  _internal_set_start_cap(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.DrawingAction.start_cap)
}

// optional .KMProto.KMProject.CapDecorationStyle end_cap = 10;
inline bool KMProto_KMProject_DrawingAction::_internal_has_end_cap() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool KMProto_KMProject_DrawingAction::has_end_cap() const {
  return _internal_has_end_cap();
}
inline void KMProto_KMProject_DrawingAction::clear_end_cap() {
  end_cap_ = 1;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::KMProto_KMProject_CapDecorationStyle KMProto_KMProject_DrawingAction::_internal_end_cap() const {
  return static_cast< ::KMProto_KMProject_CapDecorationStyle >(end_cap_);
}
inline ::KMProto_KMProject_CapDecorationStyle KMProto_KMProject_DrawingAction::end_cap() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.DrawingAction.end_cap)
  return _internal_end_cap();
}
inline void KMProto_KMProject_DrawingAction::_internal_set_end_cap(::KMProto_KMProject_CapDecorationStyle value) {
  assert(::KMProto_KMProject_CapDecorationStyle_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  end_cap_ = value;
}
inline void KMProto_KMProject_DrawingAction::set_end_cap(::KMProto_KMProject_CapDecorationStyle value) {
  _internal_set_end_cap(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.DrawingAction.end_cap)
}

// -------------------------------------------------------------------

// KMProto_KMProject_ColorEffect

// optional float brightness = 1;
inline bool KMProto_KMProject_ColorEffect::_internal_has_brightness() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KMProto_KMProject_ColorEffect::has_brightness() const {
  return _internal_has_brightness();
}
inline void KMProto_KMProject_ColorEffect::clear_brightness() {
  brightness_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float KMProto_KMProject_ColorEffect::_internal_brightness() const {
  return brightness_;
}
inline float KMProto_KMProject_ColorEffect::brightness() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.ColorEffect.brightness)
  return _internal_brightness();
}
inline void KMProto_KMProject_ColorEffect::_internal_set_brightness(float value) {
  _has_bits_[0] |= 0x00000002u;
  brightness_ = value;
}
inline void KMProto_KMProject_ColorEffect::set_brightness(float value) {
  _internal_set_brightness(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.ColorEffect.brightness)
}

// optional float contrast = 2;
inline bool KMProto_KMProject_ColorEffect::_internal_has_contrast() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool KMProto_KMProject_ColorEffect::has_contrast() const {
  return _internal_has_contrast();
}
inline void KMProto_KMProject_ColorEffect::clear_contrast() {
  contrast_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float KMProto_KMProject_ColorEffect::_internal_contrast() const {
  return contrast_;
}
inline float KMProto_KMProject_ColorEffect::contrast() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.ColorEffect.contrast)
  return _internal_contrast();
}
inline void KMProto_KMProject_ColorEffect::_internal_set_contrast(float value) {
  _has_bits_[0] |= 0x00000004u;
  contrast_ = value;
}
inline void KMProto_KMProject_ColorEffect::set_contrast(float value) {
  _internal_set_contrast(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.ColorEffect.contrast)
}

// optional float saturation = 3;
inline bool KMProto_KMProject_ColorEffect::_internal_has_saturation() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool KMProto_KMProject_ColorEffect::has_saturation() const {
  return _internal_has_saturation();
}
inline void KMProto_KMProject_ColorEffect::clear_saturation() {
  saturation_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float KMProto_KMProject_ColorEffect::_internal_saturation() const {
  return saturation_;
}
inline float KMProto_KMProject_ColorEffect::saturation() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.ColorEffect.saturation)
  return _internal_saturation();
}
inline void KMProto_KMProject_ColorEffect::_internal_set_saturation(float value) {
  _has_bits_[0] |= 0x00000008u;
  saturation_ = value;
}
inline void KMProto_KMProject_ColorEffect::set_saturation(float value) {
  _internal_set_saturation(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.ColorEffect.saturation)
}

// optional fixed32 tint_color = 4;
inline bool KMProto_KMProject_ColorEffect::_internal_has_tint_color() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool KMProto_KMProject_ColorEffect::has_tint_color() const {
  return _internal_has_tint_color();
}
inline void KMProto_KMProject_ColorEffect::clear_tint_color() {
  tint_color_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KMProto_KMProject_ColorEffect::_internal_tint_color() const {
  return tint_color_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KMProto_KMProject_ColorEffect::tint_color() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.ColorEffect.tint_color)
  return _internal_tint_color();
}
inline void KMProto_KMProject_ColorEffect::_internal_set_tint_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  tint_color_ = value;
}
inline void KMProto_KMProject_ColorEffect::set_tint_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tint_color(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.ColorEffect.tint_color)
}

// optional string preset_name = 5;
inline bool KMProto_KMProject_ColorEffect::_internal_has_preset_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KMProto_KMProject_ColorEffect::has_preset_name() const {
  return _internal_has_preset_name();
}
inline void KMProto_KMProject_ColorEffect::clear_preset_name() {
  preset_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KMProto_KMProject_ColorEffect::preset_name() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.ColorEffect.preset_name)
  return _internal_preset_name();
}
inline void KMProto_KMProject_ColorEffect::set_preset_name(const std::string& value) {
  _internal_set_preset_name(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.ColorEffect.preset_name)
}
inline std::string* KMProto_KMProject_ColorEffect::mutable_preset_name() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.ColorEffect.preset_name)
  return _internal_mutable_preset_name();
}
inline const std::string& KMProto_KMProject_ColorEffect::_internal_preset_name() const {
  return preset_name_.Get();
}
inline void KMProto_KMProject_ColorEffect::_internal_set_preset_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  preset_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProject_ColorEffect::set_preset_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  preset_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProject.ColorEffect.preset_name)
}
inline void KMProto_KMProject_ColorEffect::set_preset_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  preset_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProject.ColorEffect.preset_name)
}
inline void KMProto_KMProject_ColorEffect::set_preset_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  preset_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProject.ColorEffect.preset_name)
}
inline std::string* KMProto_KMProject_ColorEffect::_internal_mutable_preset_name() {
  _has_bits_[0] |= 0x00000001u;
  return preset_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProject_ColorEffect::release_preset_name() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.ColorEffect.preset_name)
  if (!_internal_has_preset_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return preset_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProject_ColorEffect::set_allocated_preset_name(std::string* preset_name) {
  if (preset_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  preset_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), preset_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.ColorEffect.preset_name)
}

// -------------------------------------------------------------------

// KMProto_KMProject_ColorFilter

// optional string filter = 1;
inline bool KMProto_KMProject_ColorFilter::_internal_has_filter() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KMProto_KMProject_ColorFilter::has_filter() const {
  return _internal_has_filter();
}
inline void KMProto_KMProject_ColorFilter::clear_filter() {
  filter_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KMProto_KMProject_ColorFilter::filter() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.ColorFilter.filter)
  return _internal_filter();
}
inline void KMProto_KMProject_ColorFilter::set_filter(const std::string& value) {
  _internal_set_filter(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.ColorFilter.filter)
}
inline std::string* KMProto_KMProject_ColorFilter::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.ColorFilter.filter)
  return _internal_mutable_filter();
}
inline const std::string& KMProto_KMProject_ColorFilter::_internal_filter() const {
  return filter_.Get();
}
inline void KMProto_KMProject_ColorFilter::_internal_set_filter(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProject_ColorFilter::set_filter(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  filter_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProject.ColorFilter.filter)
}
inline void KMProto_KMProject_ColorFilter::set_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProject.ColorFilter.filter)
}
inline void KMProto_KMProject_ColorFilter::set_filter(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProject.ColorFilter.filter)
}
inline std::string* KMProto_KMProject_ColorFilter::_internal_mutable_filter() {
  _has_bits_[0] |= 0x00000001u;
  return filter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProject_ColorFilter::release_filter() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.ColorFilter.filter)
  if (!_internal_has_filter()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return filter_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProject_ColorFilter::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filter,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.ColorFilter.filter)
}

// optional float strength = 2;
inline bool KMProto_KMProject_ColorFilter::_internal_has_strength() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KMProto_KMProject_ColorFilter::has_strength() const {
  return _internal_has_strength();
}
inline void KMProto_KMProject_ColorFilter::clear_strength() {
  strength_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float KMProto_KMProject_ColorFilter::_internal_strength() const {
  return strength_;
}
inline float KMProto_KMProject_ColorFilter::strength() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.ColorFilter.strength)
  return _internal_strength();
}
inline void KMProto_KMProject_ColorFilter::_internal_set_strength(float value) {
  _has_bits_[0] |= 0x00000002u;
  strength_ = value;
}
inline void KMProto_KMProject_ColorFilter::set_strength(float value) {
  _internal_set_strength(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.ColorFilter.strength)
}

// -------------------------------------------------------------------

// KMProto_KMProject

// optional int32 timeline_format_version = 100;
inline bool KMProto_KMProject::_internal_has_timeline_format_version() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool KMProto_KMProject::has_timeline_format_version() const {
  return _internal_has_timeline_format_version();
}
inline void KMProto_KMProject::clear_timeline_format_version() {
  timeline_format_version_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject::_internal_timeline_format_version() const {
  return timeline_format_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject::timeline_format_version() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.timeline_format_version)
  return _internal_timeline_format_version();
}
inline void KMProto_KMProject::_internal_set_timeline_format_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  timeline_format_version_ = value;
}
inline void KMProto_KMProject::set_timeline_format_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timeline_format_version(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.timeline_format_version)
}

// repeated .KMProto.KMProject.TimelineItem primary_items = 1;
inline int KMProto_KMProject::_internal_primary_items_size() const {
  return primary_items_.size();
}
inline int KMProto_KMProject::primary_items_size() const {
  return _internal_primary_items_size();
}
inline void KMProto_KMProject::clear_primary_items() {
  primary_items_.Clear();
}
inline ::KMProto_KMProject_TimelineItem* KMProto_KMProject::mutable_primary_items(int index) {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.primary_items)
  return primary_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_TimelineItem >*
KMProto_KMProject::mutable_primary_items() {
  // @@protoc_insertion_point(field_mutable_list:KMProto.KMProject.primary_items)
  return &primary_items_;
}
inline const ::KMProto_KMProject_TimelineItem& KMProto_KMProject::_internal_primary_items(int index) const {
  return primary_items_.Get(index);
}
inline const ::KMProto_KMProject_TimelineItem& KMProto_KMProject::primary_items(int index) const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.primary_items)
  return _internal_primary_items(index);
}
inline ::KMProto_KMProject_TimelineItem* KMProto_KMProject::_internal_add_primary_items() {
  return primary_items_.Add();
}
inline ::KMProto_KMProject_TimelineItem* KMProto_KMProject::add_primary_items() {
  // @@protoc_insertion_point(field_add:KMProto.KMProject.primary_items)
  return _internal_add_primary_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_TimelineItem >&
KMProto_KMProject::primary_items() const {
  // @@protoc_insertion_point(field_list:KMProto.KMProject.primary_items)
  return primary_items_;
}

// repeated .KMProto.KMProject.TimelineItem secondary_items = 2;
inline int KMProto_KMProject::_internal_secondary_items_size() const {
  return secondary_items_.size();
}
inline int KMProto_KMProject::secondary_items_size() const {
  return _internal_secondary_items_size();
}
inline void KMProto_KMProject::clear_secondary_items() {
  secondary_items_.Clear();
}
inline ::KMProto_KMProject_TimelineItem* KMProto_KMProject::mutable_secondary_items(int index) {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.secondary_items)
  return secondary_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_TimelineItem >*
KMProto_KMProject::mutable_secondary_items() {
  // @@protoc_insertion_point(field_mutable_list:KMProto.KMProject.secondary_items)
  return &secondary_items_;
}
inline const ::KMProto_KMProject_TimelineItem& KMProto_KMProject::_internal_secondary_items(int index) const {
  return secondary_items_.Get(index);
}
inline const ::KMProto_KMProject_TimelineItem& KMProto_KMProject::secondary_items(int index) const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.secondary_items)
  return _internal_secondary_items(index);
}
inline ::KMProto_KMProject_TimelineItem* KMProto_KMProject::_internal_add_secondary_items() {
  return secondary_items_.Add();
}
inline ::KMProto_KMProject_TimelineItem* KMProto_KMProject::add_secondary_items() {
  // @@protoc_insertion_point(field_add:KMProto.KMProject.secondary_items)
  return _internal_add_secondary_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_TimelineItem >&
KMProto_KMProject::secondary_items() const {
  // @@protoc_insertion_point(field_list:KMProto.KMProject.secondary_items)
  return secondary_items_;
}

// repeated .KMProto.KMProject.Track tracks = 3;
inline int KMProto_KMProject::_internal_tracks_size() const {
  return tracks_.size();
}
inline int KMProto_KMProject::tracks_size() const {
  return _internal_tracks_size();
}
inline void KMProto_KMProject::clear_tracks() {
  tracks_.Clear();
}
inline ::KMProto_KMProject_Track* KMProto_KMProject::mutable_tracks(int index) {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.tracks)
  return tracks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_Track >*
KMProto_KMProject::mutable_tracks() {
  // @@protoc_insertion_point(field_mutable_list:KMProto.KMProject.tracks)
  return &tracks_;
}
inline const ::KMProto_KMProject_Track& KMProto_KMProject::_internal_tracks(int index) const {
  return tracks_.Get(index);
}
inline const ::KMProto_KMProject_Track& KMProto_KMProject::tracks(int index) const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.tracks)
  return _internal_tracks(index);
}
inline ::KMProto_KMProject_Track* KMProto_KMProject::_internal_add_tracks() {
  return tracks_.Add();
}
inline ::KMProto_KMProject_Track* KMProto_KMProject::add_tracks() {
  // @@protoc_insertion_point(field_add:KMProto.KMProject.tracks)
  return _internal_add_tracks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KMProto_KMProject_Track >&
KMProto_KMProject::tracks() const {
  // @@protoc_insertion_point(field_list:KMProto.KMProject.tracks)
  return tracks_;
}

// repeated uint32 bookmarks = 103 [packed = true];
inline int KMProto_KMProject::_internal_bookmarks_size() const {
  return bookmarks_.size();
}
inline int KMProto_KMProject::bookmarks_size() const {
  return _internal_bookmarks_size();
}
inline void KMProto_KMProject::clear_bookmarks() {
  bookmarks_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KMProto_KMProject::_internal_bookmarks(int index) const {
  return bookmarks_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KMProto_KMProject::bookmarks(int index) const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.bookmarks)
  return _internal_bookmarks(index);
}
inline void KMProto_KMProject::set_bookmarks(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  bookmarks_.Set(index, value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.bookmarks)
}
inline void KMProto_KMProject::_internal_add_bookmarks(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  bookmarks_.Add(value);
}
inline void KMProto_KMProject::add_bookmarks(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_bookmarks(value);
  // @@protoc_insertion_point(field_add:KMProto.KMProject.bookmarks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
KMProto_KMProject::_internal_bookmarks() const {
  return bookmarks_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
KMProto_KMProject::bookmarks() const {
  // @@protoc_insertion_point(field_list:KMProto.KMProject.bookmarks)
  return _internal_bookmarks();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
KMProto_KMProject::_internal_mutable_bookmarks() {
  return &bookmarks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
KMProto_KMProject::mutable_bookmarks() {
  // @@protoc_insertion_point(field_mutable_list:KMProto.KMProject.bookmarks)
  return _internal_mutable_bookmarks();
}

// optional int32 recent_scroll_time = 109;
inline bool KMProto_KMProject::_internal_has_recent_scroll_time() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool KMProto_KMProject::has_recent_scroll_time() const {
  return _internal_has_recent_scroll_time();
}
inline void KMProto_KMProject::clear_recent_scroll_time() {
  recent_scroll_time_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject::_internal_recent_scroll_time() const {
  return recent_scroll_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject::recent_scroll_time() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.recent_scroll_time)
  return _internal_recent_scroll_time();
}
inline void KMProto_KMProject::_internal_set_recent_scroll_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  recent_scroll_time_ = value;
}
inline void KMProto_KMProject::set_recent_scroll_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_recent_scroll_time(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.recent_scroll_time)
}

// optional .KMProto.KMProject.AspectRatio project_ratio = 111;
inline bool KMProto_KMProject::_internal_has_project_ratio() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool KMProto_KMProject::has_project_ratio() const {
  return _internal_has_project_ratio();
}
inline void KMProto_KMProject::clear_project_ratio() {
  project_ratio_ = 1;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::KMProto_KMProject_AspectRatio KMProto_KMProject::_internal_project_ratio() const {
  return static_cast< ::KMProto_KMProject_AspectRatio >(project_ratio_);
}
inline ::KMProto_KMProject_AspectRatio KMProto_KMProject::project_ratio() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.project_ratio)
  return _internal_project_ratio();
}
inline void KMProto_KMProject::_internal_set_project_ratio(::KMProto_KMProject_AspectRatio value) {
  assert(::KMProto_KMProject_AspectRatio_IsValid(value));
  _has_bits_[0] |= 0x00800000u;
  project_ratio_ = value;
}
inline void KMProto_KMProject::set_project_ratio(::KMProto_KMProject_AspectRatio value) {
  _internal_set_project_ratio(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.project_ratio)
}

// optional float project_audio_fade_in_time = 112;
inline bool KMProto_KMProject::_internal_has_project_audio_fade_in_time() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool KMProto_KMProject::has_project_audio_fade_in_time() const {
  return _internal_has_project_audio_fade_in_time();
}
inline void KMProto_KMProject::clear_project_audio_fade_in_time() {
  project_audio_fade_in_time_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float KMProto_KMProject::_internal_project_audio_fade_in_time() const {
  return project_audio_fade_in_time_;
}
inline float KMProto_KMProject::project_audio_fade_in_time() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.project_audio_fade_in_time)
  return _internal_project_audio_fade_in_time();
}
inline void KMProto_KMProject::_internal_set_project_audio_fade_in_time(float value) {
  _has_bits_[0] |= 0x00000040u;
  project_audio_fade_in_time_ = value;
}
inline void KMProto_KMProject::set_project_audio_fade_in_time(float value) {
  _internal_set_project_audio_fade_in_time(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.project_audio_fade_in_time)
}

// optional float project_audio_fade_out_time = 113;
inline bool KMProto_KMProject::_internal_has_project_audio_fade_out_time() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool KMProto_KMProject::has_project_audio_fade_out_time() const {
  return _internal_has_project_audio_fade_out_time();
}
inline void KMProto_KMProject::clear_project_audio_fade_out_time() {
  project_audio_fade_out_time_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float KMProto_KMProject::_internal_project_audio_fade_out_time() const {
  return project_audio_fade_out_time_;
}
inline float KMProto_KMProject::project_audio_fade_out_time() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.project_audio_fade_out_time)
  return _internal_project_audio_fade_out_time();
}
inline void KMProto_KMProject::_internal_set_project_audio_fade_out_time(float value) {
  _has_bits_[0] |= 0x00000080u;
  project_audio_fade_out_time_ = value;
}
inline void KMProto_KMProject::set_project_audio_fade_out_time(float value) {
  _internal_set_project_audio_fade_out_time(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.project_audio_fade_out_time)
}

// optional bool is_project_audio_fade_in_on = 114;
inline bool KMProto_KMProject::_internal_has_is_project_audio_fade_in_on() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool KMProto_KMProject::has_is_project_audio_fade_in_on() const {
  return _internal_has_is_project_audio_fade_in_on();
}
inline void KMProto_KMProject::clear_is_project_audio_fade_in_on() {
  is_project_audio_fade_in_on_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool KMProto_KMProject::_internal_is_project_audio_fade_in_on() const {
  return is_project_audio_fade_in_on_;
}
inline bool KMProto_KMProject::is_project_audio_fade_in_on() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.is_project_audio_fade_in_on)
  return _internal_is_project_audio_fade_in_on();
}
inline void KMProto_KMProject::_internal_set_is_project_audio_fade_in_on(bool value) {
  _has_bits_[0] |= 0x00000100u;
  is_project_audio_fade_in_on_ = value;
}
inline void KMProto_KMProject::set_is_project_audio_fade_in_on(bool value) {
  _internal_set_is_project_audio_fade_in_on(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.is_project_audio_fade_in_on)
}

// optional bool is_project_audio_fade_out_on = 115;
inline bool KMProto_KMProject::_internal_has_is_project_audio_fade_out_on() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool KMProto_KMProject::has_is_project_audio_fade_out_on() const {
  return _internal_has_is_project_audio_fade_out_on();
}
inline void KMProto_KMProject::clear_is_project_audio_fade_out_on() {
  is_project_audio_fade_out_on_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool KMProto_KMProject::_internal_is_project_audio_fade_out_on() const {
  return is_project_audio_fade_out_on_;
}
inline bool KMProto_KMProject::is_project_audio_fade_out_on() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.is_project_audio_fade_out_on)
  return _internal_is_project_audio_fade_out_on();
}
inline void KMProto_KMProject::_internal_set_is_project_audio_fade_out_on(bool value) {
  _has_bits_[0] |= 0x00000200u;
  is_project_audio_fade_out_on_ = value;
}
inline void KMProto_KMProject::set_is_project_audio_fade_out_on(bool value) {
  _internal_set_is_project_audio_fade_out_on(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.is_project_audio_fade_out_on)
}

// optional float project_video_fade_in_time = 120;
inline bool KMProto_KMProject::_internal_has_project_video_fade_in_time() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool KMProto_KMProject::has_project_video_fade_in_time() const {
  return _internal_has_project_video_fade_in_time();
}
inline void KMProto_KMProject::clear_project_video_fade_in_time() {
  project_video_fade_in_time_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float KMProto_KMProject::_internal_project_video_fade_in_time() const {
  return project_video_fade_in_time_;
}
inline float KMProto_KMProject::project_video_fade_in_time() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.project_video_fade_in_time)
  return _internal_project_video_fade_in_time();
}
inline void KMProto_KMProject::_internal_set_project_video_fade_in_time(float value) {
  _has_bits_[0] |= 0x00001000u;
  project_video_fade_in_time_ = value;
}
inline void KMProto_KMProject::set_project_video_fade_in_time(float value) {
  _internal_set_project_video_fade_in_time(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.project_video_fade_in_time)
}

// optional float project_video_fade_out_time = 121;
inline bool KMProto_KMProject::_internal_has_project_video_fade_out_time() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool KMProto_KMProject::has_project_video_fade_out_time() const {
  return _internal_has_project_video_fade_out_time();
}
inline void KMProto_KMProject::clear_project_video_fade_out_time() {
  project_video_fade_out_time_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float KMProto_KMProject::_internal_project_video_fade_out_time() const {
  return project_video_fade_out_time_;
}
inline float KMProto_KMProject::project_video_fade_out_time() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.project_video_fade_out_time)
  return _internal_project_video_fade_out_time();
}
inline void KMProto_KMProject::_internal_set_project_video_fade_out_time(float value) {
  _has_bits_[0] |= 0x00002000u;
  project_video_fade_out_time_ = value;
}
inline void KMProto_KMProject::set_project_video_fade_out_time(float value) {
  _internal_set_project_video_fade_out_time(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.project_video_fade_out_time)
}

// optional bool is_project_video_fade_in_on = 122;
inline bool KMProto_KMProject::_internal_has_is_project_video_fade_in_on() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool KMProto_KMProject::has_is_project_video_fade_in_on() const {
  return _internal_has_is_project_video_fade_in_on();
}
inline void KMProto_KMProject::clear_is_project_video_fade_in_on() {
  is_project_video_fade_in_on_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool KMProto_KMProject::_internal_is_project_video_fade_in_on() const {
  return is_project_video_fade_in_on_;
}
inline bool KMProto_KMProject::is_project_video_fade_in_on() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.is_project_video_fade_in_on)
  return _internal_is_project_video_fade_in_on();
}
inline void KMProto_KMProject::_internal_set_is_project_video_fade_in_on(bool value) {
  _has_bits_[0] |= 0x00000400u;
  is_project_video_fade_in_on_ = value;
}
inline void KMProto_KMProject::set_is_project_video_fade_in_on(bool value) {
  _internal_set_is_project_video_fade_in_on(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.is_project_video_fade_in_on)
}

// optional bool is_project_video_fade_out_on = 123;
inline bool KMProto_KMProject::_internal_has_is_project_video_fade_out_on() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool KMProto_KMProject::has_is_project_video_fade_out_on() const {
  return _internal_has_is_project_video_fade_out_on();
}
inline void KMProto_KMProject::clear_is_project_video_fade_out_on() {
  is_project_video_fade_out_on_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool KMProto_KMProject::_internal_is_project_video_fade_out_on() const {
  return is_project_video_fade_out_on_;
}
inline bool KMProto_KMProject::is_project_video_fade_out_on() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.is_project_video_fade_out_on)
  return _internal_is_project_video_fade_out_on();
}
inline void KMProto_KMProject::_internal_set_is_project_video_fade_out_on(bool value) {
  _has_bits_[0] |= 0x00000800u;
  is_project_video_fade_out_on_ = value;
}
inline void KMProto_KMProject::set_is_project_video_fade_out_on(bool value) {
  _internal_set_is_project_video_fade_out_on(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.is_project_video_fade_out_on)
}

// optional .KMProto.KMProject.Fade audio_fade = 135;
inline bool KMProto_KMProject::_internal_has_audio_fade() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || audio_fade_ != nullptr);
  return value;
}
inline bool KMProto_KMProject::has_audio_fade() const {
  return _internal_has_audio_fade();
}
inline void KMProto_KMProject::clear_audio_fade() {
  if (audio_fade_ != nullptr) audio_fade_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::KMProto_KMProject_Fade& KMProto_KMProject::_internal_audio_fade() const {
  const ::KMProto_KMProject_Fade* p = audio_fade_;
  return p != nullptr ? *p : reinterpret_cast<const ::KMProto_KMProject_Fade&>(
      ::_KMProto_KMProject_Fade_default_instance_);
}
inline const ::KMProto_KMProject_Fade& KMProto_KMProject::audio_fade() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.audio_fade)
  return _internal_audio_fade();
}
inline void KMProto_KMProject::unsafe_arena_set_allocated_audio_fade(
    ::KMProto_KMProject_Fade* audio_fade) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(audio_fade_);
  }
  audio_fade_ = audio_fade;
  if (audio_fade) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KMProto.KMProject.audio_fade)
}
inline ::KMProto_KMProject_Fade* KMProto_KMProject::release_audio_fade() {
  _has_bits_[0] &= ~0x00000002u;
  ::KMProto_KMProject_Fade* temp = audio_fade_;
  audio_fade_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KMProto_KMProject_Fade* KMProto_KMProject::unsafe_arena_release_audio_fade() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.audio_fade)
  _has_bits_[0] &= ~0x00000002u;
  ::KMProto_KMProject_Fade* temp = audio_fade_;
  audio_fade_ = nullptr;
  return temp;
}
inline ::KMProto_KMProject_Fade* KMProto_KMProject::_internal_mutable_audio_fade() {
  _has_bits_[0] |= 0x00000002u;
  if (audio_fade_ == nullptr) {
    auto* p = CreateMaybeMessage<::KMProto_KMProject_Fade>(GetArena());
    audio_fade_ = p;
  }
  return audio_fade_;
}
inline ::KMProto_KMProject_Fade* KMProto_KMProject::mutable_audio_fade() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.audio_fade)
  return _internal_mutable_audio_fade();
}
inline void KMProto_KMProject::set_allocated_audio_fade(::KMProto_KMProject_Fade* audio_fade) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete audio_fade_;
  }
  if (audio_fade) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(audio_fade);
    if (message_arena != submessage_arena) {
      audio_fade = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio_fade, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  audio_fade_ = audio_fade;
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.audio_fade)
}

// optional .KMProto.KMProject.Fade video_fade = 136;
inline bool KMProto_KMProject::_internal_has_video_fade() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || video_fade_ != nullptr);
  return value;
}
inline bool KMProto_KMProject::has_video_fade() const {
  return _internal_has_video_fade();
}
inline void KMProto_KMProject::clear_video_fade() {
  if (video_fade_ != nullptr) video_fade_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::KMProto_KMProject_Fade& KMProto_KMProject::_internal_video_fade() const {
  const ::KMProto_KMProject_Fade* p = video_fade_;
  return p != nullptr ? *p : reinterpret_cast<const ::KMProto_KMProject_Fade&>(
      ::_KMProto_KMProject_Fade_default_instance_);
}
inline const ::KMProto_KMProject_Fade& KMProto_KMProject::video_fade() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.video_fade)
  return _internal_video_fade();
}
inline void KMProto_KMProject::unsafe_arena_set_allocated_video_fade(
    ::KMProto_KMProject_Fade* video_fade) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(video_fade_);
  }
  video_fade_ = video_fade;
  if (video_fade) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KMProto.KMProject.video_fade)
}
inline ::KMProto_KMProject_Fade* KMProto_KMProject::release_video_fade() {
  _has_bits_[0] &= ~0x00000004u;
  ::KMProto_KMProject_Fade* temp = video_fade_;
  video_fade_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KMProto_KMProject_Fade* KMProto_KMProject::unsafe_arena_release_video_fade() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.video_fade)
  _has_bits_[0] &= ~0x00000004u;
  ::KMProto_KMProject_Fade* temp = video_fade_;
  video_fade_ = nullptr;
  return temp;
}
inline ::KMProto_KMProject_Fade* KMProto_KMProject::_internal_mutable_video_fade() {
  _has_bits_[0] |= 0x00000004u;
  if (video_fade_ == nullptr) {
    auto* p = CreateMaybeMessage<::KMProto_KMProject_Fade>(GetArena());
    video_fade_ = p;
  }
  return video_fade_;
}
inline ::KMProto_KMProject_Fade* KMProto_KMProject::mutable_video_fade() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.video_fade)
  return _internal_mutable_video_fade();
}
inline void KMProto_KMProject::set_allocated_video_fade(::KMProto_KMProject_Fade* video_fade) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete video_fade_;
  }
  if (video_fade) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(video_fade);
    if (message_arena != submessage_arena) {
      video_fade = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, video_fade, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  video_fade_ = video_fade;
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.video_fade)
}

// optional int32 project_default_img_duration = 124;
inline bool KMProto_KMProject::_internal_has_project_default_img_duration() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool KMProto_KMProject::has_project_default_img_duration() const {
  return _internal_has_project_default_img_duration();
}
inline void KMProto_KMProject::clear_project_default_img_duration() {
  project_default_img_duration_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject::_internal_project_default_img_duration() const {
  return project_default_img_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject::project_default_img_duration() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.project_default_img_duration)
  return _internal_project_default_img_duration();
}
inline void KMProto_KMProject::_internal_set_project_default_img_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  project_default_img_duration_ = value;
}
inline void KMProto_KMProject::set_project_default_img_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_project_default_img_duration(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.project_default_img_duration)
}

// optional int32 project_default_layer_duration = 125;
inline bool KMProto_KMProject::_internal_has_project_default_layer_duration() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool KMProto_KMProject::has_project_default_layer_duration() const {
  return _internal_has_project_default_layer_duration();
}
inline void KMProto_KMProject::clear_project_default_layer_duration() {
  project_default_layer_duration_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject::_internal_project_default_layer_duration() const {
  return project_default_layer_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject::project_default_layer_duration() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.project_default_layer_duration)
  return _internal_project_default_layer_duration();
}
inline void KMProto_KMProject::_internal_set_project_default_layer_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  project_default_layer_duration_ = value;
}
inline void KMProto_KMProject::set_project_default_layer_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_project_default_layer_duration(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.project_default_layer_duration)
}

// optional string project_default_img_crop_mode = 126;
inline bool KMProto_KMProject::_internal_has_project_default_img_crop_mode() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KMProto_KMProject::has_project_default_img_crop_mode() const {
  return _internal_has_project_default_img_crop_mode();
}
inline void KMProto_KMProject::clear_project_default_img_crop_mode() {
  project_default_img_crop_mode_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KMProto_KMProject::project_default_img_crop_mode() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.project_default_img_crop_mode)
  return _internal_project_default_img_crop_mode();
}
inline void KMProto_KMProject::set_project_default_img_crop_mode(const std::string& value) {
  _internal_set_project_default_img_crop_mode(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.project_default_img_crop_mode)
}
inline std::string* KMProto_KMProject::mutable_project_default_img_crop_mode() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProject.project_default_img_crop_mode)
  return _internal_mutable_project_default_img_crop_mode();
}
inline const std::string& KMProto_KMProject::_internal_project_default_img_crop_mode() const {
  return project_default_img_crop_mode_.Get();
}
inline void KMProto_KMProject::_internal_set_project_default_img_crop_mode(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  project_default_img_crop_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProject::set_project_default_img_crop_mode(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  project_default_img_crop_mode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProject.project_default_img_crop_mode)
}
inline void KMProto_KMProject::set_project_default_img_crop_mode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  project_default_img_crop_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProject.project_default_img_crop_mode)
}
inline void KMProto_KMProject::set_project_default_img_crop_mode(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  project_default_img_crop_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProject.project_default_img_crop_mode)
}
inline std::string* KMProto_KMProject::_internal_mutable_project_default_img_crop_mode() {
  _has_bits_[0] |= 0x00000001u;
  return project_default_img_crop_mode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProject::release_project_default_img_crop_mode() {
  // @@protoc_insertion_point(field_release:KMProto.KMProject.project_default_img_crop_mode)
  if (!_internal_has_project_default_img_crop_mode()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return project_default_img_crop_mode_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProject::set_allocated_project_default_img_crop_mode(std::string* project_default_img_crop_mode) {
  if (project_default_img_crop_mode != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  project_default_img_crop_mode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), project_default_img_crop_mode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProject.project_default_img_crop_mode)
}

// optional bool project_auto_master = 127;
inline bool KMProto_KMProject::_internal_has_project_auto_master() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool KMProto_KMProject::has_project_auto_master() const {
  return _internal_has_project_auto_master();
}
inline void KMProto_KMProject::clear_project_auto_master() {
  project_auto_master_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool KMProto_KMProject::_internal_project_auto_master() const {
  return project_auto_master_;
}
inline bool KMProto_KMProject::project_auto_master() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.project_auto_master)
  return _internal_project_auto_master();
}
inline void KMProto_KMProject::_internal_set_project_auto_master(bool value) {
  _has_bits_[0] |= 0x00010000u;
  project_auto_master_ = value;
}
inline void KMProto_KMProject::set_project_auto_master(bool value) {
  _internal_set_project_auto_master(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.project_auto_master)
}

// optional int32 project_master_volume = 128;
inline bool KMProto_KMProject::_internal_has_project_master_volume() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool KMProto_KMProject::has_project_master_volume() const {
  return _internal_has_project_master_volume();
}
inline void KMProto_KMProject::clear_project_master_volume() {
  project_master_volume_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject::_internal_project_master_volume() const {
  return project_master_volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject::project_master_volume() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.project_master_volume)
  return _internal_project_master_volume();
}
inline void KMProto_KMProject::_internal_set_project_master_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00020000u;
  project_master_volume_ = value;
}
inline void KMProto_KMProject::set_project_master_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_project_master_volume(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.project_master_volume)
}

// optional int32 project_resolution_setting = 129;
inline bool KMProto_KMProject::_internal_has_project_resolution_setting() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool KMProto_KMProject::has_project_resolution_setting() const {
  return _internal_has_project_resolution_setting();
}
inline void KMProto_KMProject::clear_project_resolution_setting() {
  project_resolution_setting_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject::_internal_project_resolution_setting() const {
  return project_resolution_setting_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject::project_resolution_setting() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.project_resolution_setting)
  return _internal_project_resolution_setting();
}
inline void KMProto_KMProject::_internal_set_project_resolution_setting(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00040000u;
  project_resolution_setting_ = value;
}
inline void KMProto_KMProject::set_project_resolution_setting(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_project_resolution_setting(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.project_resolution_setting)
}

// optional int32 project_frame_rate = 130;
inline bool KMProto_KMProject::_internal_has_project_frame_rate() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool KMProto_KMProject::has_project_frame_rate() const {
  return _internal_has_project_frame_rate();
}
inline void KMProto_KMProject::clear_project_frame_rate() {
  project_frame_rate_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject::_internal_project_frame_rate() const {
  return project_frame_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject::project_frame_rate() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.project_frame_rate)
  return _internal_project_frame_rate();
}
inline void KMProto_KMProject::_internal_set_project_frame_rate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00080000u;
  project_frame_rate_ = value;
}
inline void KMProto_KMProject::set_project_frame_rate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_project_frame_rate(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.project_frame_rate)
}

// optional int32 project_default_img_crop_mode_ios = 131;
inline bool KMProto_KMProject::_internal_has_project_default_img_crop_mode_ios() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool KMProto_KMProject::has_project_default_img_crop_mode_ios() const {
  return _internal_has_project_default_img_crop_mode_ios();
}
inline void KMProto_KMProject::clear_project_default_img_crop_mode_ios() {
  project_default_img_crop_mode_ios_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject::_internal_project_default_img_crop_mode_ios() const {
  return project_default_img_crop_mode_ios_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject::project_default_img_crop_mode_ios() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.project_default_img_crop_mode_ios)
  return _internal_project_default_img_crop_mode_ios();
}
inline void KMProto_KMProject::_internal_set_project_default_img_crop_mode_ios(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00100000u;
  project_default_img_crop_mode_ios_ = value;
}
inline void KMProto_KMProject::set_project_default_img_crop_mode_ios(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_project_default_img_crop_mode_ios(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.project_default_img_crop_mode_ios)
}

// optional int32 project_capability_mode = 132;
inline bool KMProto_KMProject::_internal_has_project_capability_mode() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool KMProto_KMProject::has_project_capability_mode() const {
  return _internal_has_project_capability_mode();
}
inline void KMProto_KMProject::clear_project_capability_mode() {
  project_capability_mode_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject::_internal_project_capability_mode() const {
  return project_capability_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject::project_capability_mode() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.project_capability_mode)
  return _internal_project_capability_mode();
}
inline void KMProto_KMProject::_internal_set_project_capability_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00200000u;
  project_capability_mode_ = value;
}
inline void KMProto_KMProject::set_project_capability_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_project_capability_mode(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.project_capability_mode)
}

// optional int32 aspect_ratio_width = 133;
inline bool KMProto_KMProject::_internal_has_aspect_ratio_width() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool KMProto_KMProject::has_aspect_ratio_width() const {
  return _internal_has_aspect_ratio_width();
}
inline void KMProto_KMProject::clear_aspect_ratio_width() {
  aspect_ratio_width_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject::_internal_aspect_ratio_width() const {
  return aspect_ratio_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject::aspect_ratio_width() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.aspect_ratio_width)
  return _internal_aspect_ratio_width();
}
inline void KMProto_KMProject::_internal_set_aspect_ratio_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00400000u;
  aspect_ratio_width_ = value;
}
inline void KMProto_KMProject::set_aspect_ratio_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_aspect_ratio_width(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.aspect_ratio_width)
}

// optional int32 aspect_ratio_height = 134;
inline bool KMProto_KMProject::_internal_has_aspect_ratio_height() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool KMProto_KMProject::has_aspect_ratio_height() const {
  return _internal_has_aspect_ratio_height();
}
inline void KMProto_KMProject::clear_aspect_ratio_height() {
  aspect_ratio_height_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject::_internal_aspect_ratio_height() const {
  return aspect_ratio_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KMProto_KMProject::aspect_ratio_height() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProject.aspect_ratio_height)
  return _internal_aspect_ratio_height();
}
inline void KMProto_KMProject::_internal_set_aspect_ratio_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  aspect_ratio_height_ = value;
}
inline void KMProto_KMProject::set_aspect_ratio_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_aspect_ratio_height(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProject.aspect_ratio_height)
}

// -------------------------------------------------------------------

// KMProto_KMProjectHeader

// optional uint32 project_version = 1;
inline bool KMProto_KMProjectHeader::_internal_has_project_version() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool KMProto_KMProjectHeader::has_project_version() const {
  return _internal_has_project_version();
}
inline void KMProto_KMProjectHeader::clear_project_version() {
  project_version_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KMProto_KMProjectHeader::_internal_project_version() const {
  return project_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KMProto_KMProjectHeader::project_version() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProjectHeader.project_version)
  return _internal_project_version();
}
inline void KMProto_KMProjectHeader::_internal_set_project_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  project_version_ = value;
}
inline void KMProto_KMProjectHeader::set_project_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_project_version(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProjectHeader.project_version)
}

// optional uint32 saved_with_km_version = 2;
inline bool KMProto_KMProjectHeader::_internal_has_saved_with_km_version() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool KMProto_KMProjectHeader::has_saved_with_km_version() const {
  return _internal_has_saved_with_km_version();
}
inline void KMProto_KMProjectHeader::clear_saved_with_km_version() {
  saved_with_km_version_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KMProto_KMProjectHeader::_internal_saved_with_km_version() const {
  return saved_with_km_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KMProto_KMProjectHeader::saved_with_km_version() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProjectHeader.saved_with_km_version)
  return _internal_saved_with_km_version();
}
inline void KMProto_KMProjectHeader::_internal_set_saved_with_km_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  saved_with_km_version_ = value;
}
inline void KMProto_KMProjectHeader::set_saved_with_km_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_saved_with_km_version(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProjectHeader.saved_with_km_version)
}

// optional uint64 creation_time = 3;
inline bool KMProto_KMProjectHeader::_internal_has_creation_time() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool KMProto_KMProjectHeader::has_creation_time() const {
  return _internal_has_creation_time();
}
inline void KMProto_KMProjectHeader::clear_creation_time() {
  creation_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KMProto_KMProjectHeader::_internal_creation_time() const {
  return creation_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KMProto_KMProjectHeader::creation_time() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProjectHeader.creation_time)
  return _internal_creation_time();
}
inline void KMProto_KMProjectHeader::_internal_set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  creation_time_ = value;
}
inline void KMProto_KMProjectHeader::set_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_creation_time(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProjectHeader.creation_time)
}

// optional uint64 last_edit_time = 4;
inline bool KMProto_KMProjectHeader::_internal_has_last_edit_time() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool KMProto_KMProjectHeader::has_last_edit_time() const {
  return _internal_has_last_edit_time();
}
inline void KMProto_KMProjectHeader::clear_last_edit_time() {
  last_edit_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KMProto_KMProjectHeader::_internal_last_edit_time() const {
  return last_edit_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KMProto_KMProjectHeader::last_edit_time() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProjectHeader.last_edit_time)
  return _internal_last_edit_time();
}
inline void KMProto_KMProjectHeader::_internal_set_last_edit_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  last_edit_time_ = value;
}
inline void KMProto_KMProjectHeader::set_last_edit_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_last_edit_time(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProjectHeader.last_edit_time)
}

// optional bytes jpeg_thumbnail = 5;
inline bool KMProto_KMProjectHeader::_internal_has_jpeg_thumbnail() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KMProto_KMProjectHeader::has_jpeg_thumbnail() const {
  return _internal_has_jpeg_thumbnail();
}
inline void KMProto_KMProjectHeader::clear_jpeg_thumbnail() {
  jpeg_thumbnail_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KMProto_KMProjectHeader::jpeg_thumbnail() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProjectHeader.jpeg_thumbnail)
  return _internal_jpeg_thumbnail();
}
inline void KMProto_KMProjectHeader::set_jpeg_thumbnail(const std::string& value) {
  _internal_set_jpeg_thumbnail(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProjectHeader.jpeg_thumbnail)
}
inline std::string* KMProto_KMProjectHeader::mutable_jpeg_thumbnail() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProjectHeader.jpeg_thumbnail)
  return _internal_mutable_jpeg_thumbnail();
}
inline const std::string& KMProto_KMProjectHeader::_internal_jpeg_thumbnail() const {
  return jpeg_thumbnail_.Get();
}
inline void KMProto_KMProjectHeader::_internal_set_jpeg_thumbnail(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  jpeg_thumbnail_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProjectHeader::set_jpeg_thumbnail(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  jpeg_thumbnail_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProjectHeader.jpeg_thumbnail)
}
inline void KMProto_KMProjectHeader::set_jpeg_thumbnail(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  jpeg_thumbnail_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProjectHeader.jpeg_thumbnail)
}
inline void KMProto_KMProjectHeader::set_jpeg_thumbnail(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  jpeg_thumbnail_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProjectHeader.jpeg_thumbnail)
}
inline std::string* KMProto_KMProjectHeader::_internal_mutable_jpeg_thumbnail() {
  _has_bits_[0] |= 0x00000001u;
  return jpeg_thumbnail_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProjectHeader::release_jpeg_thumbnail() {
  // @@protoc_insertion_point(field_release:KMProto.KMProjectHeader.jpeg_thumbnail)
  if (!_internal_has_jpeg_thumbnail()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return jpeg_thumbnail_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProjectHeader::set_allocated_jpeg_thumbnail(std::string* jpeg_thumbnail) {
  if (jpeg_thumbnail != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  jpeg_thumbnail_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), jpeg_thumbnail,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProjectHeader.jpeg_thumbnail)
}

// optional bool need_update_large_thumbnail = 100;
inline bool KMProto_KMProjectHeader::_internal_has_need_update_large_thumbnail() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool KMProto_KMProjectHeader::has_need_update_large_thumbnail() const {
  return _internal_has_need_update_large_thumbnail();
}
inline void KMProto_KMProjectHeader::clear_need_update_large_thumbnail() {
  need_update_large_thumbnail_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool KMProto_KMProjectHeader::_internal_need_update_large_thumbnail() const {
  return need_update_large_thumbnail_;
}
inline bool KMProto_KMProjectHeader::need_update_large_thumbnail() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProjectHeader.need_update_large_thumbnail)
  return _internal_need_update_large_thumbnail();
}
inline void KMProto_KMProjectHeader::_internal_set_need_update_large_thumbnail(bool value) {
  _has_bits_[0] |= 0x00000800u;
  need_update_large_thumbnail_ = value;
}
inline void KMProto_KMProjectHeader::set_need_update_large_thumbnail(bool value) {
  _internal_set_need_update_large_thumbnail(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProjectHeader.need_update_large_thumbnail)
}

// optional uint64 project_uuid_lsb = 6;
inline bool KMProto_KMProjectHeader::_internal_has_project_uuid_lsb() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool KMProto_KMProjectHeader::has_project_uuid_lsb() const {
  return _internal_has_project_uuid_lsb();
}
inline void KMProto_KMProjectHeader::clear_project_uuid_lsb() {
  project_uuid_lsb_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KMProto_KMProjectHeader::_internal_project_uuid_lsb() const {
  return project_uuid_lsb_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KMProto_KMProjectHeader::project_uuid_lsb() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProjectHeader.project_uuid_lsb)
  return _internal_project_uuid_lsb();
}
inline void KMProto_KMProjectHeader::_internal_set_project_uuid_lsb(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  project_uuid_lsb_ = value;
}
inline void KMProto_KMProjectHeader::set_project_uuid_lsb(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_project_uuid_lsb(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProjectHeader.project_uuid_lsb)
}

// optional uint64 project_uuid_msb = 7;
inline bool KMProto_KMProjectHeader::_internal_has_project_uuid_msb() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool KMProto_KMProjectHeader::has_project_uuid_msb() const {
  return _internal_has_project_uuid_msb();
}
inline void KMProto_KMProjectHeader::clear_project_uuid_msb() {
  project_uuid_msb_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KMProto_KMProjectHeader::_internal_project_uuid_msb() const {
  return project_uuid_msb_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KMProto_KMProjectHeader::project_uuid_msb() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProjectHeader.project_uuid_msb)
  return _internal_project_uuid_msb();
}
inline void KMProto_KMProjectHeader::_internal_set_project_uuid_msb(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000200u;
  project_uuid_msb_ = value;
}
inline void KMProto_KMProjectHeader::set_project_uuid_msb(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_project_uuid_msb(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProjectHeader.project_uuid_msb)
}

// optional string theme_id = 101;
inline bool KMProto_KMProjectHeader::_internal_has_theme_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KMProto_KMProjectHeader::has_theme_id() const {
  return _internal_has_theme_id();
}
inline void KMProto_KMProjectHeader::clear_theme_id() {
  theme_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& KMProto_KMProjectHeader::theme_id() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProjectHeader.theme_id)
  return _internal_theme_id();
}
inline void KMProto_KMProjectHeader::set_theme_id(const std::string& value) {
  _internal_set_theme_id(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProjectHeader.theme_id)
}
inline std::string* KMProto_KMProjectHeader::mutable_theme_id() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProjectHeader.theme_id)
  return _internal_mutable_theme_id();
}
inline const std::string& KMProto_KMProjectHeader::_internal_theme_id() const {
  return theme_id_.Get();
}
inline void KMProto_KMProjectHeader::_internal_set_theme_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  theme_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProjectHeader::set_theme_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  theme_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProjectHeader.theme_id)
}
inline void KMProto_KMProjectHeader::set_theme_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  theme_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProjectHeader.theme_id)
}
inline void KMProto_KMProjectHeader::set_theme_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  theme_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProjectHeader.theme_id)
}
inline std::string* KMProto_KMProjectHeader::_internal_mutable_theme_id() {
  _has_bits_[0] |= 0x00000002u;
  return theme_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProjectHeader::release_theme_id() {
  // @@protoc_insertion_point(field_release:KMProto.KMProjectHeader.theme_id)
  if (!_internal_has_theme_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return theme_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProjectHeader::set_allocated_theme_id(std::string* theme_id) {
  if (theme_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  theme_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), theme_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProjectHeader.theme_id)
}

// optional string bgm_theme_id = 102;
inline bool KMProto_KMProjectHeader::_internal_has_bgm_theme_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool KMProto_KMProjectHeader::has_bgm_theme_id() const {
  return _internal_has_bgm_theme_id();
}
inline void KMProto_KMProjectHeader::clear_bgm_theme_id() {
  bgm_theme_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& KMProto_KMProjectHeader::bgm_theme_id() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProjectHeader.bgm_theme_id)
  return _internal_bgm_theme_id();
}
inline void KMProto_KMProjectHeader::set_bgm_theme_id(const std::string& value) {
  _internal_set_bgm_theme_id(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProjectHeader.bgm_theme_id)
}
inline std::string* KMProto_KMProjectHeader::mutable_bgm_theme_id() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProjectHeader.bgm_theme_id)
  return _internal_mutable_bgm_theme_id();
}
inline const std::string& KMProto_KMProjectHeader::_internal_bgm_theme_id() const {
  return bgm_theme_id_.Get();
}
inline void KMProto_KMProjectHeader::_internal_set_bgm_theme_id(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  bgm_theme_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProjectHeader::set_bgm_theme_id(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  bgm_theme_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProjectHeader.bgm_theme_id)
}
inline void KMProto_KMProjectHeader::set_bgm_theme_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  bgm_theme_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProjectHeader.bgm_theme_id)
}
inline void KMProto_KMProjectHeader::set_bgm_theme_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  bgm_theme_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProjectHeader.bgm_theme_id)
}
inline std::string* KMProto_KMProjectHeader::_internal_mutable_bgm_theme_id() {
  _has_bits_[0] |= 0x00000004u;
  return bgm_theme_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProjectHeader::release_bgm_theme_id() {
  // @@protoc_insertion_point(field_release:KMProto.KMProjectHeader.bgm_theme_id)
  if (!_internal_has_bgm_theme_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return bgm_theme_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProjectHeader::set_allocated_bgm_theme_id(std::string* bgm_theme_id) {
  if (bgm_theme_id != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  bgm_theme_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bgm_theme_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProjectHeader.bgm_theme_id)
}

// optional uint32 total_play_time = 8;
inline bool KMProto_KMProjectHeader::_internal_has_total_play_time() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool KMProto_KMProjectHeader::has_total_play_time() const {
  return _internal_has_total_play_time();
}
inline void KMProto_KMProjectHeader::clear_total_play_time() {
  total_play_time_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KMProto_KMProjectHeader::_internal_total_play_time() const {
  return total_play_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KMProto_KMProjectHeader::total_play_time() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProjectHeader.total_play_time)
  return _internal_total_play_time();
}
inline void KMProto_KMProjectHeader::_internal_set_total_play_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  total_play_time_ = value;
}
inline void KMProto_KMProjectHeader::set_total_play_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_play_time(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProjectHeader.total_play_time)
}

// optional string saved_with_km_ver_name = 103;
inline bool KMProto_KMProjectHeader::_internal_has_saved_with_km_ver_name() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool KMProto_KMProjectHeader::has_saved_with_km_ver_name() const {
  return _internal_has_saved_with_km_ver_name();
}
inline void KMProto_KMProjectHeader::clear_saved_with_km_ver_name() {
  saved_with_km_ver_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& KMProto_KMProjectHeader::saved_with_km_ver_name() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProjectHeader.saved_with_km_ver_name)
  return _internal_saved_with_km_ver_name();
}
inline void KMProto_KMProjectHeader::set_saved_with_km_ver_name(const std::string& value) {
  _internal_set_saved_with_km_ver_name(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProjectHeader.saved_with_km_ver_name)
}
inline std::string* KMProto_KMProjectHeader::mutable_saved_with_km_ver_name() {
  // @@protoc_insertion_point(field_mutable:KMProto.KMProjectHeader.saved_with_km_ver_name)
  return _internal_mutable_saved_with_km_ver_name();
}
inline const std::string& KMProto_KMProjectHeader::_internal_saved_with_km_ver_name() const {
  return saved_with_km_ver_name_.Get();
}
inline void KMProto_KMProjectHeader::_internal_set_saved_with_km_ver_name(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  saved_with_km_ver_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KMProto_KMProjectHeader::set_saved_with_km_ver_name(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  saved_with_km_ver_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KMProto.KMProjectHeader.saved_with_km_ver_name)
}
inline void KMProto_KMProjectHeader::set_saved_with_km_ver_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  saved_with_km_ver_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KMProto.KMProjectHeader.saved_with_km_ver_name)
}
inline void KMProto_KMProjectHeader::set_saved_with_km_ver_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  saved_with_km_ver_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:KMProto.KMProjectHeader.saved_with_km_ver_name)
}
inline std::string* KMProto_KMProjectHeader::_internal_mutable_saved_with_km_ver_name() {
  _has_bits_[0] |= 0x00000008u;
  return saved_with_km_ver_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KMProto_KMProjectHeader::release_saved_with_km_ver_name() {
  // @@protoc_insertion_point(field_release:KMProto.KMProjectHeader.saved_with_km_ver_name)
  if (!_internal_has_saved_with_km_ver_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return saved_with_km_ver_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KMProto_KMProjectHeader::set_allocated_saved_with_km_ver_name(std::string* saved_with_km_ver_name) {
  if (saved_with_km_ver_name != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  saved_with_km_ver_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), saved_with_km_ver_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:KMProto.KMProjectHeader.saved_with_km_ver_name)
}

// optional .KMProto.Platform saved_on_platform = 104;
inline bool KMProto_KMProjectHeader::_internal_has_saved_on_platform() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool KMProto_KMProjectHeader::has_saved_on_platform() const {
  return _internal_has_saved_on_platform();
}
inline void KMProto_KMProjectHeader::clear_saved_on_platform() {
  saved_on_platform_ = 1;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::KMProto_Platform KMProto_KMProjectHeader::_internal_saved_on_platform() const {
  return static_cast< ::KMProto_Platform >(saved_on_platform_);
}
inline ::KMProto_Platform KMProto_KMProjectHeader::saved_on_platform() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProjectHeader.saved_on_platform)
  return _internal_saved_on_platform();
}
inline void KMProto_KMProjectHeader::_internal_set_saved_on_platform(::KMProto_Platform value) {
  assert(::KMProto_Platform_IsValid(value));
  _has_bits_[0] |= 0x00002000u;
  saved_on_platform_ = value;
}
inline void KMProto_KMProjectHeader::set_saved_on_platform(::KMProto_Platform value) {
  _internal_set_saved_on_platform(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProjectHeader.saved_on_platform)
}

// optional bool using_icloud_for_ios_only = 105;
inline bool KMProto_KMProjectHeader::_internal_has_using_icloud_for_ios_only() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool KMProto_KMProjectHeader::has_using_icloud_for_ios_only() const {
  return _internal_has_using_icloud_for_ios_only();
}
inline void KMProto_KMProjectHeader::clear_using_icloud_for_ios_only() {
  using_icloud_for_ios_only_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool KMProto_KMProjectHeader::_internal_using_icloud_for_ios_only() const {
  return using_icloud_for_ios_only_;
}
inline bool KMProto_KMProjectHeader::using_icloud_for_ios_only() const {
  // @@protoc_insertion_point(field_get:KMProto.KMProjectHeader.using_icloud_for_ios_only)
  return _internal_using_icloud_for_ios_only();
}
inline void KMProto_KMProjectHeader::_internal_set_using_icloud_for_ios_only(bool value) {
  _has_bits_[0] |= 0x00001000u;
  using_icloud_for_ios_only_ = value;
}
inline void KMProto_KMProjectHeader::set_using_icloud_for_ios_only(bool value) {
  _internal_set_using_icloud_for_ios_only(value);
  // @@protoc_insertion_point(field_set:KMProto.KMProjectHeader.using_icloud_for_ios_only)
}

// -------------------------------------------------------------------

// KMProto

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::KMProto_KMProject_AssetLayer_AssetLayerType> : ::std::true_type {};
template <> struct is_proto_enum< ::KMProto_KMProject_AspectRatio> : ::std::true_type {};
template <> struct is_proto_enum< ::KMProto_KMProject_ClipType> : ::std::true_type {};
template <> struct is_proto_enum< ::KMProto_KMProject_ClipState> : ::std::true_type {};
template <> struct is_proto_enum< ::KMProto_KMProject_EffectOptionItemType> : ::std::true_type {};
template <> struct is_proto_enum< ::KMProto_KMProject_SplitScreenType> : ::std::true_type {};
template <> struct is_proto_enum< ::KMProto_KMProject_PathStyle> : ::std::true_type {};
template <> struct is_proto_enum< ::KMProto_KMProject_CapDecorationStyle> : ::std::true_type {};
template <> struct is_proto_enum< ::KMProto_KMProject_DrawingActionType> : ::std::true_type {};
template <> struct is_proto_enum< ::KMProto_KMProject_TitleStyle> : ::std::true_type {};
template <> struct is_proto_enum< ::KMProto_KMProject_ThemeEffectType> : ::std::true_type {};
template <> struct is_proto_enum< ::KMProto_KMProject_LayerBlendModeType> : ::std::true_type {};
template <> struct is_proto_enum< ::KMProto_Platform> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kinemaster_5fproject_5fwire_2dlite_2eproto
